{
  "version": 3,
  "sources": ["../../../dev/core/src/Loading/sceneLoaderFlags.ts", "../../../dev/core/src/Misc/webRequest.fetch.ts", "../../../dev/core/src/Loading/sceneLoader.ts", "../../../dev/core/src/Misc/coroutine.ts", "../../../dev/core/src/Meshes/mesh.vertexData.ts", "../../../dev/core/src/Meshes/geometry.ts", "../../../dev/core/src/Meshes/transformNode.ts", "../../../dev/core/src/Collisions/meshCollisionData.ts", "../../../dev/core/src/Meshes/abstractMesh.ts", "../../../dev/core/src/Materials/multiMaterial.ts", "../../../dev/core/src/Meshes/meshLODLevel.ts", "../../../dev/core/src/Meshes/mesh.ts", "../../../dev/core/src/Meshes/instancedMesh.ts", "../../../dev/core/src/assetContainer.ts", "../../../dev/core/src/Misc/dataReader.ts", "../../../dev/loaders/src/glTF/glTFValidation.ts", "../../../dev/loaders/src/glTF/glTFFileLoader.metadata.ts", "../../../dev/loaders/src/glTF/glTFFileLoader.ts", "../../../dev/loaders/src/glTF/1.0/index.ts", "../../../dev/loaders/src/glTF/1.0/glTFLoaderInterfaces.ts", "../../../dev/core/src/Cameras/targetCamera.ts", "../../../dev/core/src/Cameras/cameraInputsManager.ts", "../../../dev/core/src/Cameras/Inputs/freeCameraKeyboardMoveInput.ts", "../../../dev/core/src/Cameras/Inputs/freeCameraMouseInput.ts", "../../../dev/core/src/Cameras/Inputs/BaseCameraMouseWheelInput.ts", "../../../dev/core/src/Cameras/Inputs/freeCameraMouseWheelInput.ts", "../../../dev/core/src/Cameras/Inputs/freeCameraTouchInput.ts", "../../../dev/core/src/Cameras/freeCameraInputsManager.ts", "../../../dev/core/src/Cameras/freeCamera.ts", "../../../dev/core/src/Materials/Textures/rawTexture.ts", "../../../dev/core/src/Bones/skeleton.ts", "../../../dev/core/src/Materials/standardMaterial.ts", "../../../dev/core/src/Materials/shaderMaterial.ts", "../../../dev/core/src/Lights/hemisphericLight.ts", "../../../dev/core/src/Lights/pointLight.ts", "../../../dev/loaders/src/glTF/1.0/glTFLoaderUtils.ts", "../../../dev/loaders/src/glTF/1.0/glTFLoader.ts", "../../../dev/loaders/src/glTF/1.0/glTFBinaryExtension.ts", "../../../dev/loaders/src/glTF/1.0/glTFMaterialsCommonExtension.ts", "../../../dev/loaders/src/glTF/2.0/index.ts", "../../../dev/core/src/Misc/deferred.ts", "../../../dev/core/src/Morph/morphTarget.ts", "../../../dev/core/src/Materials/Textures/rawTexture2DArray.ts", "../../../dev/core/src/Morph/morphTargetManager.ts", "../../../dev/loaders/src/glTF/2.0/glTFLoaderExtensionRegistry.ts", "../../../dev/core/src/Misc/deepMerger.ts", "../../../dev/core/src/Misc/lazy.ts", "../../../dev/loaders/src/glTF/2.0/glTFLoader.ts", "../../../dev/core/src/Lights/LTC/ltcTextureTool.ts", "../../../dev/core/src/Lights/areaLight.ts", "../../../dev/core/src/Lights/rectAreaLight.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/EXT_lights_area.ts", "../../../dev/core/src/Materials/Textures/cubeTexture.ts", "../../../dev/core/src/Materials/Textures/rawCubeTexture.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/EXT_lights_image_based.ts", "../../../dev/core/src/Meshes/thinInstanceMesh.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/EXT_mesh_gpu_instancing.ts", "../../../dev/core/src/Meshes/Compression/meshoptCompression.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/EXT_meshopt_compression.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/EXT_texture_webp.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/EXT_texture_avif.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/EXT_lights_ies.ts", "../../../dev/core/src/Meshes/Compression/dracoCompressionWorker.ts", "../../../dev/core/src/Meshes/Compression/dracoCodec.ts", "../../../dev/core/src/Meshes/Compression/dracoDecoder.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_draco_mesh_compression.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_lights_punctual.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_pbrSpecularGlossiness.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_unlit.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_clearcoat.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_iridescence.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_anisotropy.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_emissive_strength.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_sheen.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_specular.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_ior.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_variants.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_transmission.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_diffuse_transmission.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_volume.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_dispersion.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_materials_diffuse_roughness.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_mesh_quantization.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_texture_basisu.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_texture_transform.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_xmp_json_ld.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_animation_pointer.data.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_animation_pointer.ts", "../../../dev/core/src/Animations/animationEvent.ts", "../../../dev/core/src/Audio/sound.ts", "../../../dev/core/src/Audio/weightedsound.ts", "../../../dev/core/src/Audio/soundTrack.ts", "../../../dev/core/src/AudioV2/abstractAudio/audioEngineV2.ts", "../../../dev/core/src/AudioV2/abstractAudio/subProperties/abstractSpatialAudioListener.ts", "../../../dev/core/src/AudioV2/abstractAudio/subProperties/spatialAudioListener.ts", "../../../dev/core/src/AudioV2/webAudio/subProperties/spatialWebAudioListener.ts", "../../../dev/core/src/AudioV2/abstractAudio/mainAudioOut.ts", "../../../dev/core/src/AudioV2/webAudio/webAudioMainOut.ts", "../../../dev/core/src/AudioV2/webAudio/webAudioUnmuteUI.ts", "../../../dev/core/src/AudioV2/webAudio/webAudioEngine.ts", "../../../dev/core/src/Audio/audioEngine.ts", "../../../dev/core/src/Loading/Plugins/babylonFileParser.function.ts", "../../../dev/core/src/Audio/audioSceneComponent.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/MSFT_audio_emitter.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/MSFT_lod.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/MSFT_minecraftMesh.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/MSFT_sRGBFactors.ts", "../../../dev/core/src/FlowGraph/Blocks/flowGraphBlockFactory.ts", "../../../dev/core/src/FlowGraph/flowGraphParser.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_interactivity/declarationMapper.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_interactivity/interactivityGraphParser.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_interactivity.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_node_visibility.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_node_selectability.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/KHR_node_hoverability.ts", "../../../dev/loaders/src/glTF/2.0/Extensions/ExtrasAsMetadata.ts"],
  "sourcesContent": ["import { Constants } from \"../Engines/constants\";\r\n\r\n/**\r\n * Class used to represent data loading progression\r\n */\r\nexport class SceneLoaderFlags {\r\n    // Flags\r\n    private static _ForceFullSceneLoadingForIncremental = false;\r\n    private static _ShowLoadingScreen = true;\r\n    private static _CleanBoneMatrixWeights = false;\r\n    private static _LoggingLevel = Constants.SCENELOADER_NO_LOGGING;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if entire scene must be loaded even if scene contains incremental data\r\n     */\r\n    public static get ForceFullSceneLoadingForIncremental() {\r\n        return SceneLoaderFlags._ForceFullSceneLoadingForIncremental;\r\n    }\r\n\r\n    public static set ForceFullSceneLoadingForIncremental(value: boolean) {\r\n        SceneLoaderFlags._ForceFullSceneLoadingForIncremental = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if loading screen must be displayed while loading a scene\r\n     */\r\n    public static get ShowLoadingScreen(): boolean {\r\n        return SceneLoaderFlags._ShowLoadingScreen;\r\n    }\r\n\r\n    public static set ShowLoadingScreen(value: boolean) {\r\n        SceneLoaderFlags._ShowLoadingScreen = value;\r\n    }\r\n\r\n    /**\r\n     * Defines the current logging level (while loading the scene)\r\n     * @ignorenaming\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static get loggingLevel(): number {\r\n        return SceneLoaderFlags._LoggingLevel;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static set loggingLevel(value: number) {\r\n        SceneLoaderFlags._LoggingLevel = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or set a boolean indicating if matrix weights must be cleaned upon loading\r\n     */\r\n    public static get CleanBoneMatrixWeights(): boolean {\r\n        return SceneLoaderFlags._CleanBoneMatrixWeights;\r\n    }\r\n\r\n    public static set CleanBoneMatrixWeights(value: boolean) {\r\n        SceneLoaderFlags._CleanBoneMatrixWeights = value;\r\n    }\r\n}\r\n", "import { WebRequest } from \"./webRequest\";\r\n\r\n/**\r\n * Fetches a resource from the network\r\n * @param url defines the url to fetch the resource from\r\n * @param options defines the options to use when fetching the resource\r\n * @returns a promise that resolves when the resource is fetched\r\n * @internal\r\n */\r\nexport async function _FetchAsync(\r\n    url: string,\r\n    options: Partial<{ method: string; responseHeaders?: string[] }>\r\n): Promise<{ response: Response; headerValues: { [key: string]: string } }> {\r\n    const method = options.method || \"GET\";\r\n    return await new Promise((resolve, reject) => {\r\n        const request = new WebRequest();\r\n        request.addEventListener(\"readystatechange\", () => {\r\n            if (request.readyState == 4) {\r\n                if (request.status == 200) {\r\n                    const headerValues: { [key: string]: string } = {};\r\n                    if (options.responseHeaders) {\r\n                        for (const header of options.responseHeaders) {\r\n                            headerValues[header] = request.getResponseHeader(header) || \"\";\r\n                        }\r\n                    }\r\n\r\n                    resolve({ response: request.response, headerValues: headerValues });\r\n                } else {\r\n                    // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\r\n                    reject(`Unable to fetch data from ${url}. Error code: ${request.status}`);\r\n                }\r\n            }\r\n        });\r\n\r\n        request.open(method, url);\r\n        request.send();\r\n    });\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { Tools } from \"../Misc/tools\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { DeepImmutable, Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { AnimationGroup } from \"../Animations/animationGroup\";\r\nimport type { AssetContainer } from \"../assetContainer\";\r\nimport type { IParticleSystem } from \"../Particles/IParticleSystem\";\r\nimport type { Skeleton } from \"../Bones/skeleton\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { SceneLoaderFlags } from \"./sceneLoaderFlags\";\r\nimport type { IFileRequest } from \"../Misc/fileRequest\";\r\nimport type { WebRequest } from \"../Misc/webRequest\";\r\nimport type { LoadFileError } from \"../Misc/fileTools\";\r\nimport { IsBase64DataUrl } from \"../Misc/fileTools\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\nimport type { Geometry } from \"../Meshes/geometry\";\r\nimport type { Light } from \"../Lights/light\";\r\nimport { RuntimeError, ErrorCodes } from \"../Misc/error\";\r\nimport type { ISpriteManager } from \"../Sprites/spriteManager\";\r\nimport { RandomGUID } from \"../Misc/guid\";\r\nimport { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport { _FetchAsync } from \"core/Misc/webRequest.fetch\";\r\n\r\n/**\r\n * Type used for the success callback of ImportMesh\r\n */\r\nexport type SceneLoaderSuccessCallback = (\r\n    meshes: AbstractMesh[],\r\n    particleSystems: IParticleSystem[],\r\n    skeletons: Skeleton[],\r\n    animationGroups: AnimationGroup[],\r\n    transformNodes: TransformNode[],\r\n    geometries: Geometry[],\r\n    lights: Light[],\r\n    spriteManagers: ISpriteManager[]\r\n) => void;\r\n\r\n/**\r\n * Interface used for the result of ImportMeshAsync\r\n */\r\nexport interface ISceneLoaderAsyncResult {\r\n    /**\r\n     * The array of loaded meshes\r\n     */\r\n    readonly meshes: AbstractMesh[];\r\n\r\n    /**\r\n     * The array of loaded particle systems\r\n     */\r\n    readonly particleSystems: IParticleSystem[];\r\n\r\n    /**\r\n     * The array of loaded skeletons\r\n     */\r\n    readonly skeletons: Skeleton[];\r\n\r\n    /**\r\n     * The array of loaded animation groups\r\n     */\r\n    readonly animationGroups: AnimationGroup[];\r\n\r\n    /**\r\n     * The array of loaded transform nodes\r\n     */\r\n    readonly transformNodes: TransformNode[];\r\n\r\n    /**\r\n     * The array of loaded geometries\r\n     */\r\n    readonly geometries: Geometry[];\r\n\r\n    /**\r\n     * The array of loaded lights\r\n     */\r\n    readonly lights: Light[];\r\n\r\n    /**\r\n     * The array of loaded sprite managers\r\n     */\r\n    readonly spriteManagers: ISpriteManager[];\r\n}\r\n\r\n/**\r\n * Interface used to represent data loading progression\r\n */\r\nexport interface ISceneLoaderProgressEvent {\r\n    /**\r\n     * Defines if data length to load can be evaluated\r\n     */\r\n    readonly lengthComputable: boolean;\r\n\r\n    /**\r\n     * Defines the loaded data length\r\n     */\r\n    readonly loaded: number;\r\n\r\n    /**\r\n     * Defines the data length to load\r\n     */\r\n    readonly total: number;\r\n}\r\n\r\n/**\r\n * Interface used by SceneLoader plugins to define supported file extensions\r\n */\r\nexport interface ISceneLoaderPluginExtensions {\r\n    /**\r\n     * Defines the list of supported extensions\r\n     */\r\n    readonly [extension: string]: {\r\n        readonly isBinary: boolean;\r\n        readonly mimeType?: string;\r\n    };\r\n}\r\n\r\n/**\r\n * Metadata for a SceneLoader plugin that must also be provided by a plugin factory\r\n */\r\nexport interface ISceneLoaderPluginMetadata {\r\n    /**\r\n     * The friendly name of the plugin.\r\n     */\r\n    readonly name: string;\r\n\r\n    /**\r\n     * The file extensions supported by the plugin.\r\n     */\r\n    readonly extensions: string | ISceneLoaderPluginExtensions;\r\n\r\n    /**\r\n     * The callback that returns true if the data can be directly loaded.\r\n     * @param data string containing the file data\r\n     * @returns if the data can be loaded directly\r\n     */\r\n    canDirectLoad?(data: string): boolean;\r\n}\r\n\r\n/**\r\n * Interface used by SceneLoader plugin factory\r\n */\r\nexport interface ISceneLoaderPluginFactory extends ISceneLoaderPluginMetadata {\r\n    /**\r\n     * Function called to create a new plugin\r\n     * @param options plugin options that were passed to the SceneLoader operation\r\n     * @returns the new plugin\r\n     */\r\n    createPlugin(options: SceneLoaderPluginOptions): ISceneLoaderPlugin | ISceneLoaderPluginAsync | Promise<ISceneLoaderPlugin | ISceneLoaderPluginAsync>;\r\n}\r\n\r\n/**\r\n * Interface used to define the base of ISceneLoaderPlugin and ISceneLoaderPluginAsync\r\n */\r\nexport interface ISceneLoaderPluginBase extends ISceneLoaderPluginMetadata {\r\n    /**\r\n     * The callback called when loading from a url.\r\n     * @param scene scene loading this url\r\n     * @param fileOrUrl file or url to load\r\n     * @param rootUrl root url to use to load assets\r\n     * @param onSuccess callback called when the file successfully loads\r\n     * @param onProgress callback called while file is loading (if the server supports this mode)\r\n     * @param useArrayBuffer defines a boolean indicating that date must be returned as ArrayBuffer\r\n     * @param onError callback called when the file fails to load\r\n     * @param name defines the name of the file when loading a binary file\r\n     * @returns a file request object\r\n     */\r\n    loadFile?(\r\n        scene: Scene,\r\n        fileOrUrl: File | string | ArrayBufferView,\r\n        rootUrl: string,\r\n        onSuccess: (data: unknown, responseURL?: string) => void,\r\n        onProgress?: (ev: ISceneLoaderProgressEvent) => void,\r\n        useArrayBuffer?: boolean,\r\n        onError?: (request?: WebRequest, exception?: LoadFileError) => void,\r\n        name?: string\r\n    ): Nullable<IFileRequest>;\r\n\r\n    /**\r\n     * The callback that returns the data to pass to the plugin if the data can be directly loaded.\r\n     * @param scene scene loading this data\r\n     * @param data string containing the data\r\n     * @returns data to pass to the plugin\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\r\n    directLoad?(scene: Scene, data: string): unknown | Promise<unknown>;\r\n\r\n    /**\r\n     * The callback that allows custom handling of the root url based on the response url.\r\n     * @param rootUrl the original root url\r\n     * @param responseURL the response url if available\r\n     * @returns the new root url\r\n     */\r\n    rewriteRootURL?(rootUrl: string, responseURL?: string): string;\r\n}\r\n\r\n/**\r\n * Interface used to define a SceneLoader plugin\r\n */\r\nexport interface ISceneLoaderPlugin extends ISceneLoaderPluginBase {\r\n    /**\r\n     * Import meshes into a scene.\r\n     * @param meshesNames An array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n     * @param scene The scene to import into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param meshes The meshes array to import into\r\n     * @param particleSystems The particle systems array to import into\r\n     * @param skeletons The skeletons array to import into\r\n     * @param onError The callback when import fails\r\n     * @returns True if successful or false otherwise\r\n     */\r\n    importMesh(\r\n        meshesNames: string | readonly string[] | null | undefined,\r\n        scene: Scene,\r\n        data: unknown,\r\n        rootUrl: string,\r\n        meshes: AbstractMesh[],\r\n        particleSystems: IParticleSystem[],\r\n        skeletons: Skeleton[],\r\n        onError?: (message: string, exception?: any) => void\r\n    ): boolean;\r\n\r\n    /**\r\n     * Load into a scene.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param onError The callback when import fails\r\n     * @returns True if successful or false otherwise\r\n     */\r\n    load(scene: Scene, data: unknown, rootUrl: string, onError?: (message: string, exception?: any) => void): boolean;\r\n\r\n    /**\r\n     * Load into an asset container.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param onError The callback when import fails\r\n     * @returns The loaded asset container\r\n     */\r\n    loadAssetContainer(scene: Scene, data: unknown, rootUrl: string, onError?: (message: string, exception?: any) => void): AssetContainer;\r\n}\r\n\r\n/**\r\n * Interface used to define an async SceneLoader plugin\r\n */\r\nexport interface ISceneLoaderPluginAsync extends ISceneLoaderPluginBase {\r\n    /**\r\n     * Import meshes into a scene.\r\n     * @param meshesNames An array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n     * @param scene The scene to import into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param onProgress The callback when the load progresses\r\n     * @param fileName Defines the name of the file to load\r\n     * @returns The loaded objects (e.g. meshes, particle systems, skeletons, animation groups, etc.)\r\n     */\r\n    importMeshAsync(\r\n        meshesNames: string | readonly string[] | null | undefined,\r\n        scene: Scene,\r\n        data: unknown,\r\n        rootUrl: string,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        fileName?: string\r\n    ): Promise<ISceneLoaderAsyncResult>;\r\n\r\n    /**\r\n     * Load into a scene.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param onProgress The callback when the load progresses\r\n     * @param fileName Defines the name of the file to load\r\n     * @returns Nothing\r\n     */\r\n    loadAsync(scene: Scene, data: unknown, rootUrl: string, onProgress?: (event: ISceneLoaderProgressEvent) => void, fileName?: string): Promise<void>;\r\n\r\n    /**\r\n     * Load into an asset container.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param onProgress The callback when the load progresses\r\n     * @param fileName Defines the name of the file to load\r\n     * @returns The loaded asset container\r\n     */\r\n    loadAssetContainerAsync(scene: Scene, data: unknown, rootUrl: string, onProgress?: (event: ISceneLoaderProgressEvent) => void, fileName?: string): Promise<AssetContainer>;\r\n}\r\n\r\n/**\r\n * Mode that determines how to handle old animation groups before loading new ones.\r\n */\r\nexport const enum SceneLoaderAnimationGroupLoadingMode {\r\n    /**\r\n     * Reset all old animations to initial state then dispose them.\r\n     */\r\n    Clean = 0,\r\n\r\n    /**\r\n     * Stop all old animations.\r\n     */\r\n    Stop = 1,\r\n\r\n    /**\r\n     * Restart old animations from first frame.\r\n     */\r\n    Sync = 2,\r\n\r\n    /**\r\n     * Old animations remains untouched.\r\n     */\r\n    NoSync = 3,\r\n}\r\n\r\n/**\r\n * Defines internal only plugin members.\r\n */\r\ninterface ISceneLoaderPluginInternal {\r\n    /**\r\n     * An optional observable to notify when the plugin is disposed\r\n     */\r\n    readonly onDisposeObservable: Observable<void>;\r\n}\r\n\r\n/**\r\n * Defines a plugin registered by the SceneLoader\r\n */\r\ninterface IRegisteredPlugin {\r\n    /**\r\n     * Defines the plugin to use\r\n     */\r\n    plugin: ((ISceneLoaderPlugin | ISceneLoaderPluginAsync) & Partial<ISceneLoaderPluginInternal>) | ISceneLoaderPluginFactory;\r\n    /**\r\n     * Defines if the plugin supports binary data\r\n     */\r\n    isBinary: boolean;\r\n    mimeType?: string;\r\n}\r\n\r\nfunction IsFactory(pluginOrFactory: IRegisteredPlugin[\"plugin\"]): pluginOrFactory is ISceneLoaderPluginFactory {\r\n    return !!(pluginOrFactory as ISceneLoaderPluginFactory).createPlugin;\r\n}\r\n\r\n/**\r\n * Defines file information\r\n */\r\ninterface IFileInfo {\r\n    /**\r\n     * Gets the file url\r\n     */\r\n    url: string;\r\n    /**\r\n     * Gets the root url\r\n     */\r\n    rootUrl: string;\r\n    /**\r\n     * Gets filename\r\n     */\r\n    name: string;\r\n    /**\r\n     * Gets the file\r\n     */\r\n    file: Nullable<File>;\r\n\r\n    /**\r\n     * Gets raw binary data.\r\n     */\r\n    rawData: Nullable<ArrayBufferView>;\r\n}\r\n\r\n/**\r\n * Defines options for SceneLoader plugins. This interface is extended by specific plugins.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type, @typescript-eslint/naming-convention\r\nexport interface SceneLoaderPluginOptions extends Record<string, Record<string, unknown> | undefined> {}\r\n\r\n/**\r\n * Adds default/implicit options to plugin specific options.\r\n */\r\ntype DefaultPluginOptions<BasePluginOptions> = {\r\n    /**\r\n     * Defines if the plugin is enabled\r\n     */\r\n    enabled?: boolean;\r\n} & BasePluginOptions;\r\n\r\n// This captures the type defined inline for the pluginOptions property, which is just SceneLoaderPluginOptions wrapped with DefaultPluginOptions.\r\n// We do it this way rather than explicitly defining the type here and then using it in SceneLoaderOptions because we want the full expanded type\r\n// to show up in the user's intellisense to make it easier to understand what options are available.\r\nexport type PluginOptions = ISceneLoaderOptions[\"pluginOptions\"];\r\n\r\ntype SceneSource = string | File | ArrayBufferView;\r\n\r\n/**\r\n * Defines common options for loading operations performed by SceneLoader.\r\n */\r\ninterface ISceneLoaderOptions {\r\n    /**\r\n     * A string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     */\r\n    rootUrl?: string;\r\n\r\n    /**\r\n     * A callback with a progress event for each file being loaded\r\n     */\r\n    onProgress?: (event: ISceneLoaderProgressEvent) => void;\r\n\r\n    /**\r\n     * The extension used to determine the plugin\r\n     */\r\n    pluginExtension?: string;\r\n\r\n    /**\r\n     * Defines the filename, if the data is binary\r\n     */\r\n    name?: string;\r\n\r\n    /**\r\n     * Defines options for the registered plugins\r\n     */\r\n    pluginOptions?: {\r\n        // NOTE: This type is doing two things:\r\n        // 1. Adding an implicit 'enabled' property to the options for each plugin.\r\n        // 2. Creating a mapped type of all the options of all the plugins to make it just look like a consolidated plain object in intellisense for the user.\r\n        [Plugin in keyof SceneLoaderPluginOptions]?: {\r\n            [Option in keyof DefaultPluginOptions<SceneLoaderPluginOptions[Plugin]>]: DefaultPluginOptions<SceneLoaderPluginOptions[Plugin]>[Option];\r\n        };\r\n    };\r\n}\r\n\r\n/**\r\n * Defines options for ImportMeshAsync.\r\n */\r\nexport interface ImportMeshOptions extends ISceneLoaderOptions {\r\n    /**\r\n     * An array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n     */\r\n    meshNames?: string | readonly string[] | null | undefined;\r\n}\r\n\r\n/**\r\n * Defines options for LoadAsync.\r\n */\r\nexport interface LoadOptions extends ISceneLoaderOptions {}\r\n\r\n/**\r\n * Defines options for AppendAsync.\r\n */\r\nexport interface AppendOptions extends ISceneLoaderOptions {}\r\n\r\n/**\r\n * Defines options for LoadAssetContainerAsync.\r\n */\r\nexport interface LoadAssetContainerOptions extends ISceneLoaderOptions {}\r\n\r\n/**\r\n * Defines options for ImportAnimationsAsync.\r\n */\r\nexport interface ImportAnimationsOptions extends ISceneLoaderOptions {\r\n    /**\r\n     * When true, animations are cleaned before importing new ones. Animations are appended otherwise\r\n     */\r\n    overwriteAnimations?: boolean;\r\n\r\n    /**\r\n     * Defines how to handle old animations groups before importing new ones\r\n     */\r\n    animationGroupLoadingMode?: SceneLoaderAnimationGroupLoadingMode;\r\n\r\n    /**\r\n     * defines a function used to convert animation targets from loaded scene to current scene (default: search node by name)\r\n     */\r\n    targetConverter?: Nullable<(target: unknown) => unknown>;\r\n}\r\n\r\nfunction isFile(value: unknown): value is File {\r\n    return !!(value as File).name;\r\n}\r\n\r\nconst onPluginActivatedObservable = new Observable<ISceneLoaderPlugin | ISceneLoaderPluginAsync>();\r\nconst registeredPlugins: { [extension: string]: IRegisteredPlugin } = {};\r\nlet showingLoadingScreen = false;\r\n\r\nfunction getDefaultPlugin(): IRegisteredPlugin | undefined {\r\n    return registeredPlugins[\".babylon\"];\r\n}\r\n\r\nfunction getPluginForMimeType(mimeType: string): IRegisteredPlugin | undefined {\r\n    for (const registeredPluginKey in registeredPlugins) {\r\n        const registeredPlugin = registeredPlugins[registeredPluginKey];\r\n        if (registeredPlugin.mimeType === mimeType) {\r\n            return registeredPlugin;\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction getPluginForExtension(extension: string, returnDefault: boolean): IRegisteredPlugin | undefined {\r\n    const registeredPlugin = registeredPlugins[extension];\r\n    if (registeredPlugin) {\r\n        return registeredPlugin;\r\n    }\r\n    Logger.Warn(\r\n        \"Unable to find a plugin to load \" +\r\n            extension +\r\n            \" files. Trying to use .babylon default plugin. To load from a specific filetype (eg. gltf) see: https://doc.babylonjs.com/features/featuresDeepDive/importers/loadingFileTypes\"\r\n    );\r\n    return returnDefault ? getDefaultPlugin() : undefined;\r\n}\r\n\r\nfunction isPluginForExtensionAvailable(extension: string): boolean {\r\n    return !!registeredPlugins[extension];\r\n}\r\n\r\nfunction getPluginForDirectLoad(data: string): IRegisteredPlugin | undefined {\r\n    for (const extension in registeredPlugins) {\r\n        const plugin = registeredPlugins[extension].plugin;\r\n\r\n        if (plugin.canDirectLoad && plugin.canDirectLoad(data)) {\r\n            return registeredPlugins[extension];\r\n        }\r\n    }\r\n\r\n    return getDefaultPlugin();\r\n}\r\n\r\nfunction getFilenameExtension(sceneFilename: string): string {\r\n    const queryStringPosition = sceneFilename.indexOf(\"?\");\r\n\r\n    if (queryStringPosition !== -1) {\r\n        sceneFilename = sceneFilename.substring(0, queryStringPosition);\r\n    }\r\n\r\n    const dotPosition = sceneFilename.lastIndexOf(\".\");\r\n\r\n    return sceneFilename.substring(dotPosition, sceneFilename.length).toLowerCase();\r\n}\r\n\r\nfunction getDirectLoad(sceneFilename: string): Nullable<string> {\r\n    if (sceneFilename.substring(0, 5) === \"data:\") {\r\n        return sceneFilename.substring(5);\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nfunction formatErrorMessage(fileInfo: IFileInfo, message?: string, exception?: any): string {\r\n    const fromLoad = fileInfo.rawData ? \"binary data\" : fileInfo.url;\r\n    let errorMessage = \"Unable to load from \" + fromLoad;\r\n\r\n    if (message) {\r\n        errorMessage += `: ${message}`;\r\n    } else if (exception) {\r\n        errorMessage += `: ${exception}`;\r\n    }\r\n\r\n    return errorMessage;\r\n}\r\n\r\nasync function loadDataAsync(\r\n    fileInfo: IFileInfo,\r\n    scene: Scene,\r\n    onSuccess: (plugin: ISceneLoaderPlugin | ISceneLoaderPluginAsync, data: unknown, responseURL?: string) => void,\r\n    onProgress: ((event: ISceneLoaderProgressEvent) => void) | undefined,\r\n    onError: (message?: string, exception?: any) => void,\r\n    onDispose: () => void,\r\n    pluginExtension: Nullable<string>,\r\n    name: string,\r\n    pluginOptions: PluginOptions\r\n): Promise<Nullable<ISceneLoaderPlugin | ISceneLoaderPluginAsync>> {\r\n    const directLoad = getDirectLoad(fileInfo.url);\r\n\r\n    if (fileInfo.rawData && !pluginExtension) {\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw \"When using ArrayBufferView to load data the file extension must be provided.\";\r\n    }\r\n\r\n    const fileExtension = !directLoad && !pluginExtension ? getFilenameExtension(fileInfo.url) : \"\";\r\n\r\n    let registeredPlugin = pluginExtension\r\n        ? getPluginForExtension(pluginExtension, true)\r\n        : directLoad\r\n          ? getPluginForDirectLoad(fileInfo.url)\r\n          : getPluginForExtension(fileExtension, false);\r\n\r\n    if (!registeredPlugin && fileExtension) {\r\n        if (fileInfo.url && !fileInfo.url.startsWith(\"blob:\")) {\r\n            // Fetching head content to get the mime type\r\n            const response = await _FetchAsync(fileInfo.url, { method: \"HEAD\", responseHeaders: [\"Content-Type\"] });\r\n            const mimeType = response.headerValues ? response.headerValues[\"Content-Type\"] : \"\";\r\n            if (mimeType) {\r\n                // eslint-disable-next-line require-atomic-updates\r\n                registeredPlugin = getPluginForMimeType(mimeType);\r\n            }\r\n        }\r\n\r\n        if (!registeredPlugin) {\r\n            registeredPlugin = getDefaultPlugin();\r\n        }\r\n    }\r\n\r\n    if (!registeredPlugin) {\r\n        throw new Error(`No plugin or fallback for ${pluginExtension ?? fileInfo.url}`);\r\n    }\r\n\r\n    if (pluginOptions?.[registeredPlugin.plugin.name]?.enabled === false) {\r\n        throw new Error(`The '${registeredPlugin.plugin.name}' plugin is disabled via the loader options passed to the loading operation.`);\r\n    }\r\n\r\n    if (fileInfo.rawData && !registeredPlugin.isBinary) {\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw \"Loading from ArrayBufferView can not be used with plugins that don't support binary loading.\";\r\n    }\r\n\r\n    const getPluginInstance = (callback: (plugin: (ISceneLoaderPlugin | ISceneLoaderPluginAsync) & Partial<ISceneLoaderPluginInternal>) => void) => {\r\n        // For plugin factories, the plugin is instantiated on each SceneLoader operation. This makes options handling\r\n        // much simpler as we can just pass the options to the factory, rather than passing options through to every possible\r\n        // plugin call. Given this, options are only supported for plugins that provide a factory function.\r\n        if (IsFactory(registeredPlugin.plugin)) {\r\n            const pluginFactory = registeredPlugin.plugin;\r\n            const partialPlugin = pluginFactory.createPlugin(pluginOptions ?? {});\r\n            if (partialPlugin instanceof Promise) {\r\n                // eslint-disable-next-line github/no-then\r\n                partialPlugin.then(callback).catch((error) => {\r\n                    onError(\"Error instantiating plugin.\", error);\r\n                });\r\n                // When async factories are used, the plugin instance cannot be returned synchronously.\r\n                // In this case, the legacy loader functions will return null.\r\n                return null;\r\n            } else {\r\n                callback(partialPlugin);\r\n                return partialPlugin;\r\n            }\r\n        } else {\r\n            callback(registeredPlugin.plugin);\r\n            return registeredPlugin.plugin;\r\n        }\r\n    };\r\n\r\n    return getPluginInstance((plugin) => {\r\n        if (!plugin) {\r\n            // eslint-disable-next-line no-throw-literal\r\n            throw `The loader plugin corresponding to the '${pluginExtension}' file type has not been found. If using es6, please import the plugin you wish to use before.`;\r\n        }\r\n\r\n        onPluginActivatedObservable.notifyObservers(plugin);\r\n\r\n        // Check if we have a direct load url. If the plugin is registered to handle\r\n        // it or it's not a base64 data url, then pass it through the direct load path.\r\n        if (directLoad && ((plugin.canDirectLoad && plugin.canDirectLoad(fileInfo.url)) || !IsBase64DataUrl(fileInfo.url))) {\r\n            if (plugin.directLoad) {\r\n                const result = plugin.directLoad(scene, directLoad);\r\n                if (result instanceof Promise) {\r\n                    result\r\n                        // eslint-disable-next-line github/no-then\r\n                        .then((data: unknown) => {\r\n                            onSuccess(plugin, data);\r\n                        })\r\n                        // eslint-disable-next-line github/no-then\r\n                        .catch((error: any) => {\r\n                            onError(\"Error in directLoad of _loadData: \" + error, error);\r\n                        });\r\n                } else {\r\n                    onSuccess(plugin, result);\r\n                }\r\n            } else {\r\n                onSuccess(plugin, directLoad);\r\n            }\r\n            return;\r\n        }\r\n\r\n        const useArrayBuffer = registeredPlugin.isBinary;\r\n\r\n        const dataCallback = (data: unknown, responseURL?: string) => {\r\n            if (scene.isDisposed) {\r\n                onError(\"Scene has been disposed\");\r\n                return;\r\n            }\r\n\r\n            onSuccess(plugin, data, responseURL);\r\n        };\r\n\r\n        let request: Nullable<IFileRequest> = null;\r\n        let pluginDisposed = false;\r\n        plugin.onDisposeObservable?.add(() => {\r\n            pluginDisposed = true;\r\n\r\n            if (request) {\r\n                request.abort();\r\n                request = null;\r\n            }\r\n\r\n            onDispose();\r\n        });\r\n\r\n        const manifestChecked = () => {\r\n            if (pluginDisposed) {\r\n                return;\r\n            }\r\n\r\n            const errorCallback = (request?: WebRequest, exception?: LoadFileError) => {\r\n                onError(request?.statusText, exception);\r\n            };\r\n\r\n            if (!plugin.loadFile && fileInfo.rawData) {\r\n                // eslint-disable-next-line no-throw-literal\r\n                throw \"Plugin does not support loading ArrayBufferView.\";\r\n            }\r\n\r\n            request = plugin.loadFile\r\n                ? plugin.loadFile(scene, fileInfo.rawData || fileInfo.file || fileInfo.url, fileInfo.rootUrl, dataCallback, onProgress, useArrayBuffer, errorCallback, name)\r\n                : scene._loadFile(fileInfo.file || fileInfo.url, dataCallback, onProgress, true, useArrayBuffer, errorCallback);\r\n        };\r\n\r\n        const engine = scene.getEngine();\r\n        let canUseOfflineSupport = engine.enableOfflineSupport;\r\n        if (canUseOfflineSupport) {\r\n            // Also check for exceptions\r\n            let exceptionFound = false;\r\n            for (const regex of scene.disableOfflineSupportExceptionRules) {\r\n                if (regex.test(fileInfo.url)) {\r\n                    exceptionFound = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            canUseOfflineSupport = !exceptionFound;\r\n        }\r\n\r\n        if (canUseOfflineSupport && AbstractEngine.OfflineProviderFactory) {\r\n            // Checking if a manifest file has been set for this scene and if offline mode has been requested\r\n            scene.offlineProvider = AbstractEngine.OfflineProviderFactory(fileInfo.url, manifestChecked, engine.disableManifestCheck);\r\n        } else {\r\n            manifestChecked();\r\n        }\r\n    });\r\n}\r\n\r\nfunction GetFileInfo(rootUrl: string, sceneSource: SceneSource): Nullable<IFileInfo> {\r\n    let url: string;\r\n    let name: string;\r\n    let file: Nullable<File> = null;\r\n    let rawData: Nullable<ArrayBufferView> = null;\r\n\r\n    if (!sceneSource) {\r\n        url = rootUrl;\r\n        name = Tools.GetFilename(rootUrl);\r\n        rootUrl = Tools.GetFolderPath(rootUrl);\r\n    } else if (isFile(sceneSource)) {\r\n        url = `file:${sceneSource.name}`;\r\n        name = sceneSource.name;\r\n        file = sceneSource;\r\n    } else if (ArrayBuffer.isView(sceneSource)) {\r\n        url = \"\";\r\n        name = RandomGUID();\r\n        rawData = sceneSource;\r\n    } else if (sceneSource.startsWith(\"data:\")) {\r\n        url = sceneSource;\r\n        name = \"\";\r\n    } else if (rootUrl) {\r\n        const filename = sceneSource;\r\n        if (filename.substring(0, 1) === \"/\") {\r\n            Tools.Error(\"Wrong sceneFilename parameter\");\r\n            return null;\r\n        }\r\n\r\n        url = rootUrl + filename;\r\n        name = filename;\r\n    } else {\r\n        url = sceneSource;\r\n        name = Tools.GetFilename(sceneSource);\r\n        rootUrl = Tools.GetFolderPath(sceneSource);\r\n    }\r\n\r\n    return {\r\n        url: url,\r\n        rootUrl: rootUrl,\r\n        name: name,\r\n        file: file,\r\n        rawData,\r\n    };\r\n}\r\n\r\n/**\r\n * Adds a new plugin to the list of registered plugins\r\n * @param plugin defines the plugin to add\r\n */\r\nexport function RegisterSceneLoaderPlugin(plugin: ISceneLoaderPlugin | ISceneLoaderPluginAsync | ISceneLoaderPluginFactory): void {\r\n    if (typeof plugin.extensions === \"string\") {\r\n        const extension = plugin.extensions;\r\n        registeredPlugins[extension.toLowerCase()] = {\r\n            plugin: plugin,\r\n            isBinary: false,\r\n        };\r\n    } else {\r\n        const extensions = plugin.extensions;\r\n        const keys = Object.keys(extensions);\r\n        for (const extension of keys) {\r\n            registeredPlugins[extension.toLowerCase()] = {\r\n                plugin: plugin,\r\n                isBinary: extensions[extension].isBinary,\r\n                mimeType: extensions[extension].mimeType,\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Adds a new plugin to the list of registered plugins\r\n * @deprecated Please use {@link RegisterSceneLoaderPlugin} instead.\r\n * @param plugin defines the plugin to add\r\n */\r\nexport function registerSceneLoaderPlugin(plugin: ISceneLoaderPlugin | ISceneLoaderPluginAsync | ISceneLoaderPluginFactory): void {\r\n    RegisterSceneLoaderPlugin(plugin);\r\n}\r\n\r\n/**\r\n * Gets metadata for all currently registered scene loader plugins.\r\n * @returns An array where each entry has metadata for a single scene loader plugin.\r\n */\r\nexport function GetRegisteredSceneLoaderPluginMetadata(): DeepImmutable<\r\n    Array<\r\n        Pick<ISceneLoaderPluginMetadata, \"name\"> & {\r\n            /**\r\n             * The extensions supported by the plugin.\r\n             */\r\n            extensions: ({\r\n                /**\r\n                 * The file extension.\r\n                 */\r\n                extension: string;\r\n            } & ISceneLoaderPluginExtensions[string])[];\r\n        }\r\n    >\r\n> {\r\n    return Array.from(\r\n        Object.entries(registeredPlugins).reduce((pluginMap, [extension, extensionRegistration]) => {\r\n            let pluginMetadata = pluginMap.get(extensionRegistration.plugin.name);\r\n            if (!pluginMetadata) {\r\n                pluginMap.set(extensionRegistration.plugin.name, (pluginMetadata = []));\r\n            }\r\n            pluginMetadata.push({ extension, isBinary: extensionRegistration.isBinary, mimeType: extensionRegistration.mimeType });\r\n            return pluginMap;\r\n        }, new Map<string, ({ extension: string } & ISceneLoaderPluginExtensions[string])[]>())\r\n    ).map(([name, extensions]) => ({ name, extensions }));\r\n}\r\n\r\n/**\r\n * Import meshes into a scene\r\n * @param source a string that defines the name of the scene file, or starts with \"data:\" following by the stringified version of the scene, or a File object, or an ArrayBufferView\r\n * @param scene the instance of BABYLON.Scene to append to\r\n * @param options an object that configures aspects of how the scene is loaded\r\n * @returns The loaded list of imported meshes, particle systems, skeletons, and animation groups\r\n */\r\nexport async function ImportMeshAsync(source: SceneSource, scene: Scene, options?: ImportMeshOptions): Promise<ISceneLoaderAsyncResult> {\r\n    const { meshNames, rootUrl = \"\", onProgress, pluginExtension, name, pluginOptions } = options ?? {};\r\n    return await importMeshAsyncCoreAsync(meshNames, rootUrl, source, scene, onProgress, pluginExtension, name, pluginOptions);\r\n}\r\n\r\nasync function importMeshAsync(\r\n    meshNames: string | readonly string[] | null | undefined,\r\n    rootUrl: string,\r\n    sceneFilename: SceneSource = \"\",\r\n    scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n    onSuccess: Nullable<SceneLoaderSuccessCallback> = null,\r\n    onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n    onError: Nullable<(scene: Scene, message: string, exception?: any) => void> = null,\r\n    pluginExtension: Nullable<string> = null,\r\n    name = \"\",\r\n    pluginOptions: PluginOptions = {}\r\n): Promise<Nullable<ISceneLoaderPlugin | ISceneLoaderPluginAsync>> {\r\n    if (!scene) {\r\n        Logger.Error(\"No scene available to import mesh to\");\r\n        return null;\r\n    }\r\n\r\n    const fileInfo = GetFileInfo(rootUrl, sceneFilename);\r\n    if (!fileInfo) {\r\n        return null;\r\n    }\r\n\r\n    const loadingToken = {};\r\n    scene.addPendingData(loadingToken);\r\n\r\n    const disposeHandler = () => {\r\n        scene.removePendingData(loadingToken);\r\n    };\r\n\r\n    const errorHandler = (message?: string, exception?: any) => {\r\n        const errorMessage = formatErrorMessage(fileInfo, message, exception);\r\n\r\n        if (onError) {\r\n            onError(scene, errorMessage, new RuntimeError(errorMessage, ErrorCodes.SceneLoaderError, exception));\r\n        } else {\r\n            Logger.Error(errorMessage);\r\n            // should the exception be thrown?\r\n        }\r\n\r\n        disposeHandler();\r\n    };\r\n\r\n    const progressHandler = onProgress\r\n        ? (event: ISceneLoaderProgressEvent) => {\r\n              try {\r\n                  onProgress(event);\r\n              } catch (e) {\r\n                  errorHandler(\"Error in onProgress callback: \" + e, e);\r\n              }\r\n          }\r\n        : undefined;\r\n\r\n    const successHandler: SceneLoaderSuccessCallback = (meshes, particleSystems, skeletons, animationGroups, transformNodes, geometries, lights, spriteManagers) => {\r\n        scene.importedMeshesFiles.push(fileInfo.url);\r\n\r\n        if (onSuccess) {\r\n            try {\r\n                onSuccess(meshes, particleSystems, skeletons, animationGroups, transformNodes, geometries, lights, spriteManagers);\r\n            } catch (e) {\r\n                errorHandler(\"Error in onSuccess callback: \" + e, e);\r\n            }\r\n        }\r\n\r\n        scene.removePendingData(loadingToken);\r\n    };\r\n\r\n    return await loadDataAsync(\r\n        fileInfo,\r\n        scene,\r\n        (plugin, data, responseURL) => {\r\n            if (plugin.rewriteRootURL) {\r\n                fileInfo.rootUrl = plugin.rewriteRootURL(fileInfo.rootUrl, responseURL);\r\n            }\r\n\r\n            if ((plugin as ISceneLoaderPlugin).importMesh) {\r\n                const syncedPlugin = <ISceneLoaderPlugin>plugin;\r\n                const meshes: AbstractMesh[] = [];\r\n                const particleSystems: IParticleSystem[] = [];\r\n                const skeletons: Skeleton[] = [];\r\n\r\n                if (!syncedPlugin.importMesh(meshNames, scene, data, fileInfo.rootUrl, meshes, particleSystems, skeletons, errorHandler)) {\r\n                    return;\r\n                }\r\n\r\n                scene.loadingPluginName = plugin.name;\r\n                successHandler(meshes, particleSystems, skeletons, [], [], [], [], []);\r\n            } else {\r\n                const asyncedPlugin = <ISceneLoaderPluginAsync>plugin;\r\n                asyncedPlugin\r\n                    .importMeshAsync(meshNames, scene, data, fileInfo.rootUrl, progressHandler, fileInfo.name)\r\n                    // eslint-disable-next-line github/no-then\r\n                    .then((result) => {\r\n                        scene.loadingPluginName = plugin.name;\r\n                        successHandler(\r\n                            result.meshes,\r\n                            result.particleSystems,\r\n                            result.skeletons,\r\n                            result.animationGroups,\r\n                            result.transformNodes,\r\n                            result.geometries,\r\n                            result.lights,\r\n                            result.spriteManagers\r\n                        );\r\n                    })\r\n                    // eslint-disable-next-line github/no-then\r\n                    .catch((error) => {\r\n                        errorHandler(error.message, error);\r\n                    });\r\n            }\r\n        },\r\n        progressHandler,\r\n        errorHandler,\r\n        disposeHandler,\r\n        pluginExtension,\r\n        name,\r\n        pluginOptions\r\n    );\r\n}\r\n\r\nasync function importMeshAsyncCoreAsync(\r\n    meshNames: string | readonly string[] | null | undefined,\r\n    rootUrl: string,\r\n    sceneFilename?: SceneSource,\r\n    scene?: Nullable<Scene>,\r\n    onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n    pluginExtension?: Nullable<string>,\r\n    name?: string,\r\n    pluginOptions?: PluginOptions\r\n): Promise<ISceneLoaderAsyncResult> {\r\n    return await new Promise((resolve, reject) => {\r\n        try {\r\n            importMeshAsync(\r\n                meshNames,\r\n                rootUrl,\r\n                sceneFilename,\r\n                scene,\r\n                (meshes, particleSystems, skeletons, animationGroups, transformNodes, geometries, lights, spriteManagers) => {\r\n                    resolve({\r\n                        meshes: meshes,\r\n                        particleSystems: particleSystems,\r\n                        skeletons: skeletons,\r\n                        animationGroups: animationGroups,\r\n                        transformNodes: transformNodes,\r\n                        geometries: geometries,\r\n                        lights: lights,\r\n                        spriteManagers: spriteManagers,\r\n                    });\r\n                },\r\n                onProgress,\r\n                (scene, message, exception) => {\r\n                    // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\r\n                    reject(exception || new Error(message));\r\n                },\r\n                pluginExtension,\r\n                name,\r\n                pluginOptions\r\n                // eslint-disable-next-line github/no-then\r\n            ).catch(reject);\r\n        } catch (error) {\r\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n\r\n// This is the core implementation of load scene\r\nasync function loadSceneImplAsync(\r\n    rootUrl: string,\r\n    sceneFilename: SceneSource = \"\",\r\n    engine: Nullable<AbstractEngine> = EngineStore.LastCreatedEngine,\r\n    onSuccess: Nullable<(scene: Scene) => void> = null,\r\n    onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n    onError: Nullable<(scene: Scene, message: string, exception?: any) => void> = null,\r\n    pluginExtension: Nullable<string> = null,\r\n    name = \"\",\r\n    pluginOptions: PluginOptions = {}\r\n): Promise<void> {\r\n    if (!engine) {\r\n        Tools.Error(\"No engine available\");\r\n        return;\r\n    }\r\n\r\n    await appendSceneImplAsync(rootUrl, sceneFilename, new Scene(engine), onSuccess, onProgress, onError, pluginExtension, name, pluginOptions);\r\n}\r\n\r\n/**\r\n * Load a scene\r\n * @param source a string that defines the name of the scene file, or starts with \"data:\" following by the stringified version of the scene, or a File object, or an ArrayBufferView\r\n * @param engine is the instance of BABYLON.Engine to use to create the scene\r\n * @param options an object that configures aspects of how the scene is loaded\r\n * @returns The loaded scene\r\n */\r\nexport async function LoadSceneAsync(source: SceneSource, engine: AbstractEngine, options?: LoadOptions): Promise<Scene> {\r\n    const { rootUrl = \"\", onProgress, pluginExtension, name, pluginOptions } = options ?? {};\r\n    return await loadSceneSharedAsync(rootUrl, source, engine, onProgress, pluginExtension, name, pluginOptions);\r\n}\r\n\r\n/**\r\n * Load a scene\r\n * @deprecated Please use {@link LoadSceneAsync} instead.\r\n * @param source a string that defines the name of the scene file, or starts with \"data:\" following by the stringified version of the scene, or a File object, or an ArrayBufferView\r\n * @param engine is the instance of BABYLON.Engine to use to create the scene\r\n * @param options an object that configures aspects of how the scene is loaded\r\n * @returns The loaded scene\r\n */\r\nexport async function loadSceneAsync(source: SceneSource, engine: AbstractEngine, options?: LoadOptions): Promise<Scene> {\r\n    return await LoadSceneAsync(source, engine, options);\r\n}\r\n\r\n// This function is shared between the new module level loadSceneAsync and the legacy SceneLoader.LoadAsync\r\nasync function loadSceneSharedAsync(\r\n    rootUrl: string,\r\n    sceneFilename?: SceneSource,\r\n    engine?: Nullable<AbstractEngine>,\r\n    onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n    pluginExtension?: Nullable<string>,\r\n    name?: string,\r\n    pluginOptions?: PluginOptions\r\n): Promise<Scene> {\r\n    return await new Promise((resolve, reject) => {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        loadSceneImplAsync(\r\n            rootUrl,\r\n            sceneFilename,\r\n            engine,\r\n            (scene) => {\r\n                resolve(scene);\r\n            },\r\n            onProgress,\r\n            (scene, message, exception) => {\r\n                // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\r\n                reject(exception || new Error(message));\r\n            },\r\n            pluginExtension,\r\n            name,\r\n            pluginOptions\r\n        );\r\n    });\r\n}\r\n\r\n// This is the core implementation of append scene\r\nasync function appendSceneImplAsync(\r\n    rootUrl: string,\r\n    sceneFilename: SceneSource = \"\",\r\n    scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n    onSuccess: Nullable<(scene: Scene) => void> = null,\r\n    onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n    onError: Nullable<(scene: Scene, message: string, exception?: any) => void> = null,\r\n    pluginExtension: Nullable<string> = null,\r\n    name = \"\",\r\n    pluginOptions: PluginOptions = {}\r\n): Promise<Nullable<ISceneLoaderPlugin | ISceneLoaderPluginAsync>> {\r\n    if (!scene) {\r\n        Logger.Error(\"No scene available to append to\");\r\n        return null;\r\n    }\r\n\r\n    const fileInfo = GetFileInfo(rootUrl, sceneFilename);\r\n    if (!fileInfo) {\r\n        return null;\r\n    }\r\n\r\n    const loadingToken = {};\r\n    scene.addPendingData(loadingToken);\r\n\r\n    const disposeHandler = () => {\r\n        scene.removePendingData(loadingToken);\r\n    };\r\n\r\n    if (SceneLoaderFlags.ShowLoadingScreen && !showingLoadingScreen) {\r\n        showingLoadingScreen = true;\r\n        scene.getEngine().displayLoadingUI();\r\n        scene.executeWhenReady(() => {\r\n            scene.getEngine().hideLoadingUI();\r\n            showingLoadingScreen = false;\r\n        });\r\n    }\r\n\r\n    const errorHandler = (message?: string, exception?: any) => {\r\n        const errorMessage = formatErrorMessage(fileInfo, message, exception);\r\n\r\n        if (onError) {\r\n            onError(scene, errorMessage, new RuntimeError(errorMessage, ErrorCodes.SceneLoaderError, exception));\r\n        } else {\r\n            Logger.Error(errorMessage);\r\n            // should the exception be thrown?\r\n        }\r\n\r\n        disposeHandler();\r\n    };\r\n\r\n    const progressHandler = onProgress\r\n        ? (event: ISceneLoaderProgressEvent) => {\r\n              try {\r\n                  onProgress(event);\r\n              } catch (e) {\r\n                  errorHandler(\"Error in onProgress callback\", e);\r\n              }\r\n          }\r\n        : undefined;\r\n\r\n    const successHandler = () => {\r\n        if (onSuccess) {\r\n            try {\r\n                onSuccess(scene);\r\n            } catch (e) {\r\n                errorHandler(\"Error in onSuccess callback\", e);\r\n            }\r\n        }\r\n\r\n        scene.removePendingData(loadingToken);\r\n    };\r\n\r\n    return await loadDataAsync(\r\n        fileInfo,\r\n        scene,\r\n        (plugin, data) => {\r\n            if ((plugin as ISceneLoaderPlugin).load) {\r\n                const syncedPlugin = <ISceneLoaderPlugin>plugin;\r\n                if (!syncedPlugin.load(scene, data, fileInfo.rootUrl, errorHandler)) {\r\n                    return;\r\n                }\r\n\r\n                scene.loadingPluginName = plugin.name;\r\n                successHandler();\r\n            } else {\r\n                const asyncedPlugin = <ISceneLoaderPluginAsync>plugin;\r\n                asyncedPlugin\r\n                    .loadAsync(scene, data, fileInfo.rootUrl, progressHandler, fileInfo.name)\r\n                    // eslint-disable-next-line github/no-then\r\n                    .then(() => {\r\n                        scene.loadingPluginName = plugin.name;\r\n                        successHandler();\r\n                    })\r\n                    // eslint-disable-next-line github/no-then\r\n                    .catch((error) => {\r\n                        errorHandler(error.message, error);\r\n                    });\r\n            }\r\n        },\r\n        progressHandler,\r\n        errorHandler,\r\n        disposeHandler,\r\n        pluginExtension,\r\n        name,\r\n        pluginOptions\r\n    );\r\n}\r\n\r\n/**\r\n * Append a scene\r\n * @param source a string that defines the name of the scene file, or starts with \"data:\" following by the stringified version of the scene, or a File object, or an ArrayBufferView\r\n * @param scene is the instance of BABYLON.Scene to append to\r\n * @param options an object that configures aspects of how the scene is loaded\r\n * @returns A promise that resolves when the scene is appended\r\n */\r\nexport async function AppendSceneAsync(source: SceneSource, scene: Scene, options?: AppendOptions): Promise<void> {\r\n    const { rootUrl = \"\", onProgress, pluginExtension, name, pluginOptions } = options ?? {};\r\n    await appendSceneSharedAsync(rootUrl, source, scene, onProgress, pluginExtension, name, pluginOptions);\r\n}\r\n\r\n/**\r\n * Append a scene\r\n * @deprecated Please use {@link AppendSceneAsync} instead.\r\n * @param source a string that defines the name of the scene file, or starts with \"data:\" following by the stringified version of the scene, or a File object, or an ArrayBufferView\r\n * @param scene is the instance of BABYLON.Scene to append to\r\n * @param options an object that configures aspects of how the scene is loaded\r\n * @returns A promise that resolves when the scene is appended\r\n */\r\nexport async function appendSceneAsync(source: SceneSource, scene: Scene, options?: AppendOptions): Promise<void> {\r\n    return await AppendSceneAsync(source, scene, options);\r\n}\r\n\r\n// This function is shared between the new module level appendSceneAsync and the legacy SceneLoader.AppendAsync\r\nasync function appendSceneSharedAsync(\r\n    rootUrl: string,\r\n    sceneFilename?: SceneSource,\r\n    scene?: Nullable<Scene>,\r\n    onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n    pluginExtension?: Nullable<string>,\r\n    name?: string,\r\n    pluginOptions?: PluginOptions\r\n): Promise<Scene> {\r\n    return await new Promise((resolve, reject) => {\r\n        try {\r\n            appendSceneImplAsync(\r\n                rootUrl,\r\n                sceneFilename,\r\n                scene,\r\n                (scene) => {\r\n                    resolve(scene);\r\n                },\r\n                onProgress,\r\n                (scene, message, exception) => {\r\n                    // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\r\n                    reject(exception || new Error(message));\r\n                },\r\n                pluginExtension,\r\n                name,\r\n                pluginOptions\r\n                // eslint-disable-next-line github/no-then\r\n            ).catch(reject);\r\n        } catch (error) {\r\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n\r\n// This is the core implementation of load asset container\r\nasync function loadAssetContainerImplAsync(\r\n    rootUrl: string,\r\n    sceneFilename: SceneSource = \"\",\r\n    scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n    onSuccess: Nullable<(assets: AssetContainer) => void> = null,\r\n    onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n    onError: Nullable<(scene: Scene, message: string, exception?: any) => void> = null,\r\n    pluginExtension: Nullable<string> = null,\r\n    name = \"\",\r\n    pluginOptions: PluginOptions = {}\r\n): Promise<Nullable<ISceneLoaderPlugin | ISceneLoaderPluginAsync>> {\r\n    if (!scene) {\r\n        Logger.Error(\"No scene available to load asset container to\");\r\n        return null;\r\n    }\r\n\r\n    const fileInfo = GetFileInfo(rootUrl, sceneFilename);\r\n    if (!fileInfo) {\r\n        return null;\r\n    }\r\n\r\n    const loadingToken = {};\r\n    scene.addPendingData(loadingToken);\r\n\r\n    const disposeHandler = () => {\r\n        scene.removePendingData(loadingToken);\r\n    };\r\n\r\n    const errorHandler = (message?: string, exception?: any) => {\r\n        const errorMessage = formatErrorMessage(fileInfo, message, exception);\r\n\r\n        if (onError) {\r\n            onError(scene, errorMessage, new RuntimeError(errorMessage, ErrorCodes.SceneLoaderError, exception));\r\n        } else {\r\n            Logger.Error(errorMessage);\r\n            // should the exception be thrown?\r\n        }\r\n\r\n        disposeHandler();\r\n    };\r\n\r\n    const progressHandler = onProgress\r\n        ? (event: ISceneLoaderProgressEvent) => {\r\n              try {\r\n                  onProgress(event);\r\n              } catch (e) {\r\n                  errorHandler(\"Error in onProgress callback\", e);\r\n              }\r\n          }\r\n        : undefined;\r\n\r\n    const successHandler = (assets: AssetContainer) => {\r\n        if (onSuccess) {\r\n            try {\r\n                onSuccess(assets);\r\n            } catch (e) {\r\n                errorHandler(\"Error in onSuccess callback\", e);\r\n            }\r\n        }\r\n\r\n        scene.removePendingData(loadingToken);\r\n    };\r\n\r\n    return await loadDataAsync(\r\n        fileInfo,\r\n        scene,\r\n        (plugin, data) => {\r\n            if ((plugin as ISceneLoaderPlugin).loadAssetContainer) {\r\n                const syncedPlugin = <ISceneLoaderPlugin>plugin;\r\n                const assetContainer = syncedPlugin.loadAssetContainer(scene, data, fileInfo.rootUrl, errorHandler);\r\n                if (!assetContainer) {\r\n                    return;\r\n                }\r\n                assetContainer.populateRootNodes();\r\n                scene.loadingPluginName = plugin.name;\r\n                successHandler(assetContainer);\r\n            } else if ((plugin as ISceneLoaderPluginAsync).loadAssetContainerAsync) {\r\n                const asyncedPlugin = <ISceneLoaderPluginAsync>plugin;\r\n                asyncedPlugin\r\n                    .loadAssetContainerAsync(scene, data, fileInfo.rootUrl, progressHandler, fileInfo.name)\r\n                    // eslint-disable-next-line github/no-then\r\n                    .then((assetContainer) => {\r\n                        assetContainer.populateRootNodes();\r\n                        scene.loadingPluginName = plugin.name;\r\n                        successHandler(assetContainer);\r\n                    })\r\n                    // eslint-disable-next-line github/no-then\r\n                    .catch((error) => {\r\n                        errorHandler(error.message, error);\r\n                    });\r\n            } else {\r\n                errorHandler(\"LoadAssetContainer is not supported by this plugin. Plugin did not provide a loadAssetContainer or loadAssetContainerAsync method.\");\r\n            }\r\n        },\r\n        progressHandler,\r\n        errorHandler,\r\n        disposeHandler,\r\n        pluginExtension,\r\n        name,\r\n        pluginOptions\r\n    );\r\n}\r\n\r\n/**\r\n * Load a scene into an asset container\r\n * @param source a string that defines the name of the scene file, or starts with \"data:\" following by the stringified version of the scene, or a File object, or an ArrayBufferView\r\n * @param scene is the instance of Scene to append to\r\n * @param options an object that configures aspects of how the scene is loaded\r\n * @returns The loaded asset container\r\n */\r\nexport async function LoadAssetContainerAsync(source: SceneSource, scene: Scene, options?: LoadAssetContainerOptions): Promise<AssetContainer> {\r\n    const { rootUrl = \"\", onProgress, pluginExtension, name, pluginOptions } = options ?? {};\r\n    return await loadAssetContainerSharedAsync(rootUrl, source, scene, onProgress, pluginExtension, name, pluginOptions);\r\n}\r\n\r\n/**\r\n * Load a scene into an asset container\r\n * @deprecated Please use {@link LoadAssetContainerAsync} instead.\r\n * @param source a string that defines the name of the scene file, or starts with \"data:\" following by the stringified version of the scene, or a File object, or an ArrayBufferView\r\n * @param scene is the instance of Scene to append to\r\n * @param options an object that configures aspects of how the scene is loaded\r\n * @returns The loaded asset container\r\n */\r\nexport async function loadAssetContainerAsync(source: SceneSource, scene: Scene, options?: LoadAssetContainerOptions): Promise<AssetContainer> {\r\n    return await LoadAssetContainerAsync(source, scene, options);\r\n}\r\n\r\n// This function is shared between the new module level loadAssetContainerAsync and the legacy SceneLoader.LoadAssetContainerAsync\r\nasync function loadAssetContainerSharedAsync(\r\n    rootUrl: string,\r\n    sceneFilename?: SceneSource,\r\n    scene?: Nullable<Scene>,\r\n    onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n    pluginExtension?: Nullable<string>,\r\n    name?: string,\r\n    pluginOptions?: PluginOptions\r\n): Promise<AssetContainer> {\r\n    return await new Promise((resolve, reject) => {\r\n        try {\r\n            loadAssetContainerImplAsync(\r\n                rootUrl,\r\n                sceneFilename,\r\n                scene,\r\n                (assets) => {\r\n                    resolve(assets);\r\n                },\r\n                onProgress,\r\n                (scene, message, exception) => {\r\n                    // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\r\n                    reject(exception || new Error(message));\r\n                },\r\n                pluginExtension,\r\n                name,\r\n                pluginOptions\r\n                // eslint-disable-next-line github/no-then\r\n            ).catch(reject);\r\n        } catch (error) {\r\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n\r\n// This is the core implementation of import animations\r\nasync function importAnimationsImplAsync(\r\n    rootUrl: string,\r\n    sceneFilename: SceneSource = \"\",\r\n    scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n    overwriteAnimations = true,\r\n    animationGroupLoadingMode = SceneLoaderAnimationGroupLoadingMode.Clean,\r\n    targetConverter: Nullable<(target: any) => any> = null,\r\n    onSuccess: Nullable<(scene: Scene) => void> = null,\r\n    onProgress: Nullable<(event: ISceneLoaderProgressEvent) => void> = null,\r\n    onError: Nullable<(scene: Scene, message: string, exception?: any) => void> = null,\r\n    pluginExtension: Nullable<string> = null,\r\n    name = \"\",\r\n    pluginOptions: PluginOptions = {}\r\n): Promise<void> {\r\n    if (!scene) {\r\n        Logger.Error(\"No scene available to load animations to\");\r\n        return;\r\n    }\r\n\r\n    if (overwriteAnimations) {\r\n        // Reset, stop and dispose all animations before loading new ones\r\n        for (const animatable of scene.animatables) {\r\n            animatable.reset();\r\n        }\r\n        scene.stopAllAnimations();\r\n        const animationGroups = scene.animationGroups.slice();\r\n        for (const animationGroup of animationGroups) {\r\n            animationGroup.dispose();\r\n        }\r\n        const nodes = scene.getNodes();\r\n        for (const node of nodes) {\r\n            if (node.animations) {\r\n                node.animations = [];\r\n            }\r\n        }\r\n    } else {\r\n        switch (animationGroupLoadingMode as number) {\r\n            case SceneLoaderAnimationGroupLoadingMode.Clean:\r\n                const animationGroups = scene.animationGroups.slice();\r\n                for (const animationGroup of animationGroups) {\r\n                    animationGroup.dispose();\r\n                }\r\n                break;\r\n            case SceneLoaderAnimationGroupLoadingMode.Stop:\r\n                for (const animationGroup of scene.animationGroups) {\r\n                    animationGroup.stop();\r\n                }\r\n                break;\r\n            case SceneLoaderAnimationGroupLoadingMode.Sync:\r\n                for (const animationGroup of scene.animationGroups) {\r\n                    animationGroup.reset();\r\n                    animationGroup.restart();\r\n                }\r\n                break;\r\n            case SceneLoaderAnimationGroupLoadingMode.NoSync:\r\n                // nothing to do\r\n                break;\r\n            default:\r\n                Logger.Error(\"Unknown animation group loading mode value '\" + animationGroupLoadingMode + \"'\");\r\n                return;\r\n        }\r\n    }\r\n\r\n    const startingIndexForNewAnimatables = scene.animatables.length;\r\n\r\n    const onAssetContainerLoaded = (container: AssetContainer) => {\r\n        container.mergeAnimationsTo(scene, scene.animatables.slice(startingIndexForNewAnimatables), targetConverter);\r\n\r\n        container.dispose();\r\n\r\n        scene.onAnimationFileImportedObservable.notifyObservers(scene);\r\n\r\n        if (onSuccess) {\r\n            onSuccess(scene);\r\n        }\r\n    };\r\n\r\n    await loadAssetContainerImplAsync(rootUrl, sceneFilename, scene, onAssetContainerLoaded, onProgress, onError, pluginExtension, name, pluginOptions);\r\n}\r\n\r\n/**\r\n * Import animations from a file into a scene\r\n * @param source a string that defines the name of the scene file, or starts with \"data:\" following by the stringified version of the scene, or a File object, or an ArrayBufferView\r\n * @param scene is the instance of BABYLON.Scene to append to\r\n * @param options an object that configures aspects of how the scene is loaded\r\n * @returns A promise that resolves when the animations are imported\r\n */\r\nexport async function ImportAnimationsAsync(source: SceneSource, scene: Scene, options?: ImportAnimationsOptions): Promise<void> {\r\n    const { rootUrl = \"\", overwriteAnimations, animationGroupLoadingMode, targetConverter, onProgress, pluginExtension, name, pluginOptions } = options ?? {};\r\n    await importAnimationsSharedAsync(rootUrl, source, scene, overwriteAnimations, animationGroupLoadingMode, targetConverter, onProgress, pluginExtension, name, pluginOptions);\r\n}\r\n\r\n/**\r\n * Import animations from a file into a scene\r\n * @deprecated Please use {@link ImportAnimationsAsync} instead.\r\n * @param source a string that defines the name of the scene file, or starts with \"data:\" following by the stringified version of the scene, or a File object, or an ArrayBufferView\r\n * @param scene is the instance of BABYLON.Scene to append to\r\n * @param options an object that configures aspects of how the scene is loaded\r\n * @returns A promise that resolves when the animations are imported\r\n */\r\nexport async function importAnimationsAsync(source: SceneSource, scene: Scene, options?: ImportAnimationsOptions): Promise<void> {\r\n    return await ImportAnimationsAsync(source, scene, options);\r\n}\r\n\r\n// This function is shared between the new module level importAnimationsAsync and the legacy SceneLoader.ImportAnimationsAsync\r\nasync function importAnimationsSharedAsync(\r\n    rootUrl: string,\r\n    sceneFilename?: SceneSource,\r\n    scene?: Nullable<Scene>,\r\n    overwriteAnimations?: boolean,\r\n    animationGroupLoadingMode?: SceneLoaderAnimationGroupLoadingMode,\r\n    targetConverter?: Nullable<(target: any) => any>,\r\n    onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n    pluginExtension?: Nullable<string>,\r\n    name?: string,\r\n    pluginOptions?: PluginOptions\r\n): Promise<Scene> {\r\n    return await new Promise((resolve, reject) => {\r\n        try {\r\n            importAnimationsImplAsync(\r\n                rootUrl,\r\n                sceneFilename,\r\n                scene,\r\n                overwriteAnimations,\r\n                animationGroupLoadingMode,\r\n                targetConverter,\r\n                (scene) => {\r\n                    resolve(scene);\r\n                },\r\n                onProgress,\r\n                (scene, message, exception) => {\r\n                    // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\r\n                    reject(exception || new Error(message));\r\n                },\r\n                pluginExtension,\r\n                name,\r\n                pluginOptions\r\n                // eslint-disable-next-line github/no-then\r\n            ).catch(reject);\r\n        } catch (error) {\r\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Class used to load scene from various file formats using registered plugins\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/importers/loadingFileTypes\r\n * @deprecated The module level functions are more efficient for bundler tree shaking and allow plugin options to be passed through. Future improvements to scene loading will primarily be in the module level functions. The SceneLoader class will remain available, but it will be beneficial to prefer the module level functions.\r\n * @see {@link ImportMeshAsync}, {@link LoadSceneAsync}, {@link AppendSceneAsync}, {@link ImportAnimationsAsync}, {@link LoadAssetContainerAsync}\r\n */\r\nexport class SceneLoader {\r\n    /**\r\n     * No logging while loading\r\n     */\r\n    public static readonly NO_LOGGING = Constants.SCENELOADER_NO_LOGGING;\r\n\r\n    /**\r\n     * Minimal logging while loading\r\n     */\r\n    public static readonly MINIMAL_LOGGING = Constants.SCENELOADER_MINIMAL_LOGGING;\r\n\r\n    /**\r\n     * Summary logging while loading\r\n     */\r\n    public static readonly SUMMARY_LOGGING = Constants.SCENELOADER_SUMMARY_LOGGING;\r\n\r\n    /**\r\n     * Detailed logging while loading\r\n     */\r\n    public static readonly DETAILED_LOGGING = Constants.SCENELOADER_DETAILED_LOGGING;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if entire scene must be loaded even if scene contains incremental data\r\n     */\r\n    public static get ForceFullSceneLoadingForIncremental() {\r\n        return SceneLoaderFlags.ForceFullSceneLoadingForIncremental;\r\n    }\r\n\r\n    public static set ForceFullSceneLoadingForIncremental(value: boolean) {\r\n        SceneLoaderFlags.ForceFullSceneLoadingForIncremental = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if loading screen must be displayed while loading a scene\r\n     */\r\n    public static get ShowLoadingScreen(): boolean {\r\n        return SceneLoaderFlags.ShowLoadingScreen;\r\n    }\r\n\r\n    public static set ShowLoadingScreen(value: boolean) {\r\n        SceneLoaderFlags.ShowLoadingScreen = value;\r\n    }\r\n\r\n    /**\r\n     * Defines the current logging level (while loading the scene)\r\n     * @ignorenaming\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static get loggingLevel(): number {\r\n        return SceneLoaderFlags.loggingLevel;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static set loggingLevel(value: number) {\r\n        SceneLoaderFlags.loggingLevel = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or set a boolean indicating if matrix weights must be cleaned upon loading\r\n     */\r\n    public static get CleanBoneMatrixWeights(): boolean {\r\n        return SceneLoaderFlags.CleanBoneMatrixWeights;\r\n    }\r\n\r\n    public static set CleanBoneMatrixWeights(value: boolean) {\r\n        SceneLoaderFlags.CleanBoneMatrixWeights = value;\r\n    }\r\n\r\n    // Members\r\n\r\n    /**\r\n     * Event raised when a plugin is used to load a scene\r\n     */\r\n    public static readonly OnPluginActivatedObservable = onPluginActivatedObservable;\r\n\r\n    /**\r\n     * Gets the default plugin (used to load Babylon files)\r\n     * @returns the .babylon plugin\r\n     */\r\n    public static GetDefaultPlugin(): IRegisteredPlugin | undefined {\r\n        return getDefaultPlugin();\r\n    }\r\n\r\n    // Public functions\r\n\r\n    /**\r\n     * Gets a plugin that can load the given extension\r\n     * @param extension defines the extension to load\r\n     * @returns a plugin or null if none works\r\n     */\r\n    public static GetPluginForExtension(extension: string): ISceneLoaderPlugin | ISceneLoaderPluginAsync | ISceneLoaderPluginFactory | undefined {\r\n        return getPluginForExtension(extension, true)?.plugin;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the given extension can be loaded\r\n     * @param extension defines the extension to load\r\n     * @returns true if the extension is supported\r\n     */\r\n    public static IsPluginForExtensionAvailable(extension: string): boolean {\r\n        return isPluginForExtensionAvailable(extension);\r\n    }\r\n\r\n    /**\r\n     * Adds a new plugin to the list of registered plugins\r\n     * @param plugin defines the plugin to add\r\n     */\r\n    public static RegisterPlugin(plugin: ISceneLoaderPlugin | ISceneLoaderPluginAsync | ISceneLoaderPluginFactory): void {\r\n        RegisterSceneLoaderPlugin(plugin);\r\n    }\r\n\r\n    /**\r\n     * Import meshes into a scene\r\n     * @param meshNames an array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene the instance of BABYLON.Scene to append to\r\n     * @param onSuccess a callback with a list of imported meshes, particleSystems, skeletons, and animationGroups when import succeeds\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param onError a callback with the scene, a message, and possibly an exception when import fails\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the name of the file, if the data is binary\r\n     * @param pluginOptions defines the options to use with the plugin\r\n     * @deprecated Please use the module level {@link ImportMeshAsync} instead\r\n     */\r\n    public static ImportMesh(\r\n        meshNames: string | readonly string[] | null | undefined,\r\n        rootUrl: string,\r\n        sceneFilename?: SceneSource,\r\n        scene?: Nullable<Scene>,\r\n        onSuccess?: Nullable<SceneLoaderSuccessCallback>,\r\n        onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n        onError?: Nullable<(scene: Scene, message: string, exception?: any) => void>,\r\n        pluginExtension?: Nullable<string>,\r\n        name?: string,\r\n        pluginOptions?: PluginOptions\r\n    ): void {\r\n        // eslint-disable-next-line github/no-then\r\n        importMeshAsync(meshNames, rootUrl, sceneFilename, scene, onSuccess, onProgress, onError, pluginExtension, name, pluginOptions).catch((error) =>\r\n            onError?.(EngineStore.LastCreatedScene!, error?.message, error)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Import meshes into a scene\r\n     * @param meshNames an array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene the instance of BABYLON.Scene to append to\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the name of the file\r\n     * @returns The loaded list of imported meshes, particle systems, skeletons, and animation groups\r\n     * @deprecated Please use the module level {@link ImportMeshAsync} instead\r\n     */\r\n    public static async ImportMeshAsync(\r\n        meshNames: string | readonly string[] | null | undefined,\r\n        rootUrl: string,\r\n        sceneFilename?: SceneSource,\r\n        scene?: Nullable<Scene>,\r\n        onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n        pluginExtension?: Nullable<string>,\r\n        name?: string\r\n    ): Promise<ISceneLoaderAsyncResult> {\r\n        return await importMeshAsyncCoreAsync(meshNames, rootUrl, sceneFilename, scene, onProgress, pluginExtension, name);\r\n    }\r\n\r\n    /**\r\n     * Load a scene\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param engine is the instance of BABYLON.Engine to use to create the scene\r\n     * @param onSuccess a callback with the scene when import succeeds\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param onError a callback with the scene, a message, and possibly an exception when import fails\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the filename, if the data is binary\r\n     * @deprecated Please use the module level {@link LoadSceneAsync} instead\r\n     */\r\n    public static Load(\r\n        rootUrl: string,\r\n        sceneFilename?: SceneSource,\r\n        engine?: Nullable<AbstractEngine>,\r\n        onSuccess?: Nullable<(scene: Scene) => void>,\r\n        onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n        onError?: Nullable<(scene: Scene, message: string, exception?: any) => void>,\r\n        pluginExtension?: Nullable<string>,\r\n        name?: string\r\n    ) {\r\n        // eslint-disable-next-line github/no-then\r\n        loadSceneImplAsync(rootUrl, sceneFilename, engine, onSuccess, onProgress, onError, pluginExtension, name).catch((error) =>\r\n            onError?.(EngineStore.LastCreatedScene!, error?.message, error)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Load a scene\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param engine is the instance of BABYLON.Engine to use to create the scene\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the filename, if the data is binary\r\n     * @returns The loaded scene\r\n     * @deprecated Please use the module level {@link LoadSceneAsync} instead\r\n     */\r\n    public static async LoadAsync(\r\n        rootUrl: string,\r\n        sceneFilename?: SceneSource,\r\n        engine?: Nullable<AbstractEngine>,\r\n        onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n        pluginExtension?: Nullable<string>,\r\n        name?: string\r\n    ): Promise<Scene> {\r\n        return await loadSceneSharedAsync(rootUrl, sceneFilename, engine, onProgress, pluginExtension, name);\r\n    }\r\n\r\n    /**\r\n     * Append a scene\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene is the instance of BABYLON.Scene to append to\r\n     * @param onSuccess a callback with the scene when import succeeds\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param onError a callback with the scene, a message, and possibly an exception when import fails\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the name of the file, if the data is binary\r\n     * @deprecated Please use the module level {@link AppendSceneAsync} instead\r\n     */\r\n    public static Append(\r\n        rootUrl: string,\r\n        sceneFilename?: SceneSource,\r\n        scene?: Nullable<Scene>,\r\n        onSuccess?: Nullable<(scene: Scene) => void>,\r\n        onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n        onError?: Nullable<(scene: Scene, message: string, exception?: any) => void>,\r\n        pluginExtension?: Nullable<string>,\r\n        name?: string\r\n    ) {\r\n        // eslint-disable-next-line github/no-then\r\n        appendSceneImplAsync(rootUrl, sceneFilename, scene, onSuccess, onProgress, onError, pluginExtension, name).catch((error) =>\r\n            onError?.((scene ?? EngineStore.LastCreatedScene)!, error?.message, error)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Append a scene\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene is the instance of BABYLON.Scene to append to\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the name of the file, if the data is binary\r\n     * @returns The given scene\r\n     * @deprecated Please use the module level {@link AppendSceneAsync} instead\r\n     */\r\n    public static async AppendAsync(\r\n        rootUrl: string,\r\n        sceneFilename?: SceneSource,\r\n        scene?: Nullable<Scene>,\r\n        onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n        pluginExtension?: Nullable<string>,\r\n        name?: string\r\n    ): Promise<Scene> {\r\n        return await appendSceneSharedAsync(rootUrl, sceneFilename, scene, onProgress, pluginExtension, name);\r\n    }\r\n\r\n    /**\r\n     * Load a scene into an asset container\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene is the instance of BABYLON.Scene to append to (default: last created scene)\r\n     * @param onSuccess a callback with the scene when import succeeds\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param onError a callback with the scene, a message, and possibly an exception when import fails\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the filename, if the data is binary\r\n     * @deprecated Please use the module level {@link LoadAssetContainerAsync} instead\r\n     */\r\n    public static LoadAssetContainer(\r\n        rootUrl: string,\r\n        sceneFilename?: SceneSource,\r\n        scene?: Nullable<Scene>,\r\n        onSuccess?: Nullable<(assets: AssetContainer) => void>,\r\n        onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n        onError?: Nullable<(scene: Scene, message: string, exception?: any) => void>,\r\n        pluginExtension?: Nullable<string>,\r\n        name?: string\r\n    ) {\r\n        // eslint-disable-next-line github/no-then\r\n        loadAssetContainerImplAsync(rootUrl, sceneFilename, scene, onSuccess, onProgress, onError, pluginExtension, name).catch((error) =>\r\n            onError?.((scene ?? EngineStore.LastCreatedScene)!, error?.message, error)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Load a scene into an asset container\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene (default: empty string)\r\n     * @param scene is the instance of Scene to append to\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the filename, if the data is binary\r\n     * @returns The loaded asset container\r\n     * @deprecated Please use the module level {@link LoadAssetContainerAsync} instead\r\n     */\r\n    public static async LoadAssetContainerAsync(\r\n        rootUrl: string,\r\n        sceneFilename?: SceneSource,\r\n        scene?: Nullable<Scene>,\r\n        onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n        pluginExtension?: Nullable<string>,\r\n        name?: string\r\n    ): Promise<AssetContainer> {\r\n        return await loadAssetContainerSharedAsync(rootUrl, sceneFilename, scene, onProgress, pluginExtension, name);\r\n    }\r\n\r\n    /**\r\n     * Import animations from a file into a scene\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene is the instance of BABYLON.Scene to append to (default: last created scene)\r\n     * @param overwriteAnimations when true, animations are cleaned before importing new ones. Animations are appended otherwise\r\n     * @param animationGroupLoadingMode defines how to handle old animations groups before importing new ones\r\n     * @param targetConverter defines a function used to convert animation targets from loaded scene to current scene (default: search node by name)\r\n     * @param onSuccess a callback with the scene when import succeeds\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param onError a callback with the scene, a message, and possibly an exception when import fails\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the filename, if the data is binary\r\n     * @deprecated Please use the module level {@link ImportAnimationsAsync} instead\r\n     */\r\n    public static ImportAnimations(\r\n        rootUrl: string,\r\n        sceneFilename?: SceneSource,\r\n        scene?: Nullable<Scene>,\r\n        overwriteAnimations?: boolean,\r\n        animationGroupLoadingMode?: SceneLoaderAnimationGroupLoadingMode,\r\n        targetConverter?: Nullable<(target: any) => any>,\r\n        onSuccess?: Nullable<(scene: Scene) => void>,\r\n        onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n        onError?: Nullable<(scene: Scene, message: string, exception?: any) => void>,\r\n        pluginExtension?: Nullable<string>,\r\n        name?: string\r\n    ): void {\r\n        importAnimationsImplAsync(\r\n            rootUrl,\r\n            sceneFilename,\r\n            scene,\r\n            overwriteAnimations,\r\n            animationGroupLoadingMode,\r\n            targetConverter,\r\n            onSuccess,\r\n            onProgress,\r\n            onError,\r\n            pluginExtension,\r\n            name\r\n            // eslint-disable-next-line github/no-then\r\n        ).catch((error) => onError?.((scene ?? EngineStore.LastCreatedScene)!, error?.message, error));\r\n    }\r\n\r\n    /**\r\n     * Import animations from a file into a scene\r\n     * @param rootUrl a string that defines the root url for the scene and resources or the concatenation of rootURL and filename (e.g. http://example.com/test.glb)\r\n     * @param sceneFilename a string that defines the name of the scene file or starts with \"data:\" following by the stringified version of the scene or a File object (default: empty string)\r\n     * @param scene is the instance of BABYLON.Scene to append to (default: last created scene)\r\n     * @param overwriteAnimations when true, animations are cleaned before importing new ones. Animations are appended otherwise\r\n     * @param animationGroupLoadingMode defines how to handle old animations groups before importing new ones\r\n     * @param targetConverter defines a function used to convert animation targets from loaded scene to current scene (default: search node by name)\r\n     * @param onSuccess a callback with the scene when import succeeds\r\n     * @param onProgress a callback with a progress event for each file being loaded\r\n     * @param onError a callback with the scene, a message, and possibly an exception when import fails\r\n     * @param pluginExtension the extension used to determine the plugin\r\n     * @param name defines the filename, if the data is binary\r\n     * @returns the updated scene with imported animations\r\n     * @deprecated Please use the module level {@link ImportAnimationsAsync} instead\r\n     */\r\n    public static async ImportAnimationsAsync(\r\n        rootUrl: string,\r\n        sceneFilename?: SceneSource,\r\n        scene?: Nullable<Scene>,\r\n        overwriteAnimations?: boolean,\r\n        animationGroupLoadingMode?: SceneLoaderAnimationGroupLoadingMode,\r\n        targetConverter?: Nullable<(target: any) => any>,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        onSuccess?: Nullable<(scene: Scene) => void>,\r\n        onProgress?: Nullable<(event: ISceneLoaderProgressEvent) => void>,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        onError?: Nullable<(scene: Scene, message: string, exception?: any) => void>,\r\n        pluginExtension?: Nullable<string>,\r\n        name?: string\r\n    ): Promise<Scene> {\r\n        return await importAnimationsSharedAsync(rootUrl, sceneFilename, scene, overwriteAnimations, animationGroupLoadingMode, targetConverter, onProgress, pluginExtension, name);\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\n// \"Coroutines are computer program components that generalize subroutines for non-preemptive multitasking, by allowing execution to be suspended and resumed.\"\r\n// https://en.wikipedia.org/wiki/Coroutine\r\n\r\n// In this implementation, coroutines are typically created via generator functions (function* with yield statements).\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\r\n\r\n// In this implementation, the generator function (possibly parameterized) is referred to as a coroutine factory, and the returned iterator is referred to as the coroutine.\r\n// Technically yielding generator functions are not required - anything that implements the contract of Coroutine<T> can be run as a coroutine.\r\n\r\n// The coroutine is started with the first call to next on the iterator, it is suspended with yield statements, and it is resumed with additional calls to next on the iterator.\r\n// To create an object satisfying the Coroutine<T> contract with a generator function, it must not yield values, but rather only void via a plain \"yield;\" statement.\r\n// Coroutines can call other coroutines via:\r\n// 1. yield* someOtherCoroutine(); // If the called coroutine does not return a value\r\n// 2. const result = yield* someOtherCoroutine(); // If the called coroutine returns a value\r\n\r\n// Coroutines are run with the runCoroutine function, which takes a Coroutine<T>, a CoroutineScheduler<T>, and a success and error callback.\r\n// A scheduler is responsible for scheduling the next step of a coroutine, either synchronously or asynchronously.\r\n\r\n/**\r\n * A Coroutine<T> is the intersection of:\r\n * 1. An Iterator that yields void, returns a T, and is not passed values with calls to next.\r\n * 2. An IterableIterator of void (since it only yields void).\r\n */\r\ntype CoroutineBase<TStep, TReturn> = Iterator<TStep, TReturn, void> & IterableIterator<TStep>;\r\n/** @internal */\r\nexport type Coroutine<T> = CoroutineBase<void, T>;\r\n/** @internal */\r\nexport type AsyncCoroutine<T> = CoroutineBase<void | Promise<void>, T>;\r\n\r\n// A CoroutineStep<T> represents a single step of a coroutine, and is an IteratorResult as returned from Coroutine<T>.next().\r\n/** @internal */\r\nexport type CoroutineStep<T> = IteratorResult<void, T>;\r\n\r\n// A CoroutineScheduler<T> is responsible for scheduling the call to Coroutine<T>.next and invokes the success or error callback after next is called.\r\n/** @internal */\r\nexport type CoroutineScheduler<T> = (coroutine: AsyncCoroutine<T>, onStep: (stepResult: CoroutineStep<T>) => void, onError: (stepError: any) => void) => void;\r\n\r\n// The inline scheduler simply steps the coroutine synchronously. This is useful for running a coroutine synchronously, and also as a helper function for other schedulers.\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function inlineScheduler<T>(coroutine: AsyncCoroutine<T>, onStep: (stepResult: CoroutineStep<T>) => void, onError: (stepError: any) => void) {\r\n    try {\r\n        const step = coroutine.next();\r\n\r\n        if (step.done) {\r\n            onStep(step);\r\n        } else if (!step.value) {\r\n            // NOTE: The properties of step have been narrowed, but the type of step itself is not narrowed, so the cast below is the most type safe way to deal with this without instantiating a new object to hold the values.\r\n            onStep(step as { done: typeof step.done; value: typeof step.value });\r\n        } else {\r\n            // eslint-disable-next-line github/no-then\r\n            step.value.then(() => {\r\n                step.value = undefined;\r\n                onStep(step as { done: typeof step.done; value: typeof step.value });\r\n            }, onError);\r\n        }\r\n    } catch (error) {\r\n        onError(error);\r\n    }\r\n}\r\n\r\n// The yielding scheduler steps the coroutine synchronously until the specified time interval has elapsed, then yields control so other operations can be performed.\r\n// A single instance of a yielding scheduler could be shared across multiple coroutines to yield when their collective work exceeds the threshold.\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function createYieldingScheduler<T>(yieldAfterMS = 25) {\r\n    let startTime: number | undefined;\r\n    return (coroutine: AsyncCoroutine<T>, onStep: (stepResult: CoroutineStep<T>) => void, onError: (stepError: any) => void) => {\r\n        const currentTime = performance.now();\r\n\r\n        if (startTime === undefined || currentTime - startTime > yieldAfterMS) {\r\n            // If this is the first coroutine step, or if the time interval has elapsed, record a new start time, and schedule the coroutine step to happen later, effectively yielding control of the execution context.\r\n            startTime = currentTime;\r\n            setTimeout(() => {\r\n                inlineScheduler(coroutine, onStep, onError);\r\n            }, 0);\r\n        } else {\r\n            // Otherwise it is not time to yield yet, so step the coroutine synchronously.\r\n            inlineScheduler(coroutine, onStep, onError);\r\n        }\r\n    };\r\n}\r\n\r\n// Runs the specified coroutine with the specified scheduler. The success or error callback will be invoked when the coroutine finishes.\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function runCoroutine<T>(\r\n    coroutine: AsyncCoroutine<T>,\r\n    scheduler: CoroutineScheduler<T>,\r\n    onSuccess: (result: T) => void,\r\n    onError: (error: any) => void,\r\n    abortSignal?: AbortSignal\r\n) {\r\n    const resume = () => {\r\n        let reschedule: boolean | undefined;\r\n\r\n        const onStep = (stepResult: CoroutineStep<T>) => {\r\n            if (stepResult.done) {\r\n                // If the coroutine is done, report success.\r\n                onSuccess(stepResult.value);\r\n            } else {\r\n                // If the coroutine is not done, resume the coroutine (via the scheduler).\r\n                if (reschedule === undefined) {\r\n                    // If reschedule is undefined at this point, then the coroutine must have stepped synchronously, so just flag another loop iteration.\r\n                    reschedule = true;\r\n                } else {\r\n                    // If reschedule is defined at this point, then the coroutine must have stepped asynchronously, so call resume to restart the step loop.\r\n                    resume();\r\n                }\r\n            }\r\n        };\r\n\r\n        do {\r\n            reschedule = undefined;\r\n\r\n            if (!abortSignal || !abortSignal.aborted) {\r\n                scheduler(coroutine, onStep, onError);\r\n            } else {\r\n                onError(new Error(\"Aborted\"));\r\n            }\r\n\r\n            if (reschedule === undefined) {\r\n                // If reschedule is undefined at this point, then the coroutine must have stepped asynchronously, so stop looping and let the coroutine be resumed later.\r\n                reschedule = false;\r\n            }\r\n        } while (reschedule);\r\n    };\r\n\r\n    resume();\r\n}\r\n\r\n// Runs the specified coroutine synchronously.\r\n/**\r\n * @internal\r\n */\r\nexport function runCoroutineSync<T>(coroutine: Coroutine<T>, abortSignal?: AbortSignal): T {\r\n    // Run the coroutine with the inline scheduler, storing the returned value, or re-throwing the error (since the error callback will be called synchronously by the inline scheduler).\r\n    let result: T | undefined;\r\n    runCoroutine(\r\n        coroutine,\r\n        inlineScheduler,\r\n        (r: T) => (result = r),\r\n        (e: any) => {\r\n            throw e;\r\n        },\r\n        abortSignal\r\n    );\r\n\r\n    // Synchronously return the result of the coroutine.\r\n    return result!;\r\n}\r\n\r\n// Runs the specified coroutine asynchronously with the specified scheduler.\r\n/**\r\n * @internal\r\n */\r\nexport async function runCoroutineAsync<T>(coroutine: AsyncCoroutine<T>, scheduler: CoroutineScheduler<T>, abortSignal?: AbortSignal): Promise<T> {\r\n    // Run the coroutine with a yielding scheduler, resolving or rejecting the result promise when the coroutine finishes.\r\n    return await new Promise((resolve, reject) => {\r\n        runCoroutine(coroutine, scheduler, resolve, reject, abortSignal);\r\n    });\r\n}\r\n\r\n/**\r\n * Given a function that returns a Coroutine<T>, produce a function with the same parameters that returns a T.\r\n * The returned function runs the coroutine synchronously.\r\n * @param coroutineFactory A function that returns a Coroutine<T>.\r\n * @param abortSignal\r\n * @returns A function that runs the coroutine synchronously.\r\n * @internal\r\n */\r\nexport function makeSyncFunction<TParams extends unknown[], TReturn>(\r\n    coroutineFactory: (...params: TParams) => Coroutine<TReturn>,\r\n    abortSignal?: AbortSignal\r\n): (...params: TParams) => TReturn {\r\n    return (...params: TParams) => {\r\n        // Run the coroutine synchronously.\r\n        return runCoroutineSync(coroutineFactory(...params), abortSignal);\r\n    };\r\n}\r\n\r\n/**\r\n * Given a function that returns a Coroutine<T>, product a function with the same parameters that returns a Promise<T>.\r\n * The returned function runs the coroutine asynchronously, yield control of the execution context occasionally to enable a more responsive experience.\r\n * @param coroutineFactory A function that returns a Coroutine<T>.\r\n * @param scheduler\r\n * @param abortSignal\r\n * @returns A function that runs the coroutine asynchronously.\r\n * @internal\r\n */\r\nexport function makeAsyncFunction<TParams extends unknown[], TReturn>(\r\n    coroutineFactory: (...params: TParams) => AsyncCoroutine<TReturn>,\r\n    scheduler: CoroutineScheduler<TReturn>,\r\n    abortSignal?: AbortSignal\r\n): (...params: TParams) => Promise<TReturn> {\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async\r\n    return (...params: TParams) => {\r\n        // Run the coroutine asynchronously.\r\n        return runCoroutineAsync(coroutineFactory(...params), scheduler, abortSignal);\r\n    };\r\n}\r\n", "/* eslint-disable jsdoc/require-returns-check */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport type { Nullable, FloatArray, IndicesArray, DeepImmutable } from \"../types\";\r\nimport type { Matrix, Vector2 } from \"../Maths/math.vector\";\r\nimport { Vector3, Vector4, TmpVectors } from \"../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport type { Color3 } from \"../Maths/math.color\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { nativeOverride } from \"../Misc/decorators\";\r\nimport type { Coroutine } from \"../Misc/coroutine\";\r\nimport { makeSyncFunction, runCoroutineSync } from \"../Misc/coroutine\";\r\nimport type { ICreateCapsuleOptions } from \"./Builders/capsuleBuilder\";\r\nimport { RuntimeError, ErrorCodes } from \"../Misc/error\";\r\n\r\nimport type { Geometry } from \"../Meshes/geometry\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport { SubMesh } from \"./subMesh\";\r\n\r\n/**\r\n * Define an interface for all classes that will get and set the data on vertices\r\n */\r\nexport interface IGetSetVerticesData {\r\n    /**\r\n     * Gets a boolean indicating if specific vertex data is present\r\n     * @param kind defines the vertex data kind to use\r\n     * @returns true is data kind is present\r\n     */\r\n    isVerticesDataPresent(kind: string): boolean;\r\n    /**\r\n     * Gets a specific vertex data attached to this geometry. Float data is constructed if the vertex buffer data cannot be returned directly.\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param copyWhenShared defines if the returned array must be cloned upon returning it if the current geometry is shared between multiple meshes\r\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\r\n     * @returns a float array containing vertex data\r\n     */\r\n    getVerticesData(kind: string, copyWhenShared?: boolean, forceCopy?: boolean): Nullable<FloatArray>;\r\n    /**\r\n     * Returns an array of integers or a typed array (Int32Array, Uint32Array, Uint16Array) populated with the mesh indices.\r\n     * @param copyWhenShared If true (default false) and and if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one.\r\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\r\n     * @returns the indices array or an empty array if the mesh has no geometry\r\n     */\r\n    getIndices(copyWhenShared?: boolean, forceCopy?: boolean): Nullable<IndicesArray>;\r\n    /**\r\n     * Set specific vertex data\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param data defines the vertex data to use\r\n     * @param updatable defines if the vertex must be flagged as updatable (false as default)\r\n     * @param stride defines the stride to use (0 by default). This value is deduced from the kind value if not specified\r\n     */\r\n    setVerticesData(kind: string, data: FloatArray, updatable: boolean, stride?: number): void;\r\n    /**\r\n     * Update a specific associated vertex buffer\r\n     * @param kind defines which buffer to write to (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param data defines the data source\r\n     * @param updateExtends defines if extends info of the mesh must be updated (can be null). This is mostly useful for \"position\" kind\r\n     * @param makeItUnique defines if the geometry associated with the mesh must be cloned to make the change only for this mesh (and not all meshes associated with the same geometry)\r\n     */\r\n    updateVerticesData(kind: string, data: FloatArray, updateExtends?: boolean, makeItUnique?: boolean): void;\r\n    /**\r\n     * Creates a new index buffer\r\n     * @param indices defines the indices to store in the index buffer\r\n     * @param totalVertices defines the total number of vertices (could be null)\r\n     * @param updatable defines if the index buffer must be flagged as updatable (false by default)\r\n     */\r\n    setIndices(indices: IndicesArray, totalVertices: Nullable<number>, updatable?: boolean): void;\r\n}\r\n\r\n/** Class used to attach material info to sub section of a vertex data class */\r\nexport class VertexDataMaterialInfo {\r\n    /** Defines the material index to use */\r\n    public materialIndex: number;\r\n    /** Defines vertex index start*/\r\n    public verticesStart: number;\r\n    /** Defines vertices count */\r\n    public verticesCount: number;\r\n    /** Defines index start */\r\n    public indexStart: number;\r\n    /** Defines indices count */\r\n    public indexCount: number;\r\n}\r\n\r\n/**\r\n * Interface used to define a object like a vertex data structure\r\n */\r\nexport interface IVertexDataLike {\r\n    /**\r\n     * An array of the x, y, z position of each vertex  [...., x, y, z, .....]\r\n     */\r\n    positions: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of the x, y, z normal vector of each vertex  [...., x, y, z, .....]\r\n     */\r\n    normals?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of the x, y, z, w tangent vector of each vertex  [...., x, y, z, w, .....]\r\n     */\r\n    tangents?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    uvs?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A second array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    uvs2?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A third array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    uvs3?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A fourth array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    uvs4?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A fifth array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    uvs5?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A sixth array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    uvs6?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of the r, g, b, a, color of each vertex  [...., r, g, b, a, .....]\r\n     */\r\n    colors?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array containing the list of indices to the array of matrices produced by bones, each vertex have up to 4 indices (8 if the matricesIndicesExtra is set).\r\n     */\r\n    matricesIndices?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array containing the list of weights defining the weight of each indexed matrix in the final computation\r\n     */\r\n    matricesWeights?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array extending the number of possible indices\r\n     */\r\n    matricesIndicesExtra?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array extending the number of possible weights when the number of indices is extended\r\n     */\r\n    matricesWeightsExtra?: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of i, j, k the three vertex indices required for each triangular facet  [...., i, j, k .....]\r\n     */\r\n    indices?: Nullable<IndicesArray>;\r\n}\r\n\r\n/**\r\n * This class contains the various kinds of data on every vertex of a mesh used in determining its shape and appearance\r\n */\r\nexport class VertexData implements IVertexDataLike {\r\n    /**\r\n     * Mesh side orientation : usually the external or front surface\r\n     */\r\n    public static readonly FRONTSIDE = 0;\r\n    /**\r\n     * Mesh side orientation : usually the internal or back surface\r\n     */\r\n    public static readonly BACKSIDE = 1;\r\n    /**\r\n     * Mesh side orientation : both internal and external or front and back surfaces\r\n     */\r\n    public static readonly DOUBLESIDE = 2;\r\n    /**\r\n     * Mesh side orientation : by default, `FRONTSIDE`\r\n     */\r\n    public static readonly DEFAULTSIDE = 0;\r\n\r\n    private static _UniqueIdGenerator = 0;\r\n\r\n    /**\r\n     * An array of the x, y, z position of each vertex  [...., x, y, z, .....]\r\n     */\r\n    public positions: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of the x, y, z normal vector of each vertex  [...., x, y, z, .....]\r\n     */\r\n    public normals: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of the x, y, z, w tangent vector of each vertex  [...., x, y, z, w, .....]\r\n     */\r\n    public tangents: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    public uvs: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A second array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    public uvs2: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A third array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    public uvs3: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A fourth array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    public uvs4: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A fifth array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    public uvs5: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * A sixth array of u,v which maps a texture image onto each vertex  [...., u, v, .....]\r\n     */\r\n    public uvs6: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of the r, g, b, a, color of each vertex  [...., r, g, b, a, .....]\r\n     */\r\n    public colors: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array containing the list of indices to the array of matrices produced by bones, each vertex have up to 4 indices (8 if the matricesIndicesExtra is set).\r\n     */\r\n    public matricesIndices: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array containing the list of weights defining the weight of each indexed matrix in the final computation\r\n     */\r\n    public matricesWeights: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array extending the number of possible indices\r\n     */\r\n    public matricesIndicesExtra: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array extending the number of possible weights when the number of indices is extended\r\n     */\r\n    public matricesWeightsExtra: Nullable<FloatArray>;\r\n\r\n    /**\r\n     * An array of i, j, k the three vertex indices required for each triangular facet  [...., i, j, k .....]\r\n     */\r\n    public indices: Nullable<IndicesArray>;\r\n\r\n    /**\r\n     * An array defining material association for sub sections of the vertex data\r\n     */\r\n    public materialInfos: Nullable<Array<VertexDataMaterialInfo>>;\r\n\r\n    /**\r\n     * Gets the unique ID of this vertex Data\r\n     */\r\n    public uniqueId = 0;\r\n\r\n    /**\r\n     * Metadata used to store contextual values\r\n     */\r\n    public metadata: any = {};\r\n\r\n    /**\r\n     * Gets or sets a value indicating that the mesh must be flagged with hasVertexAlpha = true\r\n     */\r\n    public hasVertexAlpha: boolean;\r\n\r\n    /**\r\n     * Creates a new VertexData\r\n     */\r\n    public constructor() {\r\n        this.uniqueId = VertexData._UniqueIdGenerator;\r\n        VertexData._UniqueIdGenerator++;\r\n    }\r\n\r\n    /**\r\n     * Uses the passed data array to set the set the values for the specified kind of data\r\n     * @param data a linear array of floating numbers\r\n     * @param kind the type of data that is being set, eg positions, colors etc\r\n     */\r\n    public set(data: FloatArray, kind: string) {\r\n        if (!data.length) {\r\n            Logger.Warn(`Setting vertex data kind '${kind}' with an empty array`);\r\n        }\r\n\r\n        switch (kind) {\r\n            case VertexBuffer.PositionKind:\r\n                this.positions = data;\r\n                break;\r\n            case VertexBuffer.NormalKind:\r\n                this.normals = data;\r\n                break;\r\n            case VertexBuffer.TangentKind:\r\n                this.tangents = data;\r\n                break;\r\n            case VertexBuffer.UVKind:\r\n                this.uvs = data;\r\n                break;\r\n            case VertexBuffer.UV2Kind:\r\n                this.uvs2 = data;\r\n                break;\r\n            case VertexBuffer.UV3Kind:\r\n                this.uvs3 = data;\r\n                break;\r\n            case VertexBuffer.UV4Kind:\r\n                this.uvs4 = data;\r\n                break;\r\n            case VertexBuffer.UV5Kind:\r\n                this.uvs5 = data;\r\n                break;\r\n            case VertexBuffer.UV6Kind:\r\n                this.uvs6 = data;\r\n                break;\r\n            case VertexBuffer.ColorKind:\r\n                this.colors = data;\r\n                break;\r\n            case VertexBuffer.MatricesIndicesKind:\r\n                this.matricesIndices = data;\r\n                break;\r\n            case VertexBuffer.MatricesWeightsKind:\r\n                this.matricesWeights = data;\r\n                break;\r\n            case VertexBuffer.MatricesIndicesExtraKind:\r\n                this.matricesIndicesExtra = data;\r\n                break;\r\n            case VertexBuffer.MatricesWeightsExtraKind:\r\n                this.matricesWeightsExtra = data;\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Associates the vertexData to the passed Mesh.\r\n     * Sets it as updatable or not (default `false`)\r\n     * @param mesh the mesh the vertexData is applied to\r\n     * @param updatable when used and having the value true allows new data to update the vertexData\r\n     * @returns the VertexData\r\n     */\r\n    public applyToMesh(mesh: Mesh, updatable?: boolean): VertexData {\r\n        this._applyTo(mesh, updatable, false);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Associates the vertexData to the passed Geometry.\r\n     * Sets it as updatable or not (default `false`)\r\n     * @param geometry the geometry the vertexData is applied to\r\n     * @param updatable when used and having the value true allows new data to update the vertexData\r\n     * @returns VertexData\r\n     */\r\n    public applyToGeometry(geometry: Geometry, updatable?: boolean): VertexData {\r\n        this._applyTo(geometry, updatable, false);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the associated mesh\r\n     * @param mesh the mesh to be updated\r\n     * @returns VertexData\r\n     */\r\n    public updateMesh(mesh: Mesh): VertexData {\r\n        this._update(mesh);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the associated geometry\r\n     * @param geometry the geometry to be updated\r\n     * @returns VertexData.\r\n     */\r\n    public updateGeometry(geometry: Geometry): VertexData {\r\n        this._update(geometry);\r\n        return this;\r\n    }\r\n\r\n    private readonly _applyTo = makeSyncFunction(this._applyToCoroutine.bind(this));\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public *_applyToCoroutine(meshOrGeometry: IGetSetVerticesData, updatable: boolean = false, isAsync: boolean): Coroutine<VertexData> {\r\n        if (this.positions) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.PositionKind, this.positions, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.normals) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.NormalKind, this.normals, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.tangents) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.TangentKind, this.tangents, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.uvs) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.UVKind, this.uvs, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.uvs2) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.UV2Kind, this.uvs2, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.uvs3) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.UV3Kind, this.uvs3, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.uvs4) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.UV4Kind, this.uvs4, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.uvs5) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.UV5Kind, this.uvs5, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.uvs6) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.UV6Kind, this.uvs6, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.colors) {\r\n            const stride = this.positions && this.colors.length === this.positions.length ? 3 : 4;\r\n            meshOrGeometry.setVerticesData(VertexBuffer.ColorKind, this.colors, updatable, stride);\r\n            if (this.hasVertexAlpha && (meshOrGeometry as any).hasVertexAlpha !== undefined) {\r\n                (meshOrGeometry as any).hasVertexAlpha = true;\r\n            }\r\n\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.matricesIndices) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.MatricesIndicesKind, this.matricesIndices, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.matricesWeights) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.MatricesWeightsKind, this.matricesWeights, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.matricesIndicesExtra) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.MatricesIndicesExtraKind, this.matricesIndicesExtra, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.matricesWeightsExtra) {\r\n            meshOrGeometry.setVerticesData(VertexBuffer.MatricesWeightsExtraKind, this.matricesWeightsExtra, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        if (this.indices) {\r\n            meshOrGeometry.setIndices(this.indices, null, updatable);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        } else {\r\n            meshOrGeometry.setIndices([], null);\r\n        }\r\n\r\n        if ((meshOrGeometry as Mesh).subMeshes && this.materialInfos && this.materialInfos.length > 1) {\r\n            const mesh = meshOrGeometry as Mesh;\r\n            mesh.subMeshes = [];\r\n            for (const matInfo of this.materialInfos) {\r\n                new SubMesh(matInfo.materialIndex, matInfo.verticesStart, matInfo.verticesCount, matInfo.indexStart, matInfo.indexCount, mesh);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private _update(meshOrGeometry: IGetSetVerticesData, updateExtends?: boolean, makeItUnique?: boolean): VertexData {\r\n        if (this.positions) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.PositionKind, this.positions, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.normals) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.NormalKind, this.normals, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.tangents) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.TangentKind, this.tangents, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.uvs) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.UVKind, this.uvs, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.uvs2) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.UV2Kind, this.uvs2, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.uvs3) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.UV3Kind, this.uvs3, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.uvs4) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.UV4Kind, this.uvs4, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.uvs5) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.UV5Kind, this.uvs5, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.uvs6) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.UV6Kind, this.uvs6, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.colors) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.ColorKind, this.colors, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.matricesIndices) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.MatricesIndicesKind, this.matricesIndices, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.matricesWeights) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.MatricesWeightsKind, this.matricesWeights, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.matricesIndicesExtra) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.MatricesIndicesExtraKind, this.matricesIndicesExtra, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.matricesWeightsExtra) {\r\n            meshOrGeometry.updateVerticesData(VertexBuffer.MatricesWeightsExtraKind, this.matricesWeightsExtra, updateExtends, makeItUnique);\r\n        }\r\n\r\n        if (this.indices) {\r\n            meshOrGeometry.setIndices(this.indices, null);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    @nativeOverride.filter((...[coordinates]: Parameters<typeof VertexData._TransformVector3Coordinates>) => !Array.isArray(coordinates))\r\n    private static _TransformVector3Coordinates(coordinates: FloatArray, transformation: DeepImmutable<Matrix>, offset = 0, length = coordinates.length) {\r\n        const coordinate = TmpVectors.Vector3[0];\r\n        const transformedCoordinate = TmpVectors.Vector3[1];\r\n        for (let index = offset; index < offset + length; index += 3) {\r\n            Vector3.FromArrayToRef(coordinates, index, coordinate);\r\n            Vector3.TransformCoordinatesToRef(coordinate, transformation, transformedCoordinate);\r\n            coordinates[index] = transformedCoordinate.x;\r\n            coordinates[index + 1] = transformedCoordinate.y;\r\n            coordinates[index + 2] = transformedCoordinate.z;\r\n        }\r\n    }\r\n\r\n    @nativeOverride.filter((...[normals]: Parameters<typeof VertexData._TransformVector3Normals>) => !Array.isArray(normals))\r\n    private static _TransformVector3Normals(normals: FloatArray, transformation: DeepImmutable<Matrix>, offset = 0, length = normals.length) {\r\n        const normal = TmpVectors.Vector3[0];\r\n        const transformedNormal = TmpVectors.Vector3[1];\r\n        for (let index = offset; index < offset + length; index += 3) {\r\n            Vector3.FromArrayToRef(normals, index, normal);\r\n            Vector3.TransformNormalToRef(normal, transformation, transformedNormal);\r\n            normals[index] = transformedNormal.x;\r\n            normals[index + 1] = transformedNormal.y;\r\n            normals[index + 2] = transformedNormal.z;\r\n        }\r\n    }\r\n\r\n    @nativeOverride.filter((...[normals]: Parameters<typeof VertexData._TransformVector4Normals>) => !Array.isArray(normals))\r\n    private static _TransformVector4Normals(normals: FloatArray, transformation: DeepImmutable<Matrix>, offset = 0, length = normals.length) {\r\n        const normal = TmpVectors.Vector4[0];\r\n        const transformedNormal = TmpVectors.Vector4[1];\r\n        for (let index = offset; index < offset + length; index += 4) {\r\n            Vector4.FromArrayToRef(normals, index, normal);\r\n            Vector4.TransformNormalToRef(normal, transformation, transformedNormal);\r\n            normals[index] = transformedNormal.x;\r\n            normals[index + 1] = transformedNormal.y;\r\n            normals[index + 2] = transformedNormal.z;\r\n            normals[index + 3] = transformedNormal.w;\r\n        }\r\n    }\r\n\r\n    @nativeOverride.filter((...[indices]: Parameters<typeof VertexData._FlipFaces>) => !Array.isArray(indices))\r\n    private static _FlipFaces(indices: IndicesArray, offset = 0, length = indices.length) {\r\n        for (let index = offset; index < offset + length; index += 3) {\r\n            const tmp = indices[index + 1];\r\n            indices[index + 1] = indices[index + 2];\r\n            indices[index + 2] = tmp;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transforms each position and each normal of the vertexData according to the passed Matrix\r\n     * @param matrix the transforming matrix\r\n     * @returns the VertexData\r\n     */\r\n    public transform(matrix: Matrix): VertexData {\r\n        const flip = matrix.determinant() < 0;\r\n        if (this.positions) {\r\n            VertexData._TransformVector3Coordinates(this.positions, matrix);\r\n        }\r\n\r\n        if (this.normals) {\r\n            VertexData._TransformVector3Normals(this.normals, matrix);\r\n        }\r\n\r\n        if (this.tangents) {\r\n            VertexData._TransformVector4Normals(this.tangents, matrix);\r\n        }\r\n\r\n        if (flip && this.indices) {\r\n            VertexData._FlipFaces(this.indices);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Generates an array of vertex data where each vertex data only has one material info\r\n     * @returns An array of VertexData\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public splitBasedOnMaterialID() {\r\n        if (!this.materialInfos || this.materialInfos.length < 2) {\r\n            return [this];\r\n        }\r\n\r\n        const result: VertexData[] = [];\r\n        for (const materialInfo of this.materialInfos) {\r\n            const vertexData = new VertexData();\r\n\r\n            if (this.positions) {\r\n                vertexData.positions = this.positions.slice(materialInfo.verticesStart * 3, (materialInfo.verticesCount + materialInfo.verticesStart) * 3);\r\n            }\r\n\r\n            if (this.normals) {\r\n                vertexData.normals = this.normals.slice(materialInfo.verticesStart * 3, (materialInfo.verticesCount + materialInfo.verticesStart) * 3);\r\n            }\r\n\r\n            if (this.tangents) {\r\n                vertexData.tangents = this.tangents.slice(materialInfo.verticesStart * 4, (materialInfo.verticesCount + materialInfo.verticesStart) * 4);\r\n            }\r\n\r\n            if (this.colors) {\r\n                vertexData.colors = this.colors.slice(materialInfo.verticesStart * 4, (materialInfo.verticesCount + materialInfo.verticesStart) * 4);\r\n            }\r\n\r\n            if (this.uvs) {\r\n                vertexData.uvs = this.uvs.slice(materialInfo.verticesStart * 2, (materialInfo.verticesCount + materialInfo.verticesStart) * 2);\r\n            }\r\n\r\n            if (this.uvs2) {\r\n                vertexData.uvs2 = this.uvs2.slice(materialInfo.verticesStart * 2, (materialInfo.verticesCount + materialInfo.verticesStart) * 2);\r\n            }\r\n\r\n            if (this.uvs3) {\r\n                vertexData.uvs3 = this.uvs3.slice(materialInfo.verticesStart * 2, (materialInfo.verticesCount + materialInfo.verticesStart) * 2);\r\n            }\r\n\r\n            if (this.uvs4) {\r\n                vertexData.uvs4 = this.uvs4.slice(materialInfo.verticesStart * 2, (materialInfo.verticesCount + materialInfo.verticesStart) * 2);\r\n            }\r\n\r\n            if (this.uvs5) {\r\n                vertexData.uvs5 = this.uvs5.slice(materialInfo.verticesStart * 2, (materialInfo.verticesCount + materialInfo.verticesStart) * 2);\r\n            }\r\n\r\n            if (this.uvs6) {\r\n                vertexData.uvs6 = this.uvs6.slice(materialInfo.verticesStart * 2, (materialInfo.verticesCount + materialInfo.verticesStart) * 2);\r\n            }\r\n\r\n            if (this.matricesIndices) {\r\n                vertexData.matricesIndices = this.matricesIndices.slice(materialInfo.verticesStart * 4, (materialInfo.verticesCount + materialInfo.verticesStart) * 4);\r\n            }\r\n\r\n            if (this.matricesIndicesExtra) {\r\n                vertexData.matricesIndicesExtra = this.matricesIndicesExtra.slice(materialInfo.verticesStart * 4, (materialInfo.verticesCount + materialInfo.verticesStart) * 4);\r\n            }\r\n\r\n            if (this.matricesWeights) {\r\n                vertexData.matricesWeights = this.matricesWeights.slice(materialInfo.verticesStart * 4, (materialInfo.verticesCount + materialInfo.verticesStart) * 4);\r\n            }\r\n\r\n            if (this.matricesWeightsExtra) {\r\n                vertexData.matricesWeightsExtra = this.matricesWeightsExtra.slice(materialInfo.verticesStart * 4, (materialInfo.verticesCount + materialInfo.verticesStart) * 4);\r\n            }\r\n\r\n            if (this.indices) {\r\n                vertexData.indices = [];\r\n                for (let index = materialInfo.indexStart; index < materialInfo.indexStart + materialInfo.indexCount; index++) {\r\n                    vertexData.indices.push(this.indices[index] - materialInfo.verticesStart);\r\n                }\r\n            }\r\n\r\n            const newMaterialInfo = new VertexDataMaterialInfo();\r\n            newMaterialInfo.indexStart = 0;\r\n            newMaterialInfo.indexCount = vertexData.indices ? vertexData.indices.length : 0;\r\n            newMaterialInfo.materialIndex = materialInfo.materialIndex;\r\n            newMaterialInfo.verticesStart = 0;\r\n            newMaterialInfo.verticesCount = (vertexData.positions ? vertexData.positions.length : 0) / 3;\r\n            vertexData.materialInfos = [newMaterialInfo];\r\n\r\n            result.push(vertexData);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Merges the passed VertexData into the current one\r\n     * @param others the VertexData to be merged into the current one\r\n     * @param use32BitsIndices defines a boolean indicating if indices must be store in a 32 bits array\r\n     * @param forceCloneIndices defines a boolean indicating if indices are forced to be cloned\r\n     * @param mergeMaterialIds defines a boolean indicating if we need to merge the material infos\r\n     * @param enableCompletion defines a boolean indicating if the vertex data should be completed to be compatible\r\n     * @returns the modified VertexData\r\n     */\r\n    public merge(others: VertexData | VertexData[], use32BitsIndices = false, forceCloneIndices = false, mergeMaterialIds = false, enableCompletion = false) {\r\n        const vertexDatas: { vertexData: VertexData; transform?: Matrix }[] = Array.isArray(others)\r\n            ? others.map((other) => {\r\n                  return { vertexData: other };\r\n              })\r\n            : [{ vertexData: others }];\r\n        return runCoroutineSync(this._mergeCoroutine(undefined, vertexDatas, use32BitsIndices, false, forceCloneIndices, mergeMaterialIds, enableCompletion));\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public *_mergeCoroutine(\r\n        transform: Matrix | undefined,\r\n        vertexDatas: { vertexData: VertexData; transform?: Matrix }[],\r\n        use32BitsIndices = false,\r\n        isAsync: boolean,\r\n        forceCloneIndices: boolean,\r\n        mergeMaterialIds = false,\r\n        enableCompletion = false\r\n    ): Coroutine<VertexData> {\r\n        this._validate();\r\n\r\n        let others = vertexDatas.map((vertexData) => vertexData.vertexData);\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        let root: VertexData = this;\r\n\r\n        if (enableCompletion) {\r\n            // First let's make sure we have the max set of attributes on the main vertex data\r\n            for (const other of others) {\r\n                if (!other) {\r\n                    continue;\r\n                }\r\n\r\n                other._validate();\r\n\r\n                if (!this.normals && other.normals) {\r\n                    this.normals = new Float32Array(this.positions!.length);\r\n                }\r\n\r\n                if (!this.tangents && other.tangents) {\r\n                    this.tangents = new Float32Array((this.positions!.length / 3) * 4);\r\n                }\r\n\r\n                if (!this.uvs && other.uvs) {\r\n                    this.uvs = new Float32Array((this.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (!this.uvs2 && other.uvs2) {\r\n                    this.uvs2 = new Float32Array((this.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (!this.uvs3 && other.uvs3) {\r\n                    this.uvs3 = new Float32Array((this.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (!this.uvs4 && other.uvs4) {\r\n                    this.uvs4 = new Float32Array((this.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (!this.uvs5 && other.uvs5) {\r\n                    this.uvs5 = new Float32Array((this.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (!this.uvs6 && other.uvs6) {\r\n                    this.uvs6 = new Float32Array((this.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (!this.colors && other.colors) {\r\n                    this.colors = new Float32Array((this.positions!.length / 3) * 4);\r\n                    this.colors.fill(1); // Set to white by default\r\n                }\r\n\r\n                if (!this.matricesIndices && other.matricesIndices) {\r\n                    this.matricesIndices = new Float32Array((this.positions!.length / 3) * 4);\r\n                }\r\n\r\n                if (!this.matricesWeights && other.matricesWeights) {\r\n                    this.matricesWeights = new Float32Array((this.positions!.length / 3) * 4);\r\n                }\r\n\r\n                if (!this.matricesIndicesExtra && other.matricesIndicesExtra) {\r\n                    this.matricesIndicesExtra = new Float32Array((this.positions!.length / 3) * 4);\r\n                }\r\n\r\n                if (!this.matricesWeightsExtra && other.matricesWeightsExtra) {\r\n                    this.matricesWeightsExtra = new Float32Array((this.positions!.length / 3) * 4);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const other of others) {\r\n            if (!other) {\r\n                continue;\r\n            }\r\n\r\n            if (!enableCompletion) {\r\n                other._validate();\r\n                if (\r\n                    !this.normals !== !other.normals ||\r\n                    !this.tangents !== !other.tangents ||\r\n                    !this.uvs !== !other.uvs ||\r\n                    !this.uvs2 !== !other.uvs2 ||\r\n                    !this.uvs3 !== !other.uvs3 ||\r\n                    !this.uvs4 !== !other.uvs4 ||\r\n                    !this.uvs5 !== !other.uvs5 ||\r\n                    !this.uvs6 !== !other.uvs6 ||\r\n                    !this.colors !== !other.colors ||\r\n                    !this.matricesIndices !== !other.matricesIndices ||\r\n                    !this.matricesWeights !== !other.matricesWeights ||\r\n                    !this.matricesIndicesExtra !== !other.matricesIndicesExtra ||\r\n                    !this.matricesWeightsExtra !== !other.matricesWeightsExtra\r\n                ) {\r\n                    throw new Error(\"Cannot merge vertex data that do not have the same set of attributes\");\r\n                }\r\n            } else {\r\n                // Align the others with main set of attributes\r\n                if (this.normals && !other.normals) {\r\n                    other.normals = new Float32Array(other.positions!.length);\r\n                }\r\n\r\n                if (this.tangents && !other.tangents) {\r\n                    other.tangents = new Float32Array((other.positions!.length / 3) * 4);\r\n                }\r\n\r\n                if (this.uvs && !other.uvs) {\r\n                    other.uvs = new Float32Array((other.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (this.uvs2 && !other.uvs2) {\r\n                    other.uvs2 = new Float32Array((other.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (this.uvs3 && !other.uvs3) {\r\n                    other.uvs3 = new Float32Array((other.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (this.uvs4 && !other.uvs4) {\r\n                    other.uvs4 = new Float32Array((other.positions!.length / 3) * 2);\r\n                }\r\n                if (this.uvs5 && !other.uvs5) {\r\n                    other.uvs5 = new Float32Array((other.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (this.uvs6 && !other.uvs6) {\r\n                    other.uvs6 = new Float32Array((other.positions!.length / 3) * 2);\r\n                }\r\n\r\n                if (this.colors && !other.colors) {\r\n                    other.colors = new Float32Array((other.positions!.length / 3) * 4);\r\n                    other.colors.fill(1); // Set to white by default\r\n                }\r\n\r\n                if (this.matricesIndices && !other.matricesIndices) {\r\n                    other.matricesIndices = new Float32Array((other.positions!.length / 3) * 4);\r\n                }\r\n                if (this.matricesWeights && !other.matricesWeights) {\r\n                    other.matricesWeights = new Float32Array((other.positions!.length / 3) * 4);\r\n                }\r\n\r\n                if (this.matricesIndicesExtra && !other.matricesIndicesExtra) {\r\n                    other.matricesIndicesExtra = new Float32Array((other.positions!.length / 3) * 4);\r\n                }\r\n\r\n                if (this.matricesWeightsExtra && !other.matricesWeightsExtra) {\r\n                    other.matricesWeightsExtra = new Float32Array((other.positions!.length / 3) * 4);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (mergeMaterialIds) {\r\n            // Merge material infos\r\n            let materialIndex = 0;\r\n            let indexOffset = 0;\r\n            let vertexOffset = 0;\r\n            const materialInfos: VertexDataMaterialInfo[] = [];\r\n            let currentMaterialInfo: Nullable<VertexDataMaterialInfo> = null;\r\n            const vertexDataList: { vertexData: VertexData; transform?: Matrix }[] = [];\r\n\r\n            // We need to split vertexData with more than one materialInfo\r\n            for (const split of this.splitBasedOnMaterialID()) {\r\n                vertexDataList.push({ vertexData: split, transform: transform });\r\n            }\r\n\r\n            for (const data of vertexDatas) {\r\n                if (!data.vertexData) {\r\n                    continue;\r\n                }\r\n                for (const split of data.vertexData.splitBasedOnMaterialID()) {\r\n                    vertexDataList.push({ vertexData: split, transform: data.transform });\r\n                }\r\n            }\r\n\r\n            // Sort by material IDs\r\n            vertexDataList.sort((a, b) => {\r\n                const matInfoA = a.vertexData.materialInfos ? a.vertexData.materialInfos[0].materialIndex : 0;\r\n                const matInfoB = b.vertexData.materialInfos ? b.vertexData.materialInfos[0].materialIndex : 0;\r\n\r\n                if (matInfoA > matInfoB) {\r\n                    return 1;\r\n                }\r\n\r\n                if (matInfoA === matInfoB) {\r\n                    return 0;\r\n                }\r\n\r\n                return -1;\r\n            });\r\n\r\n            // Build the new material info\r\n            for (const vertexDataSource of vertexDataList) {\r\n                const vertexData = vertexDataSource.vertexData;\r\n                if (vertexData.materialInfos) {\r\n                    materialIndex = vertexData.materialInfos[0].materialIndex;\r\n                } else {\r\n                    materialIndex = 0;\r\n                }\r\n                if (currentMaterialInfo && currentMaterialInfo.materialIndex === materialIndex) {\r\n                    currentMaterialInfo.indexCount += vertexData.indices!.length;\r\n                    currentMaterialInfo.verticesCount += vertexData.positions!.length / 3;\r\n                } else {\r\n                    const materialInfo = new VertexDataMaterialInfo();\r\n                    materialInfo.materialIndex = materialIndex;\r\n                    materialInfo.indexStart = indexOffset;\r\n                    materialInfo.indexCount = vertexData.indices!.length;\r\n                    materialInfo.verticesStart = vertexOffset;\r\n                    materialInfo.verticesCount = vertexData.positions!.length / 3;\r\n\r\n                    materialInfos.push(materialInfo);\r\n                    currentMaterialInfo = materialInfo;\r\n                }\r\n                indexOffset += vertexData.indices!.length;\r\n                vertexOffset += vertexData.positions!.length / 3;\r\n            }\r\n            // Extract sorted values\r\n            const first = vertexDataList.splice(0, 1)[0];\r\n            root = first.vertexData;\r\n            transform = first.transform;\r\n            others = vertexDataList.map((v) => v.vertexData);\r\n            vertexDatas = vertexDataList;\r\n\r\n            this.materialInfos = materialInfos;\r\n        }\r\n\r\n        // Merge geometries\r\n        const totalIndices = others.reduce((indexSum, vertexData) => indexSum + (vertexData.indices?.length ?? 0), root.indices?.length ?? 0);\r\n        const sliceIndices = forceCloneIndices || others.some((vertexData) => vertexData.indices === root.indices);\r\n        let indices = sliceIndices ? root.indices?.slice() : root.indices;\r\n        if (totalIndices > 0) {\r\n            let indicesOffset = indices?.length ?? 0;\r\n\r\n            if (!indices) {\r\n                indices = new Array<number>(totalIndices);\r\n            }\r\n\r\n            if (indices.length !== totalIndices) {\r\n                if (Array.isArray(indices)) {\r\n                    indices.length = totalIndices;\r\n                } else {\r\n                    const temp = use32BitsIndices || indices instanceof Uint32Array ? new Uint32Array(totalIndices) : new Uint16Array(totalIndices);\r\n                    temp.set(indices);\r\n                    indices = temp;\r\n                }\r\n\r\n                if (transform && transform.determinant() < 0) {\r\n                    VertexData._FlipFaces(indices, 0, indicesOffset);\r\n                }\r\n            }\r\n\r\n            let positionsOffset = root.positions ? root.positions.length / 3 : 0;\r\n            for (const { vertexData: other, transform } of vertexDatas) {\r\n                if (other.indices) {\r\n                    for (let index = 0; index < other.indices.length; index++) {\r\n                        indices[indicesOffset + index] = other.indices[index] + positionsOffset;\r\n                    }\r\n\r\n                    if (transform && transform.determinant() < 0) {\r\n                        VertexData._FlipFaces(indices, indicesOffset, other.indices.length);\r\n                    }\r\n\r\n                    // The call to _validate already checked for positions\r\n                    positionsOffset += other.positions!.length / 3;\r\n                    indicesOffset += other.indices.length;\r\n\r\n                    if (isAsync) {\r\n                        yield;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.indices = indices!;\r\n\r\n        this.positions = VertexData._MergeElement(\r\n            VertexBuffer.PositionKind,\r\n            root.positions,\r\n            transform,\r\n            vertexDatas.map((other) => [other.vertexData.positions, other.transform])\r\n        );\r\n        if (isAsync) {\r\n            yield;\r\n        }\r\n        if (root.normals) {\r\n            this.normals = VertexData._MergeElement(\r\n                VertexBuffer.NormalKind,\r\n                root.normals,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.normals, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.tangents) {\r\n            this.tangents = VertexData._MergeElement(\r\n                VertexBuffer.TangentKind,\r\n                root.tangents,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.tangents, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.uvs) {\r\n            this.uvs = VertexData._MergeElement(\r\n                VertexBuffer.UVKind,\r\n                root.uvs,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.uvs, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.uvs2) {\r\n            this.uvs2 = VertexData._MergeElement(\r\n                VertexBuffer.UV2Kind,\r\n                root.uvs2,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.uvs2, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.uvs3) {\r\n            this.uvs3 = VertexData._MergeElement(\r\n                VertexBuffer.UV3Kind,\r\n                root.uvs3,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.uvs3, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.uvs4) {\r\n            this.uvs4 = VertexData._MergeElement(\r\n                VertexBuffer.UV4Kind,\r\n                root.uvs4,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.uvs4, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.uvs5) {\r\n            this.uvs5 = VertexData._MergeElement(\r\n                VertexBuffer.UV5Kind,\r\n                root.uvs5,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.uvs5, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.uvs6) {\r\n            this.uvs6 = VertexData._MergeElement(\r\n                VertexBuffer.UV6Kind,\r\n                root.uvs6,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.uvs6, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.colors) {\r\n            this.colors = VertexData._MergeElement(\r\n                VertexBuffer.ColorKind,\r\n                root.colors,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.colors, other.transform])\r\n            );\r\n            if (root.hasVertexAlpha !== undefined || vertexDatas.some((other) => other.vertexData.hasVertexAlpha !== undefined)) {\r\n                this.hasVertexAlpha = root.hasVertexAlpha || vertexDatas.some((other) => other.vertexData.hasVertexAlpha);\r\n            }\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.matricesIndices) {\r\n            this.matricesIndices = VertexData._MergeElement(\r\n                VertexBuffer.MatricesIndicesKind,\r\n                root.matricesIndices,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.matricesIndices, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.matricesWeights) {\r\n            this.matricesWeights = VertexData._MergeElement(\r\n                VertexBuffer.MatricesWeightsKind,\r\n                root.matricesWeights,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.matricesWeights, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.matricesIndicesExtra) {\r\n            this.matricesIndicesExtra = VertexData._MergeElement(\r\n                VertexBuffer.MatricesIndicesExtraKind,\r\n                root.matricesIndicesExtra,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.matricesIndicesExtra, other.transform])\r\n            );\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n        if (root.matricesWeightsExtra) {\r\n            this.matricesWeightsExtra = VertexData._MergeElement(\r\n                VertexBuffer.MatricesWeightsExtraKind,\r\n                root.matricesWeightsExtra,\r\n                transform,\r\n                vertexDatas.map((other) => [other.vertexData.matricesWeightsExtra, other.transform])\r\n            );\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private static _MergeElement(\r\n        kind: string,\r\n        source: Nullable<FloatArray>,\r\n        transform: Matrix | undefined,\r\n        others: readonly (readonly [element: Nullable<FloatArray>, transform?: Matrix])[]\r\n    ): Nullable<FloatArray> {\r\n        const nonNullOthers = others.filter((other): other is [element: FloatArray, transform?: Matrix] => other[0] !== null && other[0] !== undefined);\r\n\r\n        // If there is no source to copy and no other non-null sources then skip this element.\r\n        if (!source && nonNullOthers.length == 0) {\r\n            return source;\r\n        }\r\n\r\n        if (!source) {\r\n            return this._MergeElement(kind, nonNullOthers[0][0], nonNullOthers[0][1], nonNullOthers.slice(1));\r\n        }\r\n\r\n        const len = nonNullOthers.reduce((sumLen, elements) => sumLen + elements[0].length, source.length);\r\n\r\n        const transformRange =\r\n            kind === VertexBuffer.PositionKind\r\n                ? VertexData._TransformVector3Coordinates\r\n                : kind === VertexBuffer.NormalKind\r\n                  ? VertexData._TransformVector3Normals\r\n                  : kind === VertexBuffer.TangentKind\r\n                    ? VertexData._TransformVector4Normals\r\n                    : () => {};\r\n\r\n        if (source instanceof Float32Array) {\r\n            // use non-loop method when the source is Float32Array\r\n            const ret32 = new Float32Array(len);\r\n            ret32.set(source);\r\n            transform && transformRange(ret32, transform, 0, source.length);\r\n\r\n            let offset = source.length;\r\n            for (const [vertexData, transform] of nonNullOthers) {\r\n                ret32.set(vertexData, offset);\r\n                transform && transformRange(ret32, transform, offset, vertexData.length);\r\n                offset += vertexData.length;\r\n            }\r\n            return ret32;\r\n        } else {\r\n            // don't use concat as it is super slow, just loop for other cases\r\n            const ret = new Array<number>(len);\r\n            for (let i = 0; i < source.length; i++) {\r\n                ret[i] = source[i];\r\n            }\r\n            transform && transformRange(ret, transform, 0, source.length);\r\n\r\n            let offset = source.length;\r\n            for (const [vertexData, transform] of nonNullOthers) {\r\n                for (let i = 0; i < vertexData.length; i++) {\r\n                    ret[offset + i] = vertexData[i];\r\n                }\r\n                transform && transformRange(ret, transform, offset, vertexData.length);\r\n                offset += vertexData.length;\r\n            }\r\n            return ret;\r\n        }\r\n    }\r\n\r\n    private _validate(): void {\r\n        if (!this.positions) {\r\n            throw new RuntimeError(\"Positions are required\", ErrorCodes.MeshInvalidPositionsError);\r\n        }\r\n\r\n        const getElementCount = (kind: string, values: FloatArray) => {\r\n            const stride = VertexBuffer.DeduceStride(kind);\r\n            if (values.length % stride !== 0) {\r\n                throw new Error(\"The \" + kind + \"s array count must be a multiple of \" + stride);\r\n            }\r\n\r\n            return values.length / stride;\r\n        };\r\n\r\n        const positionsElementCount = getElementCount(VertexBuffer.PositionKind, this.positions);\r\n\r\n        const validateElementCount = (kind: string, values: FloatArray) => {\r\n            const elementCount = getElementCount(kind, values);\r\n            if (elementCount !== positionsElementCount) {\r\n                throw new Error(\"The \" + kind + \"s element count (\" + elementCount + \") does not match the positions count (\" + positionsElementCount + \")\");\r\n            }\r\n        };\r\n\r\n        if (this.normals) {\r\n            validateElementCount(VertexBuffer.NormalKind, this.normals);\r\n        }\r\n        if (this.tangents) {\r\n            validateElementCount(VertexBuffer.TangentKind, this.tangents);\r\n        }\r\n        if (this.uvs) {\r\n            validateElementCount(VertexBuffer.UVKind, this.uvs);\r\n        }\r\n        if (this.uvs2) {\r\n            validateElementCount(VertexBuffer.UV2Kind, this.uvs2);\r\n        }\r\n        if (this.uvs3) {\r\n            validateElementCount(VertexBuffer.UV3Kind, this.uvs3);\r\n        }\r\n        if (this.uvs4) {\r\n            validateElementCount(VertexBuffer.UV4Kind, this.uvs4);\r\n        }\r\n        if (this.uvs5) {\r\n            validateElementCount(VertexBuffer.UV5Kind, this.uvs5);\r\n        }\r\n        if (this.uvs6) {\r\n            validateElementCount(VertexBuffer.UV6Kind, this.uvs6);\r\n        }\r\n        if (this.colors) {\r\n            validateElementCount(VertexBuffer.ColorKind, this.colors);\r\n        }\r\n        if (this.matricesIndices) {\r\n            validateElementCount(VertexBuffer.MatricesIndicesKind, this.matricesIndices);\r\n        }\r\n        if (this.matricesWeights) {\r\n            validateElementCount(VertexBuffer.MatricesWeightsKind, this.matricesWeights);\r\n        }\r\n        if (this.matricesIndicesExtra) {\r\n            validateElementCount(VertexBuffer.MatricesIndicesExtraKind, this.matricesIndicesExtra);\r\n        }\r\n        if (this.matricesWeightsExtra) {\r\n            validateElementCount(VertexBuffer.MatricesWeightsExtraKind, this.matricesWeightsExtra);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clone the current vertex data\r\n     * @returns a copy of the current data\r\n     */\r\n    public clone() {\r\n        const serializationObject = this.serialize();\r\n        return VertexData.Parse(serializationObject);\r\n    }\r\n\r\n    /**\r\n     * Serializes the VertexData\r\n     * @returns a serialized object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        if (this.positions) {\r\n            serializationObject.positions = Array.from(this.positions);\r\n        }\r\n\r\n        if (this.normals) {\r\n            serializationObject.normals = Array.from(this.normals);\r\n        }\r\n\r\n        if (this.tangents) {\r\n            serializationObject.tangents = Array.from(this.tangents);\r\n        }\r\n\r\n        if (this.uvs) {\r\n            serializationObject.uvs = Array.from(this.uvs);\r\n        }\r\n\r\n        if (this.uvs2) {\r\n            serializationObject.uvs2 = Array.from(this.uvs2);\r\n        }\r\n\r\n        if (this.uvs3) {\r\n            serializationObject.uvs3 = Array.from(this.uvs3);\r\n        }\r\n\r\n        if (this.uvs4) {\r\n            serializationObject.uvs4 = Array.from(this.uvs4);\r\n        }\r\n\r\n        if (this.uvs5) {\r\n            serializationObject.uvs5 = Array.from(this.uvs5);\r\n        }\r\n\r\n        if (this.uvs6) {\r\n            serializationObject.uvs6 = Array.from(this.uvs6);\r\n        }\r\n\r\n        if (this.colors) {\r\n            serializationObject.colors = Array.from(this.colors);\r\n            serializationObject.hasVertexAlpha = this.hasVertexAlpha;\r\n        }\r\n\r\n        if (this.matricesIndices) {\r\n            serializationObject.matricesIndices = Array.from(this.matricesIndices);\r\n            serializationObject.matricesIndicesExpanded = true;\r\n        }\r\n\r\n        if (this.matricesWeights) {\r\n            serializationObject.matricesWeights = Array.from(this.matricesWeights);\r\n        }\r\n\r\n        if (this.matricesIndicesExtra) {\r\n            serializationObject.matricesIndicesExtra = Array.from(this.matricesIndicesExtra);\r\n            serializationObject.matricesIndicesExtraExpanded = true;\r\n        }\r\n\r\n        if (this.matricesWeightsExtra) {\r\n            serializationObject.matricesWeightsExtra = Array.from(this.matricesWeightsExtra);\r\n        }\r\n\r\n        serializationObject.indices = this.indices ? Array.from(this.indices as number[]) : [];\r\n\r\n        if (this.materialInfos) {\r\n            serializationObject.materialInfos = [];\r\n            for (const materialInfo of this.materialInfos) {\r\n                const materialInfoSerializationObject = {\r\n                    indexStart: materialInfo.indexStart,\r\n                    indexCount: materialInfo.indexCount,\r\n                    materialIndex: materialInfo.materialIndex,\r\n                    verticesStart: materialInfo.verticesStart,\r\n                    verticesCount: materialInfo.verticesCount,\r\n                };\r\n                serializationObject.materialInfos.push(materialInfoSerializationObject);\r\n            }\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Extracts the vertexData from a mesh\r\n     * @param mesh the mesh from which to extract the VertexData\r\n     * @param copyWhenShared defines if the VertexData must be cloned when shared between multiple meshes, optional, default false\r\n     * @param forceCopy indicating that the VertexData must be cloned, optional, default false\r\n     * @returns the object VertexData associated to the passed mesh\r\n     */\r\n    public static ExtractFromMesh(mesh: Mesh, copyWhenShared?: boolean, forceCopy?: boolean): VertexData {\r\n        return VertexData._ExtractFrom(mesh, copyWhenShared, forceCopy);\r\n    }\r\n\r\n    /**\r\n     * Extracts the vertexData from the geometry\r\n     * @param geometry the geometry from which to extract the VertexData\r\n     * @param copyWhenShared defines if the VertexData must be cloned when the geometry is shared between multiple meshes, optional, default false\r\n     * @param forceCopy indicating that the VertexData must be cloned, optional, default false\r\n     * @returns the object VertexData associated to the passed mesh\r\n     */\r\n    public static ExtractFromGeometry(geometry: Geometry, copyWhenShared?: boolean, forceCopy?: boolean): VertexData {\r\n        return VertexData._ExtractFrom(geometry, copyWhenShared, forceCopy);\r\n    }\r\n\r\n    private static _ExtractFrom(meshOrGeometry: IGetSetVerticesData, copyWhenShared?: boolean, forceCopy?: boolean): VertexData {\r\n        const result = new VertexData();\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.PositionKind)) {\r\n            result.positions = meshOrGeometry.getVerticesData(VertexBuffer.PositionKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n            result.normals = meshOrGeometry.getVerticesData(VertexBuffer.NormalKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.TangentKind)) {\r\n            result.tangents = meshOrGeometry.getVerticesData(VertexBuffer.TangentKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n            result.uvs = meshOrGeometry.getVerticesData(VertexBuffer.UVKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\r\n            result.uvs2 = meshOrGeometry.getVerticesData(VertexBuffer.UV2Kind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UV3Kind)) {\r\n            result.uvs3 = meshOrGeometry.getVerticesData(VertexBuffer.UV3Kind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UV4Kind)) {\r\n            result.uvs4 = meshOrGeometry.getVerticesData(VertexBuffer.UV4Kind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UV5Kind)) {\r\n            result.uvs5 = meshOrGeometry.getVerticesData(VertexBuffer.UV5Kind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.UV6Kind)) {\r\n            result.uvs6 = meshOrGeometry.getVerticesData(VertexBuffer.UV6Kind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.ColorKind)) {\r\n            const geometry = (meshOrGeometry as Mesh).geometry || (meshOrGeometry as Geometry);\r\n            const vertexBuffer = geometry.getVertexBuffer(VertexBuffer.ColorKind)!;\r\n            const colors = geometry.getVerticesData(VertexBuffer.ColorKind, copyWhenShared, forceCopy)!;\r\n            if (vertexBuffer.getSize() === 3) {\r\n                const newColors = new Float32Array((colors.length * 4) / 3);\r\n                for (let i = 0, j = 0; i < colors.length; i += 3, j += 4) {\r\n                    newColors[j] = colors[i];\r\n                    newColors[j + 1] = colors[i + 1];\r\n                    newColors[j + 2] = colors[i + 2];\r\n                    newColors[j + 3] = 1;\r\n                }\r\n                result.colors = newColors;\r\n            } else if (vertexBuffer.getSize() === 4) {\r\n                result.colors = colors;\r\n            } else {\r\n                throw new Error(`Unexpected number of color components: ${vertexBuffer.getSize()}`);\r\n            }\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.MatricesIndicesKind)) {\r\n            result.matricesIndices = meshOrGeometry.getVerticesData(VertexBuffer.MatricesIndicesKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\r\n            result.matricesWeights = meshOrGeometry.getVerticesData(VertexBuffer.MatricesWeightsKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.MatricesIndicesExtraKind)) {\r\n            result.matricesIndicesExtra = meshOrGeometry.getVerticesData(VertexBuffer.MatricesIndicesExtraKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        if (meshOrGeometry.isVerticesDataPresent(VertexBuffer.MatricesWeightsExtraKind)) {\r\n            result.matricesWeightsExtra = meshOrGeometry.getVerticesData(VertexBuffer.MatricesWeightsExtraKind, copyWhenShared, forceCopy);\r\n        }\r\n\r\n        result.indices = meshOrGeometry.getIndices(copyWhenShared, forceCopy);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a Ribbon\r\n     * @param options an object used to set the following optional parameters for the ribbon, required but can be empty\r\n     * * pathArray array of paths, each of which an array of successive Vector3\r\n     * * closeArray creates a seam between the first and the last paths of the pathArray, optional, default false\r\n     * * closePath creates a seam between the first and the last points of each path of the path array, optional, default false\r\n     * * offset a positive integer, only used when pathArray contains a single path (offset = 10 means the point 1 is joined to the point 11), default rounded half size of the pathArray length\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * * invertUV swaps in the U and V coordinates when applying a texture, optional, default false\r\n     * * uvs a linear array, of length 2 * number of vertices, of custom UV values, optional\r\n     * * colors a linear array, of length 4 * number of vertices, of custom color values, optional\r\n     * @returns the VertexData of the ribbon\r\n     * @deprecated use CreateRibbonVertexData instead\r\n     */\r\n    public static CreateRibbon(options: {\r\n        pathArray: Vector3[][];\r\n        closeArray?: boolean;\r\n        closePath?: boolean;\r\n        offset?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        invertUV?: boolean;\r\n        uvs?: Vector2[];\r\n        colors?: Color4[];\r\n    }): VertexData {\r\n        throw _WarnImport(\"ribbonBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a box\r\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n     * * size sets the width, height and depth of the box to the value of size, optional default 1\r\n     * * width sets the width (x direction) of the box, overwrites the width set by size, optional, default size\r\n     * * height sets the height (y direction) of the box, overwrites the height set by size, optional, default size\r\n     * * depth sets the depth (z direction) of the box, overwrites the depth set by size, optional, default size\r\n     * * faceUV an array of 6 Vector4 elements used to set different images to each box side\r\n     * * faceColors an array of 6 Color3 elements used to set different colors to each box side\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the box\r\n     * @deprecated Please use CreateBoxVertexData from the BoxBuilder file instead\r\n     */\r\n    public static CreateBox(options: {\r\n        size?: number;\r\n        width?: number;\r\n        height?: number;\r\n        depth?: number;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"boxBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a tiled box\r\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n     * * faceTiles sets the pattern, tile size and number of tiles for a face\r\n     * * faceUV an array of 6 Vector4 elements used to set different images to each box side\r\n     * * faceColors an array of 6 Color3 elements used to set different colors to each box side\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * @param options.pattern\r\n     * @param options.width\r\n     * @param options.height\r\n     * @param options.depth\r\n     * @param options.tileSize\r\n     * @param options.tileWidth\r\n     * @param options.tileHeight\r\n     * @param options.alignHorizontal\r\n     * @param options.alignVertical\r\n     * @param options.faceUV\r\n     * @param options.faceColors\r\n     * @param options.sideOrientation\r\n     * @returns the VertexData of the box\r\n     * @deprecated Please use CreateTiledBoxVertexData instead\r\n     */\r\n    public static CreateTiledBox(options: {\r\n        pattern?: number;\r\n        width?: number;\r\n        height?: number;\r\n        depth?: number;\r\n        tileSize?: number;\r\n        tileWidth?: number;\r\n        tileHeight?: number;\r\n        alignHorizontal?: number;\r\n        alignVertical?: number;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        sideOrientation?: number;\r\n    }): VertexData {\r\n        throw _WarnImport(\"tiledBoxBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a tiled plane\r\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n     * * pattern a limited pattern arrangement depending on the number\r\n     * * tileSize sets the width, height and depth of the tile to the value of size, optional default 1\r\n     * * tileWidth sets the width (x direction) of the tile, overwrites the width set by size, optional, default size\r\n     * * tileHeight sets the height (y direction) of the tile, overwrites the height set by size, optional, default size\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the tiled plane\r\n     * @deprecated use CreateTiledPlaneVertexData instead\r\n     */\r\n    public static CreateTiledPlane(options: {\r\n        pattern?: number;\r\n        tileSize?: number;\r\n        tileWidth?: number;\r\n        tileHeight?: number;\r\n        size?: number;\r\n        width?: number;\r\n        height?: number;\r\n        alignHorizontal?: number;\r\n        alignVertical?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"tiledPlaneBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for an ellipsoid, defaults to a sphere\r\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n     * * segments sets the number of horizontal strips optional, default 32\r\n     * * diameter sets the axes dimensions, diameterX, diameterY and diameterZ to the value of diameter, optional default 1\r\n     * * diameterX sets the diameterX (x direction) of the ellipsoid, overwrites the diameterX set by diameter, optional, default diameter\r\n     * * diameterY sets the diameterY (y direction) of the ellipsoid, overwrites the diameterY set by diameter, optional, default diameter\r\n     * * diameterZ sets the diameterZ (z direction) of the ellipsoid, overwrites the diameterZ set by diameter, optional, default diameter\r\n     * * arc a number from 0 to 1, to create an unclosed ellipsoid based on the fraction of the circumference (latitude) given by the arc value, optional, default 1\r\n     * * slice a number from 0 to 1, to create an unclosed ellipsoid based on the fraction of the height (latitude) given by the arc value, optional, default 1\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the ellipsoid\r\n     * @deprecated use CreateSphereVertexData instead\r\n     */\r\n    public static CreateSphere(options: {\r\n        segments?: number;\r\n        diameter?: number;\r\n        diameterX?: number;\r\n        diameterY?: number;\r\n        diameterZ?: number;\r\n        arc?: number;\r\n        slice?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"sphereBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a cylinder, cone or prism\r\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n     * * height sets the height (y direction) of the cylinder, optional, default 2\r\n     * * diameterTop sets the diameter of the top of the cone, overwrites diameter,  optional, default diameter\r\n     * * diameterBottom sets the diameter of the bottom of the cone, overwrites diameter,  optional, default diameter\r\n     * * diameter sets the diameter of the top and bottom of the cone, optional default 1\r\n     * * tessellation the number of prism sides, 3 for a triangular prism, optional, default 24\r\n     * * subdivisions` the number of rings along the cylinder height, optional, default 1\r\n     * * arc a number from 0 to 1, to create an unclosed cylinder based on the fraction of the circumference given by the arc value, optional, default 1\r\n     * * faceColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\r\n     * * faceUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\r\n     * * hasRings when true makes each subdivision independently treated as a face for faceUV and faceColors, optional, default false\r\n     * * enclose when true closes an open cylinder by adding extra flat faces between the height axis and vertical edges, think cut cake\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the cylinder, cone or prism\r\n     * @deprecated please use CreateCylinderVertexData instead\r\n     */\r\n    public static CreateCylinder(options: {\r\n        height?: number;\r\n        diameterTop?: number;\r\n        diameterBottom?: number;\r\n        diameter?: number;\r\n        tessellation?: number;\r\n        subdivisions?: number;\r\n        arc?: number;\r\n        faceColors?: Color4[];\r\n        faceUV?: Vector4[];\r\n        hasRings?: boolean;\r\n        enclose?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"cylinderBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a torus\r\n     * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n     * * diameter the diameter of the torus, optional default 1\r\n     * * thickness the diameter of the tube forming the torus, optional default 0.5\r\n     * * tessellation the number of prism sides, 3 for a triangular prism, optional, default 24\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the torus\r\n     * @deprecated use CreateTorusVertexData instead\r\n     */\r\n    public static CreateTorus(options: {\r\n        diameter?: number;\r\n        thickness?: number;\r\n        tessellation?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"torusBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData of the LineSystem\r\n     * @param options an object used to set the following optional parameters for the LineSystem, required but can be empty\r\n     *  - lines an array of lines, each line being an array of successive Vector3\r\n     *  - colors an array of line colors, each of the line colors being an array of successive Color4, one per line point\r\n     * @returns the VertexData of the LineSystem\r\n     * @deprecated use CreateLineSystemVertexData instead\r\n     */\r\n    public static CreateLineSystem(options: { lines: Vector3[][]; colors?: Nullable<Color4[][]> }): VertexData {\r\n        throw _WarnImport(\"linesBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Create the VertexData for a DashedLines\r\n     * @param options an object used to set the following optional parameters for the DashedLines, required but can be empty\r\n     *  - points an array successive Vector3\r\n     *  - dashSize the size of the dashes relative to the dash number, optional, default 3\r\n     *  - gapSize the size of the gap between two successive dashes relative to the dash number, optional, default 1\r\n     *  - dashNb the intended total number of dashes, optional, default 200\r\n     * @returns the VertexData for the DashedLines\r\n     * @deprecated use CreateDashedLinesVertexData instead\r\n     */\r\n    public static CreateDashedLines(options: { points: Vector3[]; dashSize?: number; gapSize?: number; dashNb?: number }): VertexData {\r\n        throw _WarnImport(\"linesBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a Ground\r\n     * @param options an object used to set the following optional parameters for the Ground, required but can be empty\r\n     *  - width the width (x direction) of the ground, optional, default 1\r\n     *  - height the height (z direction) of the ground, optional, default 1\r\n     *  - subdivisions the number of subdivisions per side, optional, default 1\r\n     * @returns the VertexData of the Ground\r\n     * @deprecated Please use CreateGroundVertexData instead\r\n     */\r\n    public static CreateGround(options: { width?: number; height?: number; subdivisions?: number; subdivisionsX?: number; subdivisionsY?: number }): VertexData {\r\n        throw _WarnImport(\"groundBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a TiledGround by subdividing the ground into tiles\r\n     * @param options an object used to set the following optional parameters for the Ground, required but can be empty\r\n     * * xmin the ground minimum X coordinate, optional, default -1\r\n     * * zmin the ground minimum Z coordinate, optional, default -1\r\n     * * xmax the ground maximum X coordinate, optional, default 1\r\n     * * zmax the ground maximum Z coordinate, optional, default 1\r\n     * * subdivisions a javascript object {w: positive integer, h: positive integer}, `w` and `h` are the numbers of subdivisions on the ground width and height creating 'tiles', default {w: 6, h: 6}\r\n     * * precision a javascript object {w: positive integer, h: positive integer}, `w` and `h` are the numbers of subdivisions on the tile width and height, default {w: 2, h: 2}\r\n     * @returns the VertexData of the TiledGround\r\n     * @deprecated use CreateTiledGroundVertexData instead\r\n     */\r\n    public static CreateTiledGround(options: {\r\n        xmin: number;\r\n        zmin: number;\r\n        xmax: number;\r\n        zmax: number;\r\n        subdivisions?: { w: number; h: number };\r\n        precision?: { w: number; h: number };\r\n    }): VertexData {\r\n        throw _WarnImport(\"groundBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData of the Ground designed from a heightmap\r\n     * @param options an object used to set the following parameters for the Ground, required and provided by CreateGroundFromHeightMap\r\n     * * width the width (x direction) of the ground\r\n     * * height the height (z direction) of the ground\r\n     * * subdivisions the number of subdivisions per side\r\n     * * minHeight the minimum altitude on the ground, optional, default 0\r\n     * * maxHeight the maximum altitude on the ground, optional default 1\r\n     * * colorFilter the filter to apply to the image pixel colors to compute the height, optional Color3, default (0.3, 0.59, 0.11)\r\n     * * buffer the array holding the image color data\r\n     * * bufferWidth the width of image\r\n     * * bufferHeight the height of image\r\n     * * alphaFilter Remove any data where the alpha channel is below this value, defaults 0 (all data visible)\r\n     * @returns the VertexData of the Ground designed from a heightmap\r\n     * @deprecated use CreateGroundFromHeightMapVertexData instead\r\n     */\r\n    public static CreateGroundFromHeightMap(options: {\r\n        width: number;\r\n        height: number;\r\n        subdivisions: number;\r\n        minHeight: number;\r\n        maxHeight: number;\r\n        colorFilter: Color3;\r\n        buffer: Uint8Array;\r\n        bufferWidth: number;\r\n        bufferHeight: number;\r\n        alphaFilter: number;\r\n    }): VertexData {\r\n        throw _WarnImport(\"groundBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a Plane\r\n     * @param options an object used to set the following optional parameters for the plane, required but can be empty\r\n     * * size sets the width and height of the plane to the value of size, optional default 1\r\n     * * width sets the width (x direction) of the plane, overwrites the width set by size, optional, default size\r\n     * * height sets the height (y direction) of the plane, overwrites the height set by size, optional, default size\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the box\r\n     * @deprecated use CreatePlaneVertexData instead\r\n     */\r\n    public static CreatePlane(options: { size?: number; width?: number; height?: number; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 }): VertexData {\r\n        throw _WarnImport(\"planeBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData of the Disc or regular Polygon\r\n     * @param options an object used to set the following optional parameters for the disc, required but can be empty\r\n     * * radius the radius of the disc, optional default 0.5\r\n     * * tessellation the number of polygon sides, optional, default 64\r\n     * * arc a number from 0 to 1, to create an unclosed polygon based on the fraction of the circumference given by the arc value, optional, default 1\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the box\r\n     * @deprecated use CreateDiscVertexData instead\r\n     */\r\n    public static CreateDisc(options: { radius?: number; tessellation?: number; arc?: number; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 }): VertexData {\r\n        throw _WarnImport(\"discBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for an irregular Polygon in the XoZ plane using a mesh built by polygonTriangulation.build()\r\n     * All parameters are provided by CreatePolygon as needed\r\n     * @param polygon a mesh built from polygonTriangulation.build()\r\n     * @param sideOrientation takes the values Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * @param fUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\r\n     * @param fColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\r\n     * @param frontUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * @param backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @param wrap a boolean, default false, when true and fUVs used texture is wrapped around all sides, when false texture is applied side\r\n     * @returns the VertexData of the Polygon\r\n     * @deprecated use CreatePolygonVertexData instead\r\n     */\r\n    public static CreatePolygon(polygon: Mesh, sideOrientation: number, fUV?: Vector4[], fColors?: Color4[], frontUVs?: Vector4, backUVs?: Vector4, wrap?: boolean): VertexData {\r\n        throw _WarnImport(\"polygonBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData of the IcoSphere\r\n     * @param options an object used to set the following optional parameters for the IcoSphere, required but can be empty\r\n     * * radius the radius of the IcoSphere, optional default 1\r\n     * * radiusX allows stretching in the x direction, optional, default radius\r\n     * * radiusY allows stretching in the y direction, optional, default radius\r\n     * * radiusZ allows stretching in the z direction, optional, default radius\r\n     * * flat when true creates a flat shaded mesh, optional, default true\r\n     * * subdivisions increasing the subdivisions increases the number of faces, optional, default 4\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the IcoSphere\r\n     * @deprecated use CreateIcoSphereVertexData instead\r\n     */\r\n    public static CreateIcoSphere(options: {\r\n        radius?: number;\r\n        radiusX?: number;\r\n        radiusY?: number;\r\n        radiusZ?: number;\r\n        flat?: boolean;\r\n        subdivisions?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"icoSphereBuilder\");\r\n    }\r\n\r\n    // inspired from // http://stemkoski.github.io/Three.js/Polyhedra.html\r\n    /**\r\n     * Creates the VertexData for a Polyhedron\r\n     * @param options an object used to set the following optional parameters for the polyhedron, required but can be empty\r\n     * * type provided types are:\r\n     *  * 0 : Tetrahedron, 1 : Octahedron, 2 : Dodecahedron, 3 : Icosahedron, 4 : Rhombicuboctahedron, 5 : Triangular Prism, 6 : Pentagonal Prism, 7 : Hexagonal Prism, 8 : Square Pyramid (J1)\r\n     *  * 9 : Pentagonal Pyramid (J2), 10 : Triangular Dipyramid (J12), 11 : Pentagonal Dipyramid (J13), 12 : Elongated Square Dipyramid (J15), 13 : Elongated Pentagonal Dipyramid (J16), 14 : Elongated Pentagonal Cupola (J20)\r\n     * * size the size of the IcoSphere, optional default 1\r\n     * * sizeX allows stretching in the x direction, optional, default size\r\n     * * sizeY allows stretching in the y direction, optional, default size\r\n     * * sizeZ allows stretching in the z direction, optional, default size\r\n     * * custom a number that overwrites the type to create from an extended set of polyhedron from https://www.babylonjs-playground.com/#21QRSK#15 with minimised editor\r\n     * * faceUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\r\n     * * faceColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\r\n     * * flat when true creates a flat shaded mesh, optional, default true\r\n     * * subdivisions increasing the subdivisions increases the number of faces, optional, default 4\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the Polyhedron\r\n     * @deprecated use CreatePolyhedronVertexData instead\r\n     */\r\n    public static CreatePolyhedron(options: {\r\n        type?: number;\r\n        size?: number;\r\n        sizeX?: number;\r\n        sizeY?: number;\r\n        sizeZ?: number;\r\n        custom?: any;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        flat?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"polyhedronBuilder\");\r\n    }\r\n\r\n    /**\r\n     * Creates the VertexData for a Capsule, inspired from https://github.com/maximeq/three-js-capsule-geometry/blob/master/src/CapsuleBufferGeometry.js\r\n     * @param options an object used to set the following optional parameters for the capsule, required but can be empty\r\n     * @returns the VertexData of the Capsule\r\n     * @deprecated Please use CreateCapsuleVertexData from the capsuleBuilder file instead\r\n     */\r\n    public static CreateCapsule(\r\n        options: ICreateCapsuleOptions = {\r\n            orientation: Vector3.Up(),\r\n            subdivisions: 2,\r\n            tessellation: 16,\r\n            height: 1,\r\n            radius: 0.25,\r\n            capSubdivisions: 6,\r\n        }\r\n    ): VertexData {\r\n        throw _WarnImport(\"capsuleBuilder\");\r\n    }\r\n\r\n    // based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3D/src/away3d/primitives/TorusKnot.as?spec=svn2473&r=2473\r\n    /**\r\n     * Creates the VertexData for a TorusKnot\r\n     * @param options an object used to set the following optional parameters for the TorusKnot, required but can be empty\r\n     * * radius the radius of the torus knot, optional, default 2\r\n     * * tube the thickness of the tube, optional, default 0.5\r\n     * * radialSegments the number of sides on each tube segments, optional, default 32\r\n     * * tubularSegments the number of tubes to decompose the knot into, optional, default 32\r\n     * * p the number of windings around the z axis, optional,  default 2\r\n     * * q the number of windings around the x axis, optional,  default 3\r\n     * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n     * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n     * @returns the VertexData of the Torus Knot\r\n     * @deprecated use CreateTorusKnotVertexData instead\r\n     */\r\n    public static CreateTorusKnot(options: {\r\n        radius?: number;\r\n        tube?: number;\r\n        radialSegments?: number;\r\n        tubularSegments?: number;\r\n        p?: number;\r\n        q?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    }): VertexData {\r\n        throw _WarnImport(\"torusKnotBuilder\");\r\n    }\r\n\r\n    // Tools\r\n\r\n    /**\r\n     * Compute normals for given positions and indices\r\n     * @param positions an array of vertex positions, [...., x, y, z, ......]\r\n     * @param indices an array of indices in groups of three for each triangular facet, [...., i, j, k, ......]\r\n     * @param normals an array of vertex normals, [...., x, y, z, ......]\r\n     * @param options an object used to set the following optional parameters for the TorusKnot, optional\r\n     * * facetNormals : optional array of facet normals (vector3)\r\n     * * facetPositions : optional array of facet positions (vector3)\r\n     * * facetPartitioning : optional partitioning array. facetPositions is required for facetPartitioning computation\r\n     * * ratio : optional partitioning ratio / bounding box, required for facetPartitioning computation\r\n     * * bInfo : optional bounding info, required for facetPartitioning computation\r\n     * * bbSize : optional bounding box size data, required for facetPartitioning computation\r\n     * * subDiv : optional partitioning data about subdivisions on  each axis (int), required for facetPartitioning computation\r\n     * * useRightHandedSystem: optional boolean to for right handed system computation\r\n     * * depthSort : optional boolean to enable the facet depth sort computation\r\n     * * distanceTo : optional Vector3 to compute the facet depth from this location\r\n     * * depthSortedFacets : optional array of depthSortedFacets to store the facet distances from the reference location\r\n     */\r\n    public static ComputeNormals(\r\n        positions: any,\r\n        indices: any,\r\n        normals: any,\r\n        options?: {\r\n            facetNormals?: any;\r\n            facetPositions?: any;\r\n            facetPartitioning?: any;\r\n            ratio?: number;\r\n            bInfo?: any;\r\n            bbSize?: Vector3;\r\n            subDiv?: any;\r\n            useRightHandedSystem?: boolean;\r\n            depthSort?: boolean;\r\n            distanceTo?: Vector3;\r\n            depthSortedFacets?: any;\r\n        }\r\n    ): void {\r\n        // temporary scalar variables\r\n        let index = 0; // facet index\r\n        let p1p2x = 0.0; // p1p2 vector x coordinate\r\n        let p1p2y = 0.0; // p1p2 vector y coordinate\r\n        let p1p2z = 0.0; // p1p2 vector z coordinate\r\n        let p3p2x = 0.0; // p3p2 vector x coordinate\r\n        let p3p2y = 0.0; // p3p2 vector y coordinate\r\n        let p3p2z = 0.0; // p3p2 vector z coordinate\r\n        let faceNormalx = 0.0; // facet normal x coordinate\r\n        let faceNormaly = 0.0; // facet normal y coordinate\r\n        let faceNormalz = 0.0; // facet normal z coordinate\r\n        let length = 0.0; // facet normal length before normalization\r\n        let v1x = 0; // vector1 x index in the positions array\r\n        let v1y = 0; // vector1 y index in the positions array\r\n        let v1z = 0; // vector1 z index in the positions array\r\n        let v2x = 0; // vector2 x index in the positions array\r\n        let v2y = 0; // vector2 y index in the positions array\r\n        let v2z = 0; // vector2 z index in the positions array\r\n        let v3x = 0; // vector3 x index in the positions array\r\n        let v3y = 0; // vector3 y index in the positions array\r\n        let v3z = 0; // vector3 z index in the positions array\r\n        let computeFacetNormals = false;\r\n        let computeFacetPositions = false;\r\n        let computeFacetPartitioning = false;\r\n        let computeDepthSort = false;\r\n        let faceNormalSign = 1;\r\n        let ratio = 0;\r\n        let distanceTo: Nullable<Vector3> = null;\r\n        if (options) {\r\n            computeFacetNormals = options.facetNormals ? true : false;\r\n            computeFacetPositions = options.facetPositions ? true : false;\r\n            computeFacetPartitioning = options.facetPartitioning ? true : false;\r\n            faceNormalSign = options.useRightHandedSystem === true ? -1 : 1;\r\n            ratio = options.ratio || 0;\r\n            computeDepthSort = options.depthSort ? true : false;\r\n            distanceTo = <Vector3>options.distanceTo;\r\n            if (computeDepthSort) {\r\n                if (distanceTo === undefined) {\r\n                    distanceTo = Vector3.Zero();\r\n                }\r\n            }\r\n        }\r\n\r\n        // facetPartitioning reinit if needed\r\n        let xSubRatio = 0;\r\n        let ySubRatio = 0;\r\n        let zSubRatio = 0;\r\n        let subSq = 0;\r\n        if (computeFacetPartitioning && options && options.bbSize) {\r\n            //let bbSizeMax = options.bbSize.x > options.bbSize.y ? options.bbSize.x : options.bbSize.y;\r\n            //bbSizeMax = bbSizeMax > options.bbSize.z ? bbSizeMax : options.bbSize.z;\r\n            xSubRatio = (options.subDiv.X * ratio) / options.bbSize.x;\r\n            ySubRatio = (options.subDiv.Y * ratio) / options.bbSize.y;\r\n            zSubRatio = (options.subDiv.Z * ratio) / options.bbSize.z;\r\n            subSq = options.subDiv.max * options.subDiv.max;\r\n            options.facetPartitioning.length = 0;\r\n        }\r\n\r\n        // reset the normals\r\n        for (index = 0; index < positions.length; index++) {\r\n            normals[index] = 0.0;\r\n        }\r\n\r\n        // Loop : 1 indice triplet = 1 facet\r\n        const nbFaces = (indices.length / 3) | 0;\r\n        for (index = 0; index < nbFaces; index++) {\r\n            // get the indexes of the coordinates of each vertex of the facet\r\n            v1x = indices[index * 3] * 3;\r\n            v1y = v1x + 1;\r\n            v1z = v1x + 2;\r\n            v2x = indices[index * 3 + 1] * 3;\r\n            v2y = v2x + 1;\r\n            v2z = v2x + 2;\r\n            v3x = indices[index * 3 + 2] * 3;\r\n            v3y = v3x + 1;\r\n            v3z = v3x + 2;\r\n\r\n            p1p2x = positions[v1x] - positions[v2x]; // compute two vectors per facet : p1p2 and p3p2\r\n            p1p2y = positions[v1y] - positions[v2y];\r\n            p1p2z = positions[v1z] - positions[v2z];\r\n\r\n            p3p2x = positions[v3x] - positions[v2x];\r\n            p3p2y = positions[v3y] - positions[v2y];\r\n            p3p2z = positions[v3z] - positions[v2z];\r\n\r\n            // compute the face normal with the cross product\r\n            faceNormalx = faceNormalSign * (p1p2y * p3p2z - p1p2z * p3p2y);\r\n            faceNormaly = faceNormalSign * (p1p2z * p3p2x - p1p2x * p3p2z);\r\n            faceNormalz = faceNormalSign * (p1p2x * p3p2y - p1p2y * p3p2x);\r\n            // normalize this normal and store it in the array facetData\r\n            length = Math.sqrt(faceNormalx * faceNormalx + faceNormaly * faceNormaly + faceNormalz * faceNormalz);\r\n            length = length === 0 ? 1.0 : length;\r\n            faceNormalx /= length;\r\n            faceNormaly /= length;\r\n            faceNormalz /= length;\r\n\r\n            if (computeFacetNormals && options) {\r\n                options.facetNormals[index].x = faceNormalx;\r\n                options.facetNormals[index].y = faceNormaly;\r\n                options.facetNormals[index].z = faceNormalz;\r\n            }\r\n\r\n            if (computeFacetPositions && options) {\r\n                // compute and the facet barycenter coordinates in the array facetPositions\r\n                options.facetPositions[index].x = (positions[v1x] + positions[v2x] + positions[v3x]) / 3.0;\r\n                options.facetPositions[index].y = (positions[v1y] + positions[v2y] + positions[v3y]) / 3.0;\r\n                options.facetPositions[index].z = (positions[v1z] + positions[v2z] + positions[v3z]) / 3.0;\r\n            }\r\n\r\n            if (computeFacetPartitioning && options) {\r\n                // store the facet indexes in arrays in the main facetPartitioning array :\r\n                // compute each facet vertex (+ facet barycenter) index in the partiniong array\r\n                const ox = Math.floor((options.facetPositions[index].x - options.bInfo.minimum.x * ratio) * xSubRatio);\r\n                const oy = Math.floor((options.facetPositions[index].y - options.bInfo.minimum.y * ratio) * ySubRatio);\r\n                const oz = Math.floor((options.facetPositions[index].z - options.bInfo.minimum.z * ratio) * zSubRatio);\r\n                const b1x = Math.floor((positions[v1x] - options.bInfo.minimum.x * ratio) * xSubRatio);\r\n                const b1y = Math.floor((positions[v1y] - options.bInfo.minimum.y * ratio) * ySubRatio);\r\n                const b1z = Math.floor((positions[v1z] - options.bInfo.minimum.z * ratio) * zSubRatio);\r\n                const b2x = Math.floor((positions[v2x] - options.bInfo.minimum.x * ratio) * xSubRatio);\r\n                const b2y = Math.floor((positions[v2y] - options.bInfo.minimum.y * ratio) * ySubRatio);\r\n                const b2z = Math.floor((positions[v2z] - options.bInfo.minimum.z * ratio) * zSubRatio);\r\n                const b3x = Math.floor((positions[v3x] - options.bInfo.minimum.x * ratio) * xSubRatio);\r\n                const b3y = Math.floor((positions[v3y] - options.bInfo.minimum.y * ratio) * ySubRatio);\r\n                const b3z = Math.floor((positions[v3z] - options.bInfo.minimum.z * ratio) * zSubRatio);\r\n\r\n                const blockIdxV1 = b1x + options.subDiv.max * b1y + subSq * b1z;\r\n                const blockIdxV2 = b2x + options.subDiv.max * b2y + subSq * b2z;\r\n                const blockIdxV3 = b3x + options.subDiv.max * b3y + subSq * b3z;\r\n                const blockIdxV4 = ox + options.subDiv.max * oy + subSq * oz;\r\n\r\n                options.facetPartitioning[blockIdxV4] = options.facetPartitioning[blockIdxV4] ? options.facetPartitioning[blockIdxV4] : [];\r\n                options.facetPartitioning[blockIdxV1] = options.facetPartitioning[blockIdxV1] ? options.facetPartitioning[blockIdxV1] : [];\r\n                options.facetPartitioning[blockIdxV2] = options.facetPartitioning[blockIdxV2] ? options.facetPartitioning[blockIdxV2] : [];\r\n                options.facetPartitioning[blockIdxV3] = options.facetPartitioning[blockIdxV3] ? options.facetPartitioning[blockIdxV3] : [];\r\n\r\n                // push each facet index in each block containing the vertex\r\n                options.facetPartitioning[blockIdxV1].push(index);\r\n                if (blockIdxV2 != blockIdxV1) {\r\n                    options.facetPartitioning[blockIdxV2].push(index);\r\n                }\r\n                if (!(blockIdxV3 == blockIdxV2 || blockIdxV3 == blockIdxV1)) {\r\n                    options.facetPartitioning[blockIdxV3].push(index);\r\n                }\r\n                if (!(blockIdxV4 == blockIdxV1 || blockIdxV4 == blockIdxV2 || blockIdxV4 == blockIdxV3)) {\r\n                    options.facetPartitioning[blockIdxV4].push(index);\r\n                }\r\n            }\r\n\r\n            if (computeDepthSort && options && options.facetPositions) {\r\n                const dsf = options.depthSortedFacets[index];\r\n                dsf.ind = index * 3;\r\n                dsf.sqDistance = Vector3.DistanceSquared(options.facetPositions[index], distanceTo!);\r\n            }\r\n\r\n            // compute the normals anyway\r\n            normals[v1x] += faceNormalx; // accumulate all the normals per face\r\n            normals[v1y] += faceNormaly;\r\n            normals[v1z] += faceNormalz;\r\n            normals[v2x] += faceNormalx;\r\n            normals[v2y] += faceNormaly;\r\n            normals[v2z] += faceNormalz;\r\n            normals[v3x] += faceNormalx;\r\n            normals[v3y] += faceNormaly;\r\n            normals[v3z] += faceNormalz;\r\n        }\r\n        // last normalization of each normal\r\n        for (index = 0; index < normals.length / 3; index++) {\r\n            faceNormalx = normals[index * 3];\r\n            faceNormaly = normals[index * 3 + 1];\r\n            faceNormalz = normals[index * 3 + 2];\r\n\r\n            length = Math.sqrt(faceNormalx * faceNormalx + faceNormaly * faceNormaly + faceNormalz * faceNormalz);\r\n            length = length === 0 ? 1.0 : length;\r\n            faceNormalx /= length;\r\n            faceNormaly /= length;\r\n            faceNormalz /= length;\r\n\r\n            normals[index * 3] = faceNormalx;\r\n            normals[index * 3 + 1] = faceNormaly;\r\n            normals[index * 3 + 2] = faceNormalz;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _ComputeSides(\r\n        sideOrientation: number,\r\n        positions: FloatArray,\r\n        indices: FloatArray | IndicesArray,\r\n        normals: FloatArray,\r\n        uvs: FloatArray,\r\n        frontUVs?: Vector4,\r\n        backUVs?: Vector4\r\n    ) {\r\n        const li: number = indices.length;\r\n        const ln: number = normals.length;\r\n        let i: number;\r\n        let n: number;\r\n        sideOrientation = sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n        switch (sideOrientation) {\r\n            case VertexData.FRONTSIDE:\r\n                // nothing changed\r\n                break;\r\n\r\n            case VertexData.BACKSIDE:\r\n                // indices\r\n                for (i = 0; i < li; i += 3) {\r\n                    const tmp = indices[i];\r\n                    indices[i] = indices[i + 2];\r\n                    indices[i + 2] = tmp;\r\n                }\r\n                // normals\r\n                for (n = 0; n < ln; n++) {\r\n                    normals[n] = -normals[n];\r\n                }\r\n                break;\r\n\r\n            case VertexData.DOUBLESIDE: {\r\n                // positions\r\n                const lp: number = positions.length;\r\n                const l: number = lp / 3;\r\n                for (let p = 0; p < lp; p++) {\r\n                    positions[lp + p] = positions[p];\r\n                }\r\n                // indices\r\n                for (i = 0; i < li; i += 3) {\r\n                    indices[i + li] = indices[i + 2] + l;\r\n                    indices[i + 1 + li] = indices[i + 1] + l;\r\n                    indices[i + 2 + li] = indices[i] + l;\r\n                }\r\n                // normals\r\n                for (n = 0; n < ln; n++) {\r\n                    normals[ln + n] = -normals[n];\r\n                }\r\n\r\n                // uvs\r\n                const lu: number = uvs.length;\r\n                let u: number = 0;\r\n                for (u = 0; u < lu; u++) {\r\n                    uvs[u + lu] = uvs[u];\r\n                }\r\n                frontUVs = frontUVs ? frontUVs : new Vector4(0.0, 0.0, 1.0, 1.0);\r\n                backUVs = backUVs ? backUVs : new Vector4(0.0, 0.0, 1.0, 1.0);\r\n                u = 0;\r\n                for (i = 0; i < lu / 2; i++) {\r\n                    uvs[u] = frontUVs.x + (frontUVs.z - frontUVs.x) * uvs[u];\r\n                    uvs[u + 1] = frontUVs.y + (frontUVs.w - frontUVs.y) * uvs[u + 1];\r\n                    uvs[u + lu] = backUVs.x + (backUVs.z - backUVs.x) * uvs[u + lu];\r\n                    uvs[u + lu + 1] = backUVs.y + (backUVs.w - backUVs.y) * uvs[u + lu + 1];\r\n                    u += 2;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a VertexData from serialized data\r\n     * @param parsedVertexData the parsed data from an imported file\r\n     * @returns a VertexData\r\n     */\r\n    public static Parse(parsedVertexData: any) {\r\n        const vertexData = new VertexData();\r\n\r\n        // positions\r\n        const positions = parsedVertexData.positions;\r\n        if (positions) {\r\n            vertexData.set(positions, VertexBuffer.PositionKind);\r\n        }\r\n\r\n        // normals\r\n        const normals = parsedVertexData.normals;\r\n        if (normals) {\r\n            vertexData.set(normals, VertexBuffer.NormalKind);\r\n        }\r\n\r\n        // tangents\r\n        const tangents = parsedVertexData.tangents;\r\n        if (tangents) {\r\n            vertexData.set(tangents, VertexBuffer.TangentKind);\r\n        }\r\n\r\n        // uvs\r\n        const uvs = parsedVertexData.uvs;\r\n        if (uvs) {\r\n            vertexData.set(uvs, VertexBuffer.UVKind);\r\n        }\r\n\r\n        // uv2s\r\n        const uvs2 = parsedVertexData.uvs2;\r\n        if (uvs2) {\r\n            vertexData.set(uvs2, VertexBuffer.UV2Kind);\r\n        }\r\n\r\n        // uv3s\r\n        const uvs3 = parsedVertexData.uvs3;\r\n        if (uvs3) {\r\n            vertexData.set(uvs3, VertexBuffer.UV3Kind);\r\n        }\r\n\r\n        // uv4s\r\n        const uvs4 = parsedVertexData.uvs4;\r\n        if (uvs4) {\r\n            vertexData.set(uvs4, VertexBuffer.UV4Kind);\r\n        }\r\n\r\n        // uv5s\r\n        const uvs5 = parsedVertexData.uvs5;\r\n        if (uvs5) {\r\n            vertexData.set(uvs5, VertexBuffer.UV5Kind);\r\n        }\r\n\r\n        // uv6s\r\n        const uvs6 = parsedVertexData.uvs6;\r\n        if (uvs6) {\r\n            vertexData.set(uvs6, VertexBuffer.UV6Kind);\r\n        }\r\n\r\n        // colors\r\n        const colors = parsedVertexData.colors;\r\n        if (colors) {\r\n            vertexData.set(Color4.CheckColors4(colors, positions.length / 3), VertexBuffer.ColorKind);\r\n            if (parsedVertexData.hasVertexAlpha !== undefined) {\r\n                vertexData.hasVertexAlpha = parsedVertexData.hasVertexAlpha;\r\n            }\r\n        }\r\n\r\n        // matricesIndices\r\n        const matricesIndices = parsedVertexData.matricesIndices;\r\n        if (matricesIndices) {\r\n            vertexData.set(matricesIndices, VertexBuffer.MatricesIndicesKind);\r\n        }\r\n\r\n        // matricesWeights\r\n        const matricesWeights = parsedVertexData.matricesWeights;\r\n        if (matricesWeights) {\r\n            vertexData.set(matricesWeights, VertexBuffer.MatricesWeightsKind);\r\n        }\r\n\r\n        // indices\r\n        const indices = parsedVertexData.indices;\r\n        if (indices) {\r\n            vertexData.indices = indices;\r\n        }\r\n\r\n        // MaterialInfos\r\n        const materialInfos = parsedVertexData.materialInfos;\r\n        if (materialInfos) {\r\n            vertexData.materialInfos = [];\r\n            for (const materialInfoFromJSON of materialInfos) {\r\n                const materialInfo = new VertexDataMaterialInfo();\r\n                materialInfo.indexCount = materialInfoFromJSON.indexCount;\r\n                materialInfo.indexStart = materialInfoFromJSON.indexStart;\r\n                materialInfo.verticesCount = materialInfoFromJSON.verticesCount;\r\n                materialInfo.verticesStart = materialInfoFromJSON.verticesStart;\r\n                materialInfo.materialIndex = materialInfoFromJSON.materialIndex;\r\n                vertexData.materialInfos.push(materialInfo);\r\n            }\r\n        }\r\n\r\n        return vertexData;\r\n    }\r\n\r\n    /**\r\n     * Applies VertexData created from the imported parameters to the geometry\r\n     * @param parsedVertexData the parsed data from an imported file\r\n     * @param geometry the geometry to apply the VertexData to\r\n     */\r\n    public static ImportVertexData(parsedVertexData: any, geometry: Geometry) {\r\n        const vertexData = VertexData.Parse(parsedVertexData);\r\n\r\n        geometry.setAllVerticesData(vertexData, parsedVertexData.updatable);\r\n    }\r\n}\r\n", "import type { Nullable, FloatArray, DataArray, IndicesArray } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Vector2 } from \"../Maths/math.vector\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport type { IGetSetVerticesData } from \"../Meshes/mesh.vertexData\";\r\nimport { VertexData } from \"../Meshes/mesh.vertexData\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { SceneLoaderFlags } from \"../Loading/sceneLoaderFlags\";\r\nimport { BoundingInfo } from \"../Culling/boundingInfo\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport { Tags } from \"../Misc/tags\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { extractMinAndMax } from \"../Maths/math.functions\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { useOpenGLOrientationForUV } from \"../Compat/compatibilityOptions\";\r\n\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { Buffer } from \"../Buffers/buffer\";\r\nimport type { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport type { ThinEngine } from \"../Engines/thinEngine\";\r\nimport { CopyFloatData, GetTypedArrayData } from \"../Buffers/bufferUtils\";\r\nimport type { IAssetContainer } from \"core/IAssetContainer\";\r\n\r\n/**\r\n * Class used to store geometry data (vertex buffers + index buffer)\r\n */\r\nexport class Geometry implements IGetSetVerticesData {\r\n    // Members\r\n    /**\r\n     * Gets or sets the ID of the geometry\r\n     */\r\n    public id: string;\r\n    /**\r\n     * Gets or sets the unique ID of the geometry\r\n     */\r\n    public uniqueId: number;\r\n    /**\r\n     * Gets the delay loading state of the geometry (none by default which means not delayed)\r\n     */\r\n    public delayLoadState = Constants.DELAYLOADSTATE_NONE;\r\n    /**\r\n     * Gets the file containing the data to load when running in delay load state\r\n     */\r\n    public delayLoadingFile: Nullable<string>;\r\n    /**\r\n     * Callback called when the geometry is updated\r\n     */\r\n    public onGeometryUpdated: (geometry: Geometry, kind?: string) => void;\r\n\r\n    // Private\r\n    private _scene: Scene;\r\n    private _engine: AbstractEngine;\r\n    private _meshes: Mesh[];\r\n    private _totalVertices = 0;\r\n    private _totalIndices?: number;\r\n    /** @internal */\r\n    public _loadedUniqueId: string;\r\n    /** @internal */\r\n    public _indices: IndicesArray;\r\n    /** @internal */\r\n    public _vertexBuffers: { [key: string]: VertexBuffer };\r\n    private _isDisposed = false;\r\n    private _extend: { minimum: Vector3; maximum: Vector3 } = {\r\n        minimum: new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE),\r\n        maximum: new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE),\r\n    };\r\n    private _boundingBias: Vector2;\r\n    /** @internal */\r\n    public _delayInfo: Array<string>;\r\n    private _indexBuffer: Nullable<DataBuffer>;\r\n    private _indexBufferIsUpdatable = false;\r\n    /** @internal */\r\n    public _boundingInfo: Nullable<BoundingInfo>;\r\n    /** @internal */\r\n    public _delayLoadingFunction: Nullable<(any: any, geometry: Geometry) => void>;\r\n    /** @internal */\r\n    public _softwareSkinningFrameId: number;\r\n    private _vertexArrayObjects: { [key: string]: WebGLVertexArrayObject };\r\n    private _updatable: boolean;\r\n\r\n    // Cache\r\n    /** @internal */\r\n    public _positions: Nullable<Vector3[]>;\r\n    private _positionsCache: Vector3[] = [];\r\n\r\n    /** @internal */\r\n    public _parentContainer: Nullable<IAssetContainer> = null;\r\n\r\n    /**\r\n     *  Gets or sets the Bias Vector to apply on the bounding elements (box/sphere), the max extend is computed as v += v * bias.x + bias.y, the min is computed as v -= v * bias.x + bias.y\r\n     */\r\n    public get boundingBias(): Vector2 {\r\n        return this._boundingBias;\r\n    }\r\n\r\n    /**\r\n     *  Gets or sets the Bias Vector to apply on the bounding elements (box/sphere), the max extend is computed as v += v * bias.x + bias.y, the min is computed as v -= v * bias.x + bias.y\r\n     */\r\n    public set boundingBias(value: Vector2) {\r\n        if (this._boundingBias) {\r\n            this._boundingBias.copyFrom(value);\r\n        } else {\r\n            this._boundingBias = value.clone();\r\n        }\r\n\r\n        this._updateBoundingInfo(true, null);\r\n    }\r\n\r\n    /**\r\n     * Static function used to attach a new empty geometry to a mesh\r\n     * @param mesh defines the mesh to attach the geometry to\r\n     * @returns the new Geometry\r\n     */\r\n    public static CreateGeometryForMesh(mesh: Mesh): Geometry {\r\n        const geometry = new Geometry(Geometry.RandomId(), mesh.getScene());\r\n\r\n        geometry.applyToMesh(mesh);\r\n\r\n        return geometry;\r\n    }\r\n\r\n    /** Get the list of meshes using this geometry */\r\n    public get meshes(): Mesh[] {\r\n        return this._meshes;\r\n    }\r\n\r\n    /**\r\n     * If set to true (false by default), the bounding info applied to the meshes sharing this geometry will be the bounding info defined at the class level\r\n     * and won't be computed based on the vertex positions (which is what we get when useBoundingInfoFromGeometry = false)\r\n     */\r\n    public useBoundingInfoFromGeometry = false;\r\n\r\n    /**\r\n     * Creates a new geometry\r\n     * @param id defines the unique ID\r\n     * @param scene defines the hosting scene\r\n     * @param vertexData defines the VertexData used to get geometry data\r\n     * @param updatable defines if geometry must be updatable (false by default)\r\n     * @param mesh defines the mesh that will be associated with the geometry\r\n     */\r\n    constructor(id: string, scene?: Scene, vertexData?: VertexData, updatable: boolean = false, mesh: Nullable<Mesh> = null) {\r\n        this._scene = scene || <Scene>EngineStore.LastCreatedScene;\r\n        if (!this._scene) {\r\n            return;\r\n        }\r\n        this.id = id;\r\n        this.uniqueId = this._scene.getUniqueId();\r\n        this._engine = this._scene.getEngine();\r\n        this._meshes = [];\r\n        //Init vertex buffer cache\r\n        this._vertexBuffers = {};\r\n        this._indices = [];\r\n        this._updatable = updatable;\r\n\r\n        // vertexData\r\n        if (vertexData) {\r\n            this.setAllVerticesData(vertexData, updatable);\r\n        } else {\r\n            this._totalVertices = 0;\r\n        }\r\n\r\n        if (this._engine.getCaps().vertexArrayObject) {\r\n            this._vertexArrayObjects = {};\r\n        }\r\n\r\n        // applyToMesh\r\n        if (mesh) {\r\n            this.applyToMesh(mesh);\r\n            mesh.computeWorldMatrix(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current extend of the geometry\r\n     */\r\n    public get extend(): { minimum: Vector3; maximum: Vector3 } {\r\n        return this._extend;\r\n    }\r\n\r\n    /**\r\n     * Gets the hosting scene\r\n     * @returns the hosting Scene\r\n     */\r\n    public getScene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * Gets the hosting engine\r\n     * @returns the hosting Engine\r\n     */\r\n    public getEngine(): AbstractEngine {\r\n        return this._engine;\r\n    }\r\n\r\n    /**\r\n     * Defines if the geometry is ready to use\r\n     * @returns true if the geometry is ready to be used\r\n     */\r\n    public isReady(): boolean {\r\n        return this.delayLoadState === Constants.DELAYLOADSTATE_LOADED || this.delayLoadState === Constants.DELAYLOADSTATE_NONE;\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating that the geometry should not be serialized\r\n     */\r\n    public get doNotSerialize(): boolean {\r\n        for (let index = 0; index < this._meshes.length; index++) {\r\n            if (!this._meshes[index].doNotSerialize) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    public _rebuild(): void {\r\n        if (this._vertexArrayObjects) {\r\n            this._vertexArrayObjects = {};\r\n        }\r\n\r\n        // Index buffer\r\n        if (this._meshes.length !== 0 && this._indices) {\r\n            this._indexBuffer = this._engine.createIndexBuffer(this._indices, this._updatable, \"Geometry_\" + this.id + \"_IndexBuffer\");\r\n        }\r\n\r\n        // Vertex buffers\r\n        const buffers = new Set<Buffer>();\r\n        for (const key in this._vertexBuffers) {\r\n            buffers.add(this._vertexBuffers[key].getWrapperBuffer());\r\n        }\r\n\r\n        buffers.forEach((buffer) => {\r\n            buffer._rebuild();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Affects all geometry data in one call\r\n     * @param vertexData defines the geometry data\r\n     * @param updatable defines if the geometry must be flagged as updatable (false as default)\r\n     */\r\n    public setAllVerticesData(vertexData: VertexData, updatable?: boolean): void {\r\n        vertexData.applyToGeometry(this, updatable);\r\n        this._notifyUpdate();\r\n    }\r\n\r\n    /**\r\n     * Set specific vertex data\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param data defines the vertex data to use\r\n     * @param updatable defines if the vertex must be flagged as updatable (false as default)\r\n     * @param stride defines the stride to use (0 by default). This value is deduced from the kind value if not specified\r\n     */\r\n    public setVerticesData(kind: string, data: FloatArray, updatable: boolean = false, stride?: number): void {\r\n        if (updatable && Array.isArray(data)) {\r\n            // to avoid converting to Float32Array at each draw call in engine.updateDynamicVertexBuffer, we make the conversion a single time here\r\n            data = new Float32Array(data);\r\n        }\r\n        const buffer = new VertexBuffer(this._engine, data, kind, {\r\n            updatable,\r\n            postponeInternalCreation: this._meshes.length === 0,\r\n            stride,\r\n            label: \"Geometry_\" + this.id + \"_\" + kind,\r\n        });\r\n        this.setVerticesBuffer(buffer);\r\n    }\r\n\r\n    /**\r\n     * Removes a specific vertex data\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     */\r\n    public removeVerticesData(kind: string) {\r\n        if (this._vertexBuffers[kind]) {\r\n            this._vertexBuffers[kind].dispose();\r\n            delete this._vertexBuffers[kind];\r\n        }\r\n\r\n        if (this._vertexArrayObjects) {\r\n            this._disposeVertexArrayObjects();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Affect a vertex buffer to the geometry. the vertexBuffer.getKind() function is used to determine where to store the data\r\n     * @param buffer defines the vertex buffer to use\r\n     * @param totalVertices defines the total number of vertices for position kind (could be null)\r\n     * @param disposeExistingBuffer disposes the existing buffer, if any (default: true)\r\n     */\r\n    public setVerticesBuffer(buffer: VertexBuffer, totalVertices: Nullable<number> = null, disposeExistingBuffer = true): void {\r\n        const kind = buffer.getKind();\r\n        if (this._vertexBuffers[kind] && disposeExistingBuffer) {\r\n            this._vertexBuffers[kind].dispose();\r\n        }\r\n\r\n        if (buffer._buffer && buffer._ownsBuffer) {\r\n            buffer._buffer._increaseReferences();\r\n        }\r\n\r\n        this._vertexBuffers[kind] = buffer;\r\n        const meshes = this._meshes;\r\n        const numOfMeshes = meshes.length;\r\n\r\n        if (kind === VertexBuffer.PositionKind) {\r\n            this._totalVertices = totalVertices ?? buffer._maxVerticesCount;\r\n\r\n            this._updateExtend(this.useBoundingInfoFromGeometry && this._boundingInfo ? null : buffer.getFloatData(this._totalVertices));\r\n            this._resetPointsArrayCache();\r\n\r\n            // this._extend can be empty if buffer.getFloatData(this._totalVertices) returned null\r\n            const minimum = (this._extend && this._extend.minimum) || new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\r\n            const maximum = (this._extend && this._extend.maximum) || new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n\r\n            for (let index = 0; index < numOfMeshes; index++) {\r\n                const mesh = meshes[index];\r\n                mesh.buildBoundingInfo(minimum, maximum);\r\n                mesh._createGlobalSubMesh(mesh.isUnIndexed);\r\n                mesh.computeWorldMatrix(true);\r\n                mesh.synchronizeInstances();\r\n            }\r\n        }\r\n\r\n        this._notifyUpdate(kind);\r\n    }\r\n\r\n    /**\r\n     * Update a specific vertex buffer\r\n     * This function will directly update the underlying DataBuffer according to the passed numeric array or Float32Array\r\n     * It will do nothing if the buffer is not updatable\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param data defines the data to use\r\n     * @param offset defines the offset in the target buffer where to store the data\r\n     * @param useBytes set to true if the offset is in bytes\r\n     */\r\n    public updateVerticesDataDirectly(kind: string, data: DataArray, offset: number, useBytes: boolean = false): void {\r\n        const vertexBuffer = this.getVertexBuffer(kind);\r\n\r\n        if (!vertexBuffer) {\r\n            return;\r\n        }\r\n\r\n        vertexBuffer.updateDirectly(data, offset, useBytes);\r\n        this._notifyUpdate(kind);\r\n    }\r\n\r\n    /**\r\n     * Update a specific vertex buffer\r\n     * This function will create a new buffer if the current one is not updatable\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param data defines the data to use\r\n     * @param updateExtends defines if the geometry extends must be recomputed (false by default)\r\n     */\r\n    public updateVerticesData(kind: string, data: FloatArray, updateExtends: boolean = false): void {\r\n        const vertexBuffer = this.getVertexBuffer(kind);\r\n\r\n        if (!vertexBuffer) {\r\n            return;\r\n        }\r\n\r\n        vertexBuffer.update(data);\r\n\r\n        if (kind === VertexBuffer.PositionKind) {\r\n            this._updateBoundingInfo(updateExtends, data);\r\n        }\r\n        this._notifyUpdate(kind);\r\n    }\r\n\r\n    private _updateBoundingInfo(updateExtends: boolean, data: Nullable<FloatArray>) {\r\n        if (updateExtends) {\r\n            this._updateExtend(data);\r\n        }\r\n\r\n        this._resetPointsArrayCache();\r\n\r\n        if (updateExtends) {\r\n            const meshes = this._meshes;\r\n            for (const mesh of meshes) {\r\n                if (mesh.hasBoundingInfo) {\r\n                    mesh.getBoundingInfo().reConstruct(this._extend.minimum, this._extend.maximum);\r\n                } else {\r\n                    mesh.buildBoundingInfo(this._extend.minimum, this._extend.maximum);\r\n                }\r\n\r\n                const subMeshes = mesh.subMeshes;\r\n                for (const subMesh of subMeshes) {\r\n                    subMesh.refreshBoundingInfo();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _bind(\r\n        effect: Nullable<Effect>,\r\n        indexToBind?: Nullable<DataBuffer>,\r\n        overrideVertexBuffers?: { [kind: string]: Nullable<VertexBuffer> },\r\n        overrideVertexArrayObjects?: { [key: string]: WebGLVertexArrayObject }\r\n    ): void {\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        if (indexToBind === undefined) {\r\n            indexToBind = this._indexBuffer;\r\n        }\r\n        const vbs = this.getVertexBuffers();\r\n\r\n        if (!vbs) {\r\n            return;\r\n        }\r\n\r\n        if (indexToBind != this._indexBuffer || (!this._vertexArrayObjects && !overrideVertexArrayObjects)) {\r\n            this._engine.bindBuffers(vbs, indexToBind, effect, overrideVertexBuffers);\r\n            return;\r\n        }\r\n\r\n        const vaos = overrideVertexArrayObjects ? overrideVertexArrayObjects : this._vertexArrayObjects;\r\n        const engine = this._engine as ThinEngine;\r\n\r\n        // Using VAO\r\n        if (!vaos[effect.key]) {\r\n            vaos[effect.key] = engine.recordVertexArrayObject(vbs, indexToBind, effect, overrideVertexBuffers);\r\n        }\r\n\r\n        engine.bindVertexArrayObject(vaos[effect.key], indexToBind);\r\n    }\r\n\r\n    /**\r\n     * Gets total number of vertices\r\n     * @returns the total number of vertices\r\n     */\r\n    public getTotalVertices(): number {\r\n        if (!this.isReady()) {\r\n            return 0;\r\n        }\r\n\r\n        return this._totalVertices;\r\n    }\r\n\r\n    /**\r\n     * Gets a specific vertex data attached to this geometry. Float data is constructed if the vertex buffer data cannot be returned directly.\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param copyWhenShared defines if the returned array must be cloned upon returning it if the current geometry is shared between multiple meshes\r\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\r\n     * @returns a float array containing vertex data\r\n     */\r\n    public getVerticesData(kind: string, copyWhenShared?: boolean, forceCopy?: boolean): Nullable<FloatArray> {\r\n        const vertexBuffer = this.getVertexBuffer(kind);\r\n        if (!vertexBuffer) {\r\n            return null;\r\n        }\r\n\r\n        return vertexBuffer.getFloatData(this._totalVertices, forceCopy || (copyWhenShared && this._meshes.length !== 1));\r\n    }\r\n\r\n    /**\r\n     * Copies the requested vertex data kind into the given vertex data map. Float data is constructed if the map doesn't have the data.\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @param vertexData defines the map that stores the resulting data\r\n     */\r\n    public copyVerticesData(kind: string, vertexData: { [kind: string]: Float32Array }): void {\r\n        const vertexBuffer = this.getVertexBuffer(kind);\r\n        if (!vertexBuffer) {\r\n            return;\r\n        }\r\n\r\n        vertexData[kind] ||= new Float32Array(this._totalVertices * vertexBuffer.getSize());\r\n        const data = vertexBuffer.getData();\r\n        if (data) {\r\n            CopyFloatData(\r\n                data,\r\n                vertexBuffer.getSize(),\r\n                vertexBuffer.type,\r\n                vertexBuffer.byteOffset,\r\n                vertexBuffer.byteStride,\r\n                vertexBuffer.normalized,\r\n                this._totalVertices,\r\n                vertexData[kind]\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a boolean defining if the vertex data for the requested `kind` is updatable\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @returns true if the vertex buffer with the specified kind is updatable\r\n     */\r\n    public isVertexBufferUpdatable(kind: string): boolean {\r\n        const vb = this._vertexBuffers[kind];\r\n\r\n        if (!vb) {\r\n            return false;\r\n        }\r\n\r\n        return vb.isUpdatable();\r\n    }\r\n\r\n    /**\r\n     * Gets a specific vertex buffer\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @returns a VertexBuffer\r\n     */\r\n    public getVertexBuffer(kind: string): Nullable<VertexBuffer> {\r\n        if (!this.isReady()) {\r\n            return null;\r\n        }\r\n        return this._vertexBuffers[kind];\r\n    }\r\n\r\n    /**\r\n     * Returns all vertex buffers\r\n     * @returns an object holding all vertex buffers indexed by kind\r\n     */\r\n    public getVertexBuffers(): Nullable<{ [key: string]: VertexBuffer }> {\r\n        if (!this.isReady()) {\r\n            return null;\r\n        }\r\n        return this._vertexBuffers;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if specific vertex buffer is present\r\n     * @param kind defines the data kind (Position, normal, etc...)\r\n     * @returns true if data is present\r\n     */\r\n    public isVerticesDataPresent(kind: string): boolean {\r\n        if (!this._vertexBuffers) {\r\n            if (this._delayInfo) {\r\n                return this._delayInfo.indexOf(kind) !== -1;\r\n            }\r\n            return false;\r\n        }\r\n        return this._vertexBuffers[kind] !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Gets a list of all attached data kinds (Position, normal, etc...)\r\n     * @returns a list of string containing all kinds\r\n     */\r\n    public getVerticesDataKinds(): string[] {\r\n        const result = [];\r\n        let kind;\r\n        if (!this._vertexBuffers && this._delayInfo) {\r\n            for (kind in this._delayInfo) {\r\n                result.push(kind);\r\n            }\r\n        } else {\r\n            for (kind in this._vertexBuffers) {\r\n                result.push(kind);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Update index buffer\r\n     * @param indices defines the indices to store in the index buffer\r\n     * @param offset defines the offset in the target buffer where to store the data\r\n     * @param gpuMemoryOnly defines a boolean indicating that only the GPU memory must be updated leaving the CPU version of the indices unchanged (false by default)\r\n     */\r\n    public updateIndices(indices: IndicesArray, offset?: number, gpuMemoryOnly = false): void {\r\n        if (!this._indexBuffer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._indexBufferIsUpdatable) {\r\n            this.setIndices(indices, null, true);\r\n        } else {\r\n            const needToUpdateSubMeshes = indices.length !== this._indices.length;\r\n\r\n            if (!gpuMemoryOnly) {\r\n                this._indices = indices.slice();\r\n            }\r\n            this._engine.updateDynamicIndexBuffer(this._indexBuffer, indices, offset);\r\n            if (needToUpdateSubMeshes) {\r\n                for (const mesh of this._meshes) {\r\n                    mesh._createGlobalSubMesh(true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the index buffer for this geometry.\r\n     * @param indexBuffer Defines the index buffer to use for this geometry\r\n     * @param totalVertices Defines the total number of vertices used by the buffer\r\n     * @param totalIndices Defines the total number of indices in the index buffer\r\n     * @param is32Bits Defines if the indices are 32 bits. If null (default), the value is guessed from the number of vertices\r\n     */\r\n    public setIndexBuffer(indexBuffer: DataBuffer, totalVertices: number, totalIndices: number, is32Bits: Nullable<boolean> = null): void {\r\n        this._indices = [];\r\n        this._indexBufferIsUpdatable = false;\r\n        this._indexBuffer = indexBuffer;\r\n        this._totalVertices = totalVertices;\r\n        this._totalIndices = totalIndices;\r\n\r\n        if (is32Bits === null) {\r\n            indexBuffer.is32Bits = totalVertices > 65535;\r\n        } else {\r\n            indexBuffer.is32Bits = is32Bits;\r\n        }\r\n\r\n        for (const mesh of this._meshes) {\r\n            mesh._createGlobalSubMesh(true);\r\n            mesh.synchronizeInstances();\r\n        }\r\n\r\n        this._notifyUpdate();\r\n    }\r\n\r\n    /**\r\n     * Creates a new index buffer\r\n     * @param indices defines the indices to store in the index buffer\r\n     * @param totalVertices defines the total number of vertices (could be null)\r\n     * @param updatable defines if the index buffer must be flagged as updatable (false by default)\r\n     * @param dontForceSubMeshRecreation defines a boolean indicating that we don't want to force the recreation of sub-meshes if we don't have to (false by default)\r\n     */\r\n    public setIndices(indices: IndicesArray, totalVertices: Nullable<number> = null, updatable: boolean = false, dontForceSubMeshRecreation = false): void {\r\n        if (this._indexBuffer) {\r\n            this._engine._releaseBuffer(this._indexBuffer);\r\n        }\r\n\r\n        this._indices = indices;\r\n        this._indexBufferIsUpdatable = updatable;\r\n        if (this._meshes.length !== 0 && this._indices) {\r\n            this._indexBuffer = this._engine.createIndexBuffer(this._indices, updatable, \"Geometry_\" + this.id + \"_IndexBuffer\");\r\n        }\r\n\r\n        if (totalVertices != undefined) {\r\n            // including null and undefined\r\n            this._totalVertices = totalVertices;\r\n        }\r\n\r\n        for (const mesh of this._meshes) {\r\n            mesh._createGlobalSubMesh(!dontForceSubMeshRecreation);\r\n            mesh.synchronizeInstances();\r\n        }\r\n\r\n        this._notifyUpdate();\r\n    }\r\n\r\n    /**\r\n     * Return the total number of indices\r\n     * @returns the total number of indices\r\n     */\r\n    public getTotalIndices(): number {\r\n        if (!this.isReady()) {\r\n            return 0;\r\n        }\r\n        return this._totalIndices !== undefined ? this._totalIndices : this._indices.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the index buffer array\r\n     * @param copyWhenShared defines if the returned array must be cloned upon returning it if the current geometry is shared between multiple meshes\r\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\r\n     * @returns the index buffer array\r\n     */\r\n    public getIndices(copyWhenShared?: boolean, forceCopy?: boolean): Nullable<IndicesArray> {\r\n        if (!this.isReady()) {\r\n            return null;\r\n        }\r\n        const orig = this._indices;\r\n        if (!forceCopy && (!copyWhenShared || this._meshes.length === 1)) {\r\n            return orig;\r\n        } else {\r\n            return orig.slice();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the index buffer\r\n     * @returns the index buffer\r\n     */\r\n    public getIndexBuffer(): Nullable<DataBuffer> {\r\n        if (!this.isReady()) {\r\n            return null;\r\n        }\r\n        return this._indexBuffer;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _releaseVertexArrayObject(effect: Nullable<Effect> = null) {\r\n        if (!effect || !this._vertexArrayObjects) {\r\n            return;\r\n        }\r\n\r\n        if (this._vertexArrayObjects[effect.key]) {\r\n            (this._engine as ThinEngine).releaseVertexArrayObject(this._vertexArrayObjects[effect.key]);\r\n            delete this._vertexArrayObjects[effect.key];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release the associated resources for a specific mesh\r\n     * @param mesh defines the source mesh\r\n     * @param shouldDispose defines if the geometry must be disposed if there is no more mesh pointing to it\r\n     */\r\n    public releaseForMesh(mesh: Mesh, shouldDispose?: boolean): void {\r\n        const meshes = this._meshes;\r\n        const index = meshes.indexOf(mesh);\r\n\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n\r\n        meshes.splice(index, 1);\r\n\r\n        if (this._vertexArrayObjects) {\r\n            mesh._invalidateInstanceVertexArrayObject();\r\n        }\r\n\r\n        mesh._geometry = null;\r\n\r\n        if (meshes.length === 0 && shouldDispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Apply current geometry to a given mesh\r\n     * @param mesh defines the mesh to apply geometry to\r\n     */\r\n    public applyToMesh(mesh: Mesh): void {\r\n        if (mesh._geometry === this) {\r\n            return;\r\n        }\r\n\r\n        const previousGeometry = mesh._geometry;\r\n        if (previousGeometry) {\r\n            previousGeometry.releaseForMesh(mesh);\r\n        }\r\n\r\n        if (this._vertexArrayObjects) {\r\n            mesh._invalidateInstanceVertexArrayObject();\r\n        }\r\n\r\n        const meshes = this._meshes;\r\n\r\n        // must be done before setting vertexBuffers because of mesh._createGlobalSubMesh()\r\n        mesh._geometry = this;\r\n        mesh._internalAbstractMeshDataInfo._positions = null;\r\n\r\n        this._scene.pushGeometry(this);\r\n\r\n        meshes.push(mesh);\r\n\r\n        if (this.isReady()) {\r\n            this._applyToMesh(mesh);\r\n        } else if (this._boundingInfo) {\r\n            mesh.setBoundingInfo(this._boundingInfo);\r\n        }\r\n    }\r\n\r\n    private _updateExtend(data: Nullable<FloatArray> = null) {\r\n        if (this.useBoundingInfoFromGeometry && this._boundingInfo) {\r\n            this._extend = {\r\n                minimum: this._boundingInfo.minimum.clone(),\r\n                maximum: this._boundingInfo.maximum.clone(),\r\n            };\r\n        } else {\r\n            if (!data) {\r\n                data = this.getVerticesData(VertexBuffer.PositionKind)!;\r\n                // This can happen if the buffer comes from a Hardware Buffer where\r\n                // The data have not been uploaded by Babylon. (ex: Compute Shaders and Storage Buffers)\r\n                if (!data) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            this._extend = extractMinAndMax(data, 0, this._totalVertices, this.boundingBias, 3);\r\n        }\r\n    }\r\n\r\n    private _applyToMesh(mesh: Mesh): void {\r\n        // vertexBuffers\r\n        for (const kind in this._vertexBuffers) {\r\n            const vertexBuffer = this._vertexBuffers[kind];\r\n            if (!vertexBuffer._buffer.getBuffer()) {\r\n                vertexBuffer.create();\r\n            }\r\n\r\n            if (kind === VertexBuffer.PositionKind) {\r\n                if (!this._extend) {\r\n                    this._updateExtend();\r\n                }\r\n                mesh.buildBoundingInfo(this._extend.minimum, this._extend.maximum);\r\n\r\n                mesh._createGlobalSubMesh(mesh.isUnIndexed);\r\n\r\n                //bounding info was just created again, world matrix should be applied again.\r\n                mesh._updateBoundingInfo();\r\n            }\r\n        }\r\n\r\n        // indexBuffer\r\n        if (!this._indexBuffer && this._indices && this._indices.length > 0) {\r\n            this._indexBuffer = this._engine.createIndexBuffer(this._indices, this._updatable, \"Geometry_\" + this.id + \"_IndexBuffer\");\r\n        }\r\n\r\n        // morphTargets\r\n        mesh._syncGeometryWithMorphTargetManager();\r\n\r\n        // instances\r\n        mesh.synchronizeInstances();\r\n    }\r\n\r\n    private _notifyUpdate(kind?: string) {\r\n        if (this.onGeometryUpdated) {\r\n            this.onGeometryUpdated(this, kind);\r\n        }\r\n\r\n        if (this._vertexArrayObjects) {\r\n            this._disposeVertexArrayObjects();\r\n        }\r\n\r\n        for (const mesh of this._meshes) {\r\n            mesh._markSubMeshesAsAttributesDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Load the geometry if it was flagged as delay loaded\r\n     * @param scene defines the hosting scene\r\n     * @param onLoaded defines a callback called when the geometry is loaded\r\n     */\r\n    public load(scene: Scene, onLoaded?: () => void): void {\r\n        if (this.delayLoadState === Constants.DELAYLOADSTATE_LOADING) {\r\n            return;\r\n        }\r\n\r\n        if (this.isReady()) {\r\n            if (onLoaded) {\r\n                onLoaded();\r\n            }\r\n            return;\r\n        }\r\n\r\n        this.delayLoadState = Constants.DELAYLOADSTATE_LOADING;\r\n\r\n        this._queueLoad(scene, onLoaded);\r\n    }\r\n\r\n    private _queueLoad(scene: Scene, onLoaded?: () => void): void {\r\n        if (!this.delayLoadingFile) {\r\n            return;\r\n        }\r\n\r\n        scene.addPendingData(this);\r\n        scene._loadFile(\r\n            this.delayLoadingFile,\r\n            (data) => {\r\n                if (!this._delayLoadingFunction) {\r\n                    return;\r\n                }\r\n\r\n                this._delayLoadingFunction(JSON.parse(data as string), this);\r\n\r\n                this.delayLoadState = Constants.DELAYLOADSTATE_LOADED;\r\n                this._delayInfo = [];\r\n\r\n                scene.removePendingData(this);\r\n\r\n                const meshes = this._meshes;\r\n                const numOfMeshes = meshes.length;\r\n                for (let index = 0; index < numOfMeshes; index++) {\r\n                    this._applyToMesh(meshes[index]);\r\n                }\r\n\r\n                if (onLoaded) {\r\n                    onLoaded();\r\n                }\r\n            },\r\n            undefined,\r\n            true\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Invert the geometry to move from a right handed system to a left handed one.\r\n     */\r\n    public toLeftHanded(): void {\r\n        // Flip faces\r\n        const tIndices = this.getIndices(false);\r\n        if (tIndices != null && tIndices.length > 0) {\r\n            for (let i = 0; i < tIndices.length; i += 3) {\r\n                const tTemp = tIndices[i + 0];\r\n                tIndices[i + 0] = tIndices[i + 2];\r\n                tIndices[i + 2] = tTemp;\r\n            }\r\n            this.setIndices(tIndices);\r\n        }\r\n\r\n        // Negate position.z\r\n        const tPositions = this.getVerticesData(VertexBuffer.PositionKind, false);\r\n        if (tPositions != null && tPositions.length > 0) {\r\n            for (let i = 0; i < tPositions.length; i += 3) {\r\n                tPositions[i + 2] = -tPositions[i + 2];\r\n            }\r\n            this.setVerticesData(VertexBuffer.PositionKind, tPositions, false);\r\n        }\r\n\r\n        // Negate normal.z\r\n        const tNormals = this.getVerticesData(VertexBuffer.NormalKind, false);\r\n        if (tNormals != null && tNormals.length > 0) {\r\n            for (let i = 0; i < tNormals.length; i += 3) {\r\n                tNormals[i + 2] = -tNormals[i + 2];\r\n            }\r\n            this.setVerticesData(VertexBuffer.NormalKind, tNormals, false);\r\n        }\r\n    }\r\n\r\n    // Cache\r\n    /** @internal */\r\n    public _resetPointsArrayCache(): void {\r\n        this._positions = null;\r\n    }\r\n\r\n    /** @internal */\r\n    public _generatePointsArray(): boolean {\r\n        if (this._positions) {\r\n            return true;\r\n        }\r\n\r\n        const data = this.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        if (!data || data.length === 0) {\r\n            return false;\r\n        }\r\n\r\n        for (let index = this._positionsCache.length * 3, arrayIdx = this._positionsCache.length; index < data.length; index += 3, ++arrayIdx) {\r\n            this._positionsCache[arrayIdx] = Vector3.FromArray(data, index);\r\n        }\r\n\r\n        for (let index = 0, arrayIdx = 0; index < data.length; index += 3, ++arrayIdx) {\r\n            this._positionsCache[arrayIdx].set(data[0 + index], data[1 + index], data[2 + index]);\r\n        }\r\n\r\n        // just in case the number of positions was reduced, splice the array\r\n        this._positionsCache.length = data.length / 3;\r\n\r\n        this._positions = this._positionsCache;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets a value indicating if the geometry is disposed\r\n     * @returns true if the geometry was disposed\r\n     */\r\n    public isDisposed(): boolean {\r\n        return this._isDisposed;\r\n    }\r\n\r\n    private _disposeVertexArrayObjects(): void {\r\n        if (this._vertexArrayObjects) {\r\n            for (const kind in this._vertexArrayObjects) {\r\n                (this._engine as ThinEngine).releaseVertexArrayObject(this._vertexArrayObjects[kind]);\r\n            }\r\n            this._vertexArrayObjects = {}; // Will trigger a rebuild of the VAO if supported\r\n\r\n            const meshes = this._meshes;\r\n            const numOfMeshes = meshes.length;\r\n            for (let index = 0; index < numOfMeshes; index++) {\r\n                meshes[index]._invalidateInstanceVertexArrayObject();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Free all associated resources\r\n     */\r\n    public dispose(): void {\r\n        const meshes = this._meshes;\r\n        const numOfMeshes = meshes.length;\r\n        let index: number;\r\n        for (index = 0; index < numOfMeshes; index++) {\r\n            this.releaseForMesh(meshes[index]);\r\n        }\r\n        this._meshes.length = 0;\r\n\r\n        this._disposeVertexArrayObjects();\r\n\r\n        for (const kind in this._vertexBuffers) {\r\n            this._vertexBuffers[kind].dispose();\r\n        }\r\n        this._vertexBuffers = {};\r\n        this._totalVertices = 0;\r\n\r\n        if (this._indexBuffer) {\r\n            this._engine._releaseBuffer(this._indexBuffer);\r\n        }\r\n        this._indexBuffer = null;\r\n        this._indices = [];\r\n\r\n        this.delayLoadState = Constants.DELAYLOADSTATE_NONE;\r\n        this.delayLoadingFile = null;\r\n        this._delayLoadingFunction = null;\r\n        this._delayInfo = [];\r\n\r\n        this._boundingInfo = null;\r\n\r\n        this._scene.removeGeometry(this);\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.geometries.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.geometries.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        this._isDisposed = true;\r\n    }\r\n\r\n    /**\r\n     * Clone the current geometry into a new geometry\r\n     * @param id defines the unique ID of the new geometry\r\n     * @returns a new geometry object\r\n     */\r\n    public copy(id: string): Geometry {\r\n        const geometry = new Geometry(id, this._scene);\r\n\r\n        const indices = this.getIndices(undefined, true);\r\n        if (indices) {\r\n            geometry.setIndices(indices);\r\n        }\r\n\r\n        let updatable = false;\r\n        let kind;\r\n        for (kind in this._vertexBuffers) {\r\n            const vb = this.getVertexBuffer(kind)!;\r\n            const bufferData = vb.getData();\r\n            if (!bufferData) {\r\n                continue;\r\n            }\r\n\r\n            const isUpdatable = vb.isUpdatable();\r\n            const size = vb.getSize();\r\n            const { type, byteOffset, byteStride, normalized } = vb;\r\n            updatable = updatable || isUpdatable;\r\n\r\n            const data = GetTypedArrayData(bufferData, size, type, byteOffset, byteStride, normalized, this._totalVertices, true);\r\n            const newVb = new VertexBuffer(this._engine, data, kind, {\r\n                updatable: isUpdatable,\r\n                useBytes: true,\r\n                stride: byteStride,\r\n                size: size,\r\n                offset: byteOffset,\r\n                type: type,\r\n                normalized: normalized,\r\n                takeBufferOwnership: true,\r\n            });\r\n\r\n            geometry.setVerticesBuffer(newVb, this._totalVertices);\r\n        }\r\n\r\n        geometry._updatable = updatable;\r\n\r\n        geometry.delayLoadState = this.delayLoadState;\r\n        geometry.delayLoadingFile = this.delayLoadingFile;\r\n        geometry._delayLoadingFunction = this._delayLoadingFunction;\r\n\r\n        for (kind in this._delayInfo) {\r\n            geometry._delayInfo = geometry._delayInfo || [];\r\n            geometry._delayInfo.push(kind);\r\n        }\r\n\r\n        // Bounding info\r\n        geometry._boundingInfo = new BoundingInfo(this._extend.minimum, this._extend.maximum);\r\n\r\n        return geometry;\r\n    }\r\n\r\n    /**\r\n     * Serialize the current geometry info (and not the vertices data) into a JSON object\r\n     * @returns a JSON representation of the current geometry data (without the vertices data)\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.id = this.id;\r\n        serializationObject.uniqueId = this.uniqueId;\r\n        serializationObject.updatable = this._updatable;\r\n\r\n        if (Tags && Tags.HasTags(this)) {\r\n            serializationObject.tags = Tags.GetTags(this);\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    private _toNumberArray(origin: Nullable<Float32Array | IndicesArray>): number[] {\r\n        if (Array.isArray(origin)) {\r\n            return origin;\r\n        } else {\r\n            return Array.prototype.slice.call(origin);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release any memory retained by the cached data on the Geometry.\r\n     *\r\n     * Call this function to reduce memory footprint of the mesh.\r\n     * Vertex buffers will not store CPU data anymore (this will prevent picking, collisions or physics to work correctly)\r\n     */\r\n    public clearCachedData(): void {\r\n        this._indices = [];\r\n        this._resetPointsArrayCache();\r\n\r\n        for (const vbName in this._vertexBuffers) {\r\n            if (!Object.prototype.hasOwnProperty.call(this._vertexBuffers, vbName)) {\r\n                continue;\r\n            }\r\n            this._vertexBuffers[vbName]._buffer._data = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serialize all vertices data into a JSON object\r\n     * @returns a JSON representation of the current geometry data\r\n     */\r\n    public serializeVerticeData(): any {\r\n        const serializationObject = this.serialize();\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.PositionKind)) {\r\n            serializationObject.positions = this._toNumberArray(this.getVerticesData(VertexBuffer.PositionKind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.PositionKind)) {\r\n                serializationObject.positionsUpdatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n            serializationObject.normals = this._toNumberArray(this.getVerticesData(VertexBuffer.NormalKind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.NormalKind)) {\r\n                serializationObject.normalsUpdatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.TangentKind)) {\r\n            serializationObject.tangents = this._toNumberArray(this.getVerticesData(VertexBuffer.TangentKind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.TangentKind)) {\r\n                serializationObject.tangentsUpdatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n            serializationObject.uvs = this._toNumberArray(this.getVerticesData(VertexBuffer.UVKind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.UVKind)) {\r\n                serializationObject.uvsUpdatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\r\n            serializationObject.uvs2 = this._toNumberArray(this.getVerticesData(VertexBuffer.UV2Kind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.UV2Kind)) {\r\n                serializationObject.uvs2Updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.UV3Kind)) {\r\n            serializationObject.uvs3 = this._toNumberArray(this.getVerticesData(VertexBuffer.UV3Kind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.UV3Kind)) {\r\n                serializationObject.uvs3Updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.UV4Kind)) {\r\n            serializationObject.uvs4 = this._toNumberArray(this.getVerticesData(VertexBuffer.UV4Kind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.UV4Kind)) {\r\n                serializationObject.uvs4Updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.UV5Kind)) {\r\n            serializationObject.uvs5 = this._toNumberArray(this.getVerticesData(VertexBuffer.UV5Kind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.UV5Kind)) {\r\n                serializationObject.uvs5Updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.UV6Kind)) {\r\n            serializationObject.uvs6 = this._toNumberArray(this.getVerticesData(VertexBuffer.UV6Kind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.UV6Kind)) {\r\n                serializationObject.uvs6Updatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.ColorKind)) {\r\n            serializationObject.colors = this._toNumberArray(this.getVerticesData(VertexBuffer.ColorKind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.ColorKind)) {\r\n                serializationObject.colorsUpdatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.MatricesIndicesKind)) {\r\n            serializationObject.matricesIndices = this._toNumberArray(this.getVerticesData(VertexBuffer.MatricesIndicesKind));\r\n            serializationObject.matricesIndicesExpanded = true;\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.MatricesIndicesKind)) {\r\n                serializationObject.matricesIndicesUpdatable = true;\r\n            }\r\n        }\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\r\n            serializationObject.matricesWeights = this._toNumberArray(this.getVerticesData(VertexBuffer.MatricesWeightsKind));\r\n            if (this.isVertexBufferUpdatable(VertexBuffer.MatricesWeightsKind)) {\r\n                serializationObject.matricesWeightsUpdatable = true;\r\n            }\r\n        }\r\n\r\n        serializationObject.indices = this._toNumberArray(this.getIndices());\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Extracts a clone of a mesh geometry\r\n     * @param mesh defines the source mesh\r\n     * @param id defines the unique ID of the new geometry object\r\n     * @returns the new geometry object\r\n     */\r\n    public static ExtractFromMesh(mesh: Mesh, id: string): Nullable<Geometry> {\r\n        const geometry = mesh._geometry;\r\n\r\n        if (!geometry) {\r\n            return null;\r\n        }\r\n\r\n        return geometry.copy(id);\r\n    }\r\n\r\n    /**\r\n     * You should now use Tools.RandomId(), this method is still here for legacy reasons.\r\n     * Implementation from http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#answer-2117523\r\n     * Be aware Math.random() could cause collisions, but:\r\n     * \"All but 6 of the 128 bits of the ID are randomly generated, which means that for any two ids, there's a 1 in 2^^122 (or 5.3x10^^36) chance they'll collide\"\r\n     * @returns a string containing a new GUID\r\n     */\r\n    public static RandomId(): string {\r\n        return Tools.RandomId();\r\n    }\r\n\r\n    private static _GetGeometryByLoadedUniqueId(uniqueId: string, scene: Scene) {\r\n        for (let index = 0; index < scene.geometries.length; index++) {\r\n            if (scene.geometries[index]._loadedUniqueId === uniqueId) {\r\n                return scene.geometries[index];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _ImportGeometry(parsedGeometry: any, mesh: Mesh): void {\r\n        const scene = mesh.getScene();\r\n\r\n        // Geometry\r\n        const geometryUniqueId = parsedGeometry.geometryUniqueId;\r\n        const geometryId = parsedGeometry.geometryId;\r\n        if (geometryUniqueId || geometryId) {\r\n            const geometry = geometryUniqueId ? this._GetGeometryByLoadedUniqueId(geometryUniqueId, scene) : scene.getGeometryById(geometryId);\r\n            if (geometry) {\r\n                geometry.applyToMesh(mesh);\r\n            }\r\n        } else if (parsedGeometry instanceof ArrayBuffer) {\r\n            const binaryInfo = mesh._binaryInfo;\r\n\r\n            if (binaryInfo.positionsAttrDesc && binaryInfo.positionsAttrDesc.count > 0) {\r\n                const positionsData = new Float32Array(parsedGeometry, binaryInfo.positionsAttrDesc.offset, binaryInfo.positionsAttrDesc.count);\r\n                mesh.setVerticesData(VertexBuffer.PositionKind, positionsData, false);\r\n            }\r\n\r\n            if (binaryInfo.normalsAttrDesc && binaryInfo.normalsAttrDesc.count > 0) {\r\n                const normalsData = new Float32Array(parsedGeometry, binaryInfo.normalsAttrDesc.offset, binaryInfo.normalsAttrDesc.count);\r\n                mesh.setVerticesData(VertexBuffer.NormalKind, normalsData, false);\r\n            }\r\n\r\n            if (binaryInfo.tangetsAttrDesc && binaryInfo.tangetsAttrDesc.count > 0) {\r\n                const tangentsData = new Float32Array(parsedGeometry, binaryInfo.tangetsAttrDesc.offset, binaryInfo.tangetsAttrDesc.count);\r\n                mesh.setVerticesData(VertexBuffer.TangentKind, tangentsData, false);\r\n            }\r\n\r\n            if (binaryInfo.uvsAttrDesc && binaryInfo.uvsAttrDesc.count > 0) {\r\n                const uvsData = new Float32Array(parsedGeometry, binaryInfo.uvsAttrDesc.offset, binaryInfo.uvsAttrDesc.count);\r\n                if (useOpenGLOrientationForUV) {\r\n                    for (let index = 1; index < uvsData.length; index += 2) {\r\n                        uvsData[index] = 1 - uvsData[index];\r\n                    }\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.UVKind, uvsData, false);\r\n            }\r\n\r\n            if (binaryInfo.uvs2AttrDesc && binaryInfo.uvs2AttrDesc.count > 0) {\r\n                const uvs2Data = new Float32Array(parsedGeometry, binaryInfo.uvs2AttrDesc.offset, binaryInfo.uvs2AttrDesc.count);\r\n                if (useOpenGLOrientationForUV) {\r\n                    for (let index = 1; index < uvs2Data.length; index += 2) {\r\n                        uvs2Data[index] = 1 - uvs2Data[index];\r\n                    }\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.UV2Kind, uvs2Data, false);\r\n            }\r\n\r\n            if (binaryInfo.uvs3AttrDesc && binaryInfo.uvs3AttrDesc.count > 0) {\r\n                const uvs3Data = new Float32Array(parsedGeometry, binaryInfo.uvs3AttrDesc.offset, binaryInfo.uvs3AttrDesc.count);\r\n                if (useOpenGLOrientationForUV) {\r\n                    for (let index = 1; index < uvs3Data.length; index += 2) {\r\n                        uvs3Data[index] = 1 - uvs3Data[index];\r\n                    }\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.UV3Kind, uvs3Data, false);\r\n            }\r\n\r\n            if (binaryInfo.uvs4AttrDesc && binaryInfo.uvs4AttrDesc.count > 0) {\r\n                const uvs4Data = new Float32Array(parsedGeometry, binaryInfo.uvs4AttrDesc.offset, binaryInfo.uvs4AttrDesc.count);\r\n                if (useOpenGLOrientationForUV) {\r\n                    for (let index = 1; index < uvs4Data.length; index += 2) {\r\n                        uvs4Data[index] = 1 - uvs4Data[index];\r\n                    }\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.UV4Kind, uvs4Data, false);\r\n            }\r\n\r\n            if (binaryInfo.uvs5AttrDesc && binaryInfo.uvs5AttrDesc.count > 0) {\r\n                const uvs5Data = new Float32Array(parsedGeometry, binaryInfo.uvs5AttrDesc.offset, binaryInfo.uvs5AttrDesc.count);\r\n                if (useOpenGLOrientationForUV) {\r\n                    for (let index = 1; index < uvs5Data.length; index += 2) {\r\n                        uvs5Data[index] = 1 - uvs5Data[index];\r\n                    }\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.UV5Kind, uvs5Data, false);\r\n            }\r\n\r\n            if (binaryInfo.uvs6AttrDesc && binaryInfo.uvs6AttrDesc.count > 0) {\r\n                const uvs6Data = new Float32Array(parsedGeometry, binaryInfo.uvs6AttrDesc.offset, binaryInfo.uvs6AttrDesc.count);\r\n                if (useOpenGLOrientationForUV) {\r\n                    for (let index = 1; index < uvs6Data.length; index += 2) {\r\n                        uvs6Data[index] = 1 - uvs6Data[index];\r\n                    }\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.UV6Kind, uvs6Data, false);\r\n            }\r\n\r\n            if (binaryInfo.colorsAttrDesc && binaryInfo.colorsAttrDesc.count > 0) {\r\n                const colorsData = new Float32Array(parsedGeometry, binaryInfo.colorsAttrDesc.offset, binaryInfo.colorsAttrDesc.count);\r\n                mesh.setVerticesData(VertexBuffer.ColorKind, colorsData, false, binaryInfo.colorsAttrDesc.stride);\r\n            }\r\n\r\n            if (binaryInfo.matricesIndicesAttrDesc && binaryInfo.matricesIndicesAttrDesc.count > 0) {\r\n                const matricesIndicesData = new Int32Array(parsedGeometry, binaryInfo.matricesIndicesAttrDesc.offset, binaryInfo.matricesIndicesAttrDesc.count);\r\n                const floatIndices = [];\r\n                for (let i = 0; i < matricesIndicesData.length; i++) {\r\n                    const index = matricesIndicesData[i];\r\n                    floatIndices.push(index & 0x000000ff);\r\n                    floatIndices.push((index & 0x0000ff00) >> 8);\r\n                    floatIndices.push((index & 0x00ff0000) >> 16);\r\n                    floatIndices.push((index >> 24) & 0xff); // & 0xFF to convert to v + 256 if v < 0\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.MatricesIndicesKind, floatIndices, false);\r\n            }\r\n\r\n            if (binaryInfo.matricesIndicesExtraAttrDesc && binaryInfo.matricesIndicesExtraAttrDesc.count > 0) {\r\n                const matricesIndicesData = new Int32Array(parsedGeometry, binaryInfo.matricesIndicesExtraAttrDesc.offset, binaryInfo.matricesIndicesExtraAttrDesc.count);\r\n                const floatIndices = [];\r\n                for (let i = 0; i < matricesIndicesData.length; i++) {\r\n                    const index = matricesIndicesData[i];\r\n                    floatIndices.push(index & 0x000000ff);\r\n                    floatIndices.push((index & 0x0000ff00) >> 8);\r\n                    floatIndices.push((index & 0x00ff0000) >> 16);\r\n                    floatIndices.push((index >> 24) & 0xff); // & 0xFF to convert to v + 256 if v < 0\r\n                }\r\n                mesh.setVerticesData(VertexBuffer.MatricesIndicesExtraKind, floatIndices, false);\r\n            }\r\n\r\n            if (binaryInfo.matricesWeightsAttrDesc && binaryInfo.matricesWeightsAttrDesc.count > 0) {\r\n                const matricesWeightsData = new Float32Array(parsedGeometry, binaryInfo.matricesWeightsAttrDesc.offset, binaryInfo.matricesWeightsAttrDesc.count);\r\n                mesh.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeightsData, false);\r\n            }\r\n\r\n            if (binaryInfo.indicesAttrDesc && binaryInfo.indicesAttrDesc.count > 0) {\r\n                const indicesData = new Int32Array(parsedGeometry, binaryInfo.indicesAttrDesc.offset, binaryInfo.indicesAttrDesc.count);\r\n                mesh.setIndices(indicesData, null);\r\n            }\r\n\r\n            if (binaryInfo.subMeshesAttrDesc && binaryInfo.subMeshesAttrDesc.count > 0) {\r\n                const subMeshesData = new Int32Array(parsedGeometry, binaryInfo.subMeshesAttrDesc.offset, binaryInfo.subMeshesAttrDesc.count * 5);\r\n\r\n                mesh.subMeshes = [];\r\n                for (let i = 0; i < binaryInfo.subMeshesAttrDesc.count; i++) {\r\n                    const materialIndex = subMeshesData[i * 5 + 0];\r\n                    const verticesStart = subMeshesData[i * 5 + 1];\r\n                    const verticesCount = subMeshesData[i * 5 + 2];\r\n                    const indexStart = subMeshesData[i * 5 + 3];\r\n                    const indexCount = subMeshesData[i * 5 + 4];\r\n\r\n                    SubMesh.AddToMesh(materialIndex, verticesStart, verticesCount, indexStart, indexCount, <AbstractMesh>mesh);\r\n                }\r\n            }\r\n        } else if (parsedGeometry.positions && parsedGeometry.normals && parsedGeometry.indices) {\r\n            mesh.setVerticesData(VertexBuffer.PositionKind, parsedGeometry.positions, parsedGeometry.positions._updatable || parsedGeometry.positionsUpdatable);\r\n\r\n            mesh.setVerticesData(VertexBuffer.NormalKind, parsedGeometry.normals, parsedGeometry.normals._updatable || parsedGeometry.normalsUpdatable);\r\n\r\n            if (parsedGeometry.tangents) {\r\n                mesh.setVerticesData(VertexBuffer.TangentKind, parsedGeometry.tangents, parsedGeometry.tangents._updatable || parsedGeometry.tangentsUpdatable);\r\n            }\r\n\r\n            if (parsedGeometry.uvs) {\r\n                mesh.setVerticesData(VertexBuffer.UVKind, parsedGeometry.uvs, parsedGeometry.uvs._updatable || parsedGeometry.uvsUpdatable);\r\n            }\r\n\r\n            if (parsedGeometry.uvs2) {\r\n                mesh.setVerticesData(VertexBuffer.UV2Kind, parsedGeometry.uvs2, parsedGeometry.uvs2._updatable || parsedGeometry.uvs2Updatable);\r\n            }\r\n\r\n            if (parsedGeometry.uvs3) {\r\n                mesh.setVerticesData(VertexBuffer.UV3Kind, parsedGeometry.uvs3, parsedGeometry.uvs3._updatable || parsedGeometry.uvs3Updatable);\r\n            }\r\n\r\n            if (parsedGeometry.uvs4) {\r\n                mesh.setVerticesData(VertexBuffer.UV4Kind, parsedGeometry.uvs4, parsedGeometry.uvs4._updatable || parsedGeometry.uvs4Updatable);\r\n            }\r\n\r\n            if (parsedGeometry.uvs5) {\r\n                mesh.setVerticesData(VertexBuffer.UV5Kind, parsedGeometry.uvs5, parsedGeometry.uvs5._updatable || parsedGeometry.uvs5Updatable);\r\n            }\r\n\r\n            if (parsedGeometry.uvs6) {\r\n                mesh.setVerticesData(VertexBuffer.UV6Kind, parsedGeometry.uvs6, parsedGeometry.uvs6._updatable || parsedGeometry.uvs6Updatable);\r\n            }\r\n\r\n            if (parsedGeometry.colors) {\r\n                mesh.setVerticesData(VertexBuffer.ColorKind, Color4.CheckColors4(parsedGeometry.colors, parsedGeometry.positions.length / 3), parsedGeometry.colors._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.matricesIndices) {\r\n                if (!parsedGeometry.matricesIndices._isExpanded && !parsedGeometry.matricesIndicesExpanded) {\r\n                    const floatIndices = [];\r\n\r\n                    for (let i = 0; i < parsedGeometry.matricesIndices.length; i++) {\r\n                        const matricesIndex = parsedGeometry.matricesIndices[i];\r\n\r\n                        floatIndices.push(matricesIndex & 0x000000ff);\r\n                        floatIndices.push((matricesIndex & 0x0000ff00) >> 8);\r\n                        floatIndices.push((matricesIndex & 0x00ff0000) >> 16);\r\n                        floatIndices.push((matricesIndex >> 24) & 0xff); // & 0xFF to convert to v + 256 if v < 0\r\n                    }\r\n\r\n                    mesh.setVerticesData(VertexBuffer.MatricesIndicesKind, floatIndices, parsedGeometry.matricesIndices._updatable || parsedGeometry.matricesIndicesUpdatable);\r\n                } else {\r\n                    delete parsedGeometry.matricesIndices._isExpanded;\r\n                    delete parsedGeometry.matricesIndicesExpanded;\r\n                    mesh.setVerticesData(\r\n                        VertexBuffer.MatricesIndicesKind,\r\n                        parsedGeometry.matricesIndices,\r\n                        parsedGeometry.matricesIndices._updatable || parsedGeometry.matricesIndicesUpdatable\r\n                    );\r\n                }\r\n            }\r\n\r\n            if (parsedGeometry.matricesIndicesExtra) {\r\n                if (!(parsedGeometry.matricesIndicesExtraExpanded || parsedGeometry.matricesIndicesExtra._isExpanded)) {\r\n                    const floatIndices = [];\r\n\r\n                    for (let i = 0; i < parsedGeometry.matricesIndicesExtra.length; i++) {\r\n                        const matricesIndex = parsedGeometry.matricesIndicesExtra[i];\r\n\r\n                        floatIndices.push(matricesIndex & 0x000000ff);\r\n                        floatIndices.push((matricesIndex & 0x0000ff00) >> 8);\r\n                        floatIndices.push((matricesIndex & 0x00ff0000) >> 16);\r\n                        floatIndices.push((matricesIndex >> 24) & 0xff); // & 0xFF to convert to v + 256 if v < 0\r\n                    }\r\n\r\n                    mesh.setVerticesData(\r\n                        VertexBuffer.MatricesIndicesExtraKind,\r\n                        floatIndices,\r\n                        parsedGeometry.matricesIndicesExtra._updatable || parsedGeometry.matricesIndicesExtraUpdatable\r\n                    );\r\n                } else {\r\n                    delete parsedGeometry.matricesIndices._isExpanded;\r\n                    delete parsedGeometry.matricesIndicesExtraExpanded;\r\n                    mesh.setVerticesData(\r\n                        VertexBuffer.MatricesIndicesExtraKind,\r\n                        parsedGeometry.matricesIndicesExtra,\r\n                        parsedGeometry.matricesIndicesExtra._updatable || parsedGeometry.matricesIndicesExtraUpdatable\r\n                    );\r\n                }\r\n            }\r\n\r\n            if (parsedGeometry.matricesWeights) {\r\n                Geometry._CleanMatricesWeights(parsedGeometry, mesh);\r\n                mesh.setVerticesData(VertexBuffer.MatricesWeightsKind, parsedGeometry.matricesWeights, parsedGeometry.matricesWeights._updatable);\r\n            }\r\n\r\n            if (parsedGeometry.matricesWeightsExtra) {\r\n                mesh.setVerticesData(VertexBuffer.MatricesWeightsExtraKind, parsedGeometry.matricesWeightsExtra, parsedGeometry.matricesWeights._updatable);\r\n            }\r\n\r\n            mesh.setIndices(parsedGeometry.indices, null);\r\n        }\r\n\r\n        // SubMeshes\r\n        if (parsedGeometry.subMeshes) {\r\n            mesh.subMeshes = [];\r\n            for (let subIndex = 0; subIndex < parsedGeometry.subMeshes.length; subIndex++) {\r\n                const parsedSubMesh = parsedGeometry.subMeshes[subIndex];\r\n\r\n                SubMesh.AddToMesh(\r\n                    parsedSubMesh.materialIndex,\r\n                    parsedSubMesh.verticesStart,\r\n                    parsedSubMesh.verticesCount,\r\n                    parsedSubMesh.indexStart,\r\n                    parsedSubMesh.indexCount,\r\n                    <AbstractMesh>mesh\r\n                );\r\n            }\r\n        }\r\n\r\n        // Flat shading\r\n        if (mesh._shouldGenerateFlatShading) {\r\n            mesh.convertToFlatShadedMesh();\r\n            mesh._shouldGenerateFlatShading = false;\r\n        }\r\n\r\n        // Update\r\n        mesh.computeWorldMatrix(true);\r\n\r\n        scene.onMeshImportedObservable.notifyObservers(<AbstractMesh>mesh);\r\n    }\r\n\r\n    private static _CleanMatricesWeights(parsedGeometry: any, mesh: Mesh): void {\r\n        const epsilon: number = 1e-3;\r\n        if (!SceneLoaderFlags.CleanBoneMatrixWeights) {\r\n            return;\r\n        }\r\n        let noInfluenceBoneIndex = 0.0;\r\n        if (parsedGeometry.skeletonId > -1) {\r\n            const skeleton = mesh.getScene().getLastSkeletonById(parsedGeometry.skeletonId);\r\n\r\n            if (!skeleton) {\r\n                return;\r\n            }\r\n            noInfluenceBoneIndex = skeleton.bones.length;\r\n        } else {\r\n            return;\r\n        }\r\n        const matricesIndices = <FloatArray>mesh.getVerticesData(VertexBuffer.MatricesIndicesKind);\r\n        const matricesIndicesExtra = <FloatArray>mesh.getVerticesData(VertexBuffer.MatricesIndicesExtraKind);\r\n        const matricesWeights = parsedGeometry.matricesWeights;\r\n        const matricesWeightsExtra = parsedGeometry.matricesWeightsExtra;\r\n        const influencers = parsedGeometry.numBoneInfluencer;\r\n        const size = matricesWeights.length;\r\n\r\n        for (let i = 0; i < size; i += 4) {\r\n            let weight = 0.0;\r\n            let firstZeroWeight = -1;\r\n            for (let j = 0; j < 4; j++) {\r\n                const w = matricesWeights[i + j];\r\n                weight += w;\r\n                if (w < epsilon && firstZeroWeight < 0) {\r\n                    firstZeroWeight = j;\r\n                }\r\n            }\r\n            if (matricesWeightsExtra) {\r\n                for (let j = 0; j < 4; j++) {\r\n                    const w = matricesWeightsExtra[i + j];\r\n                    weight += w;\r\n                    if (w < epsilon && firstZeroWeight < 0) {\r\n                        firstZeroWeight = j + 4;\r\n                    }\r\n                }\r\n            }\r\n            if (firstZeroWeight < 0 || firstZeroWeight > influencers - 1) {\r\n                firstZeroWeight = influencers - 1;\r\n            }\r\n            if (weight > epsilon) {\r\n                const mweight = 1.0 / weight;\r\n                for (let j = 0; j < 4; j++) {\r\n                    matricesWeights[i + j] *= mweight;\r\n                }\r\n                if (matricesWeightsExtra) {\r\n                    for (let j = 0; j < 4; j++) {\r\n                        matricesWeightsExtra[i + j] *= mweight;\r\n                    }\r\n                }\r\n            } else {\r\n                if (firstZeroWeight >= 4) {\r\n                    matricesWeightsExtra[i + firstZeroWeight - 4] = 1.0 - weight;\r\n                    matricesIndicesExtra[i + firstZeroWeight - 4] = noInfluenceBoneIndex;\r\n                } else {\r\n                    matricesWeights[i + firstZeroWeight] = 1.0 - weight;\r\n                    matricesIndices[i + firstZeroWeight] = noInfluenceBoneIndex;\r\n                }\r\n            }\r\n        }\r\n\r\n        mesh.setVerticesData(VertexBuffer.MatricesIndicesKind, matricesIndices);\r\n        if (parsedGeometry.matricesWeightsExtra) {\r\n            mesh.setVerticesData(VertexBuffer.MatricesIndicesExtraKind, matricesIndicesExtra);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a new geometry from persisted data (Using .babylon file format)\r\n     * @param parsedVertexData defines the persisted data\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root url to use to load assets (like delayed data)\r\n     * @returns the new geometry object\r\n     */\r\n    public static Parse(parsedVertexData: any, scene: Scene, rootUrl: string): Nullable<Geometry> {\r\n        const geometry = new Geometry(parsedVertexData.id, scene, undefined, parsedVertexData.updatable);\r\n        geometry._loadedUniqueId = parsedVertexData.uniqueId;\r\n\r\n        if (Tags) {\r\n            Tags.AddTagsTo(geometry, parsedVertexData.tags);\r\n        }\r\n\r\n        if (parsedVertexData.delayLoadingFile) {\r\n            geometry.delayLoadState = Constants.DELAYLOADSTATE_NOTLOADED;\r\n            geometry.delayLoadingFile = rootUrl + parsedVertexData.delayLoadingFile;\r\n            geometry._boundingInfo = new BoundingInfo(Vector3.FromArray(parsedVertexData.boundingBoxMinimum), Vector3.FromArray(parsedVertexData.boundingBoxMaximum));\r\n\r\n            geometry._delayInfo = [];\r\n            if (parsedVertexData.hasUVs) {\r\n                geometry._delayInfo.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (parsedVertexData.hasUVs2) {\r\n                geometry._delayInfo.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (parsedVertexData.hasUVs3) {\r\n                geometry._delayInfo.push(VertexBuffer.UV3Kind);\r\n            }\r\n\r\n            if (parsedVertexData.hasUVs4) {\r\n                geometry._delayInfo.push(VertexBuffer.UV4Kind);\r\n            }\r\n\r\n            if (parsedVertexData.hasUVs5) {\r\n                geometry._delayInfo.push(VertexBuffer.UV5Kind);\r\n            }\r\n\r\n            if (parsedVertexData.hasUVs6) {\r\n                geometry._delayInfo.push(VertexBuffer.UV6Kind);\r\n            }\r\n\r\n            if (parsedVertexData.hasColors) {\r\n                geometry._delayInfo.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (parsedVertexData.hasMatricesIndices) {\r\n                geometry._delayInfo.push(VertexBuffer.MatricesIndicesKind);\r\n            }\r\n\r\n            if (parsedVertexData.hasMatricesWeights) {\r\n                geometry._delayInfo.push(VertexBuffer.MatricesWeightsKind);\r\n            }\r\n\r\n            geometry._delayLoadingFunction = VertexData.ImportVertexData;\r\n        } else {\r\n            VertexData.ImportVertexData(parsedVertexData, geometry);\r\n        }\r\n\r\n        scene.pushGeometry(geometry, true);\r\n\r\n        return geometry;\r\n    }\r\n}\r\n", "import type { DeepImmutable, Nullable } from \"../types\";\r\nimport { serialize, serializeAsVector3, serializeAsQuaternion } from \"../Misc/decorators\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport { Observable } from \"../Misc/observable\";\r\n\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Quaternion, Matrix, Vector3, TmpVectors } from \"../Maths/math.vector\";\r\nimport { Node } from \"../node\";\r\nimport type { Bone } from \"../Bones/bone\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Space } from \"../Maths/math.axis\";\r\nimport { GetClass } from \"../Misc/typeStore\";\r\n\r\n/**\r\n * A TransformNode is an object that is not rendered but can be used as a center of transformation. This can decrease memory usage and increase rendering speed compared to using an empty mesh as a parent and is less complicated than using a pivot matrix.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/parent_pivot/transform_node\r\n */\r\nexport class TransformNode extends Node {\r\n    // Statics\r\n    /**\r\n     * Object will not rotate to face the camera\r\n     */\r\n    public static BILLBOARDMODE_NONE = 0;\r\n    /**\r\n     * Object will rotate to face the camera but only on the x axis\r\n     */\r\n    public static BILLBOARDMODE_X = 1;\r\n    /**\r\n     * Object will rotate to face the camera but only on the y axis\r\n     */\r\n    public static BILLBOARDMODE_Y = 2;\r\n    /**\r\n     * Object will rotate to face the camera but only on the z axis\r\n     */\r\n    public static BILLBOARDMODE_Z = 4;\r\n    /**\r\n     * Object will rotate to face the camera\r\n     */\r\n    public static BILLBOARDMODE_ALL = 7;\r\n    /**\r\n     * Object will rotate to face the camera's position instead of orientation\r\n     */\r\n    public static BILLBOARDMODE_USE_POSITION = 128;\r\n    /**\r\n     * Child transform with Billboard flags should or should not apply parent rotation (default if off)\r\n     */\r\n    public static BillboardUseParentOrientation: boolean = false;\r\n\r\n    private static _TmpRotation = Quaternion.Zero();\r\n    private static _TmpScaling = Vector3.Zero();\r\n    private static _TmpTranslation = Vector3.Zero();\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private static _TmpRHRestore = Matrix.Scaling(1, 1, -1);\r\n\r\n    private _forward = new Vector3(0, 0, 1);\r\n    private _up = new Vector3(0, 1, 0);\r\n    private _right = new Vector3(1, 0, 0);\r\n\r\n    // Properties\r\n    @serializeAsVector3(\"position\")\r\n    private _position = Vector3.Zero();\r\n\r\n    @serializeAsVector3(\"rotation\")\r\n    private _rotation = Vector3.Zero();\r\n\r\n    @serializeAsQuaternion(\"rotationQuaternion\")\r\n    private _rotationQuaternion: Nullable<Quaternion> = null;\r\n\r\n    @serializeAsVector3(\"scaling\")\r\n    protected _scaling = Vector3.One();\r\n    private _transformToBoneReferal: Nullable<TransformNode> = null;\r\n    private _currentParentWhenAttachingToBone: Nullable<Node>;\r\n    private _isAbsoluteSynced = false;\r\n\r\n    @serialize(\"billboardMode\")\r\n    private _billboardMode = TransformNode.BILLBOARDMODE_NONE;\r\n\r\n    /**\r\n     * Gets or sets the billboard mode. Default is 0.\r\n     *\r\n     * | Value | Type | Description |\r\n     * | --- | --- | --- |\r\n     * | 0 | BILLBOARDMODE_NONE |  |\r\n     * | 1 | BILLBOARDMODE_X |  |\r\n     * | 2 | BILLBOARDMODE_Y |  |\r\n     * | 4 | BILLBOARDMODE_Z |  |\r\n     * | 7 | BILLBOARDMODE_ALL |  |\r\n     *\r\n     */\r\n    public get billboardMode() {\r\n        return this._billboardMode;\r\n    }\r\n\r\n    public set billboardMode(value: number) {\r\n        if (this._billboardMode === value) {\r\n            return;\r\n        }\r\n        this._billboardMode = value;\r\n        this._cache.useBillboardPosition = (this._billboardMode & TransformNode.BILLBOARDMODE_USE_POSITION) !== 0;\r\n    }\r\n\r\n    /**\r\n     * Multiplication factor on scale x/y/z when computing the world matrix. Eg. for a 1x1x1 cube setting this to 2 will make it a 2x2x2 cube\r\n     */\r\n    @serialize()\r\n    public scalingDeterminant = 1;\r\n\r\n    @serialize(\"infiniteDistance\")\r\n    private _infiniteDistance = false;\r\n\r\n    /**\r\n     * Gets or sets the distance of the object to max, often used by skybox\r\n     */\r\n    public get infiniteDistance() {\r\n        return this._infiniteDistance;\r\n    }\r\n\r\n    public set infiniteDistance(value: boolean) {\r\n        if (this._infiniteDistance === value) {\r\n            return;\r\n        }\r\n\r\n        this._infiniteDistance = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that non uniform scaling (when at least one component is different from others) should be ignored.\r\n     * By default the system will update normals to compensate\r\n     */\r\n    @serialize()\r\n    public ignoreNonUniformScaling = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that even if rotationQuaternion is defined, you can keep updating rotation property and Babylon.js will just mix both\r\n     */\r\n    @serialize()\r\n    public reIntegrateRotationIntoRotationQuaternion = false;\r\n\r\n    // Cache\r\n    /** @internal */\r\n    public _poseMatrix: Nullable<Matrix> = null;\r\n    /** @internal */\r\n    public _localMatrix = Matrix.Zero();\r\n\r\n    private _usePivotMatrix = false;\r\n    private _absolutePosition = Vector3.Zero();\r\n    private _absoluteScaling = Vector3.Zero();\r\n    private _absoluteRotationQuaternion = Quaternion.Identity();\r\n    private _pivotMatrix = Matrix.Identity();\r\n    private _pivotMatrixInverse: Matrix;\r\n    /** @internal */\r\n    public _postMultiplyPivotMatrix = false;\r\n\r\n    protected _isWorldMatrixFrozen = false;\r\n\r\n    /** @internal */\r\n    public _indexInSceneTransformNodesArray = -1;\r\n\r\n    /**\r\n     * An event triggered after the world matrix is updated\r\n     */\r\n    public onAfterWorldMatrixUpdateObservable = new Observable<TransformNode>();\r\n\r\n    constructor(name: string, scene: Nullable<Scene> = null, isPure = true) {\r\n        super(name, scene, false);\r\n\r\n        if (isPure) {\r\n            this.getScene().addTransformNode(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"TransformNode\" string\r\n     */\r\n    public override getClassName(): string {\r\n        return \"TransformNode\";\r\n    }\r\n\r\n    /**\r\n     * Gets or set the node position (default is (0.0, 0.0, 0.0))\r\n     */\r\n    public get position(): Vector3 {\r\n        return this._position;\r\n    }\r\n\r\n    public set position(newPosition: Vector3) {\r\n        this._position = newPosition;\r\n        this._markAsDirtyInternal();\r\n    }\r\n\r\n    /**\r\n     * return true if a pivot has been set\r\n     * @returns true if a pivot matrix is used\r\n     */\r\n    public isUsingPivotMatrix(): boolean {\r\n        return this._usePivotMatrix;\r\n    }\r\n\r\n    /**\r\n     * @returns true if pivot matrix must be cancelled in the world matrix. When this parameter is set to true (default), the inverse of the pivot matrix is also applied at the end to cancel the transformation effect.\r\n     */\r\n    public isUsingPostMultiplyPivotMatrix(): boolean {\r\n        return this._postMultiplyPivotMatrix;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the rotation property : a Vector3 defining the rotation value in radians around each local axis X, Y, Z  (default is (0.0, 0.0, 0.0)).\r\n     * If rotation quaternion is set, this Vector3 will be ignored and copy from the quaternion\r\n     */\r\n    public get rotation(): Vector3 {\r\n        return this._rotation;\r\n    }\r\n\r\n    public set rotation(newRotation: Vector3) {\r\n        this._rotation = newRotation;\r\n        this._rotationQuaternion = null;\r\n        this._markAsDirtyInternal();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the scaling property : a Vector3 defining the node scaling along each local axis X, Y, Z (default is (1.0, 1.0, 1.0)).\r\n     */\r\n    public get scaling(): Vector3 {\r\n        return this._scaling;\r\n    }\r\n\r\n    public set scaling(newScaling: Vector3) {\r\n        this._scaling = newScaling;\r\n        this._markAsDirtyInternal();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the rotation Quaternion property : this a Quaternion object defining the node rotation by using a unit quaternion (undefined by default, but can be null).\r\n     * If set, only the rotationQuaternion is then used to compute the node rotation (ie. node.rotation will be ignored)\r\n     */\r\n    public get rotationQuaternion(): Nullable<Quaternion> {\r\n        return this._rotationQuaternion;\r\n    }\r\n\r\n    public set rotationQuaternion(quaternion: Nullable<Quaternion>) {\r\n        this._rotationQuaternion = quaternion;\r\n        //reset the rotation vector.\r\n        if (quaternion) {\r\n            this._rotation.setAll(0.0);\r\n        }\r\n        this._markAsDirtyInternal();\r\n    }\r\n\r\n    /**\r\n     * Allow user to specify custom mechanism for mark as dirty\r\n     */\r\n    public customMarkAsDirty: () => void;\r\n\r\n    private _markAsDirtyInternal(): void {\r\n        if (this._isDirty) {\r\n            return;\r\n        }\r\n        this._isDirty = true;\r\n\r\n        if (this.customMarkAsDirty) {\r\n            this.customMarkAsDirty();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The forward direction of that transform in world space.\r\n     */\r\n    public get forward(): Vector3 {\r\n        Vector3.TransformNormalFromFloatsToRef(0, 0, this.getScene().useRightHandedSystem ? -1.0 : 1.0, this.getWorldMatrix(), this._forward);\r\n        return this._forward.normalize();\r\n    }\r\n\r\n    /**\r\n     * The up direction of that transform in world space.\r\n     */\r\n    public get up(): Vector3 {\r\n        Vector3.TransformNormalFromFloatsToRef(0, 1, 0, this.getWorldMatrix(), this._up);\r\n        return this._up.normalize();\r\n    }\r\n\r\n    /**\r\n     * The right direction of that transform in world space.\r\n     */\r\n    public get right(): Vector3 {\r\n        Vector3.TransformNormalFromFloatsToRef(this.getScene().useRightHandedSystem ? -1.0 : 1.0, 0, 0, this.getWorldMatrix(), this._right);\r\n        return this._right.normalize();\r\n    }\r\n\r\n    /**\r\n     * Copies the parameter passed Matrix into the mesh Pose matrix.\r\n     * @param matrix the matrix to copy the pose from\r\n     * @returns this TransformNode.\r\n     */\r\n    public updatePoseMatrix(matrix: Matrix): TransformNode {\r\n        if (!this._poseMatrix) {\r\n            this._poseMatrix = matrix.clone();\r\n            return this;\r\n        }\r\n        this._poseMatrix.copyFrom(matrix);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh Pose matrix.\r\n     * @returns the pose matrix\r\n     */\r\n    public getPoseMatrix(): Matrix {\r\n        if (!this._poseMatrix) {\r\n            this._poseMatrix = Matrix.Identity();\r\n        }\r\n        return this._poseMatrix;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _isSynchronized(): boolean {\r\n        const cache = this._cache;\r\n\r\n        if (this._billboardMode !== cache.billboardMode || this._billboardMode !== TransformNode.BILLBOARDMODE_NONE) {\r\n            return false;\r\n        }\r\n\r\n        if (cache.pivotMatrixUpdated) {\r\n            return false;\r\n        }\r\n\r\n        if (this._infiniteDistance) {\r\n            return false;\r\n        }\r\n\r\n        if (this._position._isDirty) {\r\n            return false;\r\n        }\r\n\r\n        if (this._scaling._isDirty) {\r\n            return false;\r\n        }\r\n\r\n        if ((this._rotationQuaternion && this._rotationQuaternion._isDirty) || this._rotation._isDirty) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _initCache() {\r\n        super._initCache();\r\n\r\n        const cache = this._cache;\r\n        cache.localMatrixUpdated = false;\r\n        cache.billboardMode = -1;\r\n        cache.infiniteDistance = false;\r\n        cache.useBillboardPosition = false;\r\n    }\r\n\r\n    /**\r\n     * Returns the current mesh absolute position.\r\n     * Returns a Vector3.\r\n     */\r\n    public get absolutePosition(): Vector3 {\r\n        return this.getAbsolutePosition();\r\n    }\r\n\r\n    /**\r\n     * Returns the current mesh absolute scaling.\r\n     * Returns a Vector3.\r\n     */\r\n    public get absoluteScaling(): Vector3 {\r\n        this._syncAbsoluteScalingAndRotation();\r\n        return this._absoluteScaling;\r\n    }\r\n\r\n    /**\r\n     * Returns the current mesh absolute rotation.\r\n     * Returns a Quaternion.\r\n     */\r\n    public get absoluteRotationQuaternion(): Quaternion {\r\n        this._syncAbsoluteScalingAndRotation();\r\n        return this._absoluteRotationQuaternion;\r\n    }\r\n\r\n    /**\r\n     * Sets a new matrix to apply before all other transformation\r\n     * @param matrix defines the transform matrix\r\n     * @returns the current TransformNode\r\n     */\r\n    public setPreTransformMatrix(matrix: Matrix): TransformNode {\r\n        return this.setPivotMatrix(matrix, false);\r\n    }\r\n\r\n    /**\r\n     * Sets a new pivot matrix to the current node\r\n     * @param matrix defines the new pivot matrix to use\r\n     * @param postMultiplyPivotMatrix defines if the pivot matrix must be cancelled in the world matrix. When this parameter is set to true (default), the inverse of the pivot matrix is also applied at the end to cancel the transformation effect\r\n     * @returns the current TransformNode\r\n     */\r\n    public setPivotMatrix(matrix: DeepImmutable<Matrix>, postMultiplyPivotMatrix = true): TransformNode {\r\n        this._pivotMatrix.copyFrom(matrix);\r\n        this._usePivotMatrix = !this._pivotMatrix.isIdentity();\r\n\r\n        this._cache.pivotMatrixUpdated = true;\r\n        this._postMultiplyPivotMatrix = postMultiplyPivotMatrix;\r\n\r\n        if (this._postMultiplyPivotMatrix) {\r\n            if (!this._pivotMatrixInverse) {\r\n                this._pivotMatrixInverse = Matrix.Invert(this._pivotMatrix);\r\n            } else {\r\n                this._pivotMatrix.invertToRef(this._pivotMatrixInverse);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh pivot matrix.\r\n     * Default : Identity.\r\n     * @returns the matrix\r\n     */\r\n    public getPivotMatrix(): Matrix {\r\n        return this._pivotMatrix;\r\n    }\r\n\r\n    /**\r\n     * Instantiate (when possible) or clone that node with its hierarchy\r\n     * @param newParent defines the new parent to use for the instance (or clone)\r\n     * @param options defines options to configure how copy is done\r\n     * @param options.doNotInstantiate defines if the model must be instantiated or just cloned\r\n     * @param onNewNodeCreated defines an option callback to call when a clone or an instance is created\r\n     * @returns an instance (or a clone) of the current node with its hierarchy\r\n     */\r\n    public instantiateHierarchy(\r\n        newParent: Nullable<TransformNode> = null,\r\n        options?: { doNotInstantiate: boolean | ((node: TransformNode) => boolean) },\r\n        onNewNodeCreated?: (source: TransformNode, clone: TransformNode) => void\r\n    ): Nullable<TransformNode> {\r\n        const clone = this.clone(\"Clone of \" + (this.name || this.id), newParent || this.parent, true);\r\n\r\n        if (clone) {\r\n            if (onNewNodeCreated) {\r\n                onNewNodeCreated(this, clone);\r\n            }\r\n        }\r\n\r\n        for (const child of this.getChildTransformNodes(true)) {\r\n            child.instantiateHierarchy(clone, options, onNewNodeCreated);\r\n        }\r\n\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Prevents the World matrix to be computed any longer.\r\n     * Please note that the \"moral\" contract is that the world matrix is not going to be updated anymore. It is up to the developer to force updates.\r\n     * You trade flexibility for performance. If you want to update it, you have to unfreeze it first.\r\n     * @param newWorldMatrix defines an optional matrix to use as world matrix\r\n     * @param decompose defines whether to decompose the given newWorldMatrix or directly assign\r\n     * @returns the TransformNode.\r\n     */\r\n    public freezeWorldMatrix(newWorldMatrix: Nullable<Matrix> = null, decompose = false): TransformNode {\r\n        if (newWorldMatrix) {\r\n            if (decompose) {\r\n                this._rotation.setAll(0);\r\n                this._rotationQuaternion = this._rotationQuaternion || Quaternion.Identity();\r\n                newWorldMatrix.decompose(this._scaling, this._rotationQuaternion, this._position);\r\n                this.computeWorldMatrix(true);\r\n            } else {\r\n                this._worldMatrix = newWorldMatrix;\r\n                this._absolutePosition.copyFromFloats(this._worldMatrix.m[12], this._worldMatrix.m[13], this._worldMatrix.m[14]);\r\n                this._afterComputeWorldMatrix();\r\n            }\r\n        } else {\r\n            this._isWorldMatrixFrozen = false; // no guarantee world is not already frozen, switch off temporarily\r\n            this.computeWorldMatrix(true);\r\n        }\r\n        this._isDirty = false;\r\n        this._isWorldMatrixFrozen = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Allows back the World matrix computation.\r\n     * @returns the TransformNode.\r\n     */\r\n    public unfreezeWorldMatrix() {\r\n        this._isWorldMatrixFrozen = false;\r\n        this.computeWorldMatrix(true);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * True if the World matrix has been frozen.\r\n     */\r\n    public get isWorldMatrixFrozen(): boolean {\r\n        return this._isWorldMatrixFrozen;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh absolute position in the World.\r\n     * @returns a Vector3.\r\n     */\r\n    public getAbsolutePosition(): Vector3 {\r\n        this.computeWorldMatrix();\r\n        return this._absolutePosition;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh absolute position in the World from a Vector3 or an Array(3).\r\n     * @param absolutePosition the absolute position to set\r\n     * @returns the TransformNode.\r\n     */\r\n    public setAbsolutePosition(absolutePosition: Vector3): TransformNode {\r\n        if (!absolutePosition) {\r\n            return this;\r\n        }\r\n        let absolutePositionX;\r\n        let absolutePositionY;\r\n        let absolutePositionZ;\r\n        if (absolutePosition.x === undefined) {\r\n            if (arguments.length < 3) {\r\n                return this;\r\n            }\r\n            absolutePositionX = arguments[0];\r\n            absolutePositionY = arguments[1];\r\n            absolutePositionZ = arguments[2];\r\n        } else {\r\n            absolutePositionX = absolutePosition.x;\r\n            absolutePositionY = absolutePosition.y;\r\n            absolutePositionZ = absolutePosition.z;\r\n        }\r\n        if (this.parent) {\r\n            const invertParentWorldMatrix = TmpVectors.Matrix[0];\r\n            this.parent.getWorldMatrix().invertToRef(invertParentWorldMatrix);\r\n            Vector3.TransformCoordinatesFromFloatsToRef(absolutePositionX, absolutePositionY, absolutePositionZ, invertParentWorldMatrix, this.position);\r\n        } else {\r\n            this.position.x = absolutePositionX;\r\n            this.position.y = absolutePositionY;\r\n            this.position.z = absolutePositionZ;\r\n        }\r\n\r\n        this._absolutePosition.copyFrom(absolutePosition);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh position in its local space.\r\n     * @param vector3 the position to set in localspace\r\n     * @returns the TransformNode.\r\n     */\r\n    public setPositionWithLocalVector(vector3: Vector3): TransformNode {\r\n        this.computeWorldMatrix();\r\n        this.position = Vector3.TransformNormal(vector3, this._localMatrix);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh position in the local space from the current World matrix values.\r\n     * @returns a new Vector3.\r\n     */\r\n    public getPositionExpressedInLocalSpace(): Vector3 {\r\n        this.computeWorldMatrix();\r\n        const invLocalWorldMatrix = TmpVectors.Matrix[0];\r\n        this._localMatrix.invertToRef(invLocalWorldMatrix);\r\n        return Vector3.TransformNormal(this.position, invLocalWorldMatrix);\r\n    }\r\n\r\n    /**\r\n     * Translates the mesh along the passed Vector3 in its local space.\r\n     * @param vector3 the distance to translate in localspace\r\n     * @returns the TransformNode.\r\n     */\r\n    public locallyTranslate(vector3: Vector3): TransformNode {\r\n        this.computeWorldMatrix(true);\r\n        this.position = Vector3.TransformCoordinates(vector3, this._localMatrix);\r\n        return this;\r\n    }\r\n\r\n    private static _LookAtVectorCache = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Orients a mesh towards a target point. Mesh must be drawn facing user.\r\n     * @param targetPoint the position (must be in same space as current mesh) to look at\r\n     * @param yawCor optional yaw (y-axis) correction in radians\r\n     * @param pitchCor optional pitch (x-axis) correction in radians\r\n     * @param rollCor optional roll (z-axis) correction in radians\r\n     * @param space the chosen space of the target\r\n     * @returns the TransformNode.\r\n     */\r\n    public lookAt(targetPoint: Vector3, yawCor: number = 0, pitchCor: number = 0, rollCor: number = 0, space: Space = Space.LOCAL): TransformNode {\r\n        const dv = TransformNode._LookAtVectorCache;\r\n        const pos = space === Space.LOCAL ? this.position : this.getAbsolutePosition();\r\n        targetPoint.subtractToRef(pos, dv);\r\n        this.setDirection(dv, yawCor, pitchCor, rollCor);\r\n\r\n        // Correct for parent's rotation offset\r\n        if (space === Space.WORLD && this.parent) {\r\n            if (this.rotationQuaternion) {\r\n                // Get local rotation matrix of the looking object\r\n                const rotationMatrix = TmpVectors.Matrix[0];\r\n                this.rotationQuaternion.toRotationMatrix(rotationMatrix);\r\n\r\n                // Offset rotation by parent's inverted rotation matrix to correct in world space\r\n                const parentRotationMatrix = TmpVectors.Matrix[1];\r\n                this.parent.getWorldMatrix().getRotationMatrixToRef(parentRotationMatrix);\r\n                parentRotationMatrix.invert();\r\n                rotationMatrix.multiplyToRef(parentRotationMatrix, rotationMatrix);\r\n                this.rotationQuaternion.fromRotationMatrix(rotationMatrix);\r\n            } else {\r\n                // Get local rotation matrix of the looking object\r\n                const quaternionRotation = TmpVectors.Quaternion[0];\r\n                Quaternion.FromEulerVectorToRef(this.rotation, quaternionRotation);\r\n                const rotationMatrix = TmpVectors.Matrix[0];\r\n                quaternionRotation.toRotationMatrix(rotationMatrix);\r\n\r\n                // Offset rotation by parent's inverted rotation matrix to correct in world space\r\n                const parentRotationMatrix = TmpVectors.Matrix[1];\r\n                this.parent.getWorldMatrix().getRotationMatrixToRef(parentRotationMatrix);\r\n                parentRotationMatrix.invert();\r\n                rotationMatrix.multiplyToRef(parentRotationMatrix, rotationMatrix);\r\n                quaternionRotation.fromRotationMatrix(rotationMatrix);\r\n                quaternionRotation.toEulerAnglesToRef(this.rotation);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 that is the localAxis, expressed in the mesh local space, rotated like the mesh.\r\n     * This Vector3 is expressed in the World space.\r\n     * @param localAxis axis to rotate\r\n     * @returns a new Vector3 that is the localAxis, expressed in the mesh local space, rotated like the mesh.\r\n     */\r\n    public getDirection(localAxis: Vector3): Vector3 {\r\n        const result = Vector3.Zero();\r\n\r\n        this.getDirectionToRef(localAxis, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Sets the Vector3 \"result\" as the rotated Vector3 \"localAxis\" in the same rotation than the mesh.\r\n     * localAxis is expressed in the mesh local space.\r\n     * result is computed in the World space from the mesh World matrix.\r\n     * @param localAxis axis to rotate\r\n     * @param result the resulting transformnode\r\n     * @returns this TransformNode.\r\n     */\r\n    public getDirectionToRef(localAxis: Vector3, result: Vector3): TransformNode {\r\n        Vector3.TransformNormalToRef(localAxis, this.getWorldMatrix(), result);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets this transform node rotation to the given local axis.\r\n     * @param localAxis the axis in local space\r\n     * @param yawCor optional yaw (y-axis) correction in radians\r\n     * @param pitchCor optional pitch (x-axis) correction in radians\r\n     * @param rollCor optional roll (z-axis) correction in radians\r\n     * @returns this TransformNode\r\n     */\r\n    public setDirection(localAxis: Vector3, yawCor: number = 0, pitchCor: number = 0, rollCor: number = 0): TransformNode {\r\n        const yaw = -Math.atan2(localAxis.z, localAxis.x) + Math.PI / 2;\r\n        const len = Math.sqrt(localAxis.x * localAxis.x + localAxis.z * localAxis.z);\r\n        const pitch = -Math.atan2(localAxis.y, len);\r\n        if (this.rotationQuaternion) {\r\n            Quaternion.RotationYawPitchRollToRef(yaw + yawCor, pitch + pitchCor, rollCor, this.rotationQuaternion);\r\n        } else {\r\n            this.rotation.x = pitch + pitchCor;\r\n            this.rotation.y = yaw + yawCor;\r\n            this.rotation.z = rollCor;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets a new pivot point to the current node\r\n     * @param point defines the new pivot point to use\r\n     * @param space defines if the point is in world or local space (local by default)\r\n     * @returns the current TransformNode\r\n     */\r\n    public setPivotPoint(point: Vector3, space: Space = Space.LOCAL): TransformNode {\r\n        if (this.getScene().getRenderId() == 0) {\r\n            this.computeWorldMatrix(true);\r\n        }\r\n\r\n        const wm = this.getWorldMatrix();\r\n\r\n        if (space == Space.WORLD) {\r\n            const tmat = TmpVectors.Matrix[0];\r\n            wm.invertToRef(tmat);\r\n            point = Vector3.TransformCoordinates(point, tmat);\r\n        }\r\n\r\n        return this.setPivotMatrix(Matrix.Translation(-point.x, -point.y, -point.z), true);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 set with the mesh pivot point coordinates in the local space.\r\n     * @returns the pivot point\r\n     */\r\n    public getPivotPoint(): Vector3 {\r\n        const point = Vector3.Zero();\r\n        this.getPivotPointToRef(point);\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Sets the passed Vector3 \"result\" with the coordinates of the mesh pivot point in the local space.\r\n     * @param result the vector3 to store the result\r\n     * @returns this TransformNode.\r\n     */\r\n    public getPivotPointToRef(result: Vector3): TransformNode {\r\n        result.x = -this._pivotMatrix.m[12];\r\n        result.y = -this._pivotMatrix.m[13];\r\n        result.z = -this._pivotMatrix.m[14];\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 set with the mesh pivot point World coordinates.\r\n     * @returns a new Vector3 set with the mesh pivot point World coordinates.\r\n     */\r\n    public getAbsolutePivotPoint(): Vector3 {\r\n        const point = Vector3.Zero();\r\n        this.getAbsolutePivotPointToRef(point);\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Sets the Vector3 \"result\" coordinates with the mesh pivot point World coordinates.\r\n     * @param result vector3 to store the result\r\n     * @returns this TransformNode.\r\n     */\r\n    public getAbsolutePivotPointToRef(result: Vector3): TransformNode {\r\n        this.getPivotPointToRef(result);\r\n        Vector3.TransformCoordinatesToRef(result, this.getWorldMatrix(), result);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Flag the transform node as dirty (Forcing it to update everything)\r\n     * @param property if set to \"rotation\" the objects rotationQuaternion will be set to null\r\n     * @returns this  node\r\n     */\r\n    public override markAsDirty(property?: string): Node {\r\n        if (this._isDirty) {\r\n            return this;\r\n        }\r\n\r\n        // We need to explicitly update the children\r\n        // as the scene.evaluateActiveMeshes will not poll the transform nodes\r\n        if (this._children) {\r\n            for (const child of this._children) {\r\n                child.markAsDirty(property);\r\n            }\r\n        }\r\n        return super.markAsDirty(property);\r\n    }\r\n\r\n    /**\r\n     * Defines the passed node as the parent of the current node.\r\n     * The node will remain exactly where it is and its position / rotation will be updated accordingly.\r\n     * If you don't want to preserve the current rotation / position, assign the parent through parent accessor.\r\n     * Note that if the mesh has a pivot matrix / point defined it will be applied after the parent was updated.\r\n     * In that case the node will not remain in the same space as it is, as the pivot will be applied.\r\n     * To avoid this, you can set updatePivot to true and the pivot will be updated to identity\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/parent_pivot/parent\r\n     * @param node the node ot set as the parent\r\n     * @param preserveScalingSign if true, keep scaling sign of child. Otherwise, scaling sign might change.\r\n     * @param updatePivot if true, update the pivot matrix to keep the node in the same space as before\r\n     * @returns this TransformNode.\r\n     */\r\n    public setParent(node: Nullable<Node>, preserveScalingSign: boolean = false, updatePivot = false): TransformNode {\r\n        if (!node && !this.parent) {\r\n            return this;\r\n        }\r\n\r\n        const quatRotation = TmpVectors.Quaternion[0];\r\n        const position = TmpVectors.Vector3[0];\r\n        const scale = TmpVectors.Vector3[1];\r\n        const invParentMatrix = TmpVectors.Matrix[1];\r\n        Matrix.IdentityToRef(invParentMatrix);\r\n        const composedMatrix = TmpVectors.Matrix[0];\r\n        this.computeWorldMatrix(true);\r\n\r\n        let currentRotation = this.rotationQuaternion;\r\n        if (!currentRotation) {\r\n            currentRotation = TransformNode._TmpRotation;\r\n            Quaternion.RotationYawPitchRollToRef(this._rotation.y, this._rotation.x, this._rotation.z, currentRotation);\r\n        }\r\n\r\n        // current global transformation without pivot\r\n        Matrix.ComposeToRef(this.scaling, currentRotation, this.position, composedMatrix);\r\n        if (this.parent) {\r\n            composedMatrix.multiplyToRef(this.parent.computeWorldMatrix(true), composedMatrix);\r\n        }\r\n\r\n        // is a node was set, calculate the difference between this and the node\r\n        if (node) {\r\n            node.computeWorldMatrix(true).invertToRef(invParentMatrix);\r\n            composedMatrix.multiplyToRef(invParentMatrix, composedMatrix);\r\n        }\r\n        composedMatrix.decompose(scale, quatRotation, position, preserveScalingSign ? this : undefined);\r\n\r\n        if (this.rotationQuaternion) {\r\n            this.rotationQuaternion.copyFrom(quatRotation);\r\n        } else {\r\n            quatRotation.toEulerAnglesToRef(this.rotation);\r\n        }\r\n\r\n        this.scaling.copyFrom(scale);\r\n        this.position.copyFrom(position);\r\n\r\n        this.parent = node;\r\n\r\n        if (updatePivot) {\r\n            this.setPivotMatrix(Matrix.Identity());\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds the passed mesh as a child to the current mesh.\r\n     * The node will remain exactly where it is and its position / rotation will be updated accordingly.\r\n     * This method is equivalent to calling setParent().\r\n     * @param mesh defines the child mesh\r\n     * @param preserveScalingSign if true, keep scaling sign of child. Otherwise, scaling sign might change.\r\n     * @returns the current mesh\r\n     */\r\n    public addChild(mesh: TransformNode, preserveScalingSign: boolean = false): this {\r\n        mesh.setParent(this, preserveScalingSign);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes the passed mesh from the current mesh children list\r\n     * @param mesh defines the child mesh\r\n     * @param preserveScalingSign if true, keep scaling sign of child. Otherwise, scaling sign might change.\r\n     * @returns the current mesh\r\n     */\r\n    public removeChild(mesh: TransformNode, preserveScalingSign: boolean = false): this {\r\n        if (mesh.parent !== this) {\r\n            return this;\r\n        }\r\n        mesh.setParent(null, preserveScalingSign);\r\n        return this;\r\n    }\r\n\r\n    private _nonUniformScaling = false;\r\n    /**\r\n     * True if the scaling property of this object is non uniform eg. (1,2,1)\r\n     */\r\n    public get nonUniformScaling(): boolean {\r\n        return this._nonUniformScaling;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateNonUniformScalingState(value: boolean): boolean {\r\n        if (this._nonUniformScaling === value) {\r\n            return false;\r\n        }\r\n\r\n        this._nonUniformScaling = value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Attach the current TransformNode to another TransformNode associated with a bone\r\n     * @param bone Bone affecting the TransformNode\r\n     * @param affectedTransformNode TransformNode associated with the bone\r\n     * @returns this object\r\n     */\r\n    public attachToBone(bone: Bone, affectedTransformNode: TransformNode): TransformNode {\r\n        this._currentParentWhenAttachingToBone = this.parent;\r\n        this._transformToBoneReferal = affectedTransformNode;\r\n        this.parent = bone;\r\n\r\n        bone.getSkeleton().prepare(true); // make sure bone.getFinalMatrix() is up to date\r\n\r\n        if (bone.getFinalMatrix().determinant() < 0) {\r\n            this.scalingDeterminant *= -1;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Detach the transform node if its associated with a bone\r\n     * @param resetToPreviousParent Indicates if the parent that was in effect when attachToBone was called should be set back or if we should set parent to null instead (defaults to the latter)\r\n     * @returns this object\r\n     */\r\n    public detachFromBone(resetToPreviousParent = false): TransformNode {\r\n        if (!this.parent) {\r\n            if (resetToPreviousParent) {\r\n                this.parent = this._currentParentWhenAttachingToBone;\r\n            }\r\n            return this;\r\n        }\r\n\r\n        if (this.parent.getWorldMatrix().determinant() < 0) {\r\n            this.scalingDeterminant *= -1;\r\n        }\r\n        this._transformToBoneReferal = null;\r\n        if (resetToPreviousParent) {\r\n            this.parent = this._currentParentWhenAttachingToBone;\r\n        } else {\r\n            this.parent = null;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    private static _RotationAxisCache = new Quaternion();\r\n    /**\r\n     * Rotates the mesh around the axis vector for the passed angle (amount) expressed in radians, in the given space.\r\n     * space (default LOCAL) can be either Space.LOCAL, either Space.WORLD.\r\n     * Note that the property `rotationQuaternion` is then automatically updated and the property `rotation` is set to (0,0,0) and no longer used.\r\n     * The passed axis is also normalized.\r\n     * @param axis the axis to rotate around\r\n     * @param amount the amount to rotate in radians\r\n     * @param space Space to rotate in (Default: local)\r\n     * @returns the TransformNode.\r\n     */\r\n    public rotate(axis: Vector3, amount: number, space?: Space): TransformNode {\r\n        axis.normalize();\r\n        if (!this.rotationQuaternion) {\r\n            this.rotationQuaternion = this.rotation.toQuaternion();\r\n            this.rotation.setAll(0);\r\n        }\r\n        let rotationQuaternion: Quaternion;\r\n        if (!space || (space as any) === Space.LOCAL) {\r\n            rotationQuaternion = Quaternion.RotationAxisToRef(axis, amount, TransformNode._RotationAxisCache);\r\n            this.rotationQuaternion.multiplyToRef(rotationQuaternion, this.rotationQuaternion);\r\n        } else {\r\n            if (this.parent) {\r\n                const parentWorldMatrix = this.parent.getWorldMatrix();\r\n                const invertParentWorldMatrix = TmpVectors.Matrix[0];\r\n                parentWorldMatrix.invertToRef(invertParentWorldMatrix);\r\n                axis = Vector3.TransformNormal(axis, invertParentWorldMatrix);\r\n\r\n                if (parentWorldMatrix.determinant() < 0) {\r\n                    amount *= -1;\r\n                }\r\n            }\r\n            rotationQuaternion = Quaternion.RotationAxisToRef(axis, amount, TransformNode._RotationAxisCache);\r\n            rotationQuaternion.multiplyToRef(this.rotationQuaternion, this.rotationQuaternion);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotates the mesh around the axis vector for the passed angle (amount) expressed in radians, in world space.\r\n     * Note that the property `rotationQuaternion` is then automatically updated and the property `rotation` is set to (0,0,0) and no longer used.\r\n     * The passed axis is also normalized. .\r\n     * Method is based on http://www.euclideanspace.com/maths/geometry/affine/aroundPoint/index.htm\r\n     * @param point the point to rotate around\r\n     * @param axis the axis to rotate around\r\n     * @param amount the amount to rotate in radians\r\n     * @returns the TransformNode\r\n     */\r\n    public rotateAround(point: Vector3, axis: Vector3, amount: number): TransformNode {\r\n        axis.normalize();\r\n        if (!this.rotationQuaternion) {\r\n            this.rotationQuaternion = Quaternion.RotationYawPitchRoll(this.rotation.y, this.rotation.x, this.rotation.z);\r\n            this.rotation.setAll(0);\r\n        }\r\n\r\n        const tmpVector = TmpVectors.Vector3[0];\r\n        const finalScale = TmpVectors.Vector3[1];\r\n        const finalTranslation = TmpVectors.Vector3[2];\r\n\r\n        const finalRotation = TmpVectors.Quaternion[0];\r\n\r\n        const translationMatrix = TmpVectors.Matrix[0]; // T\r\n        const translationMatrixInv = TmpVectors.Matrix[1]; // T'\r\n        const rotationMatrix = TmpVectors.Matrix[2]; // R\r\n        const finalMatrix = TmpVectors.Matrix[3]; // T' x R x T\r\n\r\n        point.subtractToRef(this.position, tmpVector);\r\n        Matrix.TranslationToRef(tmpVector.x, tmpVector.y, tmpVector.z, translationMatrix); // T\r\n        Matrix.TranslationToRef(-tmpVector.x, -tmpVector.y, -tmpVector.z, translationMatrixInv); // T'\r\n        Matrix.RotationAxisToRef(axis, amount, rotationMatrix); // R\r\n\r\n        translationMatrixInv.multiplyToRef(rotationMatrix, finalMatrix); // T' x R\r\n        finalMatrix.multiplyToRef(translationMatrix, finalMatrix); // T' x R x T\r\n\r\n        finalMatrix.decompose(finalScale, finalRotation, finalTranslation);\r\n\r\n        this.position.addInPlace(finalTranslation);\r\n        finalRotation.multiplyToRef(this.rotationQuaternion, this.rotationQuaternion);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Translates the mesh along the axis vector for the passed distance in the given space.\r\n     * space (default LOCAL) can be either Space.LOCAL, either Space.WORLD.\r\n     * @param axis the axis to translate in\r\n     * @param distance the distance to translate\r\n     * @param space Space to rotate in (Default: local)\r\n     * @returns the TransformNode.\r\n     */\r\n    public translate(axis: Vector3, distance: number, space?: Space): TransformNode {\r\n        const displacementVector = axis.scale(distance);\r\n        if (!space || (space as any) === Space.LOCAL) {\r\n            const tempV3 = this.getPositionExpressedInLocalSpace().add(displacementVector);\r\n            this.setPositionWithLocalVector(tempV3);\r\n        } else {\r\n            this.setAbsolutePosition(this.getAbsolutePosition().add(displacementVector));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds a rotation step to the mesh current rotation.\r\n     * x, y, z are Euler angles expressed in radians.\r\n     * This methods updates the current mesh rotation, either mesh.rotation, either mesh.rotationQuaternion if it's set.\r\n     * This means this rotation is made in the mesh local space only.\r\n     * It's useful to set a custom rotation order different from the BJS standard one YXZ.\r\n     * Example : this rotates the mesh first around its local X axis, then around its local Z axis, finally around its local Y axis.\r\n     * ```javascript\r\n     * mesh.addRotation(x1, 0, 0).addRotation(0, 0, z2).addRotation(0, 0, y3);\r\n     * ```\r\n     * Note that `addRotation()` accumulates the passed rotation values to the current ones and computes the .rotation or .rotationQuaternion updated values.\r\n     * Under the hood, only quaternions are used. So it's a little faster is you use .rotationQuaternion because it doesn't need to translate them back to Euler angles.\r\n     * @param x Rotation to add\r\n     * @param y Rotation to add\r\n     * @param z Rotation to add\r\n     * @returns the TransformNode.\r\n     */\r\n    public addRotation(x: number, y: number, z: number): TransformNode {\r\n        let rotationQuaternion;\r\n        if (this.rotationQuaternion) {\r\n            rotationQuaternion = this.rotationQuaternion;\r\n        } else {\r\n            rotationQuaternion = TmpVectors.Quaternion[1];\r\n            Quaternion.RotationYawPitchRollToRef(this.rotation.y, this.rotation.x, this.rotation.z, rotationQuaternion);\r\n        }\r\n        const accumulation = TmpVectors.Quaternion[0];\r\n        Quaternion.RotationYawPitchRollToRef(y, x, z, accumulation);\r\n        rotationQuaternion.multiplyInPlace(accumulation);\r\n        if (!this.rotationQuaternion) {\r\n            rotationQuaternion.toEulerAnglesToRef(this.rotation);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected _getEffectiveParent(): Nullable<Node> {\r\n        return this.parent;\r\n    }\r\n\r\n    /**\r\n     * Returns whether the transform node world matrix computation needs the camera information to be computed.\r\n     * This is the case when the node is a billboard or has an infinite distance for instance.\r\n     * @returns true if the world matrix computation needs the camera information to be computed\r\n     */\r\n    public isWorldMatrixCameraDependent(): boolean {\r\n        return (this._infiniteDistance && !this.parent) || this._billboardMode !== TransformNode.BILLBOARDMODE_NONE;\r\n    }\r\n\r\n    /**\r\n     * Computes the world matrix of the node\r\n     * @param force defines if the cache version should be invalidated forcing the world matrix to be created from scratch\r\n     * @param camera defines the camera used if different from the scene active camera (This is used with modes like Billboard or infinite distance)\r\n     * @returns the world matrix\r\n     */\r\n    public override computeWorldMatrix(force: boolean = false, camera: Nullable<Camera> = null): Matrix {\r\n        if (this._isWorldMatrixFrozen && !this._isDirty) {\r\n            return this._worldMatrix;\r\n        }\r\n\r\n        const currentRenderId = this.getScene().getRenderId();\r\n        if (!this._isDirty && !force && (this._currentRenderId === currentRenderId || this.isSynchronized())) {\r\n            this._currentRenderId = currentRenderId;\r\n            return this._worldMatrix;\r\n        }\r\n\r\n        camera = camera || this.getScene().activeCamera;\r\n\r\n        this._updateCache();\r\n        const cache = this._cache;\r\n        cache.pivotMatrixUpdated = false;\r\n        cache.billboardMode = this.billboardMode;\r\n        cache.infiniteDistance = this.infiniteDistance;\r\n        cache.parent = this._parentNode;\r\n\r\n        this._currentRenderId = currentRenderId;\r\n        this._childUpdateId += 1;\r\n        this._isDirty = false;\r\n        this._position._isDirty = false;\r\n        this._rotation._isDirty = false;\r\n        this._scaling._isDirty = false;\r\n        const parent = this._getEffectiveParent();\r\n\r\n        // Scaling\r\n        const scaling: Vector3 = TransformNode._TmpScaling;\r\n        let translation: Vector3 = this._position;\r\n\r\n        // Translation\r\n        if (this._infiniteDistance) {\r\n            if (!this.parent && camera) {\r\n                const cameraWorldMatrix = camera.getWorldMatrix();\r\n                const cameraGlobalPosition = new Vector3(cameraWorldMatrix.m[12], cameraWorldMatrix.m[13], cameraWorldMatrix.m[14]);\r\n\r\n                translation = TransformNode._TmpTranslation;\r\n                translation.copyFromFloats(this._position.x + cameraGlobalPosition.x, this._position.y + cameraGlobalPosition.y, this._position.z + cameraGlobalPosition.z);\r\n            }\r\n        }\r\n\r\n        // Scaling\r\n        scaling.copyFromFloats(this._scaling.x * this.scalingDeterminant, this._scaling.y * this.scalingDeterminant, this._scaling.z * this.scalingDeterminant);\r\n\r\n        // Rotation\r\n        let rotation: Quaternion;\r\n        if (this._rotationQuaternion) {\r\n            this._rotationQuaternion._isDirty = false;\r\n            rotation = this._rotationQuaternion;\r\n            if (this.reIntegrateRotationIntoRotationQuaternion) {\r\n                const len = this.rotation.lengthSquared();\r\n                if (len) {\r\n                    this._rotationQuaternion.multiplyInPlace(Quaternion.RotationYawPitchRoll(this._rotation.y, this._rotation.x, this._rotation.z));\r\n                    this._rotation.copyFromFloats(0, 0, 0);\r\n                }\r\n            }\r\n        } else {\r\n            rotation = TransformNode._TmpRotation;\r\n            Quaternion.RotationYawPitchRollToRef(this._rotation.y, this._rotation.x, this._rotation.z, rotation);\r\n        }\r\n\r\n        // Compose\r\n        if (this._usePivotMatrix) {\r\n            const scaleMatrix = TmpVectors.Matrix[1];\r\n            Matrix.ScalingToRef(scaling.x, scaling.y, scaling.z, scaleMatrix);\r\n\r\n            // Rotation\r\n            const rotationMatrix = TmpVectors.Matrix[0];\r\n            rotation.toRotationMatrix(rotationMatrix);\r\n\r\n            // Composing transformations\r\n            this._pivotMatrix.multiplyToRef(scaleMatrix, TmpVectors.Matrix[4]);\r\n            TmpVectors.Matrix[4].multiplyToRef(rotationMatrix, this._localMatrix);\r\n\r\n            // Post multiply inverse of pivotMatrix\r\n            if (this._postMultiplyPivotMatrix) {\r\n                this._localMatrix.multiplyToRef(this._pivotMatrixInverse, this._localMatrix);\r\n            }\r\n\r\n            this._localMatrix.addTranslationFromFloats(translation.x, translation.y, translation.z);\r\n        } else {\r\n            Matrix.ComposeToRef(scaling, rotation, translation, this._localMatrix);\r\n        }\r\n\r\n        // Parent\r\n        if (parent && parent.getWorldMatrix) {\r\n            if (force) {\r\n                parent.computeWorldMatrix(force);\r\n            }\r\n            if (this.billboardMode) {\r\n                if (this._transformToBoneReferal) {\r\n                    const bone = this.parent as Bone;\r\n                    bone.getSkeleton().prepare();\r\n                    bone.getFinalMatrix().multiplyToRef(this._transformToBoneReferal.getWorldMatrix(), TmpVectors.Matrix[7]);\r\n                } else {\r\n                    TmpVectors.Matrix[7].copyFrom(parent.getWorldMatrix());\r\n                }\r\n\r\n                // Extract scaling and translation from parent\r\n                const translation = TmpVectors.Vector3[5];\r\n                const scale = TmpVectors.Vector3[6];\r\n                const orientation = TmpVectors.Quaternion[0];\r\n                TmpVectors.Matrix[7].decompose(scale, orientation, translation);\r\n                Matrix.ScalingToRef(scale.x, scale.y, scale.z, TmpVectors.Matrix[7]);\r\n                TmpVectors.Matrix[7].setTranslation(translation);\r\n\r\n                if (TransformNode.BillboardUseParentOrientation) {\r\n                    // set localMatrix translation to be transformed against parent's orientation.\r\n                    this._position.applyRotationQuaternionToRef(orientation, translation);\r\n                    this._localMatrix.setTranslation(translation);\r\n                }\r\n\r\n                this._localMatrix.multiplyToRef(TmpVectors.Matrix[7], this._worldMatrix);\r\n            } else {\r\n                if (this._transformToBoneReferal) {\r\n                    const bone = this.parent as Bone;\r\n                    bone.getSkeleton().prepare();\r\n                    this._localMatrix.multiplyToRef(bone.getFinalMatrix(), TmpVectors.Matrix[6]);\r\n                    TmpVectors.Matrix[6].multiplyToRef(this._transformToBoneReferal.getWorldMatrix(), this._worldMatrix);\r\n                } else {\r\n                    this._localMatrix.multiplyToRef(parent.getWorldMatrix(), this._worldMatrix);\r\n                }\r\n            }\r\n            this._markSyncedWithParent();\r\n        } else {\r\n            this._worldMatrix.copyFrom(this._localMatrix);\r\n        }\r\n\r\n        if (camera && this.billboardMode) {\r\n            // Billboarding based on camera orientation (testing PG:http://www.babylonjs-playground.com/#UJEIL#13)\r\n            if (!cache.useBillboardPosition) {\r\n                const storedTranslation = TmpVectors.Vector3[0];\r\n                this._worldMatrix.getTranslationToRef(storedTranslation); // Save translation\r\n\r\n                // Get camera view matrix\r\n                TmpVectors.Matrix[1].copyFrom(camera.getViewMatrix());\r\n\r\n                const isRH = this.getScene().useRightHandedSystem;\r\n\r\n                if (isRH) {\r\n                    // This operation is necessary to cancel out the scaling component of the matrix without decomposing it.\r\n                    // It's a trick to extract only the rotation part.\r\n                    TmpVectors.Matrix[1].multiplyToRef(TransformNode._TmpRHRestore, TmpVectors.Matrix[1]);\r\n                }\r\n\r\n                // This will cancel the camera rotation\r\n                TmpVectors.Matrix[1].setTranslationFromFloats(0, 0, 0);\r\n                TmpVectors.Matrix[1].invertToRef(TmpVectors.Matrix[0]);\r\n\r\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_ALL) !== TransformNode.BILLBOARDMODE_ALL) {\r\n                    TmpVectors.Matrix[0].decompose(undefined, TmpVectors.Quaternion[0], undefined);\r\n                    const eulerAngles = TmpVectors.Vector3[1];\r\n                    TmpVectors.Quaternion[0].toEulerAnglesToRef(eulerAngles);\r\n\r\n                    if ((this.billboardMode & TransformNode.BILLBOARDMODE_X) !== TransformNode.BILLBOARDMODE_X) {\r\n                        eulerAngles.x = 0;\r\n                    }\r\n\r\n                    if ((this.billboardMode & TransformNode.BILLBOARDMODE_Y) !== TransformNode.BILLBOARDMODE_Y) {\r\n                        eulerAngles.y = 0;\r\n                    }\r\n\r\n                    if ((this.billboardMode & TransformNode.BILLBOARDMODE_Z) !== TransformNode.BILLBOARDMODE_Z) {\r\n                        eulerAngles.z = 0;\r\n                    }\r\n\r\n                    if (isRH) {\r\n                        eulerAngles.y += Math.PI; // Yaw correction\r\n                    }\r\n\r\n                    Matrix.RotationYawPitchRollToRef(eulerAngles.y, eulerAngles.x, eulerAngles.z, TmpVectors.Matrix[0]);\r\n                }\r\n                this._worldMatrix.setTranslationFromFloats(0, 0, 0);\r\n                this._worldMatrix.multiplyToRef(TmpVectors.Matrix[0], this._worldMatrix);\r\n\r\n                // Restore translation\r\n                this._worldMatrix.setTranslation(TmpVectors.Vector3[0]);\r\n            }\r\n            // Billboarding based on camera position\r\n            else {\r\n                const storedTranslation = TmpVectors.Vector3[0];\r\n                // Save translation\r\n                this._worldMatrix.getTranslationToRef(storedTranslation);\r\n\r\n                // Compute camera position in local space\r\n                const cameraPosition = camera.globalPosition;\r\n                this._worldMatrix.invertToRef(TmpVectors.Matrix[1]);\r\n                const camInObjSpace = TmpVectors.Vector3[1];\r\n                Vector3.TransformCoordinatesToRef(cameraPosition, TmpVectors.Matrix[1], camInObjSpace);\r\n                camInObjSpace.normalize();\r\n\r\n                // Find the lookAt info in local space\r\n                const yaw = -Math.atan2(camInObjSpace.z, camInObjSpace.x) + Math.PI / 2;\r\n                const len = Math.sqrt(camInObjSpace.x * camInObjSpace.x + camInObjSpace.z * camInObjSpace.z);\r\n                const pitch = -Math.atan2(camInObjSpace.y, len);\r\n                Quaternion.RotationYawPitchRollToRef(yaw, pitch, 0, TmpVectors.Quaternion[0]);\r\n\r\n                if ((this.billboardMode & TransformNode.BILLBOARDMODE_ALL) !== TransformNode.BILLBOARDMODE_ALL) {\r\n                    const eulerAngles = TmpVectors.Vector3[1];\r\n                    TmpVectors.Quaternion[0].toEulerAnglesToRef(eulerAngles);\r\n\r\n                    if ((this.billboardMode & TransformNode.BILLBOARDMODE_X) !== TransformNode.BILLBOARDMODE_X) {\r\n                        eulerAngles.x = 0;\r\n                    }\r\n\r\n                    if ((this.billboardMode & TransformNode.BILLBOARDMODE_Y) !== TransformNode.BILLBOARDMODE_Y) {\r\n                        eulerAngles.y = 0;\r\n                    }\r\n\r\n                    if ((this.billboardMode & TransformNode.BILLBOARDMODE_Z) !== TransformNode.BILLBOARDMODE_Z) {\r\n                        eulerAngles.z = 0;\r\n                    }\r\n\r\n                    Matrix.RotationYawPitchRollToRef(eulerAngles.y, eulerAngles.x, eulerAngles.z, TmpVectors.Matrix[0]);\r\n                } else {\r\n                    Matrix.FromQuaternionToRef(TmpVectors.Quaternion[0], TmpVectors.Matrix[0]);\r\n                }\r\n\r\n                // Cancel translation\r\n                this._worldMatrix.setTranslationFromFloats(0, 0, 0);\r\n\r\n                // Rotate according to lookat (diff from local to lookat)\r\n                this._worldMatrix.multiplyToRef(TmpVectors.Matrix[0], this._worldMatrix);\r\n\r\n                // Restore translation\r\n                this._worldMatrix.setTranslation(TmpVectors.Vector3[0]);\r\n            }\r\n        }\r\n\r\n        // Normal matrix\r\n        if (!this.ignoreNonUniformScaling) {\r\n            if (this._scaling.isNonUniformWithinEpsilon(0.000001)) {\r\n                this._updateNonUniformScalingState(true);\r\n            } else if (parent && (<TransformNode>parent)._nonUniformScaling) {\r\n                this._updateNonUniformScalingState((<TransformNode>parent)._nonUniformScaling);\r\n            } else {\r\n                this._updateNonUniformScalingState(false);\r\n            }\r\n        } else {\r\n            this._updateNonUniformScalingState(false);\r\n        }\r\n\r\n        this._afterComputeWorldMatrix();\r\n\r\n        // Absolute position\r\n        this._absolutePosition.copyFromFloats(this._worldMatrix.m[12], this._worldMatrix.m[13], this._worldMatrix.m[14]);\r\n        this._isAbsoluteSynced = false;\r\n\r\n        // Callbacks\r\n        this.onAfterWorldMatrixUpdateObservable.notifyObservers(this);\r\n\r\n        if (!this._poseMatrix) {\r\n            this._poseMatrix = Matrix.Invert(this._worldMatrix);\r\n        }\r\n\r\n        // Cache the determinant\r\n        this._worldMatrixDeterminantIsDirty = true;\r\n\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /**\r\n     * Resets this nodeTransform's local matrix to Matrix.Identity().\r\n     * @param independentOfChildren indicates if all child nodeTransform's world-space transform should be preserved.\r\n     */\r\n    public resetLocalMatrix(independentOfChildren: boolean = true): void {\r\n        this.computeWorldMatrix();\r\n        if (independentOfChildren) {\r\n            const children = this.getChildren();\r\n            for (let i = 0; i < children.length; ++i) {\r\n                const child = children[i] as TransformNode;\r\n                if (child) {\r\n                    child.computeWorldMatrix();\r\n                    const bakedMatrix = TmpVectors.Matrix[0];\r\n                    child._localMatrix.multiplyToRef(this._localMatrix, bakedMatrix);\r\n                    const tmpRotationQuaternion = TmpVectors.Quaternion[0];\r\n                    bakedMatrix.decompose(child.scaling, tmpRotationQuaternion, child.position);\r\n                    if (child.rotationQuaternion) {\r\n                        child.rotationQuaternion.copyFrom(tmpRotationQuaternion);\r\n                    } else {\r\n                        tmpRotationQuaternion.toEulerAnglesToRef(child.rotation);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.scaling.copyFromFloats(1, 1, 1);\r\n        this.position.copyFromFloats(0, 0, 0);\r\n        this.rotation.copyFromFloats(0, 0, 0);\r\n\r\n        //only if quaternion is already set\r\n        if (this.rotationQuaternion) {\r\n            this.rotationQuaternion = Quaternion.Identity();\r\n        }\r\n        this._worldMatrix = Matrix.Identity();\r\n    }\r\n\r\n    protected _afterComputeWorldMatrix(): void {}\r\n\r\n    /**\r\n     * If you'd like to be called back after the mesh position, rotation or scaling has been updated.\r\n     * @param func callback function to add\r\n     *\r\n     * @returns the TransformNode.\r\n     */\r\n    public registerAfterWorldMatrixUpdate(func: (mesh: TransformNode) => void): TransformNode {\r\n        this.onAfterWorldMatrixUpdateObservable.add(func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes a registered callback function.\r\n     * @param func callback function to remove\r\n     * @returns the TransformNode.\r\n     */\r\n    public unregisterAfterWorldMatrixUpdate(func: (mesh: TransformNode) => void): TransformNode {\r\n        this.onAfterWorldMatrixUpdateObservable.removeCallback(func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the position of the current mesh in camera space\r\n     * @param camera defines the camera to use\r\n     * @returns a position\r\n     */\r\n    public getPositionInCameraSpace(camera: Nullable<Camera> = null): Vector3 {\r\n        if (!camera) {\r\n            camera = <Camera>this.getScene().activeCamera;\r\n        }\r\n\r\n        return Vector3.TransformCoordinates(this.getAbsolutePosition(), camera.getViewMatrix());\r\n    }\r\n\r\n    /**\r\n     * Returns the distance from the mesh to the active camera\r\n     * @param camera defines the camera to use\r\n     * @returns the distance\r\n     */\r\n    public getDistanceToCamera(camera: Nullable<Camera> = null): number {\r\n        if (!camera) {\r\n            camera = <Camera>this.getScene().activeCamera;\r\n        }\r\n        return this.getAbsolutePosition().subtract(camera.globalPosition).length();\r\n    }\r\n\r\n    /**\r\n     * Clone the current transform node\r\n     * @param name Name of the new clone\r\n     * @param newParent New parent for the clone\r\n     * @param doNotCloneChildren Do not clone children hierarchy\r\n     * @returns the new transform node\r\n     */\r\n    public override clone(name: string, newParent: Nullable<Node>, doNotCloneChildren?: boolean): Nullable<TransformNode> {\r\n        const result = SerializationHelper.Clone(() => new TransformNode(name, this.getScene()), this);\r\n\r\n        result.name = name;\r\n        result.id = name;\r\n\r\n        if (newParent) {\r\n            result.parent = newParent;\r\n        }\r\n\r\n        if (!doNotCloneChildren) {\r\n            // Children\r\n            const directDescendants = this.getDescendants(true);\r\n            for (let index = 0; index < directDescendants.length; index++) {\r\n                const child = directDescendants[index];\r\n\r\n                if ((<any>child).clone) {\r\n                    (<any>child).clone(name + \".\" + child.name, result);\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Serializes the objects information.\r\n     * @param currentSerializationObject defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(currentSerializationObject?: any): any {\r\n        const serializationObject = SerializationHelper.Serialize(this, currentSerializationObject);\r\n        serializationObject.type = this.getClassName();\r\n        serializationObject.uniqueId = this.uniqueId;\r\n\r\n        // Parent\r\n        if (this.parent) {\r\n            this.parent._serializeAsParent(serializationObject);\r\n        }\r\n\r\n        serializationObject.localMatrix = this.getPivotMatrix().asArray();\r\n\r\n        serializationObject.isEnabled = this.isEnabled();\r\n\r\n        // Animations\r\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\r\n        serializationObject.ranges = this.serializeAnimationRanges();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Returns a new TransformNode object parsed from the source provided.\r\n     * @param parsedTransformNode is the source.\r\n     * @param scene the scene the object belongs to\r\n     * @param rootUrl is a string, it's the root URL to prefix the `delayLoadingFile` property with\r\n     * @returns a new TransformNode object parsed from the source provided.\r\n     */\r\n    public static Parse(parsedTransformNode: any, scene: Scene, rootUrl: string): TransformNode {\r\n        const transformNode = SerializationHelper.Parse(() => new TransformNode(parsedTransformNode.name, scene), parsedTransformNode, scene, rootUrl);\r\n\r\n        if (parsedTransformNode.localMatrix) {\r\n            transformNode.setPreTransformMatrix(Matrix.FromArray(parsedTransformNode.localMatrix));\r\n        } else if (parsedTransformNode.pivotMatrix) {\r\n            transformNode.setPivotMatrix(Matrix.FromArray(parsedTransformNode.pivotMatrix));\r\n        }\r\n\r\n        transformNode.setEnabled(parsedTransformNode.isEnabled);\r\n\r\n        transformNode._waitingParsedUniqueId = parsedTransformNode.uniqueId;\r\n\r\n        // Parent\r\n        if (parsedTransformNode.parentId !== undefined) {\r\n            transformNode._waitingParentId = parsedTransformNode.parentId;\r\n        }\r\n\r\n        if (parsedTransformNode.parentInstanceIndex !== undefined) {\r\n            transformNode._waitingParentInstanceIndex = parsedTransformNode.parentInstanceIndex;\r\n        }\r\n\r\n        // Animations\r\n        if (parsedTransformNode.animations) {\r\n            for (let animationIndex = 0; animationIndex < parsedTransformNode.animations.length; animationIndex++) {\r\n                const parsedAnimation = parsedTransformNode.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    transformNode.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n            Node.ParseAnimationRanges(transformNode, parsedTransformNode, scene);\r\n        }\r\n\r\n        if (parsedTransformNode.autoAnimate) {\r\n            scene.beginAnimation(\r\n                transformNode,\r\n                parsedTransformNode.autoAnimateFrom,\r\n                parsedTransformNode.autoAnimateTo,\r\n                parsedTransformNode.autoAnimateLoop,\r\n                parsedTransformNode.autoAnimateSpeed || 1.0\r\n            );\r\n        }\r\n\r\n        return transformNode;\r\n    }\r\n\r\n    /**\r\n     * Get all child-transformNodes of this node\r\n     * @param directDescendantsOnly defines if true only direct descendants of 'this' will be considered, if false direct and also indirect (children of children, an so on in a recursive manner) descendants of 'this' will be considered\r\n     * @param predicate defines an optional predicate that will be called on every evaluated child, the predicate must return true for a given child to be part of the result, otherwise it will be ignored\r\n     * @returns an array of TransformNode\r\n     */\r\n    public getChildTransformNodes(directDescendantsOnly?: boolean, predicate?: (node: Node) => boolean): TransformNode[] {\r\n        const results: Array<TransformNode> = [];\r\n        this._getDescendants(results, directDescendantsOnly, (node: Node) => {\r\n            return (!predicate || predicate(node)) && node instanceof TransformNode;\r\n        });\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Releases resources associated with this transform node.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public override dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        // Animations\r\n        this.getScene().stopAnimation(this);\r\n\r\n        // Remove from scene\r\n        this.getScene().removeTransformNode(this);\r\n\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.transformNodes.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.transformNodes.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        this.onAfterWorldMatrixUpdateObservable.clear();\r\n\r\n        if (doNotRecurse) {\r\n            const transformNodes = this.getChildTransformNodes(true);\r\n            for (const transformNode of transformNodes) {\r\n                transformNode.parent = null;\r\n                transformNode.computeWorldMatrix(true);\r\n            }\r\n        }\r\n\r\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n    }\r\n\r\n    /**\r\n     * Uniformly scales the mesh to fit inside of a unit cube (1 X 1 X 1 units)\r\n     * @param includeDescendants Use the hierarchy's bounding box instead of the mesh's bounding box. Default is false\r\n     * @param ignoreRotation ignore rotation when computing the scale (ie. object will be axis aligned). Default is false\r\n     * @param predicate predicate that is passed in to getHierarchyBoundingVectors when selecting which object should be included when scaling\r\n     * @returns the current mesh\r\n     */\r\n    public normalizeToUnitCube(includeDescendants = true, ignoreRotation = false, predicate?: Nullable<(node: AbstractMesh) => boolean>): TransformNode {\r\n        let storedRotation: Nullable<Vector3> = null;\r\n        let storedRotationQuaternion: Nullable<Quaternion> = null;\r\n\r\n        if (ignoreRotation) {\r\n            if (this.rotationQuaternion) {\r\n                storedRotationQuaternion = this.rotationQuaternion.clone();\r\n                this.rotationQuaternion.copyFromFloats(0, 0, 0, 1);\r\n            } else if (this.rotation) {\r\n                storedRotation = this.rotation.clone();\r\n                this.rotation.copyFromFloats(0, 0, 0);\r\n            }\r\n        }\r\n\r\n        const boundingVectors = this.getHierarchyBoundingVectors(includeDescendants, predicate);\r\n        const sizeVec = boundingVectors.max.subtract(boundingVectors.min);\r\n        const maxDimension = Math.max(sizeVec.x, sizeVec.y, sizeVec.z);\r\n\r\n        if (maxDimension === 0) {\r\n            return this;\r\n        }\r\n\r\n        const scale = 1 / maxDimension;\r\n\r\n        this.scaling.scaleInPlace(scale);\r\n\r\n        if (ignoreRotation) {\r\n            if (this.rotationQuaternion && storedRotationQuaternion) {\r\n                this.rotationQuaternion.copyFrom(storedRotationQuaternion);\r\n            } else if (this.rotation && storedRotation) {\r\n                this.rotation.copyFrom(storedRotation);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private _syncAbsoluteScalingAndRotation(): void {\r\n        if (!this._isAbsoluteSynced) {\r\n            this._worldMatrix.decompose(this._absoluteScaling, this._absoluteRotationQuaternion);\r\n            this._isAbsoluteSynced = true;\r\n        }\r\n    }\r\n}\r\n", "import type { Collider } from \"./collider\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Observer } from \"../Misc/observable\";\r\n\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\n\r\n/**\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class _MeshCollisionData {\r\n    public _checkCollisions = false;\r\n    public _collisionMask = -1;\r\n    public _collisionGroup = -1;\r\n    public _surroundingMeshes: Nullable<AbstractMesh[]> = null;\r\n    public _collider: Nullable<Collider> = null;\r\n    public _oldPositionForCollisions = new Vector3(0, 0, 0);\r\n    public _diffPositionForCollisions = new Vector3(0, 0, 0);\r\n    public _onCollideObserver: Nullable<Observer<AbstractMesh>>;\r\n    public _onCollisionPositionChangeObserver: Nullable<Observer<Vector3>>;\r\n    public _collisionResponse = true;\r\n}\r\n", "import { Observable } from \"../Misc/observable\";\r\nimport type { Nullable, FloatArray, IndicesArray, DeepImmutable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Scene, IDisposable } from \"../scene\";\r\nimport { ScenePerformancePriority } from \"../scene\";\r\nimport type { Vector2 } from \"../Maths/math.vector\";\r\nimport { Quaternion, Matrix, Vector3, TmpVectors } from \"../Maths/math.vector\";\r\nimport type { Node } from \"../node\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { IGetSetVerticesData } from \"../Meshes/mesh.vertexData\";\r\nimport { VertexData } from \"../Meshes/mesh.vertexData\";\r\nimport { TransformNode } from \"../Meshes/transformNode\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport { PickingInfo } from \"../Collisions/pickingInfo\";\r\nimport type { IntersectionInfo } from \"../Collisions/intersectionInfo\";\r\nimport type { ICullable } from \"../Culling/boundingInfo\";\r\nimport { BoundingInfo } from \"../Culling/boundingInfo\";\r\nimport type { Material } from \"../Materials/material\";\r\nimport type { MaterialDefines } from \"../Materials/materialDefines\";\r\nimport type { Light } from \"../Lights/light\";\r\nimport type { Skeleton } from \"../Bones/skeleton\";\r\nimport type { MorphTargetManager } from \"../Morph/morphTargetManager\";\r\nimport type { IBakedVertexAnimationManager } from \"../BakedVertexAnimation/bakedVertexAnimationManager\";\r\nimport type { IEdgesRenderer } from \"../Rendering/edgesRenderer\";\r\nimport type { SolidParticle } from \"../Particles/solidParticle\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { AbstractActionManager } from \"../Actions/abstractActionManager\";\r\nimport { UniformBuffer } from \"../Materials/uniformBuffer\";\r\nimport { _MeshCollisionData } from \"../Collisions/meshCollisionData\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport type { RawTexture } from \"../Materials/Textures/rawTexture\";\r\nimport { extractMinAndMax } from \"../Maths/math.functions\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport { Epsilon } from \"../Maths/math.constants\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\nimport { Axis } from \"../Maths/math.axis\";\r\nimport type { IParticleSystem } from \"../Particles/IParticleSystem\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\nimport type { Ray } from \"../Culling/ray\";\r\nimport type { Collider } from \"../Collisions/collider\";\r\nimport type { TrianglePickingPredicate } from \"../Culling/ray\";\r\nimport type { RenderingGroup } from \"../Rendering/renderingGroup\";\r\nimport type { IEdgesRendererOptions } from \"../Rendering/edgesRenderer\";\r\nimport type { MorphTarget } from \"../Morph/morphTarget\";\r\nimport type { Geometry } from \"./geometry\";\r\nimport { nativeOverride } from \"../Misc/decorators\";\r\nimport { AbstractEngine } from \"core/Engines/abstractEngine\";\r\n\r\nfunction ApplyMorph(data: FloatArray, kind: string, morphTargetManager: MorphTargetManager): void {\r\n    let getTargetData: Nullable<(target: MorphTarget) => Nullable<FloatArray>> = null;\r\n    switch (kind) {\r\n        case VertexBuffer.PositionKind:\r\n            getTargetData = (target) => target.getPositions();\r\n            break;\r\n        case VertexBuffer.NormalKind:\r\n            getTargetData = (target) => target.getNormals();\r\n            break;\r\n        case VertexBuffer.TangentKind:\r\n            getTargetData = (target) => target.getTangents();\r\n            break;\r\n        case VertexBuffer.UVKind:\r\n            getTargetData = (target) => target.getUVs();\r\n            break;\r\n        case VertexBuffer.UV2Kind:\r\n            getTargetData = (target) => target.getUV2s();\r\n            break;\r\n        case VertexBuffer.ColorKind:\r\n            getTargetData = (target) => target.getColors();\r\n            break;\r\n        default:\r\n            return;\r\n    }\r\n\r\n    for (let index = 0; index < data.length; index++) {\r\n        let value = data[index];\r\n        for (let targetCount = 0; targetCount < morphTargetManager.numTargets; targetCount++) {\r\n            const target = morphTargetManager.getTarget(targetCount);\r\n            const influence = target.influence;\r\n            if (influence !== 0) {\r\n                const targetData = getTargetData(target);\r\n                if (targetData) {\r\n                    value += (targetData[index] - data[index]) * influence;\r\n                }\r\n            }\r\n        }\r\n        data[index] = value;\r\n    }\r\n}\r\n\r\nfunction ApplySkeleton(\r\n    data: FloatArray,\r\n    kind: string,\r\n    skeletonMatrices: Float32Array,\r\n    matricesIndicesData: FloatArray,\r\n    matricesWeightsData: FloatArray,\r\n    matricesIndicesExtraData: Nullable<FloatArray>,\r\n    matricesWeightsExtraData: Nullable<FloatArray>\r\n): void {\r\n    const tempVector = TmpVectors.Vector3[0];\r\n    const finalMatrix = TmpVectors.Matrix[0];\r\n    const tempMatrix = TmpVectors.Matrix[1];\r\n\r\n    const transformFromFloatsToRef = kind === VertexBuffer.NormalKind ? Vector3.TransformNormalFromFloatsToRef : Vector3.TransformCoordinatesFromFloatsToRef;\r\n\r\n    for (let index = 0, matWeightIdx = 0; index < data.length; index += 3, matWeightIdx += 4) {\r\n        finalMatrix.reset();\r\n\r\n        let inf: number;\r\n        let weight: number;\r\n        for (inf = 0; inf < 4; inf++) {\r\n            weight = matricesWeightsData[matWeightIdx + inf];\r\n            if (weight > 0) {\r\n                Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesData[matWeightIdx + inf] * 16), weight, tempMatrix);\r\n                finalMatrix.addToSelf(tempMatrix);\r\n            }\r\n        }\r\n        if (matricesIndicesExtraData && matricesWeightsExtraData) {\r\n            for (inf = 0; inf < 4; inf++) {\r\n                weight = matricesWeightsExtraData[matWeightIdx + inf];\r\n                if (weight > 0) {\r\n                    Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesExtraData[matWeightIdx + inf] * 16), weight, tempMatrix);\r\n                    finalMatrix.addToSelf(tempMatrix);\r\n                }\r\n            }\r\n        }\r\n\r\n        transformFromFloatsToRef(data[index], data[index + 1], data[index + 2], finalMatrix, tempVector);\r\n        tempVector.toArray(data, index);\r\n    }\r\n}\r\n\r\n/**\r\n * Opaque cache when computing data about a mesh\r\n */\r\nexport interface IMeshDataCache {\r\n    /** @internal */\r\n    _outputData?: Float32Array;\r\n\r\n    /** @internal */\r\n    _vertexData?: { [kind: string]: Float32Array };\r\n}\r\n\r\n/**\r\n * Options when computing data about a mesh\r\n */\r\nexport interface IMeshDataOptions {\r\n    /** Apply skeleton when computing the bounding info. Defaults to false. */\r\n    applySkeleton?: boolean;\r\n\r\n    /** Apply morph when computing the bounding info. Defaults to false. */\r\n    applyMorph?: boolean;\r\n\r\n    /** Update the cached positions stored as a Vector3 array. Defaults to true. */\r\n    updatePositionsArray?: boolean;\r\n\r\n    /**\r\n     * Cache to avoid redundant allocations and computations when computing the bounding info multiple times. Pass in\r\n     * an initial empty object and continue with subsequent calls using the same object. Caching is disabled by default.\r\n     */\r\n    cache?: IMeshDataCache;\r\n}\r\n\r\n/** @internal */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass _FacetDataStorage {\r\n    // facetData private properties\r\n    public facetPositions: Vector3[]; // facet local positions\r\n    public facetNormals: Vector3[]; // facet local normals\r\n    public facetPartitioning: number[][]; // partitioning array of facet index arrays\r\n    public facetNb: number = 0; // facet number\r\n    public partitioningSubdivisions: number = 10; // number of subdivisions per axis in the partitioning space\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public partitioningBBoxRatio: number = 1.01; // the partitioning array space is by default 1% bigger than the bounding box\r\n    public facetDataEnabled: boolean = false; // is the facet data feature enabled on this mesh ?\r\n    public facetParameters: any = {}; // keep a reference to the object parameters to avoid memory re-allocation\r\n    public bbSize: Vector3 = Vector3.Zero(); // bbox size approximated for facet data\r\n    public subDiv = {\r\n        // actual number of subdivisions per axis for ComputeNormals()\r\n        max: 1,\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        X: 1,\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        Y: 1,\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        Z: 1,\r\n    };\r\n\r\n    public facetDepthSort: boolean = false; // is the facet depth sort to be computed\r\n    public facetDepthSortEnabled: boolean = false; // is the facet depth sort initialized\r\n    public depthSortedIndices: IndicesArray; // copy of the indices array to store them once sorted\r\n    public depthSortedFacets: { ind: number; sqDistance: number }[]; // array of depth sorted facets\r\n    public facetDepthSortFunction: (f1: { ind: number; sqDistance: number }, f2: { ind: number; sqDistance: number }) => number; // facet depth sort function\r\n    public facetDepthSortFrom: Vector3; // location where to depth sort from\r\n    public facetDepthSortOrigin: Vector3; // same as facetDepthSortFrom but expressed in the mesh local space\r\n\r\n    public invertedMatrix: Matrix; // Inverted world matrix.\r\n}\r\n\r\n/**\r\n * @internal\r\n **/\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass _InternalAbstractMeshDataInfo {\r\n    public _hasVertexAlpha = false;\r\n    public _useVertexColors = true;\r\n    public _numBoneInfluencers = 4;\r\n    public _applyFog = true;\r\n    public _receiveShadows = false;\r\n    public _facetData = new _FacetDataStorage();\r\n    public _visibility = 1.0;\r\n    public _skeleton: Nullable<Skeleton> = null;\r\n    public _layerMask: number = 0x0fffffff;\r\n    public _computeBonesUsingShaders = true;\r\n    public _isActive = false;\r\n    public _onlyForInstances = false;\r\n    public _isActiveIntermediate = false;\r\n    public _onlyForInstancesIntermediate = false;\r\n    public _actAsRegularMesh = false;\r\n    public _currentLOD: Map<Camera, [Nullable<AbstractMesh>, number]> = new Map();\r\n    public _collisionRetryCount: number = 3;\r\n    public _morphTargetManager: Nullable<MorphTargetManager> = null;\r\n    public _renderingGroupId = 0;\r\n    public _bakedVertexAnimationManager: Nullable<IBakedVertexAnimationManager> = null;\r\n    public _material: Nullable<Material> = null;\r\n    public _materialForRenderPass: Array<Material | undefined>; // map a render pass id (index in the array) to a Material\r\n    public _positions: Nullable<Vector3[]> = null;\r\n    public _pointerOverDisableMeshTesting: boolean = false;\r\n    // Collisions\r\n    public _meshCollisionData = new _MeshCollisionData();\r\n    public _enableDistantPicking = false;\r\n    /** @internal\r\n     * Bounding info that is unnafected by the addition of thin instances\r\n     */\r\n    public _rawBoundingInfo: Nullable<BoundingInfo> = null;\r\n    /** @internal\r\n     * This value will indicate us that at some point, the mesh was specifically used with the opposite winding order\r\n     * We use that as a clue to force the material to sideOrientation = null\r\n     */\r\n    public _sideOrientationHint = false;\r\n\r\n    /**\r\n     * @internal\r\n     * if this is set to true, the mesh will be visible only if its parent(s) are also visible\r\n     */\r\n    public _inheritVisibility = false;\r\n    /**\r\n     * Used in frame graph mode only, to know which meshes to update when in frozen mode\r\n     */\r\n    public _wasActiveLastFrame = false;\r\n}\r\n\r\n/**\r\n * Class used to store all common mesh properties\r\n */\r\nexport abstract class AbstractMesh extends TransformNode implements IDisposable, ICullable, IGetSetVerticesData {\r\n    /** No occlusion */\r\n    public static OCCLUSION_TYPE_NONE = 0;\r\n    /** Occlusion set to optimistic */\r\n    public static OCCLUSION_TYPE_OPTIMISTIC = 1;\r\n    /** Occlusion set to strict */\r\n    public static OCCLUSION_TYPE_STRICT = 2;\r\n    /** Use an accurate occlusion algorithm */\r\n    public static OCCLUSION_ALGORITHM_TYPE_ACCURATE = 0;\r\n    /** Use a conservative occlusion algorithm */\r\n    public static OCCLUSION_ALGORITHM_TYPE_CONSERVATIVE = 1;\r\n\r\n    /** Default culling strategy : this is an exclusion test and it's the more accurate.\r\n     *  Test order :\r\n     *  Is the bounding sphere outside the frustum ?\r\n     *  If not, are the bounding box vertices outside the frustum ?\r\n     *  It not, then the cullable object is in the frustum.\r\n     */\r\n    public static readonly CULLINGSTRATEGY_STANDARD = Constants.MESHES_CULLINGSTRATEGY_STANDARD;\r\n    /** Culling strategy : Bounding Sphere Only.\r\n     *  This is an exclusion test. It's faster than the standard strategy because the bounding box is not tested.\r\n     *  It's also less accurate than the standard because some not visible objects can still be selected.\r\n     *  Test : is the bounding sphere outside the frustum ?\r\n     *  If not, then the cullable object is in the frustum.\r\n     */\r\n    public static readonly CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY = Constants.MESHES_CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY;\r\n    /** Culling strategy : Optimistic Inclusion.\r\n     *  This in an inclusion test first, then the standard exclusion test.\r\n     *  This can be faster when a cullable object is expected to be almost always in the camera frustum.\r\n     *  This could also be a little slower than the standard test when the tested object center is not the frustum but one of its bounding box vertex is still inside.\r\n     *  Anyway, it's as accurate as the standard strategy.\r\n     *  Test :\r\n     *  Is the cullable object bounding sphere center in the frustum ?\r\n     *  If not, apply the default culling strategy.\r\n     */\r\n    public static readonly CULLINGSTRATEGY_OPTIMISTIC_INCLUSION = Constants.MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION;\r\n    /** Culling strategy : Optimistic Inclusion then Bounding Sphere Only.\r\n     *  This in an inclusion test first, then the bounding sphere only exclusion test.\r\n     *  This can be the fastest test when a cullable object is expected to be almost always in the camera frustum.\r\n     *  This could also be a little slower than the BoundingSphereOnly strategy when the tested object center is not in the frustum but its bounding sphere still intersects it.\r\n     *  It's less accurate than the standard strategy and as accurate as the BoundingSphereOnly strategy.\r\n     *  Test :\r\n     *  Is the cullable object bounding sphere center in the frustum ?\r\n     *  If not, apply the Bounding Sphere Only strategy. No Bounding Box is tested here.\r\n     */\r\n    public static readonly CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY = Constants.MESHES_CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY;\r\n\r\n    /**\r\n     * No billboard\r\n     */\r\n    public static override get BILLBOARDMODE_NONE(): number {\r\n        return TransformNode.BILLBOARDMODE_NONE;\r\n    }\r\n\r\n    /** Billboard on X axis */\r\n    public static override get BILLBOARDMODE_X(): number {\r\n        return TransformNode.BILLBOARDMODE_X;\r\n    }\r\n\r\n    /** Billboard on Y axis */\r\n    public static override get BILLBOARDMODE_Y(): number {\r\n        return TransformNode.BILLBOARDMODE_Y;\r\n    }\r\n\r\n    /** Billboard on Z axis */\r\n    public static override get BILLBOARDMODE_Z(): number {\r\n        return TransformNode.BILLBOARDMODE_Z;\r\n    }\r\n\r\n    /** Billboard on all axes */\r\n    public static override get BILLBOARDMODE_ALL(): number {\r\n        return TransformNode.BILLBOARDMODE_ALL;\r\n    }\r\n\r\n    /** Billboard on using position instead of orientation */\r\n    public static override get BILLBOARDMODE_USE_POSITION(): number {\r\n        return TransformNode.BILLBOARDMODE_USE_POSITION;\r\n    }\r\n\r\n    // Internal data\r\n    /** @internal */\r\n    public _internalAbstractMeshDataInfo = new _InternalAbstractMeshDataInfo();\r\n\r\n    /** @internal */\r\n    public _waitingMaterialId: Nullable<string> = null;\r\n\r\n    /** @internal */\r\n    public _waitingMorphTargetManagerId: Nullable<number> = null;\r\n\r\n    /**\r\n     * The culling strategy to use to check whether the mesh must be rendered or not.\r\n     * This value can be changed at any time and will be used on the next render mesh selection.\r\n     * The possible values are :\r\n     * - AbstractMesh.CULLINGSTRATEGY_STANDARD\r\n     * - AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY\r\n     * - AbstractMesh.CULLINGSTRATEGY_OPTIMISTIC_INCLUSION\r\n     * - AbstractMesh.CULLINGSTRATEGY_OPTIMISTIC_INCLUSION_THEN_BSPHERE_ONLY\r\n     * Please read each static variable documentation to get details about the culling process.\r\n     * */\r\n    public cullingStrategy = AbstractMesh.CULLINGSTRATEGY_BOUNDINGSPHERE_ONLY;\r\n\r\n    /**\r\n     * Gets the number of facets in the mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData#what-is-a-mesh-facet\r\n     */\r\n    public get facetNb(): number {\r\n        return this._internalAbstractMeshDataInfo._facetData.facetNb;\r\n    }\r\n    /**\r\n     * Gets or set the number (integer) of subdivisions per axis in the partitioning space\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData#tweaking-the-partitioning\r\n     */\r\n    public get partitioningSubdivisions(): number {\r\n        return this._internalAbstractMeshDataInfo._facetData.partitioningSubdivisions;\r\n    }\r\n    public set partitioningSubdivisions(nb: number) {\r\n        this._internalAbstractMeshDataInfo._facetData.partitioningSubdivisions = nb;\r\n    }\r\n    /**\r\n     * The ratio (float) to apply to the bounding box size to set to the partitioning space.\r\n     * Ex : 1.01 (default) the partitioning space is 1% bigger than the bounding box\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData#tweaking-the-partitioning\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public get partitioningBBoxRatio(): number {\r\n        return this._internalAbstractMeshDataInfo._facetData.partitioningBBoxRatio;\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public set partitioningBBoxRatio(ratio: number) {\r\n        this._internalAbstractMeshDataInfo._facetData.partitioningBBoxRatio = ratio;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the facets must be depth sorted on next call to `updateFacetData()`.\r\n     * Works only for updatable meshes.\r\n     * Doesn't work with multi-materials\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData#facet-depth-sort\r\n     */\r\n    public get mustDepthSortFacets(): boolean {\r\n        return this._internalAbstractMeshDataInfo._facetData.facetDepthSort;\r\n    }\r\n    public set mustDepthSortFacets(sort: boolean) {\r\n        this._internalAbstractMeshDataInfo._facetData.facetDepthSort = sort;\r\n    }\r\n\r\n    /**\r\n     * The location (Vector3) where the facet depth sort must be computed from.\r\n     * By default, the active camera position.\r\n     * Used only when facet depth sort is enabled\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData#facet-depth-sort\r\n     */\r\n    public get facetDepthSortFrom(): Vector3 {\r\n        return this._internalAbstractMeshDataInfo._facetData.facetDepthSortFrom;\r\n    }\r\n    public set facetDepthSortFrom(location: Vector3) {\r\n        this._internalAbstractMeshDataInfo._facetData.facetDepthSortFrom = location;\r\n    }\r\n\r\n    /** number of collision detection tries. Change this value if not all collisions are detected and handled properly */\r\n    public get collisionRetryCount(): number {\r\n        return this._internalAbstractMeshDataInfo._collisionRetryCount;\r\n    }\r\n    public set collisionRetryCount(retryCount: number) {\r\n        this._internalAbstractMeshDataInfo._collisionRetryCount = retryCount;\r\n    }\r\n    /**\r\n     * gets a boolean indicating if facetData is enabled\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData#what-is-a-mesh-facet\r\n     */\r\n    public get isFacetDataEnabled(): boolean {\r\n        return this._internalAbstractMeshDataInfo._facetData.facetDataEnabled;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the morph target manager\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/morphTargets\r\n     */\r\n    public get morphTargetManager(): Nullable<MorphTargetManager> {\r\n        return this._internalAbstractMeshDataInfo._morphTargetManager;\r\n    }\r\n\r\n    public set morphTargetManager(value: Nullable<MorphTargetManager>) {\r\n        if (this._internalAbstractMeshDataInfo._morphTargetManager === value) {\r\n            return;\r\n        }\r\n        this._internalAbstractMeshDataInfo._morphTargetManager = value;\r\n        this._syncGeometryWithMorphTargetManager();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the baked vertex animation manager\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/baked_texture_animations\r\n     */\r\n    public get bakedVertexAnimationManager(): Nullable<IBakedVertexAnimationManager> {\r\n        return this._internalAbstractMeshDataInfo._bakedVertexAnimationManager;\r\n    }\r\n\r\n    public set bakedVertexAnimationManager(value: Nullable<IBakedVertexAnimationManager>) {\r\n        if (this._internalAbstractMeshDataInfo._bakedVertexAnimationManager === value) {\r\n            return;\r\n        }\r\n        this._internalAbstractMeshDataInfo._bakedVertexAnimationManager = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    /** @internal */\r\n    public _syncGeometryWithMorphTargetManager(): void {}\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _updateNonUniformScalingState(value: boolean): boolean {\r\n        if (!super._updateNonUniformScalingState(value)) {\r\n            return false;\r\n        }\r\n        this._markSubMeshesAsMiscDirty();\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    public get rawBoundingInfo(): Nullable<BoundingInfo> {\r\n        return this._internalAbstractMeshDataInfo._rawBoundingInfo;\r\n    }\r\n    public set rawBoundingInfo(boundingInfo: Nullable<BoundingInfo>) {\r\n        this._internalAbstractMeshDataInfo._rawBoundingInfo = boundingInfo;\r\n    }\r\n\r\n    // Events\r\n\r\n    /**\r\n     * An event triggered when this mesh collides with another one\r\n     */\r\n    public onCollideObservable = new Observable<AbstractMesh>();\r\n\r\n    /** Set a function to call when this mesh collides with another one */\r\n    public set onCollide(callback: (collidedMesh?: AbstractMesh) => void) {\r\n        if (this._internalAbstractMeshDataInfo._meshCollisionData._onCollideObserver) {\r\n            this.onCollideObservable.remove(this._internalAbstractMeshDataInfo._meshCollisionData._onCollideObserver);\r\n        }\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._onCollideObserver = this.onCollideObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the collision's position changes\r\n     */\r\n    public onCollisionPositionChangeObservable = new Observable<Vector3>();\r\n\r\n    /** Set a function to call when the collision's position changes */\r\n    public set onCollisionPositionChange(callback: () => void) {\r\n        if (this._internalAbstractMeshDataInfo._meshCollisionData._onCollisionPositionChangeObserver) {\r\n            this.onCollisionPositionChangeObservable.remove(this._internalAbstractMeshDataInfo._meshCollisionData._onCollisionPositionChangeObserver);\r\n        }\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._onCollisionPositionChangeObserver = this.onCollisionPositionChangeObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered when material is changed\r\n     */\r\n    public onMaterialChangedObservable = new Observable<AbstractMesh>();\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Gets or sets the orientation for POV movement & rotation\r\n     */\r\n    public definedFacingForward = true;\r\n\r\n    /** @internal */\r\n    public _occlusionQuery: Nullable<WebGLQuery | number> = null;\r\n\r\n    /** @internal */\r\n    public _renderingGroup: Nullable<RenderingGroup> = null;\r\n\r\n    /**\r\n     * Gets or sets mesh visibility between 0 and 1 (default is 1)\r\n     */\r\n    public get visibility(): number {\r\n        return this._internalAbstractMeshDataInfo._visibility;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets mesh visibility between 0 and 1 (default is 1)\r\n     */\r\n    public set visibility(value: number) {\r\n        if (this._internalAbstractMeshDataInfo._visibility === value) {\r\n            return;\r\n        }\r\n\r\n        const oldValue = this._internalAbstractMeshDataInfo._visibility;\r\n\r\n        this._internalAbstractMeshDataInfo._visibility = value;\r\n\r\n        if ((oldValue === 1 && value !== 1) || (oldValue !== 1 && value === 1)) {\r\n            this._markSubMeshesAsDirty((defines) => {\r\n                defines.markAsMiscDirty();\r\n                defines.markAsPrePassDirty();\r\n            });\r\n        }\r\n    }\r\n\r\n    /** Gets or sets the alpha index used to sort transparent meshes\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/advanced/transparent_rendering#alpha-index\r\n     */\r\n    public alphaIndex = Number.MAX_VALUE;\r\n\r\n    /**\r\n     * If set to true, a mesh will only be visible only if its parent(s) are also visible (default is false)\r\n     */\r\n    public get inheritVisibility(): boolean {\r\n        return this._internalAbstractMeshDataInfo._inheritVisibility;\r\n    }\r\n\r\n    public set inheritVisibility(value: boolean) {\r\n        this._internalAbstractMeshDataInfo._inheritVisibility = value;\r\n    }\r\n\r\n    private _isVisible = true;\r\n    /**\r\n     * Gets or sets a boolean indicating if the mesh is visible (renderable). Default is true\r\n     */\r\n    public get isVisible(): boolean {\r\n        if (!this._isVisible || !this.inheritVisibility || !this._parentNode) {\r\n            return this._isVisible;\r\n        }\r\n        if (this._isVisible) {\r\n            let parent: Nullable<Node> = this._parentNode;\r\n            while (parent) {\r\n                const parentVisible = (parent as AbstractMesh).isVisible;\r\n                if (typeof parentVisible !== \"undefined\") {\r\n                    return parentVisible;\r\n                }\r\n                parent = parent.parent;\r\n            }\r\n        }\r\n        return this._isVisible;\r\n    }\r\n\r\n    public set isVisible(value: boolean) {\r\n        this._isVisible = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the mesh can be picked (by scene.pick for instance or through actions). Default is true\r\n     */\r\n    public isPickable = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the mesh can be near picked (touched by the XR controller or hands). Default is false\r\n     */\r\n    public isNearPickable = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the mesh can be grabbed. Default is false.\r\n     * Setting this to true, while using the XR near interaction feature, will trigger a pointer event when the mesh is grabbed.\r\n     * Grabbing means that the controller is using the squeeze or main trigger button to grab the mesh.\r\n     * This is different from nearPickable which only triggers the event when the mesh is touched by the controller\r\n     */\r\n    public isNearGrabbable = false;\r\n\r\n    /** Gets or sets a boolean indicating that bounding boxes of subMeshes must be rendered as well (false by default) */\r\n    public showSubMeshesBoundingBox = false;\r\n\r\n    /** Gets or sets a boolean indicating if the mesh must be considered as a ray blocker for lens flares (false by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/environment/lenseFlare\r\n     */\r\n    public isBlocker = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that pointer move events must be supported on this mesh (false by default)\r\n     */\r\n    public enablePointerMoveEvents = false;\r\n\r\n    /**\r\n     * Gets or sets the property which disables the test that is checking that the mesh under the pointer is the same than the previous time we tested for it (default: false).\r\n     * Set this property to true if you want thin instances picking to be reported accurately when moving over the mesh.\r\n     * Note that setting this property to true will incur some performance penalties when dealing with pointer events for this mesh so use it sparingly.\r\n     */\r\n    public get pointerOverDisableMeshTesting() {\r\n        return this._internalAbstractMeshDataInfo._pointerOverDisableMeshTesting;\r\n    }\r\n\r\n    public set pointerOverDisableMeshTesting(disable: boolean) {\r\n        this._internalAbstractMeshDataInfo._pointerOverDisableMeshTesting = disable;\r\n    }\r\n\r\n    /**\r\n     * Specifies the rendering group id for this mesh (0 by default)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/advanced/transparent_rendering#rendering-groups\r\n     */\r\n    public get renderingGroupId() {\r\n        return this._internalAbstractMeshDataInfo._renderingGroupId;\r\n    }\r\n\r\n    public set renderingGroupId(value: number) {\r\n        this._internalAbstractMeshDataInfo._renderingGroupId = value;\r\n    }\r\n\r\n    /** Gets or sets current material */\r\n    public get material(): Nullable<Material> {\r\n        return this._internalAbstractMeshDataInfo._material;\r\n    }\r\n    public set material(value: Nullable<Material>) {\r\n        this._setMaterial(value);\r\n    }\r\n\r\n    /** @internal */\r\n    protected _setMaterial(value: Nullable<Material>) {\r\n        if (this._internalAbstractMeshDataInfo._material === value) {\r\n            return;\r\n        }\r\n\r\n        // remove from material mesh map id needed\r\n        if (this._internalAbstractMeshDataInfo._material && this._internalAbstractMeshDataInfo._material.meshMap) {\r\n            this._internalAbstractMeshDataInfo._material.meshMap[this.uniqueId] = undefined;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._material = value;\r\n\r\n        if (value && value.meshMap) {\r\n            value.meshMap[this.uniqueId] = this;\r\n        }\r\n\r\n        if (this.onMaterialChangedObservable.hasObservers()) {\r\n            this.onMaterialChangedObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (!this.subMeshes) {\r\n            return;\r\n        }\r\n\r\n        this.resetDrawCache(undefined, value == null);\r\n        this._unBindEffect();\r\n    }\r\n\r\n    /**\r\n     * Gets the material used to render the mesh in a specific render pass\r\n     * @param renderPassId render pass id\r\n     * @returns material used for the render pass. If no specific material is used for this render pass, undefined is returned (meaning mesh.material is used for this pass)\r\n     */\r\n    public getMaterialForRenderPass(renderPassId: number): Material | undefined {\r\n        return this._internalAbstractMeshDataInfo._materialForRenderPass?.[renderPassId];\r\n    }\r\n\r\n    /**\r\n     * Sets the material to be used to render the mesh in a specific render pass\r\n     * @param renderPassId render pass id\r\n     * @param material material to use for this render pass. If undefined is passed, no specific material will be used for this render pass but the regular material will be used instead (mesh.material)\r\n     */\r\n    public setMaterialForRenderPass(renderPassId: number, material?: Material): void {\r\n        this.resetDrawCache(renderPassId);\r\n        if (!this._internalAbstractMeshDataInfo._materialForRenderPass) {\r\n            this._internalAbstractMeshDataInfo._materialForRenderPass = [];\r\n        }\r\n        const currentMaterial = this._internalAbstractMeshDataInfo._materialForRenderPass[renderPassId];\r\n        if (currentMaterial?.meshMap?.[this.uniqueId]) {\r\n            currentMaterial.meshMap[this.uniqueId] = undefined;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._materialForRenderPass[renderPassId] = material;\r\n        if (material && material.meshMap) {\r\n            material.meshMap[this.uniqueId] = this;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this mesh can receive realtime shadows\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/lights/shadows\r\n     */\r\n    public get receiveShadows(): boolean {\r\n        return this._internalAbstractMeshDataInfo._receiveShadows;\r\n    }\r\n    public set receiveShadows(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._receiveShadows === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._receiveShadows = value;\r\n        this._markSubMeshesAsLightDirty();\r\n    }\r\n\r\n    /** Defines color to use when rendering outline */\r\n    public outlineColor = Color3.Red();\r\n    /** Define width to use when rendering outline */\r\n    public outlineWidth = 0.02;\r\n\r\n    /** Defines color to use when rendering overlay */\r\n    public overlayColor = Color3.Red();\r\n    /** Defines alpha to use when rendering overlay */\r\n    public overlayAlpha = 0.5;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this mesh needs to use vertex alpha data to render.\r\n     * This property is misnamed and should be `useVertexAlpha`. Note that the mesh will be rendered\r\n     * with alpha blending when this flag is set even if vertex alpha data is missing from the geometry.\r\n     */\r\n    public get hasVertexAlpha(): boolean {\r\n        return this._internalAbstractMeshDataInfo._hasVertexAlpha;\r\n    }\r\n    public set hasVertexAlpha(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._hasVertexAlpha === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._hasVertexAlpha = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n        this._markSubMeshesAsMiscDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that this mesh needs to use vertex color data to render (if this kind of vertex data is available in the geometry) */\r\n    public get useVertexColors(): boolean {\r\n        return this._internalAbstractMeshDataInfo._useVertexColors;\r\n    }\r\n    public set useVertexColors(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._useVertexColors === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._useVertexColors = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that bone animations must be computed by the GPU (true by default)\r\n     */\r\n    public get computeBonesUsingShaders(): boolean {\r\n        return this._internalAbstractMeshDataInfo._computeBonesUsingShaders;\r\n    }\r\n    public set computeBonesUsingShaders(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._computeBonesUsingShaders === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._computeBonesUsingShaders = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    /** Gets or sets the number of allowed bone influences per vertex (4 by default) */\r\n    public get numBoneInfluencers(): number {\r\n        return this._internalAbstractMeshDataInfo._numBoneInfluencers;\r\n    }\r\n    public set numBoneInfluencers(value: number) {\r\n        if (this._internalAbstractMeshDataInfo._numBoneInfluencers === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._numBoneInfluencers = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that this mesh will allow fog to be rendered on it (true by default) */\r\n    public get applyFog(): boolean {\r\n        return this._internalAbstractMeshDataInfo._applyFog;\r\n    }\r\n    public set applyFog(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._applyFog === value) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._applyFog = value;\r\n        this._markSubMeshesAsMiscDirty();\r\n    }\r\n\r\n    /** When enabled, decompose picking matrices for better precision with large values for mesh position and scling */\r\n    public get enableDistantPicking(): boolean {\r\n        return this._internalAbstractMeshDataInfo._enableDistantPicking;\r\n    }\r\n    public set enableDistantPicking(value: boolean) {\r\n        this._internalAbstractMeshDataInfo._enableDistantPicking = value;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that internal octree (if available) can be used to boost submeshes selection (true by default) */\r\n    public useOctreeForRenderingSelection = true;\r\n    /** Gets or sets a boolean indicating that internal octree (if available) can be used to boost submeshes picking (true by default) */\r\n    public useOctreeForPicking = true;\r\n    /** Gets or sets a boolean indicating that internal octree (if available) can be used to boost submeshes collision (true by default) */\r\n    public useOctreeForCollisions = true;\r\n    /**\r\n     * Gets or sets the current layer mask (default is 0x0FFFFFFF)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/layerMasksAndMultiCam\r\n     */\r\n    public get layerMask(): number {\r\n        return this._internalAbstractMeshDataInfo._layerMask;\r\n    }\r\n\r\n    public set layerMask(value: number) {\r\n        if (value === this._internalAbstractMeshDataInfo._layerMask) {\r\n            return;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._layerMask = value;\r\n        this._resyncLightSources();\r\n    }\r\n\r\n    /**\r\n     * True if the mesh must be rendered in any case (this will shortcut the frustum clipping phase)\r\n     */\r\n    public alwaysSelectAsActiveMesh = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the bounding info does not need to be kept in sync (for performance reason)\r\n     */\r\n    public doNotSyncBoundingInfo = false;\r\n\r\n    /**\r\n     * Gets or sets the current action manager\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/events/actions\r\n     */\r\n    public actionManager: Nullable<AbstractActionManager> = null;\r\n\r\n    /**\r\n     * Gets or sets the ellipsoid used to impersonate this mesh when using collision engine (default is (0.5, 1, 0.5))\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\r\n     */\r\n    public ellipsoid = new Vector3(0.5, 1, 0.5);\r\n    /**\r\n     * Gets or sets the ellipsoid offset used to impersonate this mesh when using collision engine (default is (0, 0, 0))\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\r\n     */\r\n    public ellipsoidOffset = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Gets or sets a collision mask used to mask collisions (default is -1).\r\n     * A collision between A and B will happen if A.collisionGroup & b.collisionMask !== 0\r\n     */\r\n    public get collisionMask(): number {\r\n        return this._internalAbstractMeshDataInfo._meshCollisionData._collisionMask;\r\n    }\r\n\r\n    public set collisionMask(mask: number) {\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._collisionMask = !isNaN(mask) ? mask : -1;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a collision response flag (default is true).\r\n     * when collisionResponse is false, events are still triggered but colliding entity has no response\r\n     * This helps creating trigger volume when user wants collision feedback events but not position/velocity\r\n     * to respond to the collision.\r\n     */\r\n    public get collisionResponse(): boolean {\r\n        return this._internalAbstractMeshDataInfo._meshCollisionData._collisionResponse;\r\n    }\r\n\r\n    public set collisionResponse(response: boolean) {\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._collisionResponse = response;\r\n    }\r\n    /**\r\n     * Gets or sets the current collision group mask (-1 by default).\r\n     * A collision between A and B will happen if A.collisionGroup & b.collisionMask !== 0\r\n     */\r\n    public get collisionGroup(): number {\r\n        return this._internalAbstractMeshDataInfo._meshCollisionData._collisionGroup;\r\n    }\r\n\r\n    public set collisionGroup(mask: number) {\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._collisionGroup = !isNaN(mask) ? mask : -1;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets current surrounding meshes (null by default).\r\n     *\r\n     * By default collision detection is tested against every mesh in the scene.\r\n     * It is possible to set surroundingMeshes to a defined list of meshes and then only these specified\r\n     * meshes will be tested for the collision.\r\n     *\r\n     * Note: if set to an empty array no collision will happen when this mesh is moved.\r\n     */\r\n    public get surroundingMeshes(): Nullable<AbstractMesh[]> {\r\n        return this._internalAbstractMeshDataInfo._meshCollisionData._surroundingMeshes;\r\n    }\r\n\r\n    public set surroundingMeshes(meshes: Nullable<AbstractMesh[]>) {\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._surroundingMeshes = meshes;\r\n    }\r\n\r\n    // Edges\r\n    /**\r\n     * Defines edge width used when edgesRenderer is enabled\r\n     * @see https://www.babylonjs-playground.com/#10OJSG#13\r\n     */\r\n    public edgesWidth = 1;\r\n    /**\r\n     * Defines edge color used when edgesRenderer is enabled\r\n     * @see https://www.babylonjs-playground.com/#10OJSG#13\r\n     */\r\n    public edgesColor = new Color4(1, 0, 0, 1);\r\n    /** @internal */\r\n    public _edgesRenderer: Nullable<IEdgesRenderer> = null;\r\n\r\n    /** @internal */\r\n    public _masterMesh: Nullable<AbstractMesh> = null;\r\n    protected _boundingInfo: Nullable<BoundingInfo> = null;\r\n    protected _boundingInfoIsDirty = true;\r\n    /** @internal */\r\n    public _renderId = 0;\r\n\r\n    /**\r\n     * Gets or sets the list of subMeshes\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/multiMaterials\r\n     */\r\n    public subMeshes: SubMesh[];\r\n\r\n    /** @internal */\r\n    public _intersectionsInProgress = new Array<AbstractMesh>();\r\n\r\n    /** @internal */\r\n    public _unIndexed = false;\r\n\r\n    /** @internal */\r\n    public _lightSources = new Array<Light>();\r\n\r\n    /** Gets the list of lights affecting that mesh */\r\n    public get lightSources(): Light[] {\r\n        return this._lightSources;\r\n    }\r\n\r\n    /** @internal */\r\n    public abstract get _positions(): Nullable<Vector3[]>;\r\n\r\n    // Loading properties\r\n    /** @internal */\r\n    public _waitingData: {\r\n        lods: Nullable<any>;\r\n        actions: Nullable<any>;\r\n        freezeWorldMatrix: Nullable<boolean>;\r\n    } = {\r\n        lods: null,\r\n        actions: null,\r\n        freezeWorldMatrix: null,\r\n    };\r\n\r\n    /** @internal */\r\n    public _bonesTransformMatrices: Nullable<Float32Array> = null;\r\n\r\n    /** @internal */\r\n    public _transformMatrixTexture: Nullable<RawTexture> = null;\r\n\r\n    /**\r\n     * Gets or sets a skeleton to apply skinning transformations\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/bonesSkeletons\r\n     */\r\n    public set skeleton(value: Nullable<Skeleton>) {\r\n        const skeleton = this._internalAbstractMeshDataInfo._skeleton;\r\n        if (skeleton && skeleton.needInitialSkinMatrix) {\r\n            skeleton._unregisterMeshWithPoseMatrix(this);\r\n        }\r\n\r\n        if (value && value.needInitialSkinMatrix) {\r\n            value._registerMeshWithPoseMatrix(this);\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._skeleton = value;\r\n\r\n        if (!this._internalAbstractMeshDataInfo._skeleton) {\r\n            this._bonesTransformMatrices = null;\r\n        }\r\n\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    public get skeleton(): Nullable<Skeleton> {\r\n        return this._internalAbstractMeshDataInfo._skeleton;\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the mesh is rebuilt.\r\n     */\r\n    public onRebuildObservable = new Observable<AbstractMesh>();\r\n\r\n    /**\r\n     * The current mesh uniform buffer.\r\n     * @internal Internal use only.\r\n     */\r\n    public _uniformBuffer: UniformBuffer;\r\n\r\n    // Constructor\r\n\r\n    /**\r\n     * Creates a new AbstractMesh\r\n     * @param name defines the name of the mesh\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, scene: Nullable<Scene> = null) {\r\n        super(name, scene, false);\r\n\r\n        scene = this.getScene();\r\n\r\n        scene.addMesh(this);\r\n\r\n        this._resyncLightSources();\r\n\r\n        // Mesh Uniform Buffer.\r\n        this._uniformBuffer = new UniformBuffer(this.getScene().getEngine(), undefined, undefined, name, !this.getScene().getEngine().isWebGPU);\r\n        this._buildUniformLayout();\r\n\r\n        switch (scene.performancePriority) {\r\n            case ScenePerformancePriority.Aggressive:\r\n                this.doNotSyncBoundingInfo = true;\r\n            // eslint-disable-next-line no-fallthrough\r\n            case ScenePerformancePriority.Intermediate:\r\n                this.alwaysSelectAsActiveMesh = true;\r\n                this.isPickable = false;\r\n                break;\r\n        }\r\n    }\r\n\r\n    protected _buildUniformLayout(): void {\r\n        this._uniformBuffer.addUniform(\"world\", 16);\r\n        this._uniformBuffer.addUniform(\"visibility\", 1);\r\n        this._uniformBuffer.create();\r\n    }\r\n\r\n    /**\r\n     * Transfer the mesh values to its UBO.\r\n     * @param world The world matrix associated with the mesh\r\n     */\r\n    public transferToEffect(world: Matrix): void {\r\n        const ubo = this._uniformBuffer;\r\n\r\n        ubo.updateMatrix(\"world\", world);\r\n        ubo.updateFloat(\"visibility\", this._internalAbstractMeshDataInfo._visibility);\r\n\r\n        ubo.update();\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh uniform buffer.\r\n     * @returns the uniform buffer of the mesh.\r\n     */\r\n    public getMeshUniformBuffer(): UniformBuffer {\r\n        return this._uniformBuffer;\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"AbstractMesh\"\r\n     * @returns \"AbstractMesh\"\r\n     */\r\n    public override getClassName(): string {\r\n        return \"AbstractMesh\";\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the current mesh\r\n     * @param fullDetails defines a boolean indicating if full details must be included\r\n     * @returns a string representation of the current mesh\r\n     */\r\n    public override toString(fullDetails?: boolean): string {\r\n        let ret = \"Name: \" + this.name + \", isInstance: \" + (this.getClassName() === \"InstancedMesh\" ? \"YES\" : \"NO\");\r\n        ret += \", # of submeshes: \" + (this.subMeshes ? this.subMeshes.length : 0);\r\n\r\n        const skeleton = this._internalAbstractMeshDataInfo._skeleton;\r\n        if (skeleton) {\r\n            ret += \", skeleton: \" + skeleton.name;\r\n        }\r\n        if (fullDetails) {\r\n            ret += \", billboard mode: \" + [\"NONE\", \"X\", \"Y\", null, \"Z\", null, null, \"ALL\"][this.billboardMode];\r\n            ret += \", freeze wrld mat: \" + (this._isWorldMatrixFrozen || this._waitingData.freezeWorldMatrix ? \"YES\" : \"NO\");\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    protected override _getEffectiveParent(): Nullable<Node> {\r\n        if (this._masterMesh && this.billboardMode !== TransformNode.BILLBOARDMODE_NONE) {\r\n            return this._masterMesh;\r\n        }\r\n\r\n        return super._getEffectiveParent();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _getActionManagerForTrigger(trigger?: number, initialCall = true): Nullable<AbstractActionManager> {\r\n        if (this.actionManager && (initialCall || this.actionManager.isRecursive)) {\r\n            if (trigger) {\r\n                if (this.actionManager.hasSpecificTrigger(trigger)) {\r\n                    return this.actionManager;\r\n                }\r\n            } else {\r\n                return this.actionManager;\r\n            }\r\n        }\r\n\r\n        if (!this.parent) {\r\n            return null;\r\n        }\r\n\r\n        return this.parent._getActionManagerForTrigger(trigger, false);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public _rebuild(dispose = false): void {\r\n        this.onRebuildObservable.notifyObservers(this);\r\n\r\n        if (this._occlusionQuery !== null) {\r\n            this._occlusionQuery = null;\r\n        }\r\n\r\n        if (!this.subMeshes) {\r\n            return;\r\n        }\r\n\r\n        for (const subMesh of this.subMeshes) {\r\n            subMesh._rebuild();\r\n        }\r\n\r\n        this.resetDrawCache();\r\n    }\r\n\r\n    /** @internal */\r\n    public _resyncLightSources(): void {\r\n        this._lightSources.length = 0;\r\n\r\n        for (const light of this.getScene().lights) {\r\n            if (!light.isEnabled()) {\r\n                continue;\r\n            }\r\n\r\n            if (light.canAffectMesh(this)) {\r\n                this._lightSources.push(light);\r\n            }\r\n        }\r\n\r\n        this._markSubMeshesAsLightDirty();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _resyncLightSource(light: Light): void {\r\n        const isIn = light.isEnabled() && light.canAffectMesh(this);\r\n\r\n        const index = this._lightSources.indexOf(light);\r\n        let removed = false;\r\n        if (index === -1) {\r\n            if (!isIn) {\r\n                return;\r\n            }\r\n            this._lightSources.push(light);\r\n        } else {\r\n            if (isIn) {\r\n                return;\r\n            }\r\n            removed = true;\r\n            this._lightSources.splice(index, 1);\r\n        }\r\n\r\n        this._markSubMeshesAsLightDirty(removed);\r\n    }\r\n\r\n    /** @internal */\r\n    public _unBindEffect() {\r\n        for (const subMesh of this.subMeshes) {\r\n            subMesh.setEffect(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _removeLightSource(light: Light, dispose: boolean): void {\r\n        const index = this._lightSources.indexOf(light);\r\n\r\n        if (index === -1) {\r\n            return;\r\n        }\r\n        this._lightSources.splice(index, 1);\r\n\r\n        this._markSubMeshesAsLightDirty(dispose);\r\n    }\r\n\r\n    private _markSubMeshesAsDirty(func: (defines: MaterialDefines) => void) {\r\n        if (!this.subMeshes) {\r\n            return;\r\n        }\r\n\r\n        for (const subMesh of this.subMeshes) {\r\n            for (let i = 0; i < subMesh._drawWrappers.length; ++i) {\r\n                const drawWrapper = subMesh._drawWrappers[i];\r\n                if (!drawWrapper || !drawWrapper.defines || !(drawWrapper.defines as MaterialDefines).markAllAsDirty) {\r\n                    continue;\r\n                }\r\n                func(drawWrapper.defines as MaterialDefines);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _markSubMeshesAsLightDirty(dispose: boolean = false) {\r\n        this._markSubMeshesAsDirty((defines) => defines.markAsLightDirty(dispose));\r\n    }\r\n\r\n    /** @internal */\r\n    public _markSubMeshesAsAttributesDirty() {\r\n        this._markSubMeshesAsDirty((defines) => defines.markAsAttributesDirty());\r\n    }\r\n\r\n    /** @internal */\r\n    public _markSubMeshesAsMiscDirty() {\r\n        this._markSubMeshesAsDirty((defines) => defines.markAsMiscDirty());\r\n    }\r\n\r\n    /**\r\n     * Flag the AbstractMesh as dirty (Forcing it to update everything)\r\n     * @param property if set to \"rotation\" the objects rotationQuaternion will be set to null\r\n     * @returns this AbstractMesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public override markAsDirty(property?: string): AbstractMesh {\r\n        this._currentRenderId = Number.MAX_VALUE;\r\n        super.markAsDirty(property);\r\n        this._isDirty = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Resets the draw wrappers cache for all submeshes of this abstract mesh\r\n     * @param passId If provided, releases only the draw wrapper corresponding to this render pass id\r\n     * @param immediate If true, the effect will be released immediately, otherwise it will be released at the next frame\r\n     */\r\n    public resetDrawCache(passId?: number, immediate = false): void {\r\n        if (!this.subMeshes) {\r\n            return;\r\n        }\r\n\r\n        for (const subMesh of this.subMeshes) {\r\n            subMesh.resetDrawCache(passId, immediate);\r\n        }\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * Returns true if the mesh is blocked. Implemented by child classes\r\n     */\r\n    public get isBlocked(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh itself by default. Implemented by child classes\r\n     * @param camera defines the camera to use to pick the right LOD level\r\n     * @returns the currentAbstractMesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getLOD(camera: Camera): Nullable<AbstractMesh> {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * The mesh's internal Geometry object. Implemented by child classes.\r\n     */\r\n    public abstract get geometry(): Nullable<Geometry>;\r\n\r\n    /**\r\n     * Returns 0 by default. Implemented by child classes\r\n     * @returns an integer\r\n     */\r\n    public getTotalVertices(): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Returns a positive integer : the total number of indices in this mesh geometry.\r\n     * @returns the number of indices or zero if the mesh has no geometry.\r\n     */\r\n    public getTotalIndices(): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Returns null by default. Implemented by child classes\r\n     * @returns null\r\n     */\r\n    public getIndices(): Nullable<IndicesArray> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Returns the array of the requested vertex data kind. Implemented by child classes\r\n     * @param kind defines the vertex data kind to use\r\n     * @returns null\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getVerticesData(kind: string): Nullable<FloatArray> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Copies the requested vertex data kind into the given vertex data map. Float data is constructed if the map doesn't have the data.\r\n     * @param kind defines the vertex data kind to use\r\n     * @param vertexData defines the map that stores the resulting data\r\n     */\r\n    public abstract copyVerticesData(kind: string, vertexData: { [kind: string]: Float32Array }): void;\r\n\r\n    /**\r\n     * Returns the mesh VertexBuffer object from the requested `kind`\r\n     * @param kind defines which buffer to read from (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.NormalKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param bypassInstanceData defines a boolean indicating that the function should not take into account the instance data (applies only if the mesh has instances). Default: false\r\n     * @returns a FloatArray or null if the mesh has no vertex buffer for this kind.\r\n     */\r\n    public abstract getVertexBuffer(kind: string, bypassInstanceData?: boolean): Nullable<VertexBuffer>;\r\n\r\n    /**\r\n     * Sets the vertex data of the mesh geometry for the requested `kind`.\r\n     * If the mesh has no geometry, a new Geometry object is set to the mesh and then passed this vertex data.\r\n     * Note that a new underlying VertexBuffer object is created each call.\r\n     * If the `kind` is the `PositionKind`, the mesh BoundingInfo is renewed, so the bounding box and sphere, and the mesh World Matrix is recomputed.\r\n     * @param kind defines vertex data kind:\r\n     * * VertexBuffer.PositionKind\r\n     * * VertexBuffer.UVKind\r\n     * * VertexBuffer.UV2Kind\r\n     * * VertexBuffer.UV3Kind\r\n     * * VertexBuffer.UV4Kind\r\n     * * VertexBuffer.UV5Kind\r\n     * * VertexBuffer.UV6Kind\r\n     * * VertexBuffer.ColorKind\r\n     * * VertexBuffer.MatricesIndicesKind\r\n     * * VertexBuffer.MatricesIndicesExtraKind\r\n     * * VertexBuffer.MatricesWeightsKind\r\n     * * VertexBuffer.MatricesWeightsExtraKind\r\n     * @param data defines the data source\r\n     * @param updatable defines if the data must be flagged as updatable (or static)\r\n     * @param stride defines the vertex stride (size of an entire vertex). Can be null and in this case will be deduced from vertex data kind\r\n     * @returns the current mesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public setVerticesData(kind: string, data: FloatArray, updatable?: boolean, stride?: number): AbstractMesh {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the existing vertex data of the mesh geometry for the requested `kind`.\r\n     * If the mesh has no geometry, it is simply returned as it is.\r\n     * @param kind defines vertex data kind:\r\n     * * VertexBuffer.PositionKind\r\n     * * VertexBuffer.UVKind\r\n     * * VertexBuffer.UV2Kind\r\n     * * VertexBuffer.UV3Kind\r\n     * * VertexBuffer.UV4Kind\r\n     * * VertexBuffer.UV5Kind\r\n     * * VertexBuffer.UV6Kind\r\n     * * VertexBuffer.ColorKind\r\n     * * VertexBuffer.MatricesIndicesKind\r\n     * * VertexBuffer.MatricesIndicesExtraKind\r\n     * * VertexBuffer.MatricesWeightsKind\r\n     * * VertexBuffer.MatricesWeightsExtraKind\r\n     * @param data defines the data source\r\n     * @param updateExtends If `kind` is `PositionKind` and if `updateExtends` is true, the mesh BoundingInfo is renewed, so the bounding box and sphere, and the mesh World Matrix is recomputed\r\n     * @param makeItUnique If true, a new global geometry is created from this data and is set to the mesh\r\n     * @returns the current mesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public updateVerticesData(kind: string, data: FloatArray, updateExtends?: boolean, makeItUnique?: boolean): AbstractMesh {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh indices,\r\n     * If the mesh has no geometry, a new Geometry object is created and set to the mesh.\r\n     * @param indices Expects an array populated with integers or a typed array (Int32Array, Uint32Array, Uint16Array)\r\n     * @param totalVertices Defines the total number of vertices\r\n     * @returns the current mesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public setIndices(indices: IndicesArray, totalVertices: Nullable<number>): AbstractMesh {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if specific vertex data is present\r\n     * @param kind defines the vertex data kind to use\r\n     * @returns true is data kind is present\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public isVerticesDataPresent(kind: string): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the mesh BoundingInfo object or creates a new one and returns if it was undefined.\r\n     * Note that it returns a shallow bounding of the mesh (i.e. it does not include children).\r\n     * However, if the mesh contains thin instances, it will be expanded to include them. If you want the \"raw\" bounding data instead, then use `getRawBoundingInfo()`.\r\n     * To get the full bounding of all children, call `getHierarchyBoundingVectors` instead.\r\n     * @returns a BoundingInfo\r\n     */\r\n    public getBoundingInfo(): BoundingInfo {\r\n        if (this._masterMesh) {\r\n            return this._masterMesh.getBoundingInfo();\r\n        }\r\n\r\n        if (this._boundingInfoIsDirty) {\r\n            this._boundingInfoIsDirty = false;\r\n            // this._boundingInfo is being created if undefined\r\n            this._updateBoundingInfo();\r\n        }\r\n        // cannot be null.\r\n        return this._boundingInfo!;\r\n    }\r\n\r\n    /**\r\n     * Returns the bounding info unnafected by instance data.\r\n     * @returns the bounding info of the mesh unaffected by instance data.\r\n     */\r\n    public getRawBoundingInfo() {\r\n        return this.rawBoundingInfo ?? this.getBoundingInfo();\r\n    }\r\n\r\n    /**\r\n     * Overwrite the current bounding info\r\n     * @param boundingInfo defines the new bounding info\r\n     * @returns the current mesh\r\n     */\r\n    public setBoundingInfo(boundingInfo: BoundingInfo): AbstractMesh {\r\n        this._boundingInfo = boundingInfo;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns true if there is already a bounding info\r\n     */\r\n    public get hasBoundingInfo(): boolean {\r\n        return this._boundingInfo !== null;\r\n    }\r\n\r\n    /**\r\n     * Creates a new bounding info for the mesh\r\n     * @param minimum min vector of the bounding box/sphere\r\n     * @param maximum max vector of the bounding box/sphere\r\n     * @param worldMatrix defines the new world matrix\r\n     * @returns the new bounding info\r\n     */\r\n    public buildBoundingInfo(minimum: DeepImmutable<Vector3>, maximum: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this._boundingInfo = new BoundingInfo(minimum, maximum, worldMatrix);\r\n        return this._boundingInfo;\r\n    }\r\n\r\n    /**\r\n     * Uniformly scales the mesh to fit inside of a unit cube (1 X 1 X 1 units)\r\n     * @param includeDescendants Use the hierarchy's bounding box instead of the mesh's bounding box. Default is false\r\n     * @param ignoreRotation ignore rotation when computing the scale (ie. object will be axis aligned). Default is false\r\n     * @param predicate predicate that is passed in to getHierarchyBoundingVectors when selecting which object should be included when scaling\r\n     * @returns the current mesh\r\n     */\r\n    public override normalizeToUnitCube(includeDescendants = true, ignoreRotation = false, predicate?: Nullable<(node: AbstractMesh) => boolean>): AbstractMesh {\r\n        return <AbstractMesh>super.normalizeToUnitCube(includeDescendants, ignoreRotation, predicate);\r\n    }\r\n\r\n    /** Gets a boolean indicating if this mesh has skinning data and an attached skeleton */\r\n    public get useBones(): boolean {\r\n        return <boolean>(\r\n            (this.skeleton &&\r\n                this.getScene().skeletonsEnabled &&\r\n                this.isVerticesDataPresent(VertexBuffer.MatricesIndicesKind) &&\r\n                this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind))\r\n        );\r\n    }\r\n\r\n    /** @internal */\r\n    public _preActivate(): void {}\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public _preActivateForIntermediateRendering(renderId: number): void {}\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public _activate(renderId: number, intermediateRendering: boolean): boolean {\r\n        this._renderId = renderId;\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    public _postActivate(): void {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @internal */\r\n    public _freeze() {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @internal */\r\n    public _unFreeze() {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Gets the current world matrix\r\n     * @returns a Matrix\r\n     */\r\n    public override getWorldMatrix(): Matrix {\r\n        if (this._masterMesh && this.billboardMode === TransformNode.BILLBOARDMODE_NONE) {\r\n            return this._masterMesh.getWorldMatrix();\r\n        }\r\n\r\n        return super.getWorldMatrix();\r\n    }\r\n\r\n    /** @internal */\r\n    public override _getWorldMatrixDeterminant(): number {\r\n        if (this._masterMesh) {\r\n            return this._masterMesh._getWorldMatrixDeterminant();\r\n        }\r\n\r\n        return super._getWorldMatrixDeterminant();\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this mesh is an instance or a regular mesh\r\n     */\r\n    public get isAnInstance(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this mesh has instances\r\n     */\r\n    public get hasInstances(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this mesh has thin instances\r\n     */\r\n    public get hasThinInstances(): boolean {\r\n        return false;\r\n    }\r\n\r\n    // ================================== Point of View Movement =================================\r\n\r\n    /**\r\n     * Perform relative position change from the point of view of behind the front of the mesh.\r\n     * This is performed taking into account the meshes current rotation, so you do not have to care.\r\n     * Supports definition of mesh facing forward or backward {@link definedFacingForwardSearch | See definedFacingForwardSearch }.\r\n     * @param amountRight defines the distance on the right axis\r\n     * @param amountUp defines the distance on the up axis\r\n     * @param amountForward defines the distance on the forward axis\r\n     * @returns the current mesh\r\n     */\r\n    public movePOV(amountRight: number, amountUp: number, amountForward: number): AbstractMesh {\r\n        this.position.addInPlace(this.calcMovePOV(amountRight, amountUp, amountForward));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Calculate relative position change from the point of view of behind the front of the mesh.\r\n     * This is performed taking into account the meshes current rotation, so you do not have to care.\r\n     * Supports definition of mesh facing forward or backward {@link definedFacingForwardSearch | See definedFacingForwardSearch }.\r\n     * @param amountRight defines the distance on the right axis\r\n     * @param amountUp defines the distance on the up axis\r\n     * @param amountForward defines the distance on the forward axis\r\n     * @returns the new displacement vector\r\n     */\r\n    public calcMovePOV(amountRight: number, amountUp: number, amountForward: number): Vector3 {\r\n        const rotMatrix = new Matrix();\r\n        const rotQuaternion = this.rotationQuaternion ? this.rotationQuaternion : Quaternion.RotationYawPitchRoll(this.rotation.y, this.rotation.x, this.rotation.z);\r\n        rotQuaternion.toRotationMatrix(rotMatrix);\r\n\r\n        const translationDelta = Vector3.Zero();\r\n        const defForwardMult = this.definedFacingForward ? -1 : 1;\r\n        Vector3.TransformCoordinatesFromFloatsToRef(amountRight * defForwardMult, amountUp, amountForward * defForwardMult, rotMatrix, translationDelta);\r\n        return translationDelta;\r\n    }\r\n    // ================================== Point of View Rotation =================================\r\n    /**\r\n     * Perform relative rotation change from the point of view of behind the front of the mesh.\r\n     * Supports definition of mesh facing forward or backward {@link definedFacingForwardSearch | See definedFacingForwardSearch }.\r\n     * @param flipBack defines the flip\r\n     * @param twirlClockwise defines the twirl\r\n     * @param tiltRight defines the tilt\r\n     * @returns the current mesh\r\n     */\r\n    public rotatePOV(flipBack: number, twirlClockwise: number, tiltRight: number): AbstractMesh {\r\n        this.rotation.addInPlace(this.calcRotatePOV(flipBack, twirlClockwise, tiltRight));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Calculate relative rotation change from the point of view of behind the front of the mesh.\r\n     * Supports definition of mesh facing forward or backward {@link definedFacingForwardSearch | See definedFacingForwardSearch }.\r\n     * @param flipBack defines the flip\r\n     * @param twirlClockwise defines the twirl\r\n     * @param tiltRight defines the tilt\r\n     * @returns the new rotation vector\r\n     */\r\n    public calcRotatePOV(flipBack: number, twirlClockwise: number, tiltRight: number): Vector3 {\r\n        const defForwardMult = this.definedFacingForward ? 1 : -1;\r\n        return new Vector3(flipBack * defForwardMult, twirlClockwise, tiltRight * defForwardMult);\r\n    }\r\n\r\n    /**\r\n     * This method recomputes and sets a new BoundingInfo to the mesh unless it is locked.\r\n     * This means the mesh underlying bounding box and sphere are recomputed.\r\n     * @param options defines a set of options for computing the bounding info\r\n     * @returns the current mesh\r\n     */\r\n    public abstract refreshBoundingInfo(options: IMeshDataOptions): AbstractMesh;\r\n\r\n    /**\r\n     * This method recomputes and sets a new BoundingInfo to the mesh unless it is locked.\r\n     * This means the mesh underlying bounding box and sphere are recomputed.\r\n     * @param applySkeletonOrOptions defines whether to apply the skeleton before computing the bounding info or a set of options\r\n     * @param applyMorph defines whether to apply the morph target before computing the bounding info\r\n     * @returns the current mesh\r\n     */\r\n    public abstract refreshBoundingInfo(applySkeletonOrOptions: boolean | IMeshDataOptions, applyMorph: boolean): AbstractMesh;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _refreshBoundingInfo(data: Nullable<FloatArray>, bias: Nullable<Vector2>): void {\r\n        if (data) {\r\n            const extend = extractMinAndMax(data, 0, this.getTotalVertices(), bias);\r\n            if (this._boundingInfo) {\r\n                this._boundingInfo.reConstruct(extend.minimum, extend.maximum);\r\n            } else {\r\n                this._boundingInfo = new BoundingInfo(extend.minimum, extend.maximum);\r\n            }\r\n        }\r\n\r\n        if (this.subMeshes) {\r\n            for (let index = 0; index < this.subMeshes.length; index++) {\r\n                this.subMeshes[index].refreshBoundingInfo(data);\r\n            }\r\n        }\r\n\r\n        this._updateBoundingInfo();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _refreshBoundingInfoDirect(extend: { minimum: Vector3; maximum: Vector3 }): void {\r\n        if (this._boundingInfo) {\r\n            this._boundingInfo.reConstruct(extend.minimum, extend.maximum);\r\n        } else {\r\n            this._boundingInfo = new BoundingInfo(extend.minimum, extend.maximum);\r\n        }\r\n\r\n        if (this.subMeshes) {\r\n            for (let index = 0; index < this.subMeshes.length; index++) {\r\n                this.subMeshes[index].refreshBoundingInfo(null);\r\n            }\r\n        }\r\n\r\n        this._updateBoundingInfo();\r\n    }\r\n\r\n    // This function is only here so we can apply the nativeOverride decorator.\r\n    @nativeOverride.filter(\r\n        (...[data, matricesIndicesData, matricesWeightsData, matricesIndicesExtraData, matricesWeightsExtraData]: Parameters<typeof AbstractMesh._ApplySkeleton>) =>\r\n            !Array.isArray(data) &&\r\n            !Array.isArray(matricesIndicesData) &&\r\n            !Array.isArray(matricesWeightsData) &&\r\n            !Array.isArray(matricesIndicesExtraData) &&\r\n            !Array.isArray(matricesWeightsExtraData)\r\n    )\r\n    private static _ApplySkeleton(\r\n        data: FloatArray,\r\n        kind: string,\r\n        skeletonMatrices: Float32Array,\r\n        matricesIndicesData: FloatArray,\r\n        matricesWeightsData: FloatArray,\r\n        matricesIndicesExtraData: Nullable<FloatArray>,\r\n        matricesWeightsExtraData: Nullable<FloatArray>\r\n    ): void {\r\n        ApplySkeleton(data, kind, skeletonMatrices, matricesIndicesData, matricesWeightsData, matricesIndicesExtraData, matricesWeightsExtraData);\r\n    }\r\n\r\n    /** @internal */\r\n    public _getData(options: IMeshDataOptions, data: Nullable<FloatArray>, kind: string = VertexBuffer.PositionKind): Nullable<FloatArray> {\r\n        const cache = options.cache;\r\n\r\n        const getVertexData = (kind: string): Nullable<FloatArray> => {\r\n            if (cache) {\r\n                const vertexData = (cache._vertexData ||= {});\r\n                if (!vertexData[kind]) {\r\n                    this.copyVerticesData(kind, vertexData);\r\n                }\r\n                return vertexData[kind];\r\n            }\r\n\r\n            return this.getVerticesData(kind);\r\n        };\r\n\r\n        data ||= getVertexData(kind);\r\n        if (!data) {\r\n            return null;\r\n        }\r\n\r\n        if (cache) {\r\n            if (cache._outputData) {\r\n                cache._outputData.set(data);\r\n            } else {\r\n                cache._outputData = new Float32Array(data);\r\n            }\r\n\r\n            data = cache._outputData;\r\n        } else if ((options.applyMorph && this.morphTargetManager) || (options.applySkeleton && this.skeleton)) {\r\n            data = data.slice();\r\n        }\r\n\r\n        if (options.applyMorph && this.morphTargetManager) {\r\n            ApplyMorph(data, kind, this.morphTargetManager);\r\n        }\r\n\r\n        if (options.applySkeleton && this.skeleton) {\r\n            const matricesIndicesData = getVertexData(VertexBuffer.MatricesIndicesKind);\r\n            const matricesWeightsData = getVertexData(VertexBuffer.MatricesWeightsKind);\r\n            if (matricesWeightsData && matricesIndicesData) {\r\n                const needExtras = this.numBoneInfluencers > 4;\r\n                const matricesIndicesExtraData = needExtras ? getVertexData(VertexBuffer.MatricesIndicesExtraKind) : null;\r\n                const matricesWeightsExtraData = needExtras ? getVertexData(VertexBuffer.MatricesWeightsExtraKind) : null;\r\n                const skeletonMatrices = this.skeleton.getTransformMatrices(this);\r\n                AbstractMesh._ApplySkeleton(data, kind, skeletonMatrices, matricesIndicesData, matricesWeightsData, matricesIndicesExtraData, matricesWeightsExtraData);\r\n            }\r\n        }\r\n\r\n        if (options.updatePositionsArray !== false && kind === VertexBuffer.PositionKind) {\r\n            const positions = this._internalAbstractMeshDataInfo._positions || [];\r\n            const previousLength = positions.length;\r\n            positions.length = data.length / 3;\r\n            if (previousLength < positions.length) {\r\n                for (let positionIndex = previousLength; positionIndex < positions.length; positionIndex++) {\r\n                    positions[positionIndex] = new Vector3();\r\n                }\r\n            }\r\n\r\n            for (let positionIndex = 0, dataIndex = 0; positionIndex < positions.length; positionIndex++, dataIndex += 3) {\r\n                positions[positionIndex].copyFromFloats(data[dataIndex], data[dataIndex + 1], data[dataIndex + 2]);\r\n            }\r\n\r\n            this._internalAbstractMeshDataInfo._positions = positions;\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Get the normals vertex data and optionally apply skeleton and morphing.\r\n     * @param applySkeleton defines whether to apply the skeleton\r\n     * @param applyMorph  defines whether to apply the morph target\r\n     * @returns the normals data\r\n     */\r\n    public getNormalsData(applySkeleton = false, applyMorph = false): Nullable<FloatArray> {\r\n        return this._getData({ applySkeleton, applyMorph, updatePositionsArray: false }, null, VertexBuffer.NormalKind);\r\n    }\r\n\r\n    /**\r\n     * Get the position vertex data and optionally apply skeleton and morphing.\r\n     * @param applySkeleton defines whether to apply the skeleton\r\n     * @param applyMorph  defines whether to apply the morph target\r\n     * @param data defines the position data to apply the skeleton and morph to\r\n     * @returns the position data\r\n     */\r\n    public getPositionData(applySkeleton: boolean = false, applyMorph: boolean = false, data: Nullable<FloatArray> = null): Nullable<FloatArray> {\r\n        return this._getData({ applySkeleton, applyMorph, updatePositionsArray: false }, data, VertexBuffer.PositionKind);\r\n    }\r\n\r\n    /** @internal */\r\n    public _updateBoundingInfo(): AbstractMesh {\r\n        if (this._boundingInfo) {\r\n            this._boundingInfo.update(this.worldMatrixFromCache);\r\n        } else {\r\n            this._boundingInfo = new BoundingInfo(Vector3.Zero(), Vector3.Zero(), this.worldMatrixFromCache);\r\n        }\r\n        this._updateSubMeshesBoundingInfo(this.worldMatrixFromCache);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _updateSubMeshesBoundingInfo(matrix: DeepImmutable<Matrix>): AbstractMesh {\r\n        if (!this.subMeshes) {\r\n            return this;\r\n        }\r\n        const count = this.subMeshes.length;\r\n        for (let subIndex = 0; subIndex < count; subIndex++) {\r\n            const subMesh = this.subMeshes[subIndex];\r\n            if (count > 1 || !subMesh.IsGlobal) {\r\n                subMesh.updateBoundingInfo(matrix);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    protected override _afterComputeWorldMatrix(): void {\r\n        if (this.doNotSyncBoundingInfo) {\r\n            return;\r\n        }\r\n        // Bounding info\r\n        this._boundingInfoIsDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if the mesh is within the frustum defined by the passed array of planes.\r\n     * A mesh is in the frustum if its bounding box intersects the frustum\r\n     * @param frustumPlanes defines the frustum to test\r\n     * @returns true if the mesh is in the frustum planes\r\n     */\r\n    public isInFrustum(frustumPlanes: Plane[]): boolean {\r\n        return this.getBoundingInfo().isInFrustum(frustumPlanes, this.cullingStrategy);\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if the mesh is completely in the frustum defined be the passed array of planes.\r\n     * A mesh is completely in the frustum if its bounding box it completely inside the frustum.\r\n     * @param frustumPlanes defines the frustum to test\r\n     * @returns true if the mesh is completely in the frustum planes\r\n     */\r\n    public isCompletelyInFrustum(frustumPlanes: Plane[]): boolean {\r\n        return this.getBoundingInfo().isCompletelyInFrustum(frustumPlanes);\r\n    }\r\n\r\n    /**\r\n     * True if the mesh intersects another mesh or a SolidParticle object\r\n     * @param mesh defines a target mesh or SolidParticle to test\r\n     * @param precise Unless the parameter `precise` is set to `true` the intersection is computed according to Axis Aligned Bounding Boxes (AABB), else according to OBB (Oriented BBoxes)\r\n     * @param includeDescendants Can be set to true to test if the mesh defined in parameters intersects with the current mesh or any child meshes\r\n     * @returns true if there is an intersection\r\n     */\r\n    public intersectsMesh(mesh: AbstractMesh | SolidParticle, precise: boolean = false, includeDescendants?: boolean): boolean {\r\n        const boundingInfo = this.getBoundingInfo();\r\n        const otherBoundingInfo = mesh.getBoundingInfo();\r\n\r\n        if (boundingInfo.intersects(otherBoundingInfo, precise)) {\r\n            return true;\r\n        }\r\n\r\n        if (includeDescendants) {\r\n            for (const child of this.getChildMeshes()) {\r\n                if (child.intersectsMesh(mesh, precise, true)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the passed point (Vector3) is inside the mesh bounding box\r\n     * @param point defines the point to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public intersectsPoint(point: Vector3): boolean {\r\n        return this.getBoundingInfo().intersectsPoint(point);\r\n    }\r\n\r\n    // Collisions\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this mesh can be used in the collision engine\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\r\n     */\r\n    public get checkCollisions(): boolean {\r\n        return this._internalAbstractMeshDataInfo._meshCollisionData._checkCollisions;\r\n    }\r\n\r\n    public set checkCollisions(collisionEnabled: boolean) {\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._checkCollisions = collisionEnabled;\r\n    }\r\n\r\n    /**\r\n     * Gets Collider object used to compute collisions (not physics)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\r\n     */\r\n    public get collider(): Nullable<Collider> {\r\n        return this._internalAbstractMeshDataInfo._meshCollisionData._collider;\r\n    }\r\n\r\n    /**\r\n     * Move the mesh using collision engine\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions\r\n     * @param displacement defines the requested displacement vector\r\n     * @param slideOnCollide If true, the mesh will slide along a collider's surface.  If false, it will stop moving at the first collision. (true by default)\r\n     * @returns the current mesh\r\n     */\r\n    public moveWithCollisions(displacement: Vector3, slideOnCollide: boolean = true): AbstractMesh {\r\n        const globalPosition = this.getAbsolutePosition();\r\n\r\n        globalPosition.addToRef(this.ellipsoidOffset, this._internalAbstractMeshDataInfo._meshCollisionData._oldPositionForCollisions);\r\n        const coordinator = this.getScene().collisionCoordinator;\r\n\r\n        if (!this._internalAbstractMeshDataInfo._meshCollisionData._collider) {\r\n            this._internalAbstractMeshDataInfo._meshCollisionData._collider = coordinator.createCollider();\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._meshCollisionData._collider._radius = this.ellipsoid;\r\n\r\n        coordinator.getNewPosition(\r\n            this._internalAbstractMeshDataInfo._meshCollisionData._oldPositionForCollisions,\r\n            displacement,\r\n            this._internalAbstractMeshDataInfo._meshCollisionData._collider,\r\n            this.collisionRetryCount,\r\n            this,\r\n            this._onCollisionPositionChange,\r\n            this.uniqueId,\r\n            slideOnCollide\r\n        );\r\n        return this;\r\n    }\r\n\r\n    private _onCollisionPositionChange = (collisionId: number, newPosition: Vector3, collidedMesh: Nullable<AbstractMesh> = null) => {\r\n        newPosition.subtractToRef(\r\n            this._internalAbstractMeshDataInfo._meshCollisionData._oldPositionForCollisions,\r\n            this._internalAbstractMeshDataInfo._meshCollisionData._diffPositionForCollisions\r\n        );\r\n\r\n        if (this._internalAbstractMeshDataInfo._meshCollisionData._diffPositionForCollisions.length() > AbstractEngine.CollisionsEpsilon) {\r\n            this.position.addInPlace(this._internalAbstractMeshDataInfo._meshCollisionData._diffPositionForCollisions);\r\n        }\r\n\r\n        if (collidedMesh) {\r\n            this.onCollideObservable.notifyObservers(collidedMesh);\r\n        }\r\n\r\n        this.onCollisionPositionChangeObservable.notifyObservers(this.position);\r\n    };\r\n\r\n    // Collisions\r\n    /**\r\n     * @internal\r\n     */\r\n    public _collideForSubMesh(subMesh: SubMesh, transformMatrix: Matrix, collider: Collider): AbstractMesh {\r\n        this._generatePointsArray();\r\n\r\n        if (!this._positions) {\r\n            return this;\r\n        }\r\n\r\n        // Transformation\r\n        if (!subMesh._lastColliderWorldVertices || !subMesh._lastColliderTransformMatrix!.equals(transformMatrix)) {\r\n            subMesh._lastColliderTransformMatrix = transformMatrix.clone();\r\n            subMesh._lastColliderWorldVertices = [];\r\n            subMesh._trianglePlanes = [];\r\n            const start = subMesh.verticesStart;\r\n            const end = subMesh.verticesStart + subMesh.verticesCount;\r\n            for (let i = start; i < end; i++) {\r\n                subMesh._lastColliderWorldVertices.push(Vector3.TransformCoordinates(this._positions[i], transformMatrix));\r\n            }\r\n        }\r\n\r\n        // Collide\r\n        collider._collide(\r\n            subMesh._trianglePlanes,\r\n            subMesh._lastColliderWorldVertices,\r\n            <IndicesArray>this.getIndices(),\r\n            subMesh.indexStart,\r\n            subMesh.indexStart + subMesh.indexCount,\r\n            subMesh.verticesStart,\r\n            !!subMesh.getMaterial(),\r\n            this,\r\n            this._shouldConvertRHS(),\r\n            subMesh.getMaterial()?.fillMode === Constants.MATERIAL_TriangleStripDrawMode\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processCollisionsForSubMeshes(collider: Collider, transformMatrix: Matrix): AbstractMesh {\r\n        const subMeshes = this._scene.getCollidingSubMeshCandidates(this, collider);\r\n        const len = subMeshes.length;\r\n\r\n        for (let index = 0; index < len; index++) {\r\n            const subMesh = subMeshes.data[index];\r\n\r\n            // Bounding test\r\n            if (len > 1 && !subMesh._checkCollision(collider)) {\r\n                continue;\r\n            }\r\n\r\n            this._collideForSubMesh(subMesh, transformMatrix, collider);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    public _shouldConvertRHS() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _checkCollision(collider: Collider): AbstractMesh {\r\n        // Bounding box test\r\n        if (!this.getBoundingInfo()._checkCollision(collider)) {\r\n            return this;\r\n        }\r\n\r\n        // Transformation matrix\r\n        const collisionsScalingMatrix = TmpVectors.Matrix[0];\r\n        const collisionsTransformMatrix = TmpVectors.Matrix[1];\r\n        Matrix.ScalingToRef(1.0 / collider._radius.x, 1.0 / collider._radius.y, 1.0 / collider._radius.z, collisionsScalingMatrix);\r\n        this.worldMatrixFromCache.multiplyToRef(collisionsScalingMatrix, collisionsTransformMatrix);\r\n        this._processCollisionsForSubMeshes(collider, collisionsTransformMatrix);\r\n        return this;\r\n    }\r\n\r\n    // Picking\r\n    /** @internal */\r\n    public _generatePointsArray(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the passed Ray intersects with the mesh. A mesh triangle can be picked both from its front and back sides,\r\n     * irrespective of orientation.\r\n     * @param ray defines the ray to use. It should be in the mesh's LOCAL coordinate space.\r\n     * @param fastCheck defines if fast mode (but less precise) must be used (false by default)\r\n     * @param trianglePredicate defines an optional predicate used to select faces when a mesh intersection is detected\r\n     * @param onlyBoundingInfo defines a boolean indicating if picking should only happen using bounding info (false by default)\r\n     * @param worldToUse defines the world matrix to use to get the world coordinate of the intersection point\r\n     * @param skipBoundingInfo a boolean indicating if we should skip the bounding info check\r\n     * @returns the picking info\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/interactions/mesh_intersect\r\n     */\r\n    public intersects(\r\n        ray: Ray,\r\n        fastCheck?: boolean,\r\n        trianglePredicate?: TrianglePickingPredicate,\r\n        onlyBoundingInfo = false,\r\n        worldToUse?: Matrix,\r\n        skipBoundingInfo = false\r\n    ): PickingInfo {\r\n        const pickingInfo = new PickingInfo();\r\n        const className = this.getClassName();\r\n        const intersectionThreshold = className === \"InstancedLinesMesh\" || className === \"LinesMesh\" || className === \"GreasedLineMesh\" ? (this as any).intersectionThreshold : 0;\r\n        const boundingInfo = this.getBoundingInfo();\r\n        if (!this.subMeshes) {\r\n            return pickingInfo;\r\n        }\r\n        if (\r\n            !skipBoundingInfo &&\r\n            (!ray.intersectsSphere(boundingInfo.boundingSphere, intersectionThreshold) || !ray.intersectsBox(boundingInfo.boundingBox, intersectionThreshold))\r\n        ) {\r\n            return pickingInfo;\r\n        }\r\n\r\n        if (onlyBoundingInfo) {\r\n            pickingInfo.hit = skipBoundingInfo ? false : true;\r\n            pickingInfo.pickedMesh = skipBoundingInfo ? null : this;\r\n            pickingInfo.distance = skipBoundingInfo ? 0 : Vector3.Distance(ray.origin, boundingInfo.boundingSphere.center);\r\n            pickingInfo.subMeshId = 0;\r\n            return pickingInfo;\r\n        }\r\n\r\n        if (!this._generatePointsArray()) {\r\n            return pickingInfo;\r\n        }\r\n\r\n        let intersectInfo: Nullable<IntersectionInfo> = null;\r\n\r\n        const subMeshes = this._scene.getIntersectingSubMeshCandidates(this, ray);\r\n        const len: number = subMeshes.length;\r\n\r\n        // Check if all submeshes are using a material that don't allow picking (point/lines rendering)\r\n        // if no submesh can be picked that way, then fallback to BBox picking\r\n        let anySubmeshSupportIntersect = false;\r\n        for (let index = 0; index < len; index++) {\r\n            const subMesh = subMeshes.data[index];\r\n            const material = subMesh.getMaterial();\r\n            if (!material) {\r\n                continue;\r\n            }\r\n            if (\r\n                material.fillMode == Constants.MATERIAL_TriangleStripDrawMode ||\r\n                material.fillMode == Constants.MATERIAL_TriangleFillMode ||\r\n                material.fillMode == Constants.MATERIAL_WireFrameFillMode ||\r\n                material.fillMode == Constants.MATERIAL_PointFillMode ||\r\n                material.fillMode == Constants.MATERIAL_LineListDrawMode\r\n            ) {\r\n                anySubmeshSupportIntersect = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // no sub mesh support intersection, fallback to BBox that has already be done\r\n        if (!anySubmeshSupportIntersect) {\r\n            pickingInfo.hit = true;\r\n            pickingInfo.pickedMesh = this;\r\n            pickingInfo.distance = Vector3.Distance(ray.origin, boundingInfo.boundingSphere.center);\r\n            pickingInfo.subMeshId = -1;\r\n            return pickingInfo;\r\n        }\r\n\r\n        // at least 1 submesh supports intersection, keep going\r\n        for (let index = 0; index < len; index++) {\r\n            const subMesh = subMeshes.data[index];\r\n\r\n            // Bounding test\r\n            if (len > 1 && !skipBoundingInfo && !subMesh.canIntersects(ray)) {\r\n                continue;\r\n            }\r\n\r\n            const currentIntersectInfo = subMesh.intersects(ray, <Vector3[]>this._positions, <IndicesArray>this.getIndices(), fastCheck, trianglePredicate);\r\n\r\n            if (currentIntersectInfo) {\r\n                if (fastCheck || !intersectInfo || currentIntersectInfo.distance < intersectInfo.distance) {\r\n                    intersectInfo = currentIntersectInfo;\r\n                    intersectInfo.subMeshId = subMesh._id;\r\n                    intersectInfo._internalSubMeshId = index;\r\n\r\n                    if (fastCheck) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (intersectInfo) {\r\n            // Get picked point\r\n            const world = worldToUse ?? this.getWorldMatrix();\r\n            const worldOrigin = TmpVectors.Vector3[0];\r\n            const direction = TmpVectors.Vector3[1];\r\n            Vector3.TransformCoordinatesToRef(ray.origin, world, worldOrigin);\r\n            ray.direction.scaleToRef(intersectInfo.distance, direction);\r\n            const worldDirection = Vector3.TransformNormal(direction, world);\r\n            const pickedPoint = worldDirection.addInPlace(worldOrigin);\r\n\r\n            // Return result\r\n            pickingInfo.hit = true;\r\n            pickingInfo.distance = Vector3.Distance(worldOrigin, pickedPoint);\r\n            pickingInfo.pickedPoint = pickedPoint;\r\n            pickingInfo.pickedMesh = this;\r\n            pickingInfo.bu = intersectInfo.bu || 0;\r\n            pickingInfo.bv = intersectInfo.bv || 0;\r\n            pickingInfo.subMeshFaceId = intersectInfo.faceId;\r\n            pickingInfo.faceId = intersectInfo.faceId + subMeshes.data[intersectInfo._internalSubMeshId].indexStart / (this.getClassName().indexOf(\"LinesMesh\") !== -1 ? 2 : 3);\r\n            pickingInfo.subMeshId = intersectInfo.subMeshId;\r\n            return pickingInfo;\r\n        }\r\n\r\n        return pickingInfo;\r\n    }\r\n\r\n    /**\r\n     * Clones the current mesh\r\n     * @param name defines the mesh name\r\n     * @param newParent defines the new mesh parent\r\n     * @param doNotCloneChildren defines a boolean indicating that children must not be cloned (false by default)\r\n     * @returns the new mesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public override clone(name: string, newParent: Nullable<Node>, doNotCloneChildren?: boolean): Nullable<AbstractMesh> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Disposes all the submeshes of the current mesh\r\n     * @param immediate should dispose the effects immediately or not\r\n     * @returns the current mesh\r\n     */\r\n    public releaseSubMeshes(immediate = false): AbstractMesh {\r\n        if (this.subMeshes) {\r\n            while (this.subMeshes.length) {\r\n                this.subMeshes[0].dispose(immediate);\r\n            }\r\n        } else {\r\n            this.subMeshes = [] as SubMesh[];\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Releases resources associated with this abstract mesh.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public override dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        let index: number;\r\n\r\n        const scene = this.getScene();\r\n\r\n        // mesh map release.\r\n        if (this._scene.useMaterialMeshMap) {\r\n            // remove from material mesh map id needed\r\n            if (this._internalAbstractMeshDataInfo._material && this._internalAbstractMeshDataInfo._material.meshMap) {\r\n                this._internalAbstractMeshDataInfo._material.meshMap[this.uniqueId] = undefined;\r\n            }\r\n        }\r\n\r\n        // Smart Array Retainers.\r\n        scene.freeActiveMeshes();\r\n        scene.freeRenderingGroups();\r\n        if (scene.renderingManager.maintainStateBetweenFrames) {\r\n            scene.renderingManager.restoreDispachedFlags();\r\n        }\r\n\r\n        // Action manager\r\n        if (this.actionManager !== undefined && this.actionManager !== null) {\r\n            // If we are the only mesh using the action manager, dispose of the action manager too unless it has opted out from that behavior\r\n            if (this.actionManager.disposeWhenUnowned && !this._scene.meshes.some((m) => m !== this && m.actionManager === this.actionManager)) {\r\n                this.actionManager.dispose();\r\n            }\r\n            this.actionManager = null;\r\n        }\r\n\r\n        // Skeleton\r\n        this._internalAbstractMeshDataInfo._skeleton = null;\r\n\r\n        if (this._transformMatrixTexture) {\r\n            this._transformMatrixTexture.dispose();\r\n            this._transformMatrixTexture = null;\r\n        }\r\n\r\n        // Intersections in progress\r\n        for (index = 0; index < this._intersectionsInProgress.length; index++) {\r\n            const other = this._intersectionsInProgress[index];\r\n\r\n            const pos = other._intersectionsInProgress.indexOf(this);\r\n            other._intersectionsInProgress.splice(pos, 1);\r\n        }\r\n\r\n        this._intersectionsInProgress.length = 0;\r\n\r\n        // Lights\r\n        const lights = scene.lights;\r\n\r\n        for (const light of lights) {\r\n            let meshIndex = light.includedOnlyMeshes.indexOf(this);\r\n\r\n            if (meshIndex !== -1) {\r\n                light.includedOnlyMeshes.splice(meshIndex, 1);\r\n            }\r\n\r\n            meshIndex = light.excludedMeshes.indexOf(this);\r\n\r\n            if (meshIndex !== -1) {\r\n                light.excludedMeshes.splice(meshIndex, 1);\r\n            }\r\n\r\n            // Shadow generators\r\n            const generators = light.getShadowGenerators();\r\n            if (generators) {\r\n                const iterator = generators.values();\r\n                for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n                    const generator = key.value;\r\n                    const shadowMap = generator.getShadowMap();\r\n\r\n                    if (shadowMap && shadowMap.renderList) {\r\n                        meshIndex = shadowMap.renderList.indexOf(this);\r\n\r\n                        if (meshIndex !== -1) {\r\n                            shadowMap.renderList.splice(meshIndex, 1);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // SubMeshes\r\n        if (this.getClassName() !== \"InstancedMesh\" || this.getClassName() !== \"InstancedLinesMesh\") {\r\n            this.releaseSubMeshes(true);\r\n        }\r\n\r\n        // Query\r\n        const engine = scene.getEngine();\r\n        if (this._occlusionQuery !== null) {\r\n            this.isOcclusionQueryInProgress = false;\r\n            engine.deleteQuery(this._occlusionQuery);\r\n            this._occlusionQuery = null;\r\n        }\r\n\r\n        // Engine\r\n        engine.wipeCaches();\r\n\r\n        // Remove from scene\r\n        scene.removeMesh(this);\r\n\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.meshes.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.meshes.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        if (disposeMaterialAndTextures) {\r\n            if (this.material) {\r\n                if (this.material.getClassName() === \"MultiMaterial\") {\r\n                    this.material.dispose(false, true, true);\r\n                } else {\r\n                    this.material.dispose(false, true);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!doNotRecurse) {\r\n            // Particles\r\n            for (index = 0; index < scene.particleSystems.length; index++) {\r\n                if (scene.particleSystems[index].emitter === this) {\r\n                    scene.particleSystems[index].dispose();\r\n                    index--;\r\n                }\r\n            }\r\n        }\r\n\r\n        // facet data\r\n        if (this._internalAbstractMeshDataInfo._facetData.facetDataEnabled) {\r\n            this.disableFacetData();\r\n        }\r\n\r\n        this._uniformBuffer.dispose();\r\n\r\n        this.onAfterWorldMatrixUpdateObservable.clear();\r\n        this.onCollideObservable.clear();\r\n        this.onCollisionPositionChangeObservable.clear();\r\n        this.onRebuildObservable.clear();\r\n\r\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n    }\r\n\r\n    // Facet data\r\n    /** @internal */\r\n    private _initFacetData(): AbstractMesh {\r\n        const data = this._internalAbstractMeshDataInfo._facetData;\r\n        if (!data.facetNormals) {\r\n            data.facetNormals = [] as Vector3[];\r\n        }\r\n        if (!data.facetPositions) {\r\n            data.facetPositions = [] as Vector3[];\r\n        }\r\n        if (!data.facetPartitioning) {\r\n            data.facetPartitioning = new Array<number[]>();\r\n        }\r\n        data.facetNb = ((<IndicesArray>this.getIndices()).length / 3) | 0;\r\n        data.partitioningSubdivisions = data.partitioningSubdivisions ? data.partitioningSubdivisions : 10; // default nb of partitioning subdivisions = 10\r\n        data.partitioningBBoxRatio = data.partitioningBBoxRatio ? data.partitioningBBoxRatio : 1.01; // default ratio 1.01 = the partitioning is 1% bigger than the bounding box\r\n        for (let f = 0; f < data.facetNb; f++) {\r\n            data.facetNormals[f] = Vector3.Zero();\r\n            data.facetPositions[f] = Vector3.Zero();\r\n        }\r\n        data.facetDataEnabled = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the mesh facetData arrays and the internal partitioning when the mesh is morphed or updated.\r\n     * This method can be called within the render loop.\r\n     * You don't need to call this method by yourself in the render loop when you update/morph a mesh with the methods CreateXXX() as they automatically manage this computation\r\n     * @returns the current mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public updateFacetData(): AbstractMesh {\r\n        const data = this._internalAbstractMeshDataInfo._facetData;\r\n        if (!data.facetDataEnabled) {\r\n            this._initFacetData();\r\n        }\r\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\r\n        const indices = this.getIndices();\r\n        const normals = this.getVerticesData(VertexBuffer.NormalKind);\r\n        const bInfo = this.getBoundingInfo();\r\n\r\n        if (data.facetDepthSort && !data.facetDepthSortEnabled) {\r\n            // init arrays, matrix and sort function on first call\r\n            data.facetDepthSortEnabled = true;\r\n            if (indices instanceof Uint16Array) {\r\n                data.depthSortedIndices = new Uint16Array(indices);\r\n            } else if (indices instanceof Uint32Array) {\r\n                data.depthSortedIndices = new Uint32Array(indices);\r\n            } else {\r\n                let needs32bits = false;\r\n                for (let i = 0; i < indices!.length; i++) {\r\n                    if (indices![i] > 65535) {\r\n                        needs32bits = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (needs32bits) {\r\n                    data.depthSortedIndices = new Uint32Array(indices!);\r\n                } else {\r\n                    data.depthSortedIndices = new Uint16Array(indices!);\r\n                }\r\n            }\r\n            data.facetDepthSortFunction = function (f1, f2) {\r\n                return f2.sqDistance - f1.sqDistance;\r\n            };\r\n            if (!data.facetDepthSortFrom) {\r\n                const camera = this.getScene().activeCamera;\r\n                data.facetDepthSortFrom = camera ? camera.position : Vector3.Zero();\r\n            }\r\n            data.depthSortedFacets = [];\r\n            for (let f = 0; f < data.facetNb; f++) {\r\n                const depthSortedFacet = { ind: f * 3, sqDistance: 0.0 };\r\n                data.depthSortedFacets.push(depthSortedFacet);\r\n            }\r\n            data.invertedMatrix = Matrix.Identity();\r\n            data.facetDepthSortOrigin = Vector3.Zero();\r\n        }\r\n\r\n        data.bbSize.x = bInfo.maximum.x - bInfo.minimum.x > Epsilon ? bInfo.maximum.x - bInfo.minimum.x : Epsilon;\r\n        data.bbSize.y = bInfo.maximum.y - bInfo.minimum.y > Epsilon ? bInfo.maximum.y - bInfo.minimum.y : Epsilon;\r\n        data.bbSize.z = bInfo.maximum.z - bInfo.minimum.z > Epsilon ? bInfo.maximum.z - bInfo.minimum.z : Epsilon;\r\n        let bbSizeMax = data.bbSize.x > data.bbSize.y ? data.bbSize.x : data.bbSize.y;\r\n        bbSizeMax = bbSizeMax > data.bbSize.z ? bbSizeMax : data.bbSize.z;\r\n        data.subDiv.max = data.partitioningSubdivisions;\r\n        data.subDiv.X = Math.floor((data.subDiv.max * data.bbSize.x) / bbSizeMax); // adjust the number of subdivisions per axis\r\n        data.subDiv.Y = Math.floor((data.subDiv.max * data.bbSize.y) / bbSizeMax); // according to each bbox size per axis\r\n        data.subDiv.Z = Math.floor((data.subDiv.max * data.bbSize.z) / bbSizeMax);\r\n        data.subDiv.X = data.subDiv.X < 1 ? 1 : data.subDiv.X; // at least one subdivision\r\n        data.subDiv.Y = data.subDiv.Y < 1 ? 1 : data.subDiv.Y;\r\n        data.subDiv.Z = data.subDiv.Z < 1 ? 1 : data.subDiv.Z;\r\n        // set the parameters for ComputeNormals()\r\n        data.facetParameters.facetNormals = this.getFacetLocalNormals();\r\n        data.facetParameters.facetPositions = this.getFacetLocalPositions();\r\n        data.facetParameters.facetPartitioning = this.getFacetLocalPartitioning();\r\n        data.facetParameters.bInfo = bInfo;\r\n        data.facetParameters.bbSize = data.bbSize;\r\n        data.facetParameters.subDiv = data.subDiv;\r\n        data.facetParameters.ratio = this.partitioningBBoxRatio;\r\n        data.facetParameters.depthSort = data.facetDepthSort;\r\n        if (data.facetDepthSort && data.facetDepthSortEnabled) {\r\n            this.computeWorldMatrix(true);\r\n            this._worldMatrix.invertToRef(data.invertedMatrix);\r\n            Vector3.TransformCoordinatesToRef(data.facetDepthSortFrom, data.invertedMatrix, data.facetDepthSortOrigin);\r\n            data.facetParameters.distanceTo = data.facetDepthSortOrigin;\r\n        }\r\n        data.facetParameters.depthSortedFacets = data.depthSortedFacets;\r\n        if (normals) {\r\n            VertexData.ComputeNormals(positions, indices, normals, data.facetParameters);\r\n        }\r\n\r\n        if (data.facetDepthSort && data.facetDepthSortEnabled) {\r\n            data.depthSortedFacets.sort(data.facetDepthSortFunction);\r\n            const l = (data.depthSortedIndices.length / 3) | 0;\r\n            for (let f = 0; f < l; f++) {\r\n                const sind = data.depthSortedFacets[f].ind;\r\n                data.depthSortedIndices[f * 3] = indices![sind];\r\n                data.depthSortedIndices[f * 3 + 1] = indices![sind + 1];\r\n                data.depthSortedIndices[f * 3 + 2] = indices![sind + 2];\r\n            }\r\n            this.updateIndices(data.depthSortedIndices, undefined, true);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the facetLocalNormals array.\r\n     * The normals are expressed in the mesh local spac\r\n     * @returns an array of Vector3\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetLocalNormals(): Vector3[] {\r\n        const facetData = this._internalAbstractMeshDataInfo._facetData;\r\n        if (!facetData.facetNormals) {\r\n            this.updateFacetData();\r\n        }\r\n        return facetData.facetNormals;\r\n    }\r\n\r\n    /**\r\n     * Returns the facetLocalPositions array.\r\n     * The facet positions are expressed in the mesh local space\r\n     * @returns an array of Vector3\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetLocalPositions(): Vector3[] {\r\n        const facetData = this._internalAbstractMeshDataInfo._facetData;\r\n        if (!facetData.facetPositions) {\r\n            this.updateFacetData();\r\n        }\r\n        return facetData.facetPositions;\r\n    }\r\n\r\n    /**\r\n     * Returns the facetLocalPartitioning array\r\n     * @returns an array of array of numbers\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetLocalPartitioning(): number[][] {\r\n        const facetData = this._internalAbstractMeshDataInfo._facetData;\r\n\r\n        if (!facetData.facetPartitioning) {\r\n            this.updateFacetData();\r\n        }\r\n        return facetData.facetPartitioning;\r\n    }\r\n\r\n    /**\r\n     * Returns the i-th facet position in the world system.\r\n     * This method allocates a new Vector3 per call\r\n     * @param i defines the facet index\r\n     * @returns a new Vector3\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetPosition(i: number): Vector3 {\r\n        const pos = Vector3.Zero();\r\n        this.getFacetPositionToRef(i, pos);\r\n        return pos;\r\n    }\r\n\r\n    /**\r\n     * Sets the reference Vector3 with the i-th facet position in the world system\r\n     * @param i defines the facet index\r\n     * @param ref defines the target vector\r\n     * @returns the current mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetPositionToRef(i: number, ref: Vector3): AbstractMesh {\r\n        const localPos = this.getFacetLocalPositions()[i];\r\n        const world = this.getWorldMatrix();\r\n        Vector3.TransformCoordinatesToRef(localPos, world, ref);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the i-th facet normal in the world system.\r\n     * This method allocates a new Vector3 per call\r\n     * @param i defines the facet index\r\n     * @returns a new Vector3\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetNormal(i: number): Vector3 {\r\n        const norm = Vector3.Zero();\r\n        this.getFacetNormalToRef(i, norm);\r\n        return norm;\r\n    }\r\n\r\n    /**\r\n     * Sets the reference Vector3 with the i-th facet normal in the world system\r\n     * @param i defines the facet index\r\n     * @param ref defines the target vector\r\n     * @returns the current mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetNormalToRef(i: number, ref: Vector3) {\r\n        const localNorm = this.getFacetLocalNormals()[i];\r\n        Vector3.TransformNormalToRef(localNorm, this.getWorldMatrix(), ref);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the facets (in an array) in the same partitioning block than the one the passed coordinates are located (expressed in the mesh local system)\r\n     * @param x defines x coordinate\r\n     * @param y defines y coordinate\r\n     * @param z defines z coordinate\r\n     * @returns the array of facet indexes\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetsAtLocalCoordinates(x: number, y: number, z: number): Nullable<number[]> {\r\n        const bInfo = this.getBoundingInfo();\r\n        const data = this._internalAbstractMeshDataInfo._facetData;\r\n\r\n        const ox = Math.floor(((x - bInfo.minimum.x * data.partitioningBBoxRatio) * data.subDiv.X * data.partitioningBBoxRatio) / data.bbSize.x);\r\n        const oy = Math.floor(((y - bInfo.minimum.y * data.partitioningBBoxRatio) * data.subDiv.Y * data.partitioningBBoxRatio) / data.bbSize.y);\r\n        const oz = Math.floor(((z - bInfo.minimum.z * data.partitioningBBoxRatio) * data.subDiv.Z * data.partitioningBBoxRatio) / data.bbSize.z);\r\n        if (ox < 0 || ox > data.subDiv.max || oy < 0 || oy > data.subDiv.max || oz < 0 || oz > data.subDiv.max) {\r\n            return null;\r\n        }\r\n        return data.facetPartitioning[ox + data.subDiv.max * oy + data.subDiv.max * data.subDiv.max * oz];\r\n    }\r\n\r\n    /**\r\n     * Returns the closest mesh facet index at (x,y,z) World coordinates, null if not found\r\n     * @param x defines x coordinate\r\n     * @param y defines y coordinate\r\n     * @param z defines z coordinate\r\n     * @param projected sets as the (x,y,z) world projection on the facet\r\n     * @param checkFace if true (default false), only the facet \"facing\" to (x,y,z) or only the ones \"turning their backs\", according to the parameter \"facing\" are returned\r\n     * @param facing if facing and checkFace are true, only the facet \"facing\" to (x, y, z) are returned : positive dot (x, y, z) * facet position. If facing si false and checkFace is true, only the facet \"turning their backs\" to (x, y, z) are returned : negative dot (x, y, z) * facet position\r\n     * @returns the face index if found (or null instead)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getClosestFacetAtCoordinates(x: number, y: number, z: number, projected?: Vector3, checkFace: boolean = false, facing: boolean = true): Nullable<number> {\r\n        const world = this.getWorldMatrix();\r\n        const invMat = TmpVectors.Matrix[5];\r\n        world.invertToRef(invMat);\r\n        const invVect = TmpVectors.Vector3[8];\r\n        Vector3.TransformCoordinatesFromFloatsToRef(x, y, z, invMat, invVect); // transform (x,y,z) to coordinates in the mesh local space\r\n        const closest = this.getClosestFacetAtLocalCoordinates(invVect.x, invVect.y, invVect.z, projected, checkFace, facing);\r\n        if (projected) {\r\n            // transform the local computed projected vector to world coordinates\r\n            Vector3.TransformCoordinatesFromFloatsToRef(projected.x, projected.y, projected.z, world, projected);\r\n        }\r\n        return closest;\r\n    }\r\n\r\n    /**\r\n     * Returns the closest mesh facet index at (x,y,z) local coordinates, null if not found\r\n     * @param x defines x coordinate\r\n     * @param y defines y coordinate\r\n     * @param z defines z coordinate\r\n     * @param projected sets as the (x,y,z) local projection on the facet\r\n     * @param checkFace if true (default false), only the facet \"facing\" to (x,y,z) or only the ones \"turning their backs\", according to the parameter \"facing\" are returned\r\n     * @param facing if facing and checkFace are true, only the facet \"facing\" to (x, y, z) are returned : positive dot (x, y, z) * facet position. If facing si false and checkFace is true, only the facet \"turning their backs\" to (x, y, z) are returned : negative dot (x, y, z) * facet position\r\n     * @returns the face index if found (or null instead)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getClosestFacetAtLocalCoordinates(x: number, y: number, z: number, projected?: Vector3, checkFace: boolean = false, facing: boolean = true): Nullable<number> {\r\n        let closest = null;\r\n        let tmpx = 0.0;\r\n        let tmpy = 0.0;\r\n        let tmpz = 0.0;\r\n        let d = 0.0; // tmp dot facet normal * facet position\r\n        let t0 = 0.0;\r\n        let projx = 0.0;\r\n        let projy = 0.0;\r\n        let projz = 0.0;\r\n        // Get all the facets in the same partitioning block than (x, y, z)\r\n        const facetPositions = this.getFacetLocalPositions();\r\n        const facetNormals = this.getFacetLocalNormals();\r\n        const facetsInBlock = this.getFacetsAtLocalCoordinates(x, y, z);\r\n        if (!facetsInBlock) {\r\n            return null;\r\n        }\r\n        // Get the closest facet to (x, y, z)\r\n        let shortest = Number.MAX_VALUE; // init distance vars\r\n        let tmpDistance = shortest;\r\n        let fib; // current facet in the block\r\n        let norm; // current facet normal\r\n        let p0; // current facet barycenter position\r\n        // loop on all the facets in the current partitioning block\r\n        for (let idx = 0; idx < facetsInBlock.length; idx++) {\r\n            fib = facetsInBlock[idx];\r\n            norm = facetNormals[fib];\r\n            p0 = facetPositions[fib];\r\n\r\n            d = (x - p0.x) * norm.x + (y - p0.y) * norm.y + (z - p0.z) * norm.z;\r\n            if (!checkFace || (checkFace && facing && d >= 0.0) || (checkFace && !facing && d <= 0.0)) {\r\n                // compute (x,y,z) projection on the facet = (projx, projy, projz)\r\n                d = norm.x * p0.x + norm.y * p0.y + norm.z * p0.z;\r\n                t0 = -(norm.x * x + norm.y * y + norm.z * z - d) / (norm.x * norm.x + norm.y * norm.y + norm.z * norm.z);\r\n                projx = x + norm.x * t0;\r\n                projy = y + norm.y * t0;\r\n                projz = z + norm.z * t0;\r\n\r\n                tmpx = projx - x;\r\n                tmpy = projy - y;\r\n                tmpz = projz - z;\r\n                tmpDistance = tmpx * tmpx + tmpy * tmpy + tmpz * tmpz; // compute length between (x, y, z) and its projection on the facet\r\n                if (tmpDistance < shortest) {\r\n                    // just keep the closest facet to (x, y, z)\r\n                    shortest = tmpDistance;\r\n                    closest = fib;\r\n                    if (projected) {\r\n                        projected.x = projx;\r\n                        projected.y = projy;\r\n                        projected.z = projz;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return closest;\r\n    }\r\n\r\n    /**\r\n     * Returns the object \"parameter\" set with all the expected parameters for facetData computation by ComputeNormals()\r\n     * @returns the parameters\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public getFacetDataParameters(): any {\r\n        return this._internalAbstractMeshDataInfo._facetData.facetParameters;\r\n    }\r\n\r\n    /**\r\n     * Disables the feature FacetData and frees the related memory\r\n     * @returns the current mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/facetData\r\n     */\r\n    public disableFacetData(): AbstractMesh {\r\n        const facetData = this._internalAbstractMeshDataInfo._facetData;\r\n        if (facetData.facetDataEnabled) {\r\n            facetData.facetDataEnabled = false;\r\n            facetData.facetPositions = [] as Vector3[];\r\n            facetData.facetNormals = [] as Vector3[];\r\n            facetData.facetPartitioning = new Array<number[]>();\r\n            facetData.facetParameters = {};\r\n            facetData.depthSortedIndices = new Uint32Array(0);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the AbstractMesh indices array\r\n     * @param indices defines the data source\r\n     * @param offset defines the offset in the index buffer where to store the new data (can be null)\r\n     * @param gpuMemoryOnly defines a boolean indicating that only the GPU memory must be updated leaving the CPU version of the indices unchanged (false by default)\r\n     * @returns the current mesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public updateIndices(indices: IndicesArray, offset?: number, gpuMemoryOnly = false): AbstractMesh {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates new normals data for the mesh\r\n     * @param updatable defines if the normal vertex buffer must be flagged as updatable\r\n     * @returns the current mesh\r\n     */\r\n    public createNormals(updatable: boolean): AbstractMesh {\r\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\r\n        const indices = this.getIndices();\r\n        let normals: FloatArray;\r\n\r\n        if (this.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n            normals = <FloatArray>this.getVerticesData(VertexBuffer.NormalKind);\r\n        } else {\r\n            normals = [];\r\n        }\r\n\r\n        VertexData.ComputeNormals(positions, indices, normals, { useRightHandedSystem: this.getScene().useRightHandedSystem });\r\n        this.setVerticesData(VertexBuffer.NormalKind, normals, updatable);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Optimize the indices order so that we keep the faces with similar indices together\r\n     * @returns the current mesh\r\n     */\r\n    public async optimizeIndicesAsync(): Promise<AbstractMesh> {\r\n        const indices = this.getIndices();\r\n\r\n        if (!indices) {\r\n            return this;\r\n        }\r\n\r\n        const { OptimizeIndices } = await import(\"./mesh.vertexData.functions\");\r\n\r\n        OptimizeIndices(indices);\r\n\r\n        this.setIndices(indices, this.getTotalVertices());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Align the mesh with a normal\r\n     * @param normal defines the normal to use\r\n     * @param upDirection can be used to redefined the up vector to use (will use the (0, 1, 0) by default)\r\n     * @returns the current mesh\r\n     */\r\n    public alignWithNormal(normal: Vector3, upDirection?: Vector3): AbstractMesh {\r\n        if (!upDirection) {\r\n            upDirection = Axis.Y;\r\n        }\r\n\r\n        const axisX = TmpVectors.Vector3[0];\r\n        const axisZ = TmpVectors.Vector3[1];\r\n        Vector3.CrossToRef(upDirection, normal, axisZ);\r\n        Vector3.CrossToRef(normal, axisZ, axisX);\r\n\r\n        if (this.rotationQuaternion) {\r\n            Quaternion.RotationQuaternionFromAxisToRef(axisX, normal, axisZ, this.rotationQuaternion);\r\n        } else {\r\n            Vector3.RotationFromAxisToRef(axisX, normal, axisZ, this.rotation);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    public _checkOcclusionQuery(): boolean {\r\n        // Will be replaced by correct code if Occlusion queries are referenced\r\n        return false;\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Disables the mesh edge rendering mode\r\n     * @returns the currentAbstractMesh\r\n     */\r\n    disableEdgesRendering(): AbstractMesh {\r\n        throw _WarnImport(\"EdgesRenderer\");\r\n    }\r\n\r\n    // eslint-disable-next-line jsdoc/require-returns-check\r\n    /**\r\n     * Enables the edge rendering mode on the mesh.\r\n     * This mode makes the mesh edges visible\r\n     * @param epsilon defines the maximal distance between two angles to detect a face\r\n     * @param checkVerticesInsteadOfIndices indicates that we should check vertex list directly instead of faces\r\n     * @param options options to the edge renderer\r\n     * @returns the currentAbstractMesh\r\n     * @see https://www.babylonjs-playground.com/#19O9TU#0\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    enableEdgesRendering(epsilon?: number, checkVerticesInsteadOfIndices?: boolean, options?: IEdgesRendererOptions): AbstractMesh {\r\n        throw _WarnImport(\"EdgesRenderer\");\r\n    }\r\n\r\n    /**\r\n     * This function returns all of the particle systems in the scene that use the mesh as an emitter.\r\n     * @returns an array of particle systems in the scene that use the mesh as an emitter\r\n     */\r\n    public getConnectedParticleSystems(): IParticleSystem[] {\r\n        return this._scene.particleSystems.filter((particleSystem) => particleSystem.emitter === this);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.AbstractMesh\", AbstractMesh);\r\n", "import type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Material } from \"../Materials/material\";\r\nimport { Tags } from \"../Misc/tags\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\n/**\r\n * A multi-material is used to apply different materials to different parts of the same object without the need of\r\n * separate meshes. This can be use to improve performances.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/multiMaterials\r\n */\r\nexport class MultiMaterial extends Material {\r\n    private _subMaterials: Nullable<Material>[];\r\n    /** @internal */\r\n    public _waitingSubMaterialsUniqueIds: string[] = [];\r\n\r\n    /**\r\n     * Gets or Sets the list of Materials used within the multi material.\r\n     * They need to be ordered according to the submeshes order in the associated mesh\r\n     */\r\n    public get subMaterials(): Nullable<Material>[] {\r\n        return this._subMaterials;\r\n    }\r\n\r\n    public set subMaterials(value: Nullable<Material>[]) {\r\n        this._subMaterials = value;\r\n        this._hookArray(value);\r\n    }\r\n\r\n    /**\r\n     * Function used to align with Node.getChildren()\r\n     * @returns the list of Materials used within the multi material\r\n     */\r\n    public getChildren(): Nullable<Material>[] {\r\n        return this.subMaterials;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new Multi Material\r\n     * A multi-material is used to apply different materials to different parts of the same object without the need of\r\n     * separate meshes. This can be use to improve performances.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/multiMaterials\r\n     * @param name Define the name in the scene\r\n     * @param scene Define the scene the material belongs to\r\n     */\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene, true);\r\n\r\n        this.getScene().addMultiMaterial(this);\r\n\r\n        this.subMaterials = [] as Material[];\r\n\r\n        this._storeEffectOnSubMeshes = true; // multimaterial is considered like a push material\r\n    }\r\n\r\n    private _hookArray(array: Nullable<Material>[]): void {\r\n        const oldPush = array.push;\r\n        array.push = (...items: Nullable<Material>[]) => {\r\n            const result = oldPush.apply(array, items);\r\n\r\n            this._markAllSubMeshesAsTexturesDirty();\r\n\r\n            return result;\r\n        };\r\n\r\n        const oldSplice = array.splice;\r\n        array.splice = (index: number, deleteCount?: number) => {\r\n            const deleted = oldSplice.apply(array, [index, deleteCount]);\r\n\r\n            this._markAllSubMeshesAsTexturesDirty();\r\n\r\n            return deleted;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Get one of the submaterial by its index in the submaterials array\r\n     * @param index The index to look the sub material at\r\n     * @returns The Material if the index has been defined\r\n     */\r\n    public getSubMaterial(index: number): Nullable<Material> {\r\n        if (index < 0 || index >= this.subMaterials.length) {\r\n            return this.getScene().defaultMaterial;\r\n        }\r\n\r\n        return this.subMaterials[index];\r\n    }\r\n\r\n    /**\r\n     * Get the list of active textures for the whole sub materials list.\r\n     * @returns All the textures that will be used during the rendering\r\n     */\r\n    public override getActiveTextures(): BaseTexture[] {\r\n        return super.getActiveTextures().concat(\r\n            ...this.subMaterials.map((subMaterial) => {\r\n                if (subMaterial) {\r\n                    return subMaterial.getActiveTextures();\r\n                } else {\r\n                    return [];\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Specifies if any sub-materials of this multi-material use a given texture.\r\n     * @param texture Defines the texture to check against this multi-material's sub-materials.\r\n     * @returns A boolean specifying if any sub-material of this multi-material uses the texture.\r\n     */\r\n    public override hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        for (let i = 0; i < this.subMaterials.length; i++) {\r\n            if (this.subMaterials[i]?.hasTexture(texture)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name of the material e.g. \"MultiMaterial\"\r\n     * Mainly use in serialization.\r\n     * @returns the class name\r\n     */\r\n    public override getClassName(): string {\r\n        return \"MultiMaterial\";\r\n    }\r\n\r\n    /**\r\n     * Checks if the material is ready to render the requested sub mesh\r\n     * @param mesh Define the mesh the submesh belongs to\r\n     * @param subMesh Define the sub mesh to look readiness for\r\n     * @param useInstances Define whether or not the material is used with instances\r\n     * @returns true if ready, otherwise false\r\n     */\r\n    public override isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        for (let index = 0; index < this.subMaterials.length; index++) {\r\n            const subMaterial = this.subMaterials[index];\r\n            if (subMaterial) {\r\n                if (subMaterial._storeEffectOnSubMeshes) {\r\n                    if (!subMaterial.isReadyForSubMesh(mesh, subMesh, useInstances)) {\r\n                        return false;\r\n                    }\r\n                    continue;\r\n                }\r\n\r\n                if (!subMaterial.isReady(mesh)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Clones the current material and its related sub materials\r\n     * @param name Define the name of the newly cloned material\r\n     * @param cloneChildren Define if submaterial will be cloned or shared with the parent instance\r\n     * @returns the cloned material\r\n     */\r\n    public override clone(name: string, cloneChildren?: boolean): MultiMaterial {\r\n        const newMultiMaterial = new MultiMaterial(name, this.getScene());\r\n\r\n        for (let index = 0; index < this.subMaterials.length; index++) {\r\n            let subMaterial: Nullable<Material> = null;\r\n            const current = this.subMaterials[index];\r\n            if (cloneChildren && current) {\r\n                subMaterial = current.clone(name + \"-\" + current.name);\r\n            } else {\r\n                subMaterial = this.subMaterials[index];\r\n            }\r\n            newMultiMaterial.subMaterials.push(subMaterial);\r\n        }\r\n\r\n        return newMultiMaterial;\r\n    }\r\n\r\n    /**\r\n     * Serializes the materials into a JSON representation.\r\n     * @returns the JSON representation\r\n     */\r\n    public override serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.name = this.name;\r\n        serializationObject.id = this.id;\r\n        serializationObject.uniqueId = this.uniqueId;\r\n        if (Tags) {\r\n            serializationObject.tags = Tags.GetTags(this);\r\n        }\r\n        serializationObject.materialsUniqueIds = [];\r\n        serializationObject.materials = [];\r\n\r\n        for (let matIndex = 0; matIndex < this.subMaterials.length; matIndex++) {\r\n            const subMat = this.subMaterials[matIndex];\r\n\r\n            if (subMat) {\r\n                serializationObject.materialsUniqueIds.push(subMat.uniqueId);\r\n                serializationObject.materials.push(subMat.id);\r\n            } else {\r\n                serializationObject.materialsUniqueIds.push(null);\r\n                serializationObject.materials.push(null);\r\n            }\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Dispose the material and release its associated resources\r\n     * @param forceDisposeEffect Define if we want to force disposing the associated effect (if false the shader is not released and could be reuse later on)\r\n     * @param forceDisposeTextures Define if we want to force disposing the associated textures (if false, they will not be disposed and can still be use elsewhere in the app)\r\n     * @param forceDisposeChildren Define if we want to force disposing the associated submaterials (if false, they will not be disposed and can still be use elsewhere in the app)\r\n     */\r\n    public override dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean, forceDisposeChildren?: boolean): void {\r\n        const scene = this.getScene();\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        if (forceDisposeChildren) {\r\n            for (let index = 0; index < this.subMaterials.length; index++) {\r\n                const subMaterial = this.subMaterials[index];\r\n                if (subMaterial) {\r\n                    subMaterial.dispose(forceDisposeEffect, forceDisposeTextures);\r\n                }\r\n            }\r\n        }\r\n\r\n        const index = scene.multiMaterials.indexOf(this);\r\n        if (index >= 0) {\r\n            scene.multiMaterials.splice(index, 1);\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect, forceDisposeTextures);\r\n    }\r\n\r\n    /**\r\n     * Creates a MultiMaterial from parsed MultiMaterial data.\r\n     * @param parsedMultiMaterial defines parsed MultiMaterial data.\r\n     * @param scene defines the hosting scene\r\n     * @returns a new MultiMaterial\r\n     */\r\n    public static ParseMultiMaterial(parsedMultiMaterial: any, scene: Scene): MultiMaterial {\r\n        const multiMaterial = new MultiMaterial(parsedMultiMaterial.name, scene);\r\n\r\n        multiMaterial.id = parsedMultiMaterial.id;\r\n        multiMaterial._loadedUniqueId = parsedMultiMaterial.uniqueId;\r\n\r\n        if (Tags) {\r\n            Tags.AddTagsTo(multiMaterial, parsedMultiMaterial.tags);\r\n        }\r\n\r\n        if (parsedMultiMaterial.materialsUniqueIds) {\r\n            multiMaterial._waitingSubMaterialsUniqueIds = parsedMultiMaterial.materialsUniqueIds;\r\n        } else {\r\n            for (const subMatId of parsedMultiMaterial.materials) {\r\n                multiMaterial.subMaterials.push(scene.getLastMaterialById(subMatId));\r\n            }\r\n        }\r\n\r\n        return multiMaterial;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.MultiMaterial\", MultiMaterial);\r\n", "import type { Mesh } from \"./mesh\";\r\nimport type { Nullable } from \"../types\";\r\n\r\n/**\r\n * Class used to represent a specific level of detail of a mesh\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\r\n */\r\nexport class MeshLODLevel {\r\n    /**\r\n     * Creates a new LOD level\r\n     * @param distanceOrScreenCoverage defines either the distance or the screen coverage where this level should start being displayed\r\n     * @param mesh defines the mesh to use to render this level\r\n     */\r\n    constructor(\r\n        /** Either distance from the center of the object to show this level or the screen coverage if `useLODScreenCoverage` is set to `true` on the mesh*/\r\n        public distanceOrScreenCoverage: number,\r\n        /** Defines the mesh to use to render this level */\r\n        public mesh: Nullable<Mesh>\r\n    ) {}\r\n}\r\n", "/* eslint-disable jsdoc/require-returns-check */\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Tools, AsyncLoop } from \"../Misc/tools\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\nimport { DeepCopier } from \"../Misc/deepCopier\";\r\nimport { Tags } from \"../Misc/tags\";\r\nimport type { Coroutine } from \"../Misc/coroutine\";\r\nimport { runCoroutineSync, runCoroutineAsync, createYieldingScheduler } from \"../Misc/coroutine\";\r\nimport type { Nullable, FloatArray, IndicesArray, DeepImmutable } from \"../types\";\r\nimport { Camera } from \"../Cameras/camera\";\r\nimport type { Scene } from \"../scene\";\r\nimport { ScenePerformancePriority } from \"../scene\";\r\nimport type { Vector4 } from \"../Maths/math.vector\";\r\nimport { Quaternion, Matrix, Vector3, Vector2 } from \"../Maths/math.vector\";\r\nimport type { Color4 } from \"../Maths/math.color\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { Node } from \"../node\";\r\nimport { VertexBuffer, Buffer } from \"../Buffers/buffer\";\r\nimport type { IGetSetVerticesData } from \"./mesh.vertexData\";\r\nimport { VertexData } from \"./mesh.vertexData\";\r\n\r\nimport { Geometry } from \"./geometry\";\r\nimport type { IMeshDataOptions } from \"./abstractMesh\";\r\nimport { AbstractMesh } from \"./abstractMesh\";\r\nimport { SubMesh } from \"./subMesh\";\r\nimport type { BoundingSphere } from \"../Culling/boundingSphere\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Material } from \"../Materials/material\";\r\nimport { MultiMaterial } from \"../Materials/multiMaterial\";\r\nimport { SceneLoaderFlags } from \"../Loading/sceneLoaderFlags\";\r\nimport type { Skeleton } from \"../Bones/skeleton\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { GetClass, RegisterClass } from \"../Misc/typeStore\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport { MeshLODLevel } from \"./meshLODLevel\";\r\nimport type { Path3D } from \"../Maths/math.path\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\nimport type { TransformNode } from \"./transformNode\";\r\nimport type { DrawWrapper } from \"../Materials/drawWrapper\";\r\nimport type { PhysicsEngine as PhysicsEngineV1 } from \"../Physics/v1/physicsEngine\";\r\n\r\nimport type { GoldbergMesh } from \"./goldbergMesh\";\r\nimport type { InstancedMesh } from \"./instancedMesh\";\r\nimport type { IPhysicsEnabledObject, PhysicsImpostor } from \"../Physics/v1/physicsImpostor\";\r\nimport type { ICreateCapsuleOptions } from \"./Builders/capsuleBuilder\";\r\nimport type { LinesMesh } from \"./linesMesh\";\r\nimport type { GroundMesh } from \"./groundMesh\";\r\nimport type { DataBuffer } from \"core/Buffers/dataBuffer\";\r\nimport type { AbstractEngine } from \"core/Engines/abstractEngine\";\r\n\r\n/**\r\n * @internal\r\n **/\r\nexport class _CreationDataStorage {\r\n    public closePath?: boolean;\r\n    public closeArray?: boolean;\r\n    public idx: number[];\r\n    public dashSize: number;\r\n    public gapSize: number;\r\n    public path3D: Path3D;\r\n    public pathArray: Vector3[][];\r\n    public arc: number;\r\n    public radius: number;\r\n    public cap: number;\r\n    public tessellation: number;\r\n}\r\n\r\n/**\r\n * @internal\r\n **/\r\ninterface IInstanceDataStorageRenderPassVisibleInstances {\r\n    defaultRenderId: number;\r\n    selfDefaultRenderId: number;\r\n    intermediateDefaultRenderId: number;\r\n    [renderId: number]: Nullable<Array<InstancedMesh>>;\r\n}\r\n\r\n/**\r\n * @internal\r\n **/\r\nclass _InstanceDataStorageRenderPass {\r\n    public visibleInstances: Nullable<IInstanceDataStorageRenderPassVisibleInstances>;\r\n    public batchCache = new _InstancesBatch(this);\r\n    public batchCacheReplacementModeInFrozenMode = new _InstancesBatch(this);\r\n    public instancesBufferSize = 32 * 16 * 4; // let's start with a maximum of 32 instances\r\n    public instancesBuffer: Nullable<Buffer>;\r\n    public instancesPreviousBuffer: Nullable<Buffer>;\r\n    public instancesData: Float32Array;\r\n    public instancesPreviousData: Float32Array;\r\n    public previousBatch: Nullable<_InstancesBatch>;\r\n    public previousRenderId: number;\r\n}\r\n\r\n/**\r\n * @internal\r\n **/\r\nclass _InstanceDataStorage {\r\n    public renderPasses: { [id: number]: _InstanceDataStorageRenderPass } = {};\r\n    public overridenInstanceCount: number;\r\n    public isFrozen: boolean;\r\n    public forceMatrixUpdates: boolean;\r\n    public hardwareInstancedRendering: boolean;\r\n    public manualUpdate: boolean;\r\n    public previousManualUpdate: boolean;\r\n    public masterMeshPreviousWorldMatrix: Nullable<Matrix>;\r\n    public engine: AbstractEngine;\r\n}\r\n\r\n/**\r\n * @internal\r\n **/\r\nexport class _InstancesBatch {\r\n    public mustReturn = false;\r\n\r\n    public visibleInstances = new Array<Nullable<Array<InstancedMesh>>>();\r\n\r\n    public renderSelf: boolean[] = [];\r\n\r\n    public hardwareInstancedRendering: boolean[] = [];\r\n\r\n    constructor(public parent: _InstanceDataStorageRenderPass) {}\r\n}\r\n\r\n/**\r\n * @internal\r\n **/\r\nclass _ThinInstanceDataStorage {\r\n    public instancesCount: number = 0;\r\n    public matrixBuffer: Nullable<Buffer> = null;\r\n    public previousMatrixBuffer: Nullable<Buffer> = null;\r\n    public matrixBufferSize = 32 * 16; // let's start with a maximum of 32 thin instances\r\n    public matrixData: Nullable<Float32Array> = null;\r\n    public previousMatrixData: Nullable<Float32Array>;\r\n    public boundingVectors: Array<Vector3> = [];\r\n    public worldMatrices: Nullable<Matrix[]> = null;\r\n    public masterMeshPreviousWorldMatrix: Nullable<Matrix>;\r\n}\r\n\r\n/**\r\n * @internal\r\n **/\r\nclass _InternalMeshDataInfo {\r\n    // Events\r\n    public _onBeforeRenderObservable: Nullable<Observable<Mesh>>;\r\n    public _onBeforeBindObservable: Nullable<Observable<Mesh>>;\r\n    public _onAfterRenderObservable: Nullable<Observable<Mesh>>;\r\n    public _onBeforeDrawObservable: Nullable<Observable<Mesh>>;\r\n    public _onBetweenPassObservable: Nullable<Observable<SubMesh>>;\r\n\r\n    public _areNormalsFrozen: boolean = false; // Will be used by ribbons mainly\r\n    public _sourcePositions: Nullable<Float32Array>; // Will be used to save original positions when using software skinning\r\n    public _sourceNormals: Nullable<Float32Array>; // Will be used to save original normals when using software skinning\r\n\r\n    // Will be used to save a source mesh reference, If any\r\n    public _source: Nullable<Mesh> = null;\r\n    // Will be used to for fast cloned mesh lookup\r\n    public meshMap: Nullable<{ [id: string]: Mesh | undefined }> = null;\r\n\r\n    public _preActivateId: number = -1;\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public _LODLevels = new Array<MeshLODLevel>();\r\n    /** Alternative definition of LOD level, using screen coverage instead of distance */\r\n    public _useLODScreenCoverage: boolean = false;\r\n    public _checkReadinessObserver: Nullable<Observer<Scene>>;\r\n\r\n    public _onMeshReadyObserverAdded: (observer: Observer<Mesh>) => void;\r\n\r\n    public _effectiveMaterial: Nullable<Material> = null;\r\n\r\n    public _forcedInstanceCount: number = 0;\r\n\r\n    public _overrideRenderingFillMode: Nullable<number> = null;\r\n\r\n    public _sideOrientation: number;\r\n\r\n    public _effectiveSideOrientation: number;\r\n}\r\n\r\n/**\r\n * Options used to clone a mesh\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport interface MeshCloneOptions {\r\n    /** The parent of the mesh, if it has one */\r\n    parent?: Nullable<Node>;\r\n\r\n    /** Skips cloning child meshes of source (default: false. When false, achieved by calling a clone(), also passing False. This will make creation of children, recursive. */\r\n    doNotCloneChildren?: boolean;\r\n\r\n    /** Includes cloning mesh physics impostor (default: true) */\r\n    clonePhysicsImpostor?: boolean;\r\n\r\n    /** Includes cloning thin instances (default: false) */\r\n    cloneThinInstances?: boolean;\r\n}\r\n\r\n/**\r\n * Options used to create a mesh\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport interface MeshCreationOptions extends MeshCloneOptions {\r\n    /** An optional Mesh from which the new mesh will be cloned from (geometry will be shared) */\r\n    source?: Nullable<Mesh>;\r\n}\r\n\r\nconst MeshCreationOptions: MeshCreationOptions = {\r\n    source: null,\r\n    parent: null,\r\n    doNotCloneChildren: false,\r\n    clonePhysicsImpostor: true,\r\n    cloneThinInstances: false,\r\n};\r\n\r\n/**\r\n * Class used to represent renderable models\r\n */\r\nexport class Mesh extends AbstractMesh implements IGetSetVerticesData {\r\n    // Consts\r\n\r\n    /**\r\n     * Mesh side orientation : usually the external or front surface\r\n     */\r\n    public static readonly FRONTSIDE = VertexData.FRONTSIDE;\r\n\r\n    /**\r\n     * Mesh side orientation : usually the internal or back surface\r\n     */\r\n    public static readonly BACKSIDE = VertexData.BACKSIDE;\r\n    /**\r\n     * Mesh side orientation : both internal and external or front and back surfaces\r\n     */\r\n    public static readonly DOUBLESIDE = VertexData.DOUBLESIDE;\r\n    /**\r\n     * Mesh side orientation : by default, `FRONTSIDE`\r\n     */\r\n    public static readonly DEFAULTSIDE = VertexData.DEFAULTSIDE;\r\n    /**\r\n     * Mesh cap setting : no cap\r\n     */\r\n    public static readonly NO_CAP = 0;\r\n    /**\r\n     * Mesh cap setting : one cap at the beginning of the mesh\r\n     */\r\n    public static readonly CAP_START = 1;\r\n    /**\r\n     * Mesh cap setting : one cap at the end of the mesh\r\n     */\r\n    public static readonly CAP_END = 2;\r\n    /**\r\n     * Mesh cap setting : two caps, one at the beginning  and one at the end of the mesh\r\n     */\r\n    public static readonly CAP_ALL = 3;\r\n    /**\r\n     * Mesh pattern setting : no flip or rotate\r\n     */\r\n    public static readonly NO_FLIP = 0;\r\n    /**\r\n     * Mesh pattern setting : flip (reflect in y axis) alternate tiles on each row or column\r\n     */\r\n    public static readonly FLIP_TILE = 1;\r\n    /**\r\n     * Mesh pattern setting : rotate (180degs) alternate tiles on each row or column\r\n     */\r\n    public static readonly ROTATE_TILE = 2;\r\n    /**\r\n     * Mesh pattern setting : flip (reflect in y axis) all tiles on alternate rows\r\n     */\r\n    public static readonly FLIP_ROW = 3;\r\n    /**\r\n     * Mesh pattern setting : rotate (180degs) all tiles on alternate rows\r\n     */\r\n    public static readonly ROTATE_ROW = 4;\r\n    /**\r\n     * Mesh pattern setting : flip and rotate alternate tiles on each row or column\r\n     */\r\n    public static readonly FLIP_N_ROTATE_TILE = 5;\r\n    /**\r\n     * Mesh pattern setting : rotate pattern and rotate\r\n     */\r\n    public static readonly FLIP_N_ROTATE_ROW = 6;\r\n    /**\r\n     * Mesh tile positioning : part tiles same on left/right or top/bottom\r\n     */\r\n    public static readonly CENTER = 0;\r\n    /**\r\n     * Mesh tile positioning : part tiles on left\r\n     */\r\n    public static readonly LEFT = 1;\r\n    /**\r\n     * Mesh tile positioning : part tiles on right\r\n     */\r\n    public static readonly RIGHT = 2;\r\n    /**\r\n     * Mesh tile positioning : part tiles on top\r\n     */\r\n    public static readonly TOP = 3;\r\n    /**\r\n     * Mesh tile positioning : part tiles on bottom\r\n     */\r\n    public static readonly BOTTOM = 4;\r\n\r\n    /**\r\n     * Indicates that the instanced meshes should be sorted from back to front before rendering if their material is transparent\r\n     */\r\n    public static INSTANCEDMESH_SORT_TRANSPARENT = false;\r\n\r\n    /**\r\n     * Gets the default side orientation.\r\n     * @param orientation the orientation to value to attempt to get\r\n     * @returns the default orientation\r\n     * @internal\r\n     */\r\n    public static _GetDefaultSideOrientation(orientation?: number): number {\r\n        return orientation || Mesh.FRONTSIDE; // works as Mesh.FRONTSIDE is 0\r\n    }\r\n\r\n    // Internal data\r\n    private _internalMeshDataInfo = new _InternalMeshDataInfo();\r\n\r\n    /**\r\n     * Determines if the LOD levels are intended to be calculated using screen coverage (surface area ratio) instead of distance.\r\n     */\r\n    public get useLODScreenCoverage() {\r\n        return this._internalMeshDataInfo._useLODScreenCoverage;\r\n    }\r\n\r\n    public set useLODScreenCoverage(value: boolean) {\r\n        this._internalMeshDataInfo._useLODScreenCoverage = value;\r\n        this._sortLODLevels();\r\n    }\r\n\r\n    /**\r\n     * Will notify when the mesh is completely ready, including materials.\r\n     * Observers added to this observable will be removed once triggered\r\n     */\r\n    public onMeshReadyObservable: Observable<Mesh>;\r\n\r\n    public override get computeBonesUsingShaders(): boolean {\r\n        return this._internalAbstractMeshDataInfo._computeBonesUsingShaders;\r\n    }\r\n    public override set computeBonesUsingShaders(value: boolean) {\r\n        if (this._internalAbstractMeshDataInfo._computeBonesUsingShaders === value) {\r\n            return;\r\n        }\r\n\r\n        if (value && this._internalMeshDataInfo._sourcePositions) {\r\n            // switch from software to GPU computation: we need to reset the vertex and normal buffers that have been updated by the software process\r\n            this.setVerticesData(VertexBuffer.PositionKind, this._internalMeshDataInfo._sourcePositions, true);\r\n            if (this._internalMeshDataInfo._sourceNormals) {\r\n                this.setVerticesData(VertexBuffer.NormalKind, this._internalMeshDataInfo._sourceNormals, true);\r\n            }\r\n\r\n            this._internalMeshDataInfo._sourcePositions = null;\r\n            this._internalMeshDataInfo._sourceNormals = null;\r\n        }\r\n\r\n        this._internalAbstractMeshDataInfo._computeBonesUsingShaders = value;\r\n        this._markSubMeshesAsAttributesDirty();\r\n    }\r\n\r\n    /**\r\n     * An event triggered before rendering the mesh\r\n     */\r\n    public get onBeforeRenderObservable(): Observable<Mesh> {\r\n        if (!this._internalMeshDataInfo._onBeforeRenderObservable) {\r\n            this._internalMeshDataInfo._onBeforeRenderObservable = new Observable<Mesh>();\r\n        }\r\n\r\n        return this._internalMeshDataInfo._onBeforeRenderObservable;\r\n    }\r\n\r\n    /**\r\n     * An event triggered before binding the mesh\r\n     */\r\n    public get onBeforeBindObservable(): Observable<Mesh> {\r\n        if (!this._internalMeshDataInfo._onBeforeBindObservable) {\r\n            this._internalMeshDataInfo._onBeforeBindObservable = new Observable<Mesh>();\r\n        }\r\n\r\n        return this._internalMeshDataInfo._onBeforeBindObservable;\r\n    }\r\n\r\n    /**\r\n     * An event triggered after rendering the mesh\r\n     */\r\n    public get onAfterRenderObservable(): Observable<Mesh> {\r\n        if (!this._internalMeshDataInfo._onAfterRenderObservable) {\r\n            this._internalMeshDataInfo._onAfterRenderObservable = new Observable<Mesh>();\r\n        }\r\n\r\n        return this._internalMeshDataInfo._onAfterRenderObservable;\r\n    }\r\n\r\n    /**\r\n     * An event triggeredbetween rendering pass when using separateCullingPass = true\r\n     */\r\n    public get onBetweenPassObservable(): Observable<SubMesh> {\r\n        if (!this._internalMeshDataInfo._onBetweenPassObservable) {\r\n            this._internalMeshDataInfo._onBetweenPassObservable = new Observable<SubMesh>();\r\n        }\r\n\r\n        return this._internalMeshDataInfo._onBetweenPassObservable;\r\n    }\r\n\r\n    /**\r\n     * An event triggered before drawing the mesh\r\n     */\r\n    public get onBeforeDrawObservable(): Observable<Mesh> {\r\n        if (!this._internalMeshDataInfo._onBeforeDrawObservable) {\r\n            this._internalMeshDataInfo._onBeforeDrawObservable = new Observable<Mesh>();\r\n        }\r\n\r\n        return this._internalMeshDataInfo._onBeforeDrawObservable;\r\n    }\r\n\r\n    private _onBeforeDrawObserver: Nullable<Observer<Mesh>>;\r\n\r\n    /**\r\n     * Sets a callback to call before drawing the mesh. It is recommended to use onBeforeDrawObservable instead\r\n     */\r\n    public set onBeforeDraw(callback: () => void) {\r\n        if (this._onBeforeDrawObserver) {\r\n            this.onBeforeDrawObservable.remove(this._onBeforeDrawObserver);\r\n        }\r\n        this._onBeforeDrawObserver = this.onBeforeDrawObservable.add(callback);\r\n    }\r\n\r\n    public override get hasInstances(): boolean {\r\n        return this.instances.length > 0;\r\n    }\r\n\r\n    public override get hasThinInstances(): boolean {\r\n        return (this.forcedInstanceCount || this._thinInstanceDataStorage.instancesCount || 0) > 0;\r\n    }\r\n\r\n    // Members\r\n\r\n    /**\r\n     * Gets the delay loading state of the mesh (when delay loading is turned on)\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/importers/incrementalLoading\r\n     */\r\n    public delayLoadState = Constants.DELAYLOADSTATE_NONE;\r\n\r\n    /**\r\n     * Gets the list of instances created from this mesh\r\n     * it is not supposed to be modified manually.\r\n     * Note also that the order of the InstancedMesh wihin the array is not significant and might change.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\r\n     */\r\n    public instances: InstancedMesh[] = [];\r\n\r\n    /**\r\n     * Gets the file containing delay loading data for this mesh\r\n     */\r\n    public delayLoadingFile: string;\r\n\r\n    /** @internal */\r\n    public _binaryInfo: any;\r\n\r\n    /**\r\n     * User defined function used to change how LOD level selection is done\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\r\n     */\r\n    public onLODLevelSelection: (distance: number, mesh: Mesh, selectedLevel: Nullable<Mesh>) => void;\r\n\r\n    // Private\r\n    /** @internal */\r\n    public _creationDataStorage: Nullable<_CreationDataStorage> = null;\r\n\r\n    /** @internal */\r\n    public _geometry: Nullable<Geometry> = null;\r\n    /** @internal */\r\n    public _delayInfo: Array<string>;\r\n    /** @internal */\r\n    public _delayLoadingFunction: (any: any, mesh: Mesh) => void;\r\n\r\n    /**\r\n     * Gets or sets the forced number of instances to display.\r\n     * If 0 (default value), the number of instances is not forced and depends on the draw type\r\n     * (regular / instance / thin instances mesh)\r\n     */\r\n    public get forcedInstanceCount(): number {\r\n        return this._internalMeshDataInfo._forcedInstanceCount;\r\n    }\r\n\r\n    public set forcedInstanceCount(count: number) {\r\n        this._internalMeshDataInfo._forcedInstanceCount = count;\r\n    }\r\n\r\n    /** @internal */\r\n    public _instanceDataStorage: _InstanceDataStorage;\r\n\r\n    /** @internal */\r\n    public _thinInstanceDataStorage = new _ThinInstanceDataStorage();\r\n\r\n    /** @internal */\r\n    public _shouldGenerateFlatShading: boolean = false;\r\n\r\n    // Use by builder only to know what orientation were the mesh build in.\r\n    /** @internal */\r\n    public _originalBuilderSideOrientation: number = Mesh.DEFAULTSIDE;\r\n\r\n    /**\r\n     * Use this property to change the original side orientation defined at construction time\r\n     * Material.sideOrientation will override this value if set\r\n     * User will still be able to change the material sideOrientation afterwards if they really need it\r\n     */\r\n    public get sideOrientation(): number {\r\n        return this._internalMeshDataInfo._sideOrientation;\r\n    }\r\n\r\n    public set sideOrientation(value: number) {\r\n        this._internalMeshDataInfo._sideOrientation = value;\r\n\r\n        this._internalAbstractMeshDataInfo._sideOrientationHint =\r\n            (this._scene.useRightHandedSystem && value === Constants.MATERIAL_CounterClockWiseSideOrientation) ||\r\n            (!this._scene.useRightHandedSystem && value === Constants.MATERIAL_ClockWiseSideOrientation);\r\n    }\r\n\r\n    /** @internal */\r\n    public get _effectiveSideOrientation(): number {\r\n        return this._internalMeshDataInfo._effectiveSideOrientation;\r\n    }\r\n\r\n    /**\r\n     * @deprecated Please use sideOrientation instead.\r\n     * @see https://doc.babylonjs.com/breaking-changes#7110\r\n     */\r\n    public get overrideMaterialSideOrientation() {\r\n        return this.sideOrientation;\r\n    }\r\n\r\n    public set overrideMaterialSideOrientation(value: number) {\r\n        this.sideOrientation = value;\r\n        if (this.material) {\r\n            this.material.sideOrientation = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use this property to override the Material's fillMode value\r\n     */\r\n    public get overrideRenderingFillMode(): Nullable<number> {\r\n        return this._internalMeshDataInfo._overrideRenderingFillMode;\r\n    }\r\n\r\n    public set overrideRenderingFillMode(fillMode: Nullable<number>) {\r\n        this._internalMeshDataInfo._overrideRenderingFillMode = fillMode;\r\n    }\r\n\r\n    public override get material(): Nullable<Material> {\r\n        return this._internalAbstractMeshDataInfo._material;\r\n    }\r\n\r\n    public override set material(value: Nullable<Material>) {\r\n        if (value && ((this.material && this.material.sideOrientation === null) || this._internalAbstractMeshDataInfo._sideOrientationHint)) {\r\n            value.sideOrientation = null;\r\n        }\r\n        this._setMaterial(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating whether to render ignoring the active camera's max z setting. (false by default)\r\n     * You should not mix meshes that have this property set to true with meshes that have it set to false if they all write\r\n     * to the depth buffer, because the z-values are not comparable in the two cases and you will get rendering artifacts if you do.\r\n     * You can set the property to true for meshes that do not write to the depth buffer, or set the same value (either false or true) otherwise.\r\n     * Note this will reduce performance when set to true.\r\n     */\r\n    public ignoreCameraMaxZ = false;\r\n\r\n    /**\r\n     * Gets the source mesh (the one used to clone this one from)\r\n     */\r\n    public get source(): Nullable<Mesh> {\r\n        return this._internalMeshDataInfo._source;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of clones of this mesh\r\n     * The scene must have been constructed with useClonedMeshMap=true for this to work!\r\n     * Note that useClonedMeshMap=true is the default setting\r\n     */\r\n    public get cloneMeshMap(): Nullable<{ [id: string]: Mesh | undefined }> {\r\n        return this._internalMeshDataInfo.meshMap;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this mesh does not use index buffer\r\n     */\r\n    public get isUnIndexed(): boolean {\r\n        return this._unIndexed;\r\n    }\r\n\r\n    public set isUnIndexed(value: boolean) {\r\n        if (this._unIndexed !== value) {\r\n            this._unIndexed = value;\r\n            this._markSubMeshesAsAttributesDirty();\r\n        }\r\n    }\r\n\r\n    /** Gets the array buffer used to store the instanced buffer used for instances' world matrices */\r\n    public get worldMatrixInstancedBuffer(): Float32Array {\r\n        const instanceDataStorage = this._instanceDataStorage.renderPasses[this._instanceDataStorage.engine.isWebGPU ? this._instanceDataStorage.engine.currentRenderPassId : 0];\r\n        return instanceDataStorage ? instanceDataStorage.instancesData : (undefined as any);\r\n    }\r\n\r\n    /** Gets the array buffer used to store the instanced buffer used for instances' previous world matrices */\r\n    public get previousWorldMatrixInstancedBuffer(): Float32Array {\r\n        const instanceDataStorage = this._instanceDataStorage.renderPasses[this._instanceDataStorage.engine.isWebGPU ? this._instanceDataStorage.engine.currentRenderPassId : 0];\r\n        return instanceDataStorage ? instanceDataStorage.instancesPreviousData : (undefined as any);\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that the update of the instance buffer of the world matrices is manual */\r\n    public get manualUpdateOfWorldMatrixInstancedBuffer() {\r\n        return this._instanceDataStorage.manualUpdate;\r\n    }\r\n\r\n    public set manualUpdateOfWorldMatrixInstancedBuffer(value: boolean) {\r\n        this._instanceDataStorage.manualUpdate = value;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that the update of the instance buffer of the world matrices is manual */\r\n    public get manualUpdateOfPreviousWorldMatrixInstancedBuffer() {\r\n        return this._instanceDataStorage.previousManualUpdate;\r\n    }\r\n\r\n    public set manualUpdateOfPreviousWorldMatrixInstancedBuffer(value: boolean) {\r\n        this._instanceDataStorage.previousManualUpdate = value;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating that the update of the instance buffer of the world matrices must be performed in all cases (and notably even in frozen mode) */\r\n    public get forceWorldMatrixInstancedBufferUpdate() {\r\n        return this._instanceDataStorage.forceMatrixUpdates;\r\n    }\r\n\r\n    public set forceWorldMatrixInstancedBufferUpdate(value: boolean) {\r\n        this._instanceDataStorage.forceMatrixUpdates = value;\r\n    }\r\n\r\n    protected _copySource(source: Mesh, doNotCloneChildren?: boolean, clonePhysicsImpostor: boolean = true, cloneThinInstances: boolean = false): void {\r\n        const scene = this.getScene();\r\n        // Geometry\r\n        if (source._geometry) {\r\n            source._geometry.applyToMesh(this);\r\n        }\r\n\r\n        // Deep copy\r\n        DeepCopier.DeepCopy(\r\n            source,\r\n            this,\r\n            [\r\n                \"name\",\r\n                \"material\",\r\n                \"skeleton\",\r\n                \"instances\",\r\n                \"parent\",\r\n                \"uniqueId\",\r\n                \"source\",\r\n                \"metadata\",\r\n                \"morphTargetManager\",\r\n                \"hasInstances\",\r\n                \"worldMatrixInstancedBuffer\",\r\n                \"previousWorldMatrixInstancedBuffer\",\r\n                \"hasLODLevels\",\r\n                \"geometry\",\r\n                \"isBlocked\",\r\n                \"areNormalsFrozen\",\r\n                \"facetNb\",\r\n                \"isFacetDataEnabled\",\r\n                \"lightSources\",\r\n                \"useBones\",\r\n                \"isAnInstance\",\r\n                \"collider\",\r\n                \"edgesRenderer\",\r\n                \"forward\",\r\n                \"up\",\r\n                \"right\",\r\n                \"absolutePosition\",\r\n                \"absoluteScaling\",\r\n                \"absoluteRotationQuaternion\",\r\n                \"isWorldMatrixFrozen\",\r\n                \"nonUniformScaling\",\r\n                \"behaviors\",\r\n                \"worldMatrixFromCache\",\r\n                \"hasThinInstances\",\r\n                \"cloneMeshMap\",\r\n                \"hasBoundingInfo\",\r\n                \"physicsBody\",\r\n                \"physicsImpostor\",\r\n            ],\r\n            [\"_poseMatrix\"]\r\n        );\r\n\r\n        // Source mesh\r\n        this._internalMeshDataInfo._source = source;\r\n        if (scene.useClonedMeshMap) {\r\n            if (!source._internalMeshDataInfo.meshMap) {\r\n                source._internalMeshDataInfo.meshMap = {};\r\n            }\r\n            source._internalMeshDataInfo.meshMap[this.uniqueId] = this;\r\n        }\r\n\r\n        // Construction Params\r\n        // Clone parameters allowing mesh to be updated in case of parametric shapes.\r\n        this._originalBuilderSideOrientation = source._originalBuilderSideOrientation;\r\n        this._creationDataStorage = source._creationDataStorage;\r\n\r\n        // Animation ranges\r\n        if (source._ranges) {\r\n            const ranges = source._ranges;\r\n            for (const name in ranges) {\r\n                if (!Object.prototype.hasOwnProperty.call(ranges, name)) {\r\n                    continue;\r\n                }\r\n\r\n                if (!ranges[name]) {\r\n                    continue;\r\n                }\r\n\r\n                this.createAnimationRange(name, ranges[name].from, ranges[name].to);\r\n            }\r\n        }\r\n\r\n        // Metadata\r\n        if (source.metadata && source.metadata.clone) {\r\n            this.metadata = source.metadata.clone();\r\n        } else {\r\n            this.metadata = source.metadata;\r\n        }\r\n        this._internalMetadata = source._internalMetadata;\r\n\r\n        // Tags\r\n        if (Tags && Tags.HasTags(source)) {\r\n            Tags.AddTagsTo(this, Tags.GetTags(source, true));\r\n        }\r\n\r\n        // Enabled. We shouldn't need to check the source's ancestors, as this mesh\r\n        // will have the same ones.\r\n        this.setEnabled(source.isEnabled(false));\r\n\r\n        // Parent\r\n        this.parent = source.parent;\r\n\r\n        // Pivot\r\n        this.setPivotMatrix(source.getPivotMatrix(), this._postMultiplyPivotMatrix);\r\n\r\n        this.id = this.name + \".\" + source.id;\r\n\r\n        // Material\r\n        this.material = source.material;\r\n\r\n        if (!doNotCloneChildren) {\r\n            // Children\r\n            const directDescendants = source.getDescendants(true);\r\n            for (let index = 0; index < directDescendants.length; index++) {\r\n                const child = directDescendants[index];\r\n\r\n                if ((<any>child)._isMesh) {\r\n                    MeshCreationOptions.parent = this;\r\n                    MeshCreationOptions.doNotCloneChildren = doNotCloneChildren;\r\n                    MeshCreationOptions.clonePhysicsImpostor = clonePhysicsImpostor;\r\n                    MeshCreationOptions.cloneThinInstances = cloneThinInstances;\r\n                    (<Mesh>child).clone(this.name + \".\" + child.name, MeshCreationOptions);\r\n                } else if ((<any>child).clone) {\r\n                    (<any>child).clone(this.name + \".\" + child.name, this);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Morphs\r\n        if (source.morphTargetManager) {\r\n            this.morphTargetManager = source.morphTargetManager;\r\n        }\r\n\r\n        // Physics clone\r\n        if (scene.getPhysicsEngine) {\r\n            const physicsEngine = scene.getPhysicsEngine();\r\n            if (clonePhysicsImpostor && physicsEngine) {\r\n                if (physicsEngine.getPluginVersion() === 1) {\r\n                    const impostor = (physicsEngine as PhysicsEngineV1).getImpostorForPhysicsObject(source);\r\n                    if (impostor) {\r\n                        this.physicsImpostor = impostor.clone(this);\r\n                    }\r\n                } else if (physicsEngine.getPluginVersion() === 2) {\r\n                    if (source.physicsBody) {\r\n                        source.physicsBody.clone(this);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Particles\r\n        for (let index = 0; index < scene.particleSystems.length; index++) {\r\n            const system = scene.particleSystems[index];\r\n\r\n            if (system.emitter === source) {\r\n                system.clone(system.name, this);\r\n            }\r\n        }\r\n\r\n        // Skeleton\r\n        this.skeleton = source.skeleton;\r\n\r\n        // Thin instances\r\n        if (cloneThinInstances) {\r\n            if (source._thinInstanceDataStorage.matrixData) {\r\n                this.thinInstanceSetBuffer(\r\n                    \"matrix\",\r\n                    new Float32Array(source._thinInstanceDataStorage.matrixData),\r\n                    16,\r\n                    !source._thinInstanceDataStorage.matrixBuffer!.isUpdatable()\r\n                );\r\n                this._thinInstanceDataStorage.matrixBufferSize = source._thinInstanceDataStorage.matrixBufferSize;\r\n                this._thinInstanceDataStorage.instancesCount = source._thinInstanceDataStorage.instancesCount;\r\n            } else {\r\n                this._thinInstanceDataStorage.matrixBufferSize = source._thinInstanceDataStorage.matrixBufferSize;\r\n            }\r\n\r\n            if (source._userThinInstanceBuffersStorage) {\r\n                const userThinInstance = source._userThinInstanceBuffersStorage;\r\n                for (const kind in userThinInstance.data) {\r\n                    this.thinInstanceSetBuffer(\r\n                        kind,\r\n                        new Float32Array(userThinInstance.data[kind]),\r\n                        userThinInstance.strides[kind],\r\n                        !userThinInstance.vertexBuffers?.[kind]?.isUpdatable()\r\n                    );\r\n                    this._userThinInstanceBuffersStorage.sizes[kind] = userThinInstance.sizes[kind];\r\n                }\r\n            }\r\n        }\r\n\r\n        this.refreshBoundingInfo(true, true);\r\n        this.computeWorldMatrix(true);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     * @param name The value used by scene.getMeshByName() to do a lookup.\r\n     * @param scene The scene to add this mesh to.\r\n     * @param options Options used to create the mesh\r\n     */\r\n    constructor(name: string, scene?: Nullable<Scene>, options?: MeshCreationOptions);\r\n\r\n    /**\r\n     * Constructor\r\n     * @param name The value used by scene.getMeshByName() to do a lookup.\r\n     * @param scene The scene to add this mesh to.\r\n     * @param parent The parent of this mesh, if it has one\r\n     * @param source An optional Mesh from which geometry is shared, cloned.\r\n     * @param doNotCloneChildren When cloning, skip cloning child meshes of source, default False.\r\n     *                  When false, achieved by calling a clone(), also passing False.\r\n     *                  This will make creation of children, recursive.\r\n     * @param clonePhysicsImpostor When cloning, include cloning mesh physics impostor, default True.\r\n     */\r\n    constructor(name: string, scene?: Nullable<Scene>, parent?: Nullable<Node>, source?: Nullable<Mesh>, doNotCloneChildren?: boolean, clonePhysicsImpostor?: boolean);\r\n\r\n    /** @internal */\r\n    constructor(\r\n        name: string,\r\n        scene: Nullable<Scene> = null,\r\n        parentOrOptions: Nullable<Node> | MeshCreationOptions = null,\r\n        source: Nullable<Mesh> = null,\r\n        doNotCloneChildren?: boolean,\r\n        clonePhysicsImpostor: boolean = true\r\n    ) {\r\n        super(name, scene);\r\n\r\n        scene = this.getScene();\r\n\r\n        this._instanceDataStorage = new _InstanceDataStorage();\r\n        this._instanceDataStorage.engine = scene.getEngine();\r\n\r\n        if (this._scene.useRightHandedSystem) {\r\n            this.sideOrientation = Constants.MATERIAL_ClockWiseSideOrientation;\r\n        } else {\r\n            this.sideOrientation = Constants.MATERIAL_CounterClockWiseSideOrientation;\r\n        }\r\n\r\n        this._onBeforeDraw = (isInstance: boolean, world: Matrix, effectiveMaterial?: Material) => {\r\n            if (isInstance && effectiveMaterial) {\r\n                if (this._uniformBuffer) {\r\n                    this.transferToEffect(world);\r\n                } else {\r\n                    effectiveMaterial.bindOnlyWorldMatrix(world);\r\n                }\r\n            }\r\n        };\r\n\r\n        let parent: Nullable<Node> = null;\r\n        let cloneThinInstances = false;\r\n\r\n        if (parentOrOptions && (parentOrOptions as Node)._addToSceneRootNodes === undefined) {\r\n            const options = parentOrOptions as MeshCreationOptions;\r\n\r\n            parent = options.parent ?? null;\r\n            source = options.source ?? null;\r\n            doNotCloneChildren = options.doNotCloneChildren ?? false;\r\n            clonePhysicsImpostor = options.clonePhysicsImpostor ?? true;\r\n            cloneThinInstances = options.cloneThinInstances ?? false;\r\n        } else {\r\n            parent = parentOrOptions as Nullable<Node>;\r\n        }\r\n\r\n        if (source) {\r\n            this._copySource(source, doNotCloneChildren, clonePhysicsImpostor, cloneThinInstances);\r\n        }\r\n\r\n        // Parent\r\n        if (parent !== null) {\r\n            this.parent = parent;\r\n        }\r\n\r\n        this._instanceDataStorage.hardwareInstancedRendering = this.getEngine().getCaps().instancedArrays;\r\n\r\n        this._internalMeshDataInfo._onMeshReadyObserverAdded = (observer: Observer<Mesh>) => {\r\n            // only notify once! then unregister the observer\r\n            observer.unregisterOnNextCall = true;\r\n            if (this.isReady(true)) {\r\n                this.onMeshReadyObservable.notifyObservers(this);\r\n            } else {\r\n                if (!this._internalMeshDataInfo._checkReadinessObserver) {\r\n                    this._internalMeshDataInfo._checkReadinessObserver = this._scene.onBeforeRenderObservable.add(() => {\r\n                        // check for complete readiness\r\n                        if (this.isReady(true)) {\r\n                            this._scene.onBeforeRenderObservable.remove(this._internalMeshDataInfo._checkReadinessObserver);\r\n                            this._internalMeshDataInfo._checkReadinessObserver = null;\r\n                            this.onMeshReadyObservable.notifyObservers(this);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        this.onMeshReadyObservable = new Observable(this._internalMeshDataInfo._onMeshReadyObserverAdded);\r\n\r\n        if (source) {\r\n            source.onClonedObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    public override instantiateHierarchy(\r\n        newParent: Nullable<TransformNode> = null,\r\n        options?: { doNotInstantiate: boolean | ((node: TransformNode) => boolean) },\r\n        onNewNodeCreated?: (source: TransformNode, clone: TransformNode) => void\r\n    ): Nullable<TransformNode> {\r\n        const instance =\r\n            this.getTotalVertices() === 0 || (options && options.doNotInstantiate && (options.doNotInstantiate === true || options.doNotInstantiate(this)))\r\n                ? this.clone(\"Clone of \" + (this.name || this.id), newParent || this.parent, true)\r\n                : this.createInstance(\"instance of \" + (this.name || this.id));\r\n\r\n        instance.parent = newParent || this.parent;\r\n        instance.position = this.position.clone();\r\n        instance.scaling = this.scaling.clone();\r\n        if (this.rotationQuaternion) {\r\n            instance.rotationQuaternion = this.rotationQuaternion.clone();\r\n        } else {\r\n            instance.rotation = this.rotation.clone();\r\n        }\r\n\r\n        if (onNewNodeCreated) {\r\n            onNewNodeCreated(this, instance);\r\n        }\r\n\r\n        for (const child of this.getChildTransformNodes(true)) {\r\n            // instancedMesh should have a different sourced mesh\r\n            if (child.getClassName() === \"InstancedMesh\" && instance.getClassName() === \"Mesh\" && (child as InstancedMesh).sourceMesh === this) {\r\n                (child as InstancedMesh).instantiateHierarchy(\r\n                    instance,\r\n                    {\r\n                        doNotInstantiate: (options && options.doNotInstantiate) || false,\r\n                        newSourcedMesh: instance as Mesh,\r\n                    },\r\n                    onNewNodeCreated\r\n                );\r\n            } else {\r\n                child.instantiateHierarchy(instance, options, onNewNodeCreated);\r\n            }\r\n        }\r\n\r\n        return instance;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name\r\n     * @returns the string \"Mesh\".\r\n     */\r\n    public override getClassName(): string {\r\n        return \"Mesh\";\r\n    }\r\n\r\n    /** @internal */\r\n    public get _isMesh() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns a description of this mesh\r\n     * @param fullDetails define if full details about this mesh must be used\r\n     * @returns a descriptive string representing this mesh\r\n     */\r\n    public override toString(fullDetails?: boolean): string {\r\n        let ret = super.toString(fullDetails);\r\n        ret += \", n vertices: \" + this.getTotalVertices();\r\n        ret += \", parent: \" + (this._waitingParentId ? this._waitingParentId : this.parent ? this.parent.name : \"NONE\");\r\n\r\n        if (this.animations) {\r\n            for (let i = 0; i < this.animations.length; i++) {\r\n                ret += \", animation[0]: \" + this.animations[i].toString(fullDetails);\r\n            }\r\n        }\r\n\r\n        if (fullDetails) {\r\n            if (this._geometry) {\r\n                const ib = this.getIndices();\r\n                const vb = this.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n                if (vb && ib) {\r\n                    ret += \", flat shading: \" + (vb.length / 3 === ib.length ? \"YES\" : \"NO\");\r\n                }\r\n            } else {\r\n                ret += \", flat shading: UNKNOWN\";\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _unBindEffect() {\r\n        super._unBindEffect();\r\n\r\n        for (const instance of this.instances) {\r\n            instance._unBindEffect();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this mesh has LOD\r\n     */\r\n    public get hasLODLevels(): boolean {\r\n        return this._internalMeshDataInfo._LODLevels.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of MeshLODLevel associated with the current mesh\r\n     * @returns an array of MeshLODLevel\r\n     */\r\n    public getLODLevels(): MeshLODLevel[] {\r\n        return this._internalMeshDataInfo._LODLevels;\r\n    }\r\n\r\n    private _sortLODLevels(): void {\r\n        const sortingOrderFactor = this._internalMeshDataInfo._useLODScreenCoverage ? -1 : 1;\r\n        this._internalMeshDataInfo._LODLevels.sort((a, b) => {\r\n            if (a.distanceOrScreenCoverage < b.distanceOrScreenCoverage) {\r\n                return sortingOrderFactor;\r\n            }\r\n            if (a.distanceOrScreenCoverage > b.distanceOrScreenCoverage) {\r\n                return -sortingOrderFactor;\r\n            }\r\n\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add a mesh as LOD level triggered at the given distance.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\r\n     * @param distanceOrScreenCoverage Either distance from the center of the object to show this level or the screen coverage if `useScreenCoverage` is set to `true`.\r\n     * If screen coverage, value is a fraction of the screen's total surface, between 0 and 1.\r\n     * Example Playground for distance https://playground.babylonjs.com/#QE7KM#197\r\n     * Example Playground for screen coverage https://playground.babylonjs.com/#QE7KM#196\r\n     * @param mesh The mesh to be added as LOD level (can be null)\r\n     * @returns This mesh (for chaining)\r\n     */\r\n    public addLODLevel(distanceOrScreenCoverage: number, mesh: Nullable<Mesh>): Mesh {\r\n        if (mesh && mesh._masterMesh) {\r\n            Logger.Warn(\"You cannot use a mesh as LOD level twice\");\r\n            return this;\r\n        }\r\n\r\n        const level = new MeshLODLevel(distanceOrScreenCoverage, mesh);\r\n        this._internalMeshDataInfo._LODLevels.push(level);\r\n\r\n        if (mesh) {\r\n            mesh._masterMesh = this;\r\n        }\r\n\r\n        this._sortLODLevels();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the LOD level mesh at the passed distance or null if not found.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\r\n     * @param distance The distance from the center of the object to show this level\r\n     * @returns a Mesh or `null`\r\n     */\r\n    public getLODLevelAtDistance(distance: number): Nullable<Mesh> {\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n        for (let index = 0; index < internalDataInfo._LODLevels.length; index++) {\r\n            const level = internalDataInfo._LODLevels[index];\r\n\r\n            if (level.distanceOrScreenCoverage === distance) {\r\n                return level.mesh;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Remove a mesh from the LOD array\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\r\n     * @param mesh defines the mesh to be removed\r\n     * @returns This mesh (for chaining)\r\n     */\r\n    public removeLODLevel(mesh: Nullable<Mesh>): Mesh {\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n        for (let index = 0; index < internalDataInfo._LODLevels.length; index++) {\r\n            if (internalDataInfo._LODLevels[index].mesh === mesh) {\r\n                internalDataInfo._LODLevels.splice(index, 1);\r\n                if (mesh) {\r\n                    mesh._masterMesh = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._sortLODLevels();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the registered LOD mesh distant from the parameter `camera` position if any, else returns the current mesh.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/LOD\r\n     * @param camera defines the camera to use to compute distance\r\n     * @param boundingSphere defines a custom bounding sphere to use instead of the one from this mesh\r\n     * @returns This mesh (for chaining)\r\n     */\r\n    public override getLOD(camera: Camera, boundingSphere?: BoundingSphere): Nullable<AbstractMesh> {\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n        if (!internalDataInfo._LODLevels || internalDataInfo._LODLevels.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        const bSphere = boundingSphere || this.getBoundingInfo().boundingSphere;\r\n\r\n        const distanceToCamera = camera.mode === Camera.ORTHOGRAPHIC_CAMERA ? camera.minZ : bSphere.centerWorld.subtract(camera.globalPosition).length();\r\n        let compareValue = distanceToCamera;\r\n        let compareSign = 1;\r\n\r\n        if (internalDataInfo._useLODScreenCoverage) {\r\n            const screenArea = camera.screenArea;\r\n            let meshArea = (bSphere.radiusWorld * camera.minZ) / distanceToCamera;\r\n            meshArea = meshArea * meshArea * Math.PI;\r\n            compareValue = meshArea / screenArea;\r\n            compareSign = -1;\r\n        }\r\n\r\n        if (compareSign * internalDataInfo._LODLevels[internalDataInfo._LODLevels.length - 1].distanceOrScreenCoverage > compareSign * compareValue) {\r\n            if (this.onLODLevelSelection) {\r\n                this.onLODLevelSelection(compareValue, this, this);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        for (let index = 0; index < internalDataInfo._LODLevels.length; index++) {\r\n            const level = internalDataInfo._LODLevels[index];\r\n\r\n            if (compareSign * level.distanceOrScreenCoverage < compareSign * compareValue) {\r\n                if (level.mesh) {\r\n                    if (level.mesh.delayLoadState === Constants.DELAYLOADSTATE_NOTLOADED) {\r\n                        level.mesh._checkDelayState();\r\n                        return this;\r\n                    }\r\n\r\n                    if (level.mesh.delayLoadState === Constants.DELAYLOADSTATE_LOADING) {\r\n                        return this;\r\n                    }\r\n\r\n                    level.mesh._preActivate();\r\n                    level.mesh._updateSubMeshesBoundingInfo(this.worldMatrixFromCache);\r\n                }\r\n\r\n                if (this.onLODLevelSelection) {\r\n                    this.onLODLevelSelection(compareValue, this, level.mesh);\r\n                }\r\n\r\n                return level.mesh;\r\n            }\r\n        }\r\n\r\n        if (this.onLODLevelSelection) {\r\n            this.onLODLevelSelection(compareValue, this, this);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh internal Geometry object\r\n     */\r\n    public override get geometry(): Nullable<Geometry> {\r\n        return this._geometry;\r\n    }\r\n\r\n    /**\r\n     * Returns the total number of vertices within the mesh geometry or zero if the mesh has no geometry.\r\n     * @returns the total number of vertices\r\n     */\r\n    public override getTotalVertices(): number {\r\n        if (this._geometry === null || this._geometry === undefined) {\r\n            return 0;\r\n        }\r\n        return this._geometry.getTotalVertices();\r\n    }\r\n\r\n    /**\r\n     * Returns the content of an associated vertex buffer\r\n     * @param kind defines which buffer to read from (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param copyWhenShared defines a boolean indicating that if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one\r\n     * @param forceCopy defines a boolean forcing the copy of the buffer no matter what the value of copyWhenShared is\r\n     * @param bypassInstanceData defines a boolean indicating that the function should not take into account the instance data (applies only if the mesh has instances). Default: false\r\n     * @returns a FloatArray or null if the mesh has no geometry or no vertex buffer for this kind.\r\n     */\r\n    public override getVerticesData(kind: string, copyWhenShared?: boolean, forceCopy?: boolean, bypassInstanceData?: boolean): Nullable<FloatArray> {\r\n        if (!this._geometry) {\r\n            return null;\r\n        }\r\n        let data = bypassInstanceData\r\n            ? undefined\r\n            : this._userInstancedBuffersStorage?.vertexBuffers[kind]?.getFloatData(\r\n                  this.instances.length + 1, // +1 because the master mesh is not included in the instances array\r\n                  forceCopy || (copyWhenShared && this._geometry.meshes.length !== 1)\r\n              );\r\n        if (!data) {\r\n            data = this._geometry.getVerticesData(kind, copyWhenShared, forceCopy);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    public override copyVerticesData(kind: string, vertexData: { [kind: string]: Float32Array }): void {\r\n        if (this._geometry) {\r\n            this._geometry.copyVerticesData(kind, vertexData);\r\n        }\r\n    }\r\n\r\n    public override getVertexBuffer(kind: string, bypassInstanceData?: boolean): Nullable<VertexBuffer> {\r\n        if (!this._geometry) {\r\n            return null;\r\n        }\r\n\r\n        return (bypassInstanceData ? undefined : this._userInstancedBuffersStorage?.vertexBuffers[kind]) ?? this._geometry.getVertexBuffer(kind);\r\n    }\r\n\r\n    /**\r\n     * Tests if a specific vertex buffer is associated with this mesh\r\n     * @param kind defines which buffer to check (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.NormalKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param bypassInstanceData defines a boolean indicating that the function should not take into account the instance data (applies only if the mesh has instances). Default: false\r\n     * @returns a boolean\r\n     */\r\n    public override isVerticesDataPresent(kind: string, bypassInstanceData?: boolean): boolean {\r\n        if (!this._geometry) {\r\n            if (this._delayInfo) {\r\n                return this._delayInfo.indexOf(kind) !== -1;\r\n            }\r\n            return false;\r\n        }\r\n        return (!bypassInstanceData && this._userInstancedBuffersStorage?.vertexBuffers[kind] !== undefined) || this._geometry.isVerticesDataPresent(kind);\r\n    }\r\n\r\n    /**\r\n     * Returns a boolean defining if the vertex data for the requested `kind` is updatable.\r\n     * @param kind defines which buffer to check (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param bypassInstanceData defines a boolean indicating that the function should not take into account the instance data (applies only if the mesh has instances). Default: false\r\n     * @returns a boolean\r\n     */\r\n    public isVertexBufferUpdatable(kind: string, bypassInstanceData?: boolean): boolean {\r\n        if (!this._geometry) {\r\n            if (this._delayInfo) {\r\n                return this._delayInfo.indexOf(kind) !== -1;\r\n            }\r\n            return false;\r\n        }\r\n        if (!bypassInstanceData) {\r\n            const buffer = this._userInstancedBuffersStorage?.vertexBuffers[kind];\r\n            if (buffer) {\r\n                return buffer.isUpdatable();\r\n            }\r\n        }\r\n        return this._geometry.isVertexBufferUpdatable(kind);\r\n    }\r\n\r\n    /**\r\n     * Returns a string which contains the list of existing `kinds` of Vertex Data associated with this mesh.\r\n     * @param bypassInstanceData defines a boolean indicating that the function should not take into account the instance data (applies only if the mesh has instances). Default: false\r\n     * @returns an array of strings\r\n     */\r\n    public getVerticesDataKinds(bypassInstanceData?: boolean): string[] {\r\n        if (!this._geometry) {\r\n            const result: string[] = [];\r\n            if (this._delayInfo) {\r\n                for (const kind of this._delayInfo) {\r\n                    result.push(kind);\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n        const kinds = this._geometry.getVerticesDataKinds();\r\n        if (!bypassInstanceData && this._userInstancedBuffersStorage) {\r\n            for (const kind in this._userInstancedBuffersStorage.vertexBuffers) {\r\n                if (kinds.indexOf(kind) === -1) {\r\n                    kinds.push(kind);\r\n                }\r\n            }\r\n        }\r\n        return kinds;\r\n    }\r\n\r\n    /**\r\n     * Returns a positive integer : the total number of indices in this mesh geometry.\r\n     * @returns the number of indices or zero if the mesh has no geometry.\r\n     */\r\n    public override getTotalIndices(): number {\r\n        if (!this._geometry) {\r\n            return 0;\r\n        }\r\n        return this._geometry.getTotalIndices();\r\n    }\r\n\r\n    /**\r\n     * Returns an array of integers or a typed array (Int32Array, Uint32Array, Uint16Array) populated with the mesh indices.\r\n     * @param copyWhenShared If true (default false) and and if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one.\r\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\r\n     * @returns the indices array or an empty array if the mesh has no geometry\r\n     */\r\n    public override getIndices(copyWhenShared?: boolean, forceCopy?: boolean): Nullable<IndicesArray> {\r\n        if (!this._geometry) {\r\n            return [];\r\n        }\r\n        return this._geometry.getIndices(copyWhenShared, forceCopy);\r\n    }\r\n\r\n    public override get isBlocked(): boolean {\r\n        return this._masterMesh !== null && this._masterMesh !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Determine if the current mesh is ready to be rendered\r\n     * @param completeCheck defines if a complete check (including materials and lights) has to be done (false by default)\r\n     * @param forceInstanceSupport will check if the mesh will be ready when used with instances (false by default)\r\n     * @returns true if all associated assets are ready (material, textures, shaders)\r\n     */\r\n    public override isReady(completeCheck = false, forceInstanceSupport = false): boolean {\r\n        if (this.delayLoadState === Constants.DELAYLOADSTATE_LOADING) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.isReady(completeCheck)) {\r\n            return false;\r\n        }\r\n\r\n        if (!this.subMeshes || this.subMeshes.length === 0) {\r\n            return true;\r\n        }\r\n\r\n        if (!completeCheck) {\r\n            return true;\r\n        }\r\n\r\n        const engine = this.getEngine();\r\n        const scene = this.getScene();\r\n        const hardwareInstancedRendering = forceInstanceSupport || (engine.getCaps().instancedArrays && (this.instances.length > 0 || this.hasThinInstances));\r\n\r\n        this.computeWorldMatrix();\r\n\r\n        const mat = this.material || scene.defaultMaterial;\r\n        if (mat) {\r\n            if (mat._storeEffectOnSubMeshes) {\r\n                for (const subMesh of this.subMeshes) {\r\n                    const effectiveMaterial = subMesh.getMaterial();\r\n                    if (effectiveMaterial) {\r\n                        if (effectiveMaterial._storeEffectOnSubMeshes) {\r\n                            if (!effectiveMaterial.isReadyForSubMesh(this, subMesh, hardwareInstancedRendering)) {\r\n                                return false;\r\n                            }\r\n                        } else {\r\n                            if (!effectiveMaterial.isReady(this, hardwareInstancedRendering)) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                if (!mat.isReady(this, hardwareInstancedRendering)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Shadows\r\n        const currentRenderPassId = engine.currentRenderPassId;\r\n        for (const light of this.lightSources) {\r\n            const generators = light.getShadowGenerators();\r\n\r\n            if (!generators) {\r\n                continue;\r\n            }\r\n\r\n            const iterator = generators.values();\r\n            for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n                const generator = key.value;\r\n                if (generator && (!generator.getShadowMap()?.renderList || (generator.getShadowMap()?.renderList && generator.getShadowMap()?.renderList?.indexOf(this) !== -1))) {\r\n                    const shadowMap = generator.getShadowMap()!;\r\n                    const renderPassIds = shadowMap.renderPassIds ?? [engine.currentRenderPassId];\r\n                    for (let p = 0; p < renderPassIds.length; ++p) {\r\n                        engine.currentRenderPassId = renderPassIds[p];\r\n                        for (const subMesh of this.subMeshes) {\r\n                            if (!generator.isReady(subMesh, hardwareInstancedRendering, subMesh.getMaterial()?.needAlphaBlendingForMesh(this) ?? false)) {\r\n                                engine.currentRenderPassId = currentRenderPassId;\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                    engine.currentRenderPassId = currentRenderPassId;\r\n                }\r\n            }\r\n        }\r\n\r\n        // LOD\r\n        for (const lod of this._internalMeshDataInfo._LODLevels) {\r\n            if (lod.mesh && !lod.mesh.isReady(hardwareInstancedRendering)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the normals aren't to be recomputed on next mesh `positions` array update. This property is pertinent only for updatable parametric shapes.\r\n     */\r\n    public get areNormalsFrozen(): boolean {\r\n        return this._internalMeshDataInfo._areNormalsFrozen;\r\n    }\r\n\r\n    /**\r\n     * This function affects parametric shapes on vertex position update only : ribbons, tubes, etc. It has no effect at all on other shapes. It prevents the mesh normals from being recomputed on next `positions` array update.\r\n     * @returns the current mesh\r\n     */\r\n    public freezeNormals(): Mesh {\r\n        this._internalMeshDataInfo._areNormalsFrozen = true;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This function affects parametric shapes on vertex position update only : ribbons, tubes, etc. It has no effect at all on other shapes. It reactivates the mesh normals computation if it was previously frozen\r\n     * @returns the current mesh\r\n     */\r\n    public unfreezeNormals(): Mesh {\r\n        this._internalMeshDataInfo._areNormalsFrozen = false;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets a value overriding the instance count. Only applicable when custom instanced InterleavedVertexBuffer are used rather than InstancedMeshs\r\n     */\r\n    public set overridenInstanceCount(count: number) {\r\n        this._instanceDataStorage.overridenInstanceCount = count;\r\n    }\r\n\r\n    /** @internal */\r\n    public _getInstanceDataStorage(): _InstanceDataStorageRenderPass {\r\n        const renderPassId = this._instanceDataStorage.engine.isWebGPU ? this._instanceDataStorage.engine.currentRenderPassId : 0;\r\n\r\n        let instanceDataStorage = this._instanceDataStorage.renderPasses[renderPassId];\r\n        if (!instanceDataStorage) {\r\n            instanceDataStorage = new _InstanceDataStorageRenderPass();\r\n            this._instanceDataStorage.renderPasses[renderPassId] = instanceDataStorage;\r\n        }\r\n\r\n        return instanceDataStorage;\r\n    }\r\n\r\n    // Methods\r\n    /** @internal */\r\n    public override _preActivate(): Mesh {\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n        const sceneRenderId = this.getScene().getRenderId();\r\n        if (internalDataInfo._preActivateId === sceneRenderId) {\r\n            return this;\r\n        }\r\n\r\n        internalDataInfo._preActivateId = sceneRenderId;\r\n        this._getInstanceDataStorage().visibleInstances = null;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _preActivateForIntermediateRendering(renderId: number): Mesh {\r\n        const instanceDataStorage = this._getInstanceDataStorage();\r\n        if (instanceDataStorage.visibleInstances) {\r\n            instanceDataStorage.visibleInstances.intermediateDefaultRenderId = renderId;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _registerInstanceForRenderId(instance: InstancedMesh, renderId: number): Mesh {\r\n        const instanceDataStorage = this._getInstanceDataStorage();\r\n        if (!instanceDataStorage.visibleInstances) {\r\n            instanceDataStorage.visibleInstances = {\r\n                defaultRenderId: renderId,\r\n                selfDefaultRenderId: this._renderId,\r\n                intermediateDefaultRenderId: -1,\r\n            };\r\n        }\r\n\r\n        if (!instanceDataStorage.visibleInstances[renderId]) {\r\n            if (instanceDataStorage.previousRenderId !== undefined && this._instanceDataStorage.isFrozen) {\r\n                instanceDataStorage.visibleInstances[instanceDataStorage.previousRenderId] = null;\r\n            }\r\n            instanceDataStorage.previousRenderId = renderId;\r\n            instanceDataStorage.visibleInstances[renderId] = new Array<InstancedMesh>();\r\n        }\r\n\r\n        instanceDataStorage.visibleInstances[renderId].push(instance);\r\n        return this;\r\n    }\r\n\r\n    protected override _afterComputeWorldMatrix(): void {\r\n        super._afterComputeWorldMatrix();\r\n\r\n        if (!this.hasThinInstances) {\r\n            return;\r\n        }\r\n\r\n        if (!this.doNotSyncBoundingInfo) {\r\n            this.thinInstanceRefreshBoundingInfo(false);\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public override _postActivate(): void {\r\n        if (this.edgesShareWithInstances && this.edgesRenderer && this.edgesRenderer.isEnabled && this._renderingGroup) {\r\n            this._renderingGroup._edgesRenderers.pushNoDuplicate(this.edgesRenderer);\r\n            this.edgesRenderer.customInstances.push(this.getWorldMatrix());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method recomputes and sets a new BoundingInfo to the mesh unless it is locked.\r\n     * This means the mesh underlying bounding box and sphere are recomputed.\r\n     * @param applySkeletonOrOptions defines whether to apply the skeleton before computing the bounding info or a set of options\r\n     * @param applyMorph defines whether to apply the morph target before computing the bounding info\r\n     * @returns the current mesh\r\n     */\r\n    public override refreshBoundingInfo(applySkeletonOrOptions: boolean | IMeshDataOptions = false, applyMorph: boolean = false): Mesh {\r\n        if (this.hasBoundingInfo && this.getBoundingInfo().isLocked) {\r\n            return this;\r\n        }\r\n\r\n        let options: IMeshDataOptions;\r\n        if (typeof applySkeletonOrOptions === \"object\") {\r\n            options = applySkeletonOrOptions;\r\n        } else {\r\n            options = {\r\n                applySkeleton: applySkeletonOrOptions,\r\n                applyMorph: applyMorph,\r\n            };\r\n        }\r\n\r\n        const bias = this.geometry ? this.geometry.boundingBias : null;\r\n        this._refreshBoundingInfo(this._getData(options, null, VertexBuffer.PositionKind), bias);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _createGlobalSubMesh(force: boolean): Nullable<SubMesh> {\r\n        const totalVertices = this.getTotalVertices();\r\n        if (!totalVertices || !this.getIndices()) {\r\n            return null;\r\n        }\r\n\r\n        // Check if we need to recreate the submeshes\r\n        if (this.subMeshes && this.subMeshes.length > 0) {\r\n            const ib = this.getIndices();\r\n\r\n            if (!ib) {\r\n                return null;\r\n            }\r\n\r\n            const totalIndices = ib.length;\r\n            let needToRecreate = false;\r\n\r\n            if (force) {\r\n                needToRecreate = true;\r\n            } else {\r\n                for (const submesh of this.subMeshes) {\r\n                    if (submesh.indexStart + submesh.indexCount > totalIndices) {\r\n                        needToRecreate = true;\r\n                        break;\r\n                    }\r\n\r\n                    if (submesh.verticesStart + submesh.verticesCount > totalVertices) {\r\n                        needToRecreate = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!needToRecreate) {\r\n                return this.subMeshes[0];\r\n            }\r\n        }\r\n\r\n        this.releaseSubMeshes();\r\n        return new SubMesh(0, 0, totalVertices, 0, this.getTotalIndices() || (this.isUnIndexed ? totalVertices : 0), this); // getTotalIndices() can be zero if the mesh is unindexed\r\n    }\r\n\r\n    /**\r\n     * This function will subdivide the mesh into multiple submeshes\r\n     * @param count defines the expected number of submeshes\r\n     */\r\n    public subdivide(count: number): void {\r\n        if (count < 1) {\r\n            return;\r\n        }\r\n\r\n        const totalIndices = this.getTotalIndices();\r\n        let subdivisionSize = (totalIndices / count) | 0;\r\n        let offset = 0;\r\n\r\n        // Ensure that subdivisionSize is a multiple of 3\r\n        while (subdivisionSize % 3 !== 0) {\r\n            subdivisionSize++;\r\n        }\r\n\r\n        this.releaseSubMeshes();\r\n        for (let index = 0; index < count; index++) {\r\n            if (offset >= totalIndices) {\r\n                break;\r\n            }\r\n\r\n            SubMesh.CreateFromIndices(0, offset, index === count - 1 ? totalIndices - offset : subdivisionSize, this, undefined, false);\r\n\r\n            offset += subdivisionSize;\r\n        }\r\n\r\n        this.refreshBoundingInfo();\r\n        this.synchronizeInstances();\r\n    }\r\n\r\n    /**\r\n     * Copy a FloatArray into a specific associated vertex buffer\r\n     * @param kind defines which buffer to write to (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param data defines the data source\r\n     * @param updatable defines if the updated vertex buffer must be flagged as updatable\r\n     * @param stride defines the data stride size (can be null)\r\n     * @returns the current mesh\r\n     */\r\n    public override setVerticesData(kind: string, data: FloatArray, updatable: boolean = false, stride?: number): AbstractMesh {\r\n        if (!this._geometry) {\r\n            const vertexData = new VertexData();\r\n            vertexData.set(data, kind);\r\n\r\n            const scene = this.getScene();\r\n\r\n            new Geometry(Geometry.RandomId(), scene, vertexData, updatable, this);\r\n        } else {\r\n            this._geometry.setVerticesData(kind, data, updatable, stride);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Delete a vertex buffer associated with this mesh\r\n     * @param kind defines which buffer to delete (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     */\r\n    public removeVerticesData(kind: string) {\r\n        if (!this._geometry) {\r\n            return;\r\n        }\r\n\r\n        this._geometry.removeVerticesData(kind);\r\n    }\r\n\r\n    /**\r\n     * Flags an associated vertex buffer as updatable\r\n     * @param kind defines which buffer to use (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param updatable defines if the updated vertex buffer must be flagged as updatable\r\n     */\r\n    public markVerticesDataAsUpdatable(kind: string, updatable = true) {\r\n        const vb = this.getVertexBuffer(kind);\r\n\r\n        if (!vb || vb.isUpdatable() === updatable) {\r\n            return;\r\n        }\r\n\r\n        this.setVerticesData(kind, <FloatArray>this.getVerticesData(kind), updatable);\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh global Vertex Buffer\r\n     * @param buffer defines the buffer to use\r\n     * @param disposeExistingBuffer disposes the existing buffer, if any (default: true)\r\n     * @returns the current mesh\r\n     */\r\n    public setVerticesBuffer(buffer: VertexBuffer, disposeExistingBuffer = true): Mesh {\r\n        if (!this._geometry) {\r\n            this._geometry = Geometry.CreateGeometryForMesh(this);\r\n        }\r\n\r\n        this._geometry.setVerticesBuffer(buffer, null, disposeExistingBuffer);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update a specific associated vertex buffer\r\n     * @param kind defines which buffer to write to (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @param data defines the data source\r\n     * @param updateExtends defines if extends info of the mesh must be updated (can be null). This is mostly useful for \"position\" kind\r\n     * @param makeItUnique defines if the geometry associated with the mesh must be cloned to make the change only for this mesh (and not all meshes associated with the same geometry)\r\n     * @returns the current mesh\r\n     */\r\n    public override updateVerticesData(kind: string, data: FloatArray, updateExtends?: boolean, makeItUnique?: boolean): AbstractMesh {\r\n        if (!this._geometry) {\r\n            return this;\r\n        }\r\n        if (!makeItUnique) {\r\n            this._geometry.updateVerticesData(kind, data, updateExtends);\r\n        } else {\r\n            this.makeGeometryUnique();\r\n            this.updateVerticesData(kind, data, updateExtends, false);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * This method updates the vertex positions of an updatable mesh according to the `positionFunction` returned values.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph#other-shapes-updatemeshpositions\r\n     * @param positionFunction is a simple JS function what is passed the mesh `positions` array. It doesn't need to return anything\r\n     * @param computeNormals is a boolean (default true) to enable/disable the mesh normal recomputation after the vertex position update\r\n     * @returns the current mesh\r\n     */\r\n    public updateMeshPositions(positionFunction: (data: FloatArray) => void, computeNormals: boolean = true): Mesh {\r\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\r\n        if (!positions) {\r\n            return this;\r\n        }\r\n\r\n        positionFunction(positions);\r\n        this.updateVerticesData(VertexBuffer.PositionKind, positions, false, false);\r\n\r\n        if (computeNormals) {\r\n            const indices = this.getIndices();\r\n            const normals = this.getVerticesData(VertexBuffer.NormalKind);\r\n\r\n            if (!normals) {\r\n                return this;\r\n            }\r\n\r\n            VertexData.ComputeNormals(positions, indices, normals);\r\n            this.updateVerticesData(VertexBuffer.NormalKind, normals, false, false);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a un-shared specific occurence of the geometry for the mesh.\r\n     * @returns the current mesh\r\n     */\r\n    public makeGeometryUnique(): Mesh {\r\n        if (!this._geometry) {\r\n            return this;\r\n        }\r\n\r\n        if (this._geometry.meshes.length === 1) {\r\n            return this;\r\n        }\r\n\r\n        const oldGeometry = this._geometry;\r\n        const geometry = this._geometry.copy(Geometry.RandomId());\r\n        oldGeometry.releaseForMesh(this, true);\r\n        geometry.applyToMesh(this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the index buffer of this mesh.\r\n     * @param indexBuffer Defines the index buffer to use for this mesh\r\n     * @param totalVertices Defines the total number of vertices used by the buffer\r\n     * @param totalIndices Defines the total number of indices in the index buffer\r\n     * @param is32Bits Defines if the indices are 32 bits. If null (default), the value is guessed from the number of vertices\r\n     */\r\n    public setIndexBuffer(indexBuffer: DataBuffer, totalVertices: number, totalIndices: number, is32Bits: Nullable<boolean> = null): void {\r\n        let geometry = this._geometry;\r\n        if (!geometry) {\r\n            geometry = new Geometry(Geometry.RandomId(), this.getScene(), undefined, undefined, this);\r\n        }\r\n        geometry.setIndexBuffer(indexBuffer, totalVertices, totalIndices, is32Bits);\r\n    }\r\n\r\n    /**\r\n     * Set the index buffer of this mesh\r\n     * @param indices defines the source data\r\n     * @param totalVertices defines the total number of vertices referenced by this index data (can be null)\r\n     * @param updatable defines if the updated index buffer must be flagged as updatable (default is false)\r\n     * @param dontForceSubMeshRecreation defines a boolean indicating that we don't want to force the recreation of sub-meshes if we don't have to (false by default)\r\n     * @returns the current mesh\r\n     */\r\n    public override setIndices(indices: IndicesArray, totalVertices: Nullable<number> = null, updatable: boolean = false, dontForceSubMeshRecreation = false): AbstractMesh {\r\n        if (!this._geometry) {\r\n            const vertexData = new VertexData();\r\n            vertexData.indices = indices;\r\n\r\n            const scene = this.getScene();\r\n\r\n            new Geometry(Geometry.RandomId(), scene, vertexData, updatable, this);\r\n        } else {\r\n            this._geometry.setIndices(indices, totalVertices, updatable, dontForceSubMeshRecreation);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update the current index buffer\r\n     * @param indices defines the source data\r\n     * @param offset defines the offset in the index buffer where to store the new data (can be null)\r\n     * @param gpuMemoryOnly defines a boolean indicating that only the GPU memory must be updated leaving the CPU version of the indices unchanged (false by default)\r\n     * @returns the current mesh\r\n     */\r\n    public override updateIndices(indices: IndicesArray, offset?: number, gpuMemoryOnly = false): AbstractMesh {\r\n        if (!this._geometry) {\r\n            return this;\r\n        }\r\n\r\n        this._geometry.updateIndices(indices, offset, gpuMemoryOnly);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Invert the geometry to move from a right handed system to a left handed one.\r\n     * @returns the current mesh\r\n     */\r\n    public toLeftHanded(): Mesh {\r\n        if (!this._geometry) {\r\n            return this;\r\n        }\r\n        this._geometry.toLeftHanded();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _bind(subMesh: SubMesh, effect: Effect, fillMode: number, allowInstancedRendering = true): Mesh {\r\n        if (!this._geometry) {\r\n            return this;\r\n        }\r\n\r\n        const engine = this.getScene().getEngine();\r\n\r\n        // Wireframe\r\n        let indexToBind;\r\n        if (this._unIndexed) {\r\n            switch (this._getRenderingFillMode(fillMode)) {\r\n                case Material.WireFrameFillMode:\r\n                    indexToBind = subMesh._getLinesIndexBuffer(<IndicesArray>this.getIndices(), engine);\r\n                    break;\r\n                default:\r\n                    indexToBind = null;\r\n                    break;\r\n            }\r\n        } else {\r\n            switch (this._getRenderingFillMode(fillMode)) {\r\n                case Material.PointFillMode:\r\n                    indexToBind = null;\r\n                    break;\r\n                case Material.WireFrameFillMode:\r\n                    indexToBind = subMesh._getLinesIndexBuffer(<IndicesArray>this.getIndices(), engine);\r\n                    break;\r\n                default:\r\n                case Material.TriangleFillMode:\r\n                    indexToBind = this._geometry.getIndexBuffer();\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return this._bindDirect(effect, indexToBind, allowInstancedRendering);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _bindDirect(effect: Effect, indexToBind: Nullable<DataBuffer>, allowInstancedRendering = true): Mesh {\r\n        if (!this._geometry) {\r\n            return this;\r\n        }\r\n\r\n        // Morph targets\r\n        if (this.morphTargetManager && this.morphTargetManager.isUsingTextureForTargets) {\r\n            this.morphTargetManager._bind(effect);\r\n        }\r\n\r\n        // VBOs\r\n        if (!allowInstancedRendering || !this._userInstancedBuffersStorage || this.hasThinInstances) {\r\n            this._geometry._bind(effect, indexToBind);\r\n        } else {\r\n            if (\r\n                this._instanceDataStorage.engine.isWebGPU &&\r\n                this._userInstancedBuffersStorage.renderPasses &&\r\n                this._userInstancedBuffersStorage.renderPasses[this._instanceDataStorage.engine.currentRenderPassId]\r\n            ) {\r\n                const vertexBuffers = this._userInstancedBuffersStorage.renderPasses[this._instanceDataStorage.engine.currentRenderPassId];\r\n                for (const kind in vertexBuffers) {\r\n                    this._userInstancedBuffersStorage.vertexBuffers[kind] = vertexBuffers[kind];\r\n                }\r\n            }\r\n            this._geometry._bind(effect, indexToBind, this._userInstancedBuffersStorage.vertexBuffers, this._userInstancedBuffersStorage.vertexArrayObjects);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _draw(subMesh: SubMesh, fillMode: number, instancesCount?: number): Mesh {\r\n        if (!this._geometry || !this._geometry.getVertexBuffers() || (!this._unIndexed && !this._geometry.getIndexBuffer())) {\r\n            return this;\r\n        }\r\n\r\n        if (this._internalMeshDataInfo._onBeforeDrawObservable) {\r\n            this._internalMeshDataInfo._onBeforeDrawObservable.notifyObservers(this);\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n        const currentMaterialContext = engine._currentMaterialContext;\r\n        const useVertexPulling = currentMaterialContext && currentMaterialContext.useVertexPulling;\r\n\r\n        if ((this._unIndexed && fillMode !== Material.WireFrameFillMode) || fillMode == Material.PointFillMode) {\r\n            // or triangles as points\r\n            engine.drawArraysType(fillMode, subMesh.verticesStart, subMesh.verticesCount, this.forcedInstanceCount || instancesCount);\r\n        } else if (fillMode == Material.WireFrameFillMode) {\r\n            // Triangles as wireframe\r\n            engine.drawElementsType(fillMode, 0, subMesh._linesIndexCount, this.forcedInstanceCount || instancesCount);\r\n        } else if (useVertexPulling) {\r\n            // We're rendering the number of indices in the index buffer but the vertex shader is handling the data itself.\r\n            engine.drawArraysType(fillMode, subMesh.indexStart, subMesh.indexCount, this.forcedInstanceCount || instancesCount);\r\n        } else {\r\n            engine.drawElementsType(fillMode, subMesh.indexStart, subMesh.indexCount, this.forcedInstanceCount || instancesCount);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Registers for this mesh a javascript function called just before the rendering process\r\n     * @param func defines the function to call before rendering this mesh\r\n     * @returns the current mesh\r\n     */\r\n    public registerBeforeRender(func: (mesh: AbstractMesh) => void): Mesh {\r\n        this.onBeforeRenderObservable.add(func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Disposes a previously registered javascript function called before the rendering\r\n     * @param func defines the function to remove\r\n     * @returns the current mesh\r\n     */\r\n    public unregisterBeforeRender(func: (mesh: AbstractMesh) => void): Mesh {\r\n        this.onBeforeRenderObservable.removeCallback(func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Registers for this mesh a javascript function called just after the rendering is complete\r\n     * @param func defines the function to call after rendering this mesh\r\n     * @returns the current mesh\r\n     */\r\n    public registerAfterRender(func: (mesh: AbstractMesh) => void): Mesh {\r\n        this.onAfterRenderObservable.add(func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Disposes a previously registered javascript function called after the rendering.\r\n     * @param func defines the function to remove\r\n     * @returns the current mesh\r\n     */\r\n    public unregisterAfterRender(func: (mesh: AbstractMesh) => void): Mesh {\r\n        this.onAfterRenderObservable.removeCallback(func);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _getInstancesRenderList(subMeshId: number, isReplacementMode: boolean = false): _InstancesBatch {\r\n        const instanceDataStorage = this._getInstanceDataStorage();\r\n        if (this._instanceDataStorage.isFrozen) {\r\n            if (isReplacementMode) {\r\n                instanceDataStorage.batchCacheReplacementModeInFrozenMode.hardwareInstancedRendering[subMeshId] = false;\r\n                instanceDataStorage.batchCacheReplacementModeInFrozenMode.renderSelf[subMeshId] = true;\r\n                return instanceDataStorage.batchCacheReplacementModeInFrozenMode;\r\n            }\r\n            if (instanceDataStorage.previousBatch) {\r\n                return instanceDataStorage.previousBatch;\r\n            }\r\n        }\r\n        const scene = this.getScene();\r\n        const isInIntermediateRendering = scene._isInIntermediateRendering();\r\n        const onlyForInstances = isInIntermediateRendering\r\n            ? this._internalAbstractMeshDataInfo._onlyForInstancesIntermediate\r\n            : this._internalAbstractMeshDataInfo._onlyForInstances;\r\n        const batchCache = instanceDataStorage.batchCache;\r\n        batchCache.mustReturn = false;\r\n        batchCache.renderSelf[subMeshId] = isReplacementMode || (!onlyForInstances && this.isEnabled() && this.isVisible);\r\n        batchCache.visibleInstances[subMeshId] = null;\r\n\r\n        if (instanceDataStorage.visibleInstances && !isReplacementMode) {\r\n            const visibleInstances = instanceDataStorage.visibleInstances;\r\n            const currentRenderId = scene.getRenderId();\r\n            const defaultRenderId = isInIntermediateRendering ? visibleInstances.intermediateDefaultRenderId : visibleInstances.defaultRenderId;\r\n            batchCache.visibleInstances[subMeshId] = visibleInstances[currentRenderId];\r\n\r\n            if (!batchCache.visibleInstances[subMeshId] && defaultRenderId) {\r\n                batchCache.visibleInstances[subMeshId] = visibleInstances[defaultRenderId];\r\n            }\r\n        }\r\n        batchCache.hardwareInstancedRendering[subMeshId] =\r\n            !isReplacementMode &&\r\n            this._instanceDataStorage.hardwareInstancedRendering &&\r\n            batchCache.visibleInstances[subMeshId] !== null &&\r\n            batchCache.visibleInstances[subMeshId] !== undefined;\r\n        instanceDataStorage.previousBatch = batchCache;\r\n\r\n        return batchCache;\r\n    }\r\n\r\n    /**\r\n     * This method will also draw the instances if fillMode and effect are passed\r\n     * @internal\r\n     */\r\n    public _updateInstancedBuffers(subMesh: SubMesh, batch: _InstancesBatch, currentInstancesBufferSize: number, engine: AbstractEngine, fillMode?: number, effect?: Effect) {\r\n        const visibleInstances = batch.visibleInstances[subMesh._id];\r\n        const visibleInstanceCount = visibleInstances ? visibleInstances.length : 0;\r\n\r\n        const instanceStorage = batch.parent;\r\n        const instanceDataStorage = this._instanceDataStorage;\r\n        let instancesBuffer = instanceStorage.instancesBuffer;\r\n        let instancesPreviousBuffer = instanceStorage.instancesPreviousBuffer;\r\n\r\n        let offset = 0;\r\n        let instancesCount = 0;\r\n\r\n        const renderSelf = batch.renderSelf[subMesh._id];\r\n\r\n        const needUpdateBuffer =\r\n            !instancesBuffer ||\r\n            currentInstancesBufferSize !== instanceStorage.instancesBufferSize ||\r\n            (this._scene.needsPreviousWorldMatrices && !instanceStorage.instancesPreviousBuffer);\r\n\r\n        if (!this._instanceDataStorage.manualUpdate && (!instanceDataStorage.isFrozen || needUpdateBuffer)) {\r\n            const world = this.getWorldMatrix();\r\n            if (renderSelf) {\r\n                if (this._scene.needsPreviousWorldMatrices) {\r\n                    if (!instanceDataStorage.masterMeshPreviousWorldMatrix) {\r\n                        instanceDataStorage.masterMeshPreviousWorldMatrix = world.clone();\r\n                        instanceDataStorage.masterMeshPreviousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\r\n                    } else {\r\n                        instanceDataStorage.masterMeshPreviousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\r\n                        instanceDataStorage.masterMeshPreviousWorldMatrix.copyFrom(world);\r\n                    }\r\n                }\r\n                world.copyToArray(instanceStorage.instancesData, offset);\r\n                offset += 16;\r\n                instancesCount++;\r\n            }\r\n\r\n            if (visibleInstances) {\r\n                if (Mesh.INSTANCEDMESH_SORT_TRANSPARENT && this._scene.activeCamera && subMesh.getMaterial()?.needAlphaBlendingForMesh(subMesh.getRenderingMesh())) {\r\n                    const cameraPosition = this._scene.activeCamera.globalPosition;\r\n                    for (let instanceIndex = 0; instanceIndex < visibleInstances.length; instanceIndex++) {\r\n                        const instanceMesh = visibleInstances[instanceIndex];\r\n                        instanceMesh._distanceToCamera = Vector3.Distance(instanceMesh.getBoundingInfo().boundingSphere.centerWorld, cameraPosition);\r\n                    }\r\n                    visibleInstances.sort((m1, m2) => {\r\n                        return m1._distanceToCamera > m2._distanceToCamera ? -1 : m1._distanceToCamera < m2._distanceToCamera ? 1 : 0;\r\n                    });\r\n                }\r\n                for (let instanceIndex = 0; instanceIndex < visibleInstances.length; instanceIndex++) {\r\n                    const instance = visibleInstances[instanceIndex];\r\n                    const matrix = instance.getWorldMatrix();\r\n                    matrix.copyToArray(instanceStorage.instancesData, offset);\r\n\r\n                    if (this._scene.needsPreviousWorldMatrices) {\r\n                        if (!instance._previousWorldMatrix) {\r\n                            instance._previousWorldMatrix = matrix.clone();\r\n                            instance._previousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\r\n                        } else {\r\n                            instance._previousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\r\n                            instance._previousWorldMatrix.copyFrom(matrix);\r\n                        }\r\n                    }\r\n\r\n                    offset += 16;\r\n                    instancesCount++;\r\n                }\r\n            }\r\n        } else {\r\n            instancesCount = (renderSelf ? 1 : 0) + visibleInstanceCount;\r\n        }\r\n\r\n        if (needUpdateBuffer) {\r\n            if (instancesBuffer) {\r\n                instancesBuffer.dispose();\r\n            }\r\n\r\n            if (instancesPreviousBuffer) {\r\n                instancesPreviousBuffer.dispose();\r\n            }\r\n\r\n            instancesBuffer = new Buffer(engine, instanceStorage.instancesData, true, 16, false, true);\r\n            instanceStorage.instancesBuffer = instancesBuffer;\r\n            if (!this._userInstancedBuffersStorage) {\r\n                this._userInstancedBuffersStorage = {\r\n                    data: {},\r\n                    vertexBuffers: {},\r\n                    strides: {},\r\n                    sizes: {},\r\n                    vertexArrayObjects: this.getEngine().getCaps().vertexArrayObject ? {} : undefined,\r\n                };\r\n            }\r\n\r\n            let vertexAndArrayObjectBuffers;\r\n            if (this._instanceDataStorage.engine.isWebGPU) {\r\n                if (!this._userInstancedBuffersStorage.renderPasses) {\r\n                    this._userInstancedBuffersStorage.renderPasses = {};\r\n                }\r\n\r\n                const currentRenderPassId = this._instanceDataStorage.engine.currentRenderPassId;\r\n                vertexAndArrayObjectBuffers = this._userInstancedBuffersStorage.renderPasses[currentRenderPassId];\r\n                if (!vertexAndArrayObjectBuffers) {\r\n                    this._userInstancedBuffersStorage.renderPasses[currentRenderPassId] = vertexAndArrayObjectBuffers = {};\r\n                }\r\n            } else {\r\n                vertexAndArrayObjectBuffers = this._userInstancedBuffersStorage.vertexBuffers;\r\n            }\r\n\r\n            vertexAndArrayObjectBuffers[\"world0\"] = instancesBuffer.createVertexBuffer(\"world0\", 0, 4);\r\n            vertexAndArrayObjectBuffers[\"world1\"] = instancesBuffer.createVertexBuffer(\"world1\", 4, 4);\r\n            vertexAndArrayObjectBuffers[\"world2\"] = instancesBuffer.createVertexBuffer(\"world2\", 8, 4);\r\n            vertexAndArrayObjectBuffers[\"world3\"] = instancesBuffer.createVertexBuffer(\"world3\", 12, 4);\r\n\r\n            if (this._scene.needsPreviousWorldMatrices) {\r\n                instancesPreviousBuffer = new Buffer(engine, instanceStorage.instancesPreviousData, true, 16, false, true);\r\n                instanceStorage.instancesPreviousBuffer = instancesPreviousBuffer;\r\n\r\n                vertexAndArrayObjectBuffers[\"previousWorld0\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld0\", 0, 4);\r\n                vertexAndArrayObjectBuffers[\"previousWorld1\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld1\", 4, 4);\r\n                vertexAndArrayObjectBuffers[\"previousWorld2\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld2\", 8, 4);\r\n                vertexAndArrayObjectBuffers[\"previousWorld3\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld3\", 12, 4);\r\n            }\r\n            this._invalidateInstanceVertexArrayObject();\r\n        } else {\r\n            if (!this._instanceDataStorage.isFrozen || this._instanceDataStorage.forceMatrixUpdates) {\r\n                instancesBuffer!.updateDirectly(instanceStorage.instancesData, 0, instancesCount);\r\n                if (this._scene.needsPreviousWorldMatrices && (!this._instanceDataStorage.manualUpdate || this._instanceDataStorage.previousManualUpdate)) {\r\n                    instancesPreviousBuffer!.updateDirectly(instanceStorage.instancesPreviousData, 0, instancesCount);\r\n                }\r\n            }\r\n        }\r\n\r\n        this._processInstancedBuffers(visibleInstances, renderSelf);\r\n\r\n        if (effect && fillMode !== undefined) {\r\n            // Stats\r\n            this.getScene()._activeIndices.addCount(subMesh.indexCount * instancesCount, false);\r\n\r\n            // Draw\r\n            if (engine._currentDrawContext) {\r\n                engine._currentDrawContext.useInstancing = true;\r\n            }\r\n            this._bind(subMesh, effect, fillMode);\r\n            this._draw(subMesh, fillMode, instancesCount);\r\n        }\r\n\r\n        // Write current matrices as previous matrices in case of manual update\r\n        // Default behaviour when previous matrices are not specified explicitly\r\n        // Will break if instances number/order changes\r\n        if (\r\n            this._scene.needsPreviousWorldMatrices &&\r\n            !needUpdateBuffer &&\r\n            this._instanceDataStorage.manualUpdate &&\r\n            (!this._instanceDataStorage.isFrozen || this._instanceDataStorage.forceMatrixUpdates) &&\r\n            !this._instanceDataStorage.previousManualUpdate\r\n        ) {\r\n            instancesPreviousBuffer!.updateDirectly(instanceStorage.instancesData, 0, instancesCount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _renderWithInstances(subMesh: SubMesh, fillMode: number, batch: _InstancesBatch, effect: Effect, engine: AbstractEngine): Mesh {\r\n        const visibleInstances = batch.visibleInstances[subMesh._id];\r\n        const visibleInstanceCount = visibleInstances ? visibleInstances.length : 0;\r\n\r\n        const instanceStorage = batch.parent;\r\n        const currentInstancesBufferSize = instanceStorage.instancesBufferSize;\r\n        const matricesCount = visibleInstanceCount + 1;\r\n        const bufferSize = matricesCount * 16 * 4;\r\n\r\n        while (instanceStorage.instancesBufferSize < bufferSize) {\r\n            instanceStorage.instancesBufferSize *= 2;\r\n        }\r\n\r\n        if (!instanceStorage.instancesData || currentInstancesBufferSize != instanceStorage.instancesBufferSize) {\r\n            instanceStorage.instancesData = new Float32Array(instanceStorage.instancesBufferSize / 4);\r\n        }\r\n        if ((this._scene.needsPreviousWorldMatrices && !instanceStorage.instancesPreviousData) || currentInstancesBufferSize != instanceStorage.instancesBufferSize) {\r\n            instanceStorage.instancesPreviousData = new Float32Array(instanceStorage.instancesBufferSize / 4);\r\n        }\r\n\r\n        this._updateInstancedBuffers(subMesh, batch, currentInstancesBufferSize, engine, fillMode, effect);\r\n\r\n        engine.unbindInstanceAttributes();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _renderWithThinInstances(subMesh: SubMesh, fillMode: number, effect: Effect, engine: AbstractEngine) {\r\n        // Stats\r\n        const instancesCount = this._thinInstanceDataStorage?.instancesCount ?? 0;\r\n\r\n        this.getScene()._activeIndices.addCount(subMesh.indexCount * instancesCount, false);\r\n\r\n        // Draw\r\n        if (engine._currentDrawContext) {\r\n            engine._currentDrawContext.useInstancing = true;\r\n        }\r\n        this._bind(subMesh, effect, fillMode);\r\n        this._draw(subMesh, fillMode, instancesCount);\r\n\r\n        // Write current matrices as previous matrices\r\n        // Default behaviour when previous matrices are not specified explicitly\r\n        // Will break if instances number/order changes\r\n        if (this._scene.needsPreviousWorldMatrices && !this._thinInstanceDataStorage.previousMatrixData && this._thinInstanceDataStorage.matrixData) {\r\n            if (!this._thinInstanceDataStorage.previousMatrixBuffer) {\r\n                this._thinInstanceDataStorage.previousMatrixBuffer = this._thinInstanceCreateMatrixBuffer(\"previousWorld\", this._thinInstanceDataStorage.matrixData, false);\r\n            } else {\r\n                this._thinInstanceDataStorage.previousMatrixBuffer.updateDirectly(this._thinInstanceDataStorage.matrixData, 0, instancesCount);\r\n            }\r\n        }\r\n\r\n        engine.unbindInstanceAttributes();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public _processInstancedBuffers(visibleInstances: Nullable<InstancedMesh[]>, renderSelf: boolean) {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _processRendering(\r\n        renderingMesh: AbstractMesh,\r\n        subMesh: SubMesh,\r\n        effect: Effect,\r\n        fillMode: number,\r\n        batch: _InstancesBatch,\r\n        hardwareInstancedRendering: boolean,\r\n        onBeforeDraw: (isInstance: boolean, world: Matrix, effectiveMaterial?: Material) => void,\r\n        effectiveMaterial?: Material\r\n    ): Mesh {\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n        fillMode = this._getRenderingFillMode(fillMode);\r\n\r\n        if (hardwareInstancedRendering && subMesh.getRenderingMesh().hasThinInstances) {\r\n            this._renderWithThinInstances(subMesh, fillMode, effect, engine);\r\n            return this;\r\n        }\r\n\r\n        if (hardwareInstancedRendering) {\r\n            this._renderWithInstances(subMesh, fillMode, batch, effect, engine);\r\n        } else {\r\n            if (engine._currentDrawContext) {\r\n                engine._currentDrawContext.useInstancing = false;\r\n            }\r\n\r\n            let instanceCount = 0;\r\n            if (batch.renderSelf[subMesh._id]) {\r\n                // Draw\r\n                if (onBeforeDraw) {\r\n                    onBeforeDraw(false, renderingMesh.getWorldMatrix(), effectiveMaterial);\r\n                }\r\n                instanceCount++;\r\n\r\n                this._draw(subMesh, fillMode, this._instanceDataStorage.overridenInstanceCount);\r\n            }\r\n\r\n            const visibleInstancesForSubMesh = batch.visibleInstances[subMesh._id];\r\n\r\n            if (visibleInstancesForSubMesh) {\r\n                const visibleInstanceCount = visibleInstancesForSubMesh.length;\r\n                instanceCount += visibleInstanceCount;\r\n\r\n                // Stats\r\n                for (let instanceIndex = 0; instanceIndex < visibleInstanceCount; instanceIndex++) {\r\n                    const instance = visibleInstancesForSubMesh[instanceIndex];\r\n\r\n                    // World\r\n                    const world = instance.getWorldMatrix();\r\n                    if (onBeforeDraw) {\r\n                        onBeforeDraw(true, world, effectiveMaterial);\r\n                    }\r\n                    // Draw\r\n                    this._draw(subMesh, fillMode);\r\n                }\r\n            }\r\n\r\n            // Stats\r\n            scene._activeIndices.addCount(subMesh.indexCount * instanceCount, false);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _rebuild(dispose = false): void {\r\n        for (const renderPassId in this._instanceDataStorage.renderPasses) {\r\n            const instanceDataStorage = this._instanceDataStorage.renderPasses[renderPassId];\r\n            if (instanceDataStorage.instancesBuffer) {\r\n                // Dispose instance buffer to be recreated in _renderWithInstances when rendered\r\n                if (dispose) {\r\n                    instanceDataStorage.instancesBuffer.dispose();\r\n                }\r\n                instanceDataStorage.instancesBuffer = null;\r\n            }\r\n        }\r\n        if (this._userInstancedBuffersStorage) {\r\n            for (const kind in this._userInstancedBuffersStorage.vertexBuffers) {\r\n                const buffer = this._userInstancedBuffersStorage.vertexBuffers[kind];\r\n                if (buffer) {\r\n                    // Dispose instance buffer to be recreated in _renderWithInstances when rendered\r\n                    if (dispose) {\r\n                        buffer.dispose();\r\n                    }\r\n                    this._userInstancedBuffersStorage.vertexBuffers[kind] = null;\r\n                }\r\n            }\r\n            if (this._userInstancedBuffersStorage.vertexArrayObjects) {\r\n                this._userInstancedBuffersStorage.vertexArrayObjects = {};\r\n            }\r\n        }\r\n        this._internalMeshDataInfo._effectiveMaterial = null;\r\n        super._rebuild(dispose);\r\n    }\r\n\r\n    /** @internal */\r\n    public override _freeze() {\r\n        if (!this.subMeshes) {\r\n            return;\r\n        }\r\n\r\n        // Prepare batches\r\n        for (let index = 0; index < this.subMeshes.length; index++) {\r\n            this._getInstancesRenderList(index);\r\n        }\r\n\r\n        this._internalMeshDataInfo._effectiveMaterial = null;\r\n        this._instanceDataStorage.isFrozen = true;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _unFreeze() {\r\n        this._instanceDataStorage.isFrozen = false;\r\n        for (const renderPassId in this._instanceDataStorage.renderPasses) {\r\n            const instanceDataStorage = this._instanceDataStorage.renderPasses[renderPassId];\r\n            instanceDataStorage.previousBatch = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Triggers the draw call for the mesh (or a submesh), for a specific render pass id\r\n     * @param renderPassId defines the render pass id to use to draw the mesh / submesh. If not provided, use the current renderPassId of the engine.\r\n     * @param enableAlphaMode defines if alpha mode can be changed (default: false)\r\n     * @param effectiveMeshReplacement defines an optional mesh used to provide info for the rendering (default: undefined)\r\n     * @param subMesh defines the subMesh to render. If not provided, draw all mesh submeshes (default: undefined)\r\n     * @param checkFrustumCulling defines if frustum culling must be checked (default: true). If you know the mesh is in the frustum (or if you don't care!), you can pass false to optimize.\r\n     * @returns the current mesh\r\n     */\r\n    public renderWithRenderPassId(renderPassId?: number, enableAlphaMode?: boolean, effectiveMeshReplacement?: AbstractMesh, subMesh?: SubMesh, checkFrustumCulling = true) {\r\n        const engine = this._scene.getEngine();\r\n        const currentRenderPassId = engine.currentRenderPassId;\r\n\r\n        if (renderPassId !== undefined) {\r\n            engine.currentRenderPassId = renderPassId;\r\n        }\r\n\r\n        if (subMesh) {\r\n            if (!checkFrustumCulling || (checkFrustumCulling && subMesh.isInFrustum(this._scene._frustumPlanes))) {\r\n                this.render(subMesh, !!enableAlphaMode, effectiveMeshReplacement);\r\n            }\r\n        } else {\r\n            for (let s = 0; s < this.subMeshes.length; s++) {\r\n                const subMesh = this.subMeshes[s];\r\n                if (!checkFrustumCulling || (checkFrustumCulling && subMesh.isInFrustum(this._scene._frustumPlanes))) {\r\n                    this.render(subMesh, !!enableAlphaMode, effectiveMeshReplacement);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (renderPassId !== undefined) {\r\n            engine.currentRenderPassId = currentRenderPassId;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Render a complete mesh by going through all submeshes\r\n     * @returns the current mesh\r\n     * @see [simple test](https://playground.babylonjs.com/#5SPY1V#2)\r\n     * @see [perf test](https://playground.babylonjs.com/#5SPY1V#5)\r\n     */\r\n    public directRender(): Mesh {\r\n        if (!this.subMeshes) {\r\n            return this;\r\n        }\r\n\r\n        for (const submesh of this.subMeshes) {\r\n            this.render(submesh, false);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Triggers the draw call for the mesh. Usually, you don't need to call this method by your own because the mesh rendering is handled by the scene rendering manager\r\n     * @param subMesh defines the subMesh to render\r\n     * @param enableAlphaMode defines if alpha mode can be changed\r\n     * @param effectiveMeshReplacement defines an optional mesh used to provide info for the rendering\r\n     * @returns the current mesh\r\n     */\r\n    public render(subMesh: SubMesh, enableAlphaMode: boolean, effectiveMeshReplacement?: AbstractMesh): Mesh {\r\n        const scene = this.getScene();\r\n\r\n        if (this._internalAbstractMeshDataInfo._isActiveIntermediate) {\r\n            this._internalAbstractMeshDataInfo._isActiveIntermediate = false;\r\n        } else {\r\n            this._internalAbstractMeshDataInfo._isActive = false;\r\n        }\r\n\r\n        const numActiveCameras = scene.activeCameras?.length ?? 0;\r\n        const canCheckOcclusionQuery = (numActiveCameras > 1 && scene.activeCamera === scene.activeCameras![0]) || numActiveCameras <= 1;\r\n\r\n        if (canCheckOcclusionQuery && this._checkOcclusionQuery() && !this._occlusionDataStorage.forceRenderingWhenOccluded) {\r\n            return this;\r\n        }\r\n\r\n        // Managing instances\r\n        const batch = this._getInstancesRenderList(subMesh._id, !!effectiveMeshReplacement);\r\n\r\n        if (batch.mustReturn) {\r\n            return this;\r\n        }\r\n\r\n        // Checking geometry state\r\n        if (!this._geometry || !this._geometry.getVertexBuffers() || (!this._unIndexed && !this._geometry.getIndexBuffer())) {\r\n            return this;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n        let oldCameraMaxZ = 0;\r\n        let oldCamera: Nullable<Camera> = null;\r\n        if (this.ignoreCameraMaxZ && scene.activeCamera && !scene._isInIntermediateRendering()) {\r\n            oldCameraMaxZ = scene.activeCamera.maxZ;\r\n            oldCamera = scene.activeCamera;\r\n            scene.activeCamera.maxZ = 0;\r\n            scene.updateTransformMatrix(true);\r\n        }\r\n\r\n        if (this._internalMeshDataInfo._onBeforeRenderObservable) {\r\n            this._internalMeshDataInfo._onBeforeRenderObservable.notifyObservers(this);\r\n        }\r\n\r\n        const renderingMesh = subMesh.getRenderingMesh();\r\n        const hardwareInstancedRendering =\r\n            batch.hardwareInstancedRendering[subMesh._id] ||\r\n            renderingMesh.hasThinInstances ||\r\n            (!!this._userInstancedBuffersStorage && !subMesh.getMesh()._internalAbstractMeshDataInfo._actAsRegularMesh);\r\n        const instanceDataStorage = this._instanceDataStorage;\r\n\r\n        const material = subMesh.getMaterial();\r\n        if (!material) {\r\n            if (oldCamera) {\r\n                oldCamera.maxZ = oldCameraMaxZ;\r\n                scene.updateTransformMatrix(true);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        // Material\r\n        if (!instanceDataStorage.isFrozen || !this._internalMeshDataInfo._effectiveMaterial || this._internalMeshDataInfo._effectiveMaterial !== material) {\r\n            if (material._storeEffectOnSubMeshes) {\r\n                if (!material.isReadyForSubMesh(this, subMesh, hardwareInstancedRendering)) {\r\n                    if (oldCamera) {\r\n                        oldCamera.maxZ = oldCameraMaxZ;\r\n                        scene.updateTransformMatrix(true);\r\n                    }\r\n                    return this;\r\n                }\r\n            } else if (!material.isReady(this, hardwareInstancedRendering)) {\r\n                if (oldCamera) {\r\n                    oldCamera.maxZ = oldCameraMaxZ;\r\n                    scene.updateTransformMatrix(true);\r\n                }\r\n                return this;\r\n            }\r\n\r\n            this._internalMeshDataInfo._effectiveMaterial = material;\r\n        } else if (\r\n            (material._storeEffectOnSubMeshes && !subMesh._drawWrapper?._wasPreviouslyReady) ||\r\n            (!material._storeEffectOnSubMeshes && !material._getDrawWrapper()._wasPreviouslyReady)\r\n        ) {\r\n            if (oldCamera) {\r\n                oldCamera.maxZ = oldCameraMaxZ;\r\n                scene.updateTransformMatrix(true);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        // Alpha mode\r\n        if (enableAlphaMode) {\r\n            const effectiveMaterial = this._internalMeshDataInfo._effectiveMaterial;\r\n            if (effectiveMaterial.alphaModes.length === 1) {\r\n                engine.setAlphaMode(effectiveMaterial.alphaMode);\r\n            } else {\r\n                for (let i = 0; i < effectiveMaterial.alphaModes.length; i++) {\r\n                    const alphaMode = effectiveMaterial.alphaModes[i];\r\n                    engine.setAlphaMode(alphaMode !== undefined ? alphaMode : Constants.ALPHA_COMBINE, false, i);\r\n                }\r\n            }\r\n        }\r\n\r\n        let drawWrapper: Nullable<DrawWrapper>;\r\n        if (this._internalMeshDataInfo._effectiveMaterial._storeEffectOnSubMeshes) {\r\n            drawWrapper = subMesh._drawWrapper;\r\n        } else {\r\n            drawWrapper = this._internalMeshDataInfo._effectiveMaterial._getDrawWrapper();\r\n        }\r\n\r\n        const effect = drawWrapper?.effect ?? null;\r\n\r\n        for (const step of scene._beforeRenderingMeshStage) {\r\n            step.action(this, subMesh, batch, effect);\r\n        }\r\n\r\n        if (!drawWrapper || !effect) {\r\n            if (oldCamera) {\r\n                oldCamera.maxZ = oldCameraMaxZ;\r\n                scene.updateTransformMatrix(true);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        const effectiveMesh = effectiveMeshReplacement || this;\r\n\r\n        let sideOrientation: Nullable<number>;\r\n\r\n        if (\r\n            !instanceDataStorage.isFrozen &&\r\n            (this._internalMeshDataInfo._effectiveMaterial.backFaceCulling ||\r\n                this._internalMeshDataInfo._effectiveMaterial.sideOrientation !== null ||\r\n                (this._internalMeshDataInfo._effectiveMaterial as any).twoSidedLighting)\r\n        ) {\r\n            // Note: if two sided lighting is enabled, we need to ensure that the normal will point in the right direction even if the determinant of the world matrix is negative\r\n            const mainDeterminant = effectiveMesh._getWorldMatrixDeterminant();\r\n            sideOrientation = this._internalMeshDataInfo._effectiveMaterial._getEffectiveOrientation(this);\r\n\r\n            if (mainDeterminant < 0) {\r\n                sideOrientation = sideOrientation === Material.ClockWiseSideOrientation ? Material.CounterClockWiseSideOrientation : Material.ClockWiseSideOrientation;\r\n            }\r\n            this._internalMeshDataInfo._effectiveSideOrientation = sideOrientation!;\r\n        } else {\r\n            sideOrientation = this._internalMeshDataInfo._effectiveSideOrientation;\r\n        }\r\n\r\n        const reverse = this._internalMeshDataInfo._effectiveMaterial._preBind(drawWrapper, this._internalMeshDataInfo._effectiveSideOrientation);\r\n\r\n        if (this._internalMeshDataInfo._effectiveMaterial.forceDepthWrite) {\r\n            engine.setDepthWrite(true);\r\n        }\r\n\r\n        // Bind\r\n        const effectiveMaterial = this._internalMeshDataInfo._effectiveMaterial;\r\n        const fillMode = effectiveMaterial.fillMode;\r\n\r\n        if (this._internalMeshDataInfo._onBeforeBindObservable) {\r\n            this._internalMeshDataInfo._onBeforeBindObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (!hardwareInstancedRendering) {\r\n            // Binding will be done later because we need to add more info to the VB\r\n            this._bind(subMesh, effect, fillMode, false);\r\n        }\r\n\r\n        const world = effectiveMesh.getWorldMatrix();\r\n        if (effectiveMaterial._storeEffectOnSubMeshes) {\r\n            effectiveMaterial.bindForSubMesh(world, this, subMesh);\r\n        } else {\r\n            effectiveMaterial.bind(world, this);\r\n        }\r\n\r\n        if (!effectiveMaterial.backFaceCulling && effectiveMaterial.separateCullingPass) {\r\n            engine.setState(true, effectiveMaterial.zOffset, false, !reverse, effectiveMaterial.cullBackFaces, effectiveMaterial.stencil, effectiveMaterial.zOffsetUnits);\r\n            this._processRendering(this, subMesh, effect, fillMode, batch, hardwareInstancedRendering, this._onBeforeDraw, this._internalMeshDataInfo._effectiveMaterial);\r\n            engine.setState(true, effectiveMaterial.zOffset, false, reverse, effectiveMaterial.cullBackFaces, effectiveMaterial.stencil, effectiveMaterial.zOffsetUnits);\r\n\r\n            if (this._internalMeshDataInfo._onBetweenPassObservable) {\r\n                this._internalMeshDataInfo._onBetweenPassObservable.notifyObservers(subMesh);\r\n            }\r\n        }\r\n\r\n        // Draw\r\n        this._processRendering(this, subMesh, effect, fillMode, batch, hardwareInstancedRendering, this._onBeforeDraw, this._internalMeshDataInfo._effectiveMaterial);\r\n\r\n        // Unbind\r\n        this._internalMeshDataInfo._effectiveMaterial.unbind();\r\n\r\n        for (const step of scene._afterRenderingMeshStage) {\r\n            step.action(this, subMesh, batch, effect);\r\n        }\r\n\r\n        if (this._internalMeshDataInfo._onAfterRenderObservable) {\r\n            this._internalMeshDataInfo._onAfterRenderObservable.notifyObservers(this);\r\n        }\r\n\r\n        if (oldCamera) {\r\n            oldCamera.maxZ = oldCameraMaxZ;\r\n            scene.updateTransformMatrix(true);\r\n        }\r\n\r\n        if (scene.performancePriority === ScenePerformancePriority.Aggressive && !instanceDataStorage.isFrozen) {\r\n            this._freeze();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private _onBeforeDraw: (isInstance: boolean, world: Matrix, effectiveMaterial?: Material) => void;\r\n\r\n    /**\r\n     *   Renormalize the mesh and patch it up if there are no weights\r\n     *   Similar to normalization by adding the weights compute the reciprocal and multiply all elements, this wil ensure that everything adds to 1.\r\n     *   However in the case of zero weights then we set just a single influence to 1.\r\n     *   We check in the function for extra's present and if so we use the normalizeSkinWeightsWithExtras rather than the FourWeights version.\r\n     */\r\n    public cleanMatrixWeights(): void {\r\n        if (this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\r\n            if (this.isVerticesDataPresent(VertexBuffer.MatricesWeightsExtraKind)) {\r\n                this._normalizeSkinWeightsAndExtra();\r\n            } else {\r\n                this._normalizeSkinFourWeights();\r\n            }\r\n        }\r\n    }\r\n\r\n    // faster 4 weight version.\r\n    private _normalizeSkinFourWeights(): void {\r\n        const matricesWeights = <FloatArray>this.getVerticesData(VertexBuffer.MatricesWeightsKind);\r\n        const numWeights = matricesWeights.length;\r\n\r\n        for (let a = 0; a < numWeights; a += 4) {\r\n            // accumulate weights\r\n            const t = matricesWeights[a] + matricesWeights[a + 1] + matricesWeights[a + 2] + matricesWeights[a + 3];\r\n            // check for invalid weight and just set it to 1.\r\n            if (t === 0) {\r\n                matricesWeights[a] = 1;\r\n            } else {\r\n                // renormalize so everything adds to 1 use reciprocal\r\n                const recip = 1 / t;\r\n                matricesWeights[a] *= recip;\r\n                matricesWeights[a + 1] *= recip;\r\n                matricesWeights[a + 2] *= recip;\r\n                matricesWeights[a + 3] *= recip;\r\n            }\r\n        }\r\n        this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeights);\r\n    }\r\n    // handle special case of extra verts.  (in theory gltf can handle 12 influences)\r\n    private _normalizeSkinWeightsAndExtra(): void {\r\n        const matricesWeightsExtra = <FloatArray>this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind);\r\n        const matricesWeights = <FloatArray>this.getVerticesData(VertexBuffer.MatricesWeightsKind);\r\n        const numWeights = matricesWeights.length;\r\n\r\n        for (let a = 0; a < numWeights; a += 4) {\r\n            // accumulate weights\r\n            let t = matricesWeights[a] + matricesWeights[a + 1] + matricesWeights[a + 2] + matricesWeights[a + 3];\r\n            t += matricesWeightsExtra[a] + matricesWeightsExtra[a + 1] + matricesWeightsExtra[a + 2] + matricesWeightsExtra[a + 3];\r\n            // check for invalid weight and just set it to 1.\r\n            if (t === 0) {\r\n                matricesWeights[a] = 1;\r\n            } else {\r\n                // renormalize so everything adds to 1 use reciprocal\r\n                const recip = 1 / t;\r\n                matricesWeights[a] *= recip;\r\n                matricesWeights[a + 1] *= recip;\r\n                matricesWeights[a + 2] *= recip;\r\n                matricesWeights[a + 3] *= recip;\r\n                // same goes for extras\r\n                matricesWeightsExtra[a] *= recip;\r\n                matricesWeightsExtra[a + 1] *= recip;\r\n                matricesWeightsExtra[a + 2] *= recip;\r\n                matricesWeightsExtra[a + 3] *= recip;\r\n            }\r\n        }\r\n        this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeights);\r\n        this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeightsExtra);\r\n    }\r\n\r\n    /**\r\n     * ValidateSkinning is used to determine that a mesh has valid skinning data along with skin metrics, if missing weights,\r\n     * or not normalized it is returned as invalid mesh the string can be used for console logs, or on screen messages to let\r\n     * the user know there was an issue with importing the mesh\r\n     * @returns a validation object with skinned, valid and report string\r\n     */\r\n    public validateSkinning(): { skinned: boolean; valid: boolean; report: string } {\r\n        const matricesWeightsExtra = <FloatArray>this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind);\r\n        const matricesWeights = <FloatArray>this.getVerticesData(VertexBuffer.MatricesWeightsKind);\r\n        if (matricesWeights === null || this.skeleton == null) {\r\n            return { skinned: false, valid: true, report: \"not skinned\" };\r\n        }\r\n\r\n        const numWeights = matricesWeights.length;\r\n        let numberNotSorted: number = 0;\r\n        let missingWeights: number = 0;\r\n        let maxUsedWeights: number = 0;\r\n        let numberNotNormalized: number = 0;\r\n        const numInfluences: number = matricesWeightsExtra === null ? 4 : 8;\r\n        const usedWeightCounts: number[] = [];\r\n        for (let a = 0; a <= numInfluences; a++) {\r\n            usedWeightCounts[a] = 0;\r\n        }\r\n        const toleranceEpsilon: number = 0.001;\r\n\r\n        for (let a = 0; a < numWeights; a += 4) {\r\n            let lastWeight: number = matricesWeights[a];\r\n            let t = lastWeight;\r\n            let usedWeights: number = t === 0 ? 0 : 1;\r\n\r\n            for (let b = 1; b < numInfluences; b++) {\r\n                const d = b < 4 ? matricesWeights[a + b] : matricesWeightsExtra[a + b - 4];\r\n                if (d > lastWeight) {\r\n                    numberNotSorted++;\r\n                }\r\n                if (d !== 0) {\r\n                    usedWeights++;\r\n                }\r\n                t += d;\r\n                lastWeight = d;\r\n            }\r\n            // count the buffer weights usage\r\n            usedWeightCounts[usedWeights]++;\r\n\r\n            // max influences\r\n            if (usedWeights > maxUsedWeights) {\r\n                maxUsedWeights = usedWeights;\r\n            }\r\n\r\n            // check for invalid weight and just set it to 1.\r\n            if (t === 0) {\r\n                missingWeights++;\r\n            } else {\r\n                // renormalize so everything adds to 1 use reciprocal\r\n                const recip = 1 / t;\r\n                let tolerance = 0;\r\n                for (let b = 0; b < numInfluences; b++) {\r\n                    if (b < 4) {\r\n                        tolerance += Math.abs(matricesWeights[a + b] - matricesWeights[a + b] * recip);\r\n                    } else {\r\n                        tolerance += Math.abs(matricesWeightsExtra[a + b - 4] - matricesWeightsExtra[a + b - 4] * recip);\r\n                    }\r\n                }\r\n                // arbitrary epsilon value for dictating not normalized\r\n                if (tolerance > toleranceEpsilon) {\r\n                    numberNotNormalized++;\r\n                }\r\n            }\r\n        }\r\n\r\n        // validate bone indices are in range of the skeleton\r\n        const numBones: number = this.skeleton.bones.length;\r\n        const matricesIndices = <FloatArray>this.getVerticesData(VertexBuffer.MatricesIndicesKind);\r\n        const matricesIndicesExtra = <FloatArray>this.getVerticesData(VertexBuffer.MatricesIndicesExtraKind);\r\n        let numBadBoneIndices: number = 0;\r\n        for (let a = 0; a < numWeights; a += 4) {\r\n            for (let b = 0; b < numInfluences; b++) {\r\n                const index = b < 4 ? matricesIndices[a + b] : matricesIndicesExtra[a + b - 4];\r\n                if (index >= numBones || index < 0) {\r\n                    numBadBoneIndices++;\r\n                }\r\n            }\r\n        }\r\n\r\n        // log mesh stats\r\n        const output =\r\n            \"Number of Weights = \" +\r\n            numWeights / 4 +\r\n            \"\\nMaximum influences = \" +\r\n            maxUsedWeights +\r\n            \"\\nMissing Weights = \" +\r\n            missingWeights +\r\n            \"\\nNot Sorted = \" +\r\n            numberNotSorted +\r\n            \"\\nNot Normalized = \" +\r\n            numberNotNormalized +\r\n            \"\\nWeightCounts = [\" +\r\n            usedWeightCounts +\r\n            \"]\" +\r\n            \"\\nNumber of bones = \" +\r\n            numBones +\r\n            \"\\nBad Bone Indices = \" +\r\n            numBadBoneIndices;\r\n\r\n        return { skinned: true, valid: missingWeights === 0 && numberNotNormalized === 0 && numBadBoneIndices === 0, report: output };\r\n    }\r\n\r\n    /** @internal */\r\n    public _checkDelayState(): Mesh {\r\n        const scene = this.getScene();\r\n        if (this._geometry) {\r\n            this._geometry.load(scene);\r\n        } else if (this.delayLoadState === Constants.DELAYLOADSTATE_NOTLOADED) {\r\n            this.delayLoadState = Constants.DELAYLOADSTATE_LOADING;\r\n\r\n            this._queueLoad(scene);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    private _queueLoad(scene: Scene): Mesh {\r\n        scene.addPendingData(this);\r\n\r\n        const getBinaryData = this.delayLoadingFile.indexOf(\".babylonbinarymeshdata\") !== -1;\r\n\r\n        Tools.LoadFile(\r\n            this.delayLoadingFile,\r\n            (data) => {\r\n                if (data instanceof ArrayBuffer) {\r\n                    this._delayLoadingFunction(data, this);\r\n                } else {\r\n                    this._delayLoadingFunction(JSON.parse(data), this);\r\n                }\r\n\r\n                for (const instance of this.instances) {\r\n                    instance.refreshBoundingInfo();\r\n                    instance._syncSubMeshes();\r\n                }\r\n\r\n                this.delayLoadState = Constants.DELAYLOADSTATE_LOADED;\r\n                scene.removePendingData(this);\r\n            },\r\n            () => {},\r\n            scene.offlineProvider,\r\n            getBinaryData\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns `true` if the mesh is within the frustum defined by the passed array of planes.\r\n     * A mesh is in the frustum if its bounding box intersects the frustum\r\n     * @param frustumPlanes defines the frustum to test\r\n     * @returns true if the mesh is in the frustum planes\r\n     */\r\n    public override isInFrustum(frustumPlanes: Plane[]): boolean {\r\n        if (this.delayLoadState === Constants.DELAYLOADSTATE_LOADING) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.isInFrustum(frustumPlanes)) {\r\n            return false;\r\n        }\r\n\r\n        this._checkDelayState();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh material by the material or multiMaterial `id` property\r\n     * @param id is a string identifying the material or the multiMaterial\r\n     * @returns the current mesh\r\n     */\r\n    public setMaterialById(id: string): Mesh {\r\n        const materials = this.getScene().materials;\r\n        let index: number;\r\n        for (index = materials.length - 1; index > -1; index--) {\r\n            if (materials[index].id === id) {\r\n                this.material = materials[index];\r\n                return this;\r\n            }\r\n        }\r\n\r\n        // Multi\r\n        const multiMaterials = this.getScene().multiMaterials;\r\n        for (index = multiMaterials.length - 1; index > -1; index--) {\r\n            if (multiMaterials[index].id === id) {\r\n                this.material = multiMaterials[index];\r\n                return this;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns as a new array populated with the mesh material and/or skeleton, if any.\r\n     * @returns an array of IAnimatable\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        const results: IAnimatable[] = [];\r\n\r\n        if (this.material) {\r\n            results.push(this.material);\r\n        }\r\n\r\n        if (this.skeleton) {\r\n            results.push(this.skeleton);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Modifies the mesh geometry according to the passed transformation matrix.\r\n     * This method returns nothing, but it really modifies the mesh even if it's originally not set as updatable.\r\n     * The mesh normals are modified using the same transformation.\r\n     * Note that, under the hood, this method sets a new VertexBuffer each call.\r\n     * @param transform defines the transform matrix to use\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/center_origin/bakingTransforms\r\n     * @returns the current mesh\r\n     */\r\n    public bakeTransformIntoVertices(transform: DeepImmutable<Matrix>): Mesh {\r\n        // Position\r\n        if (!this.isVerticesDataPresent(VertexBuffer.PositionKind)) {\r\n            return this;\r\n        }\r\n\r\n        const submeshes = this.subMeshes.splice(0);\r\n\r\n        this._resetPointsArrayCache();\r\n\r\n        let data = <FloatArray>this.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        const temp = Vector3.Zero();\r\n        let index: number;\r\n        for (index = 0; index < data.length; index += 3) {\r\n            Vector3.TransformCoordinatesFromFloatsToRef(data[index], data[index + 1], data[index + 2], transform, temp).toArray(data, index);\r\n        }\r\n\r\n        this.setVerticesData(VertexBuffer.PositionKind, data, (<VertexBuffer>this.getVertexBuffer(VertexBuffer.PositionKind)).isUpdatable());\r\n\r\n        // Normals\r\n        if (this.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n            data = <FloatArray>this.getVerticesData(VertexBuffer.NormalKind);\r\n            for (index = 0; index < data.length; index += 3) {\r\n                Vector3.TransformNormalFromFloatsToRef(data[index], data[index + 1], data[index + 2], transform, temp)\r\n                    .normalize()\r\n                    .toArray(data, index);\r\n            }\r\n            this.setVerticesData(VertexBuffer.NormalKind, data, (<VertexBuffer>this.getVertexBuffer(VertexBuffer.NormalKind)).isUpdatable());\r\n        }\r\n\r\n        // Tangents\r\n        if (this.isVerticesDataPresent(VertexBuffer.TangentKind)) {\r\n            data = <FloatArray>this.getVerticesData(VertexBuffer.TangentKind);\r\n            for (index = 0; index < data.length; index += 4) {\r\n                Vector3.TransformNormalFromFloatsToRef(data[index], data[index + 1], data[index + 2], transform, temp)\r\n                    .normalize()\r\n                    .toArray(data, index);\r\n            }\r\n            this.setVerticesData(VertexBuffer.TangentKind, data, (<VertexBuffer>this.getVertexBuffer(VertexBuffer.TangentKind)).isUpdatable());\r\n        }\r\n\r\n        // flip faces?\r\n        if (transform.determinant() < 0) {\r\n            this.flipFaces();\r\n        }\r\n\r\n        // Restore submeshes\r\n        this.releaseSubMeshes();\r\n        this.subMeshes = submeshes;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Modifies the mesh geometry according to its own current World Matrix.\r\n     * The mesh World Matrix is then reset.\r\n     * This method returns nothing but really modifies the mesh even if it's originally not set as updatable.\r\n     * Note that, under the hood, this method sets a new VertexBuffer each call.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/center_origin/bakingTransforms\r\n     * @param bakeIndependentlyOfChildren indicates whether to preserve all child nodes' World Matrix during baking\r\n     * @param forceUnique indicates whether to force the mesh geometry to be unique\r\n     * @returns the current mesh\r\n     */\r\n    public bakeCurrentTransformIntoVertices(bakeIndependentlyOfChildren: boolean = true, forceUnique: boolean = false): Mesh {\r\n        if (forceUnique) {\r\n            this.makeGeometryUnique();\r\n        }\r\n        this.bakeTransformIntoVertices(this.computeWorldMatrix(true));\r\n        this.resetLocalMatrix(bakeIndependentlyOfChildren);\r\n        return this;\r\n    }\r\n\r\n    // Cache\r\n\r\n    /** @internal */\r\n    public override get _positions(): Nullable<Vector3[]> {\r\n        return this._internalAbstractMeshDataInfo._positions || (this._geometry && this._geometry._positions) || null;\r\n    }\r\n\r\n    /** @internal */\r\n    public _resetPointsArrayCache(): Mesh {\r\n        if (this._geometry) {\r\n            this._geometry._resetPointsArrayCache();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _generatePointsArray(): boolean {\r\n        if (this._geometry) {\r\n            return this._geometry._generatePointsArray();\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Mesh object generated from the current mesh properties.\r\n     * This method must not get confused with createInstance()\r\n     * @param name is a string, the name given to the new mesh\r\n     * @param newParent can be any Node object (default `null`) or an instance of MeshCloneOptions. If the latter, doNotCloneChildren and clonePhysicsImpostor are unused.\r\n     * @param doNotCloneChildren allows/denies the recursive cloning of the original mesh children if any (default `false`)\r\n     * @param clonePhysicsImpostor allows/denies the cloning in the same time of the original mesh `body` used by the physics engine, if any (default `true`)\r\n     * @returns a new mesh\r\n     */\r\n    public override clone(name: string = \"\", newParent: Nullable<Node> | MeshCloneOptions = null, doNotCloneChildren?: boolean, clonePhysicsImpostor: boolean = true): Mesh {\r\n        if (newParent && (newParent as Node)._addToSceneRootNodes === undefined) {\r\n            const cloneOptions = newParent as MeshCloneOptions;\r\n\r\n            MeshCreationOptions.source = this;\r\n            MeshCreationOptions.doNotCloneChildren = cloneOptions.doNotCloneChildren;\r\n            MeshCreationOptions.clonePhysicsImpostor = cloneOptions.clonePhysicsImpostor;\r\n            MeshCreationOptions.cloneThinInstances = cloneOptions.cloneThinInstances;\r\n\r\n            return new Mesh(name, this.getScene(), MeshCreationOptions);\r\n        }\r\n\r\n        return new Mesh(name, this.getScene(), newParent as Nullable<Node>, this, doNotCloneChildren, clonePhysicsImpostor);\r\n    }\r\n\r\n    /**\r\n     * Releases resources associated with this mesh.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public override dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        this.morphTargetManager = null;\r\n\r\n        if (this._geometry) {\r\n            this._geometry.releaseForMesh(this, true);\r\n        }\r\n\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n\r\n        if (internalDataInfo._onBeforeDrawObservable) {\r\n            internalDataInfo._onBeforeDrawObservable.clear();\r\n        }\r\n\r\n        if (internalDataInfo._onBeforeBindObservable) {\r\n            internalDataInfo._onBeforeBindObservable.clear();\r\n        }\r\n\r\n        if (internalDataInfo._onBeforeRenderObservable) {\r\n            internalDataInfo._onBeforeRenderObservable.clear();\r\n        }\r\n\r\n        if (internalDataInfo._onAfterRenderObservable) {\r\n            internalDataInfo._onAfterRenderObservable.clear();\r\n        }\r\n\r\n        if (internalDataInfo._onBetweenPassObservable) {\r\n            internalDataInfo._onBetweenPassObservable.clear();\r\n        }\r\n\r\n        // Sources\r\n        if (this._scene.useClonedMeshMap) {\r\n            if (internalDataInfo.meshMap) {\r\n                for (const uniqueId in internalDataInfo.meshMap) {\r\n                    const mesh = internalDataInfo.meshMap[uniqueId];\r\n                    if (mesh) {\r\n                        mesh._internalMeshDataInfo._source = null;\r\n                        internalDataInfo.meshMap[uniqueId] = undefined;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (internalDataInfo._source && internalDataInfo._source._internalMeshDataInfo.meshMap) {\r\n                internalDataInfo._source._internalMeshDataInfo.meshMap[this.uniqueId] = undefined;\r\n            }\r\n        } else {\r\n            const meshes = this.getScene().meshes;\r\n            for (const abstractMesh of meshes) {\r\n                const mesh = abstractMesh as Mesh;\r\n                if (mesh._internalMeshDataInfo && mesh._internalMeshDataInfo._source && mesh._internalMeshDataInfo._source === this) {\r\n                    mesh._internalMeshDataInfo._source = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        internalDataInfo._source = null;\r\n\r\n        // Instances\r\n        this._disposeInstanceSpecificData();\r\n\r\n        // Thin instances\r\n        this._disposeThinInstanceSpecificData();\r\n\r\n        if (this._internalMeshDataInfo._checkReadinessObserver) {\r\n            this._scene.onBeforeRenderObservable.remove(this._internalMeshDataInfo._checkReadinessObserver);\r\n        }\r\n\r\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n    }\r\n\r\n    /** @internal */\r\n    public _disposeInstanceSpecificData() {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @internal */\r\n    public _disposeThinInstanceSpecificData() {\r\n        // Do nothing\r\n    }\r\n\r\n    /** @internal */\r\n    public _invalidateInstanceVertexArrayObject() {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Modifies the mesh geometry according to a displacement map.\r\n     * A displacement map is a colored image. Each pixel color value (actually a gradient computed from red, green, blue values) will give the displacement to apply to each mesh vertex.\r\n     * The mesh must be set as updatable. Its internal geometry is directly modified, no new buffer are allocated.\r\n     * @param url is a string, the URL from the image file is to be downloaded.\r\n     * @param minHeight is the lower limit of the displacement.\r\n     * @param maxHeight is the upper limit of the displacement.\r\n     * @param onSuccess is an optional Javascript function to be called just after the mesh is modified. It is passed the modified mesh and must return nothing.\r\n     * @param uvOffset is an optional vector2 used to offset UV.\r\n     * @param uvScale is an optional vector2 used to scale UV.\r\n     * @param forceUpdate defines whether or not to force an update of the generated buffers. This is useful to apply on a deserialized model for instance.\r\n     * @param onError defines a callback called when an error occurs during the processing of the request.\r\n     * @returns the Mesh.\r\n     */\r\n    public applyDisplacementMap(\r\n        url: string,\r\n        minHeight: number,\r\n        maxHeight: number,\r\n        onSuccess?: (mesh: Mesh) => void,\r\n        uvOffset?: Vector2,\r\n        uvScale?: Vector2,\r\n        forceUpdate = false,\r\n        onError?: (message?: string, exception?: any) => void\r\n    ): Mesh {\r\n        const scene = this.getScene();\r\n\r\n        const onload = (img: HTMLImageElement | ImageBitmap) => {\r\n            // Getting height map data\r\n            const heightMapWidth = img.width;\r\n            const heightMapHeight = img.height;\r\n            const canvas = this.getEngine().createCanvas(heightMapWidth, heightMapHeight);\r\n            const context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n\r\n            context.drawImage(img, 0, 0);\r\n\r\n            // Create VertexData from map data\r\n            //Cast is due to wrong definition in lib.d.ts from ts 1.3 - https://github.com/Microsoft/TypeScript/issues/949\r\n            const buffer = <Uint8Array>(<any>context.getImageData(0, 0, heightMapWidth, heightMapHeight).data);\r\n\r\n            this.applyDisplacementMapFromBuffer(buffer, heightMapWidth, heightMapHeight, minHeight, maxHeight, uvOffset, uvScale, forceUpdate);\r\n            //execute success callback, if set\r\n            if (onSuccess) {\r\n                onSuccess(this);\r\n            }\r\n        };\r\n\r\n        Tools.LoadImage(url, onload, onError ? onError : () => {}, scene.offlineProvider);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Modifies the mesh geometry according to a displacementMap buffer.\r\n     * A displacement map is a colored image. Each pixel color value (actually a gradient computed from red, green, blue values) will give the displacement to apply to each mesh vertex.\r\n     * The mesh must be set as updatable. Its internal geometry is directly modified, no new buffer are allocated.\r\n     * @param buffer is a `Uint8Array` buffer containing series of `Uint8` lower than 255, the red, green, blue and alpha values of each successive pixel.\r\n     * @param heightMapWidth is the width of the buffer image.\r\n     * @param heightMapHeight is the height of the buffer image.\r\n     * @param minHeight is the lower limit of the displacement.\r\n     * @param maxHeight is the upper limit of the displacement.\r\n     * @param uvOffset is an optional vector2 used to offset UV.\r\n     * @param uvScale is an optional vector2 used to scale UV.\r\n     * @param forceUpdate defines whether or not to force an update of the generated buffers. This is useful to apply on a deserialized model for instance.\r\n     * @returns the Mesh.\r\n     */\r\n    public applyDisplacementMapFromBuffer(\r\n        buffer: Uint8Array,\r\n        heightMapWidth: number,\r\n        heightMapHeight: number,\r\n        minHeight: number,\r\n        maxHeight: number,\r\n        uvOffset?: Vector2,\r\n        uvScale?: Vector2,\r\n        forceUpdate = false\r\n    ): Mesh {\r\n        if (!this.isVerticesDataPresent(VertexBuffer.PositionKind) || !this.isVerticesDataPresent(VertexBuffer.NormalKind) || !this.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n            Logger.Warn(\"Cannot call applyDisplacementMap: Given mesh is not complete. Position, Normal or UV are missing\");\r\n            return this;\r\n        }\r\n\r\n        const positions = <FloatArray>this.getVerticesData(VertexBuffer.PositionKind, true, true);\r\n        const normals = <FloatArray>this.getVerticesData(VertexBuffer.NormalKind);\r\n        const uvs = <number[]>this.getVerticesData(VertexBuffer.UVKind);\r\n        let position = Vector3.Zero();\r\n        const normal = Vector3.Zero();\r\n        const uv = Vector2.Zero();\r\n\r\n        uvOffset = uvOffset || Vector2.Zero();\r\n        uvScale = uvScale || new Vector2(1, 1);\r\n\r\n        for (let index = 0; index < positions.length; index += 3) {\r\n            Vector3.FromArrayToRef(positions, index, position);\r\n            Vector3.FromArrayToRef(normals, index, normal);\r\n            Vector2.FromArrayToRef(uvs, (index / 3) * 2, uv);\r\n\r\n            // Compute height\r\n            const u = (Math.abs(uv.x * uvScale.x + (uvOffset.x % 1)) * (heightMapWidth - 1)) % heightMapWidth | 0;\r\n            const v = (Math.abs(uv.y * uvScale.y + (uvOffset.y % 1)) * (heightMapHeight - 1)) % heightMapHeight | 0;\r\n\r\n            const pos = (u + v * heightMapWidth) * 4;\r\n            const r = buffer[pos] / 255.0;\r\n            const g = buffer[pos + 1] / 255.0;\r\n            const b = buffer[pos + 2] / 255.0;\r\n\r\n            const gradient = r * 0.3 + g * 0.59 + b * 0.11;\r\n\r\n            normal.normalize();\r\n            normal.scaleInPlace(minHeight + (maxHeight - minHeight) * gradient);\r\n            position = position.add(normal);\r\n\r\n            position.toArray(positions, index);\r\n        }\r\n\r\n        VertexData.ComputeNormals(positions, this.getIndices(), normals);\r\n\r\n        if (forceUpdate) {\r\n            this.setVerticesData(VertexBuffer.PositionKind, positions);\r\n            this.setVerticesData(VertexBuffer.NormalKind, normals);\r\n            this.setVerticesData(VertexBuffer.UVKind, uvs);\r\n        } else {\r\n            this.updateVerticesData(VertexBuffer.PositionKind, positions);\r\n            this.updateVerticesData(VertexBuffer.NormalKind, normals);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    private _getFlattenedNormals(indices: IndicesArray, positions: FloatArray): Float32Array {\r\n        const normals = new Float32Array(indices.length * 3);\r\n        let normalsCount = 0;\r\n\r\n        // Decide if normals should be flipped\r\n        const flipNormalGeneration =\r\n            this.sideOrientation === (this._scene.useRightHandedSystem ? Constants.MATERIAL_CounterClockWiseSideOrientation : Constants.MATERIAL_ClockWiseSideOrientation);\r\n\r\n        // Generate new normals\r\n        for (let index = 0; index < indices.length; index += 3) {\r\n            const p1 = Vector3.FromArray(positions, indices[index] * 3);\r\n            const p2 = Vector3.FromArray(positions, indices[index + 1] * 3);\r\n            const p3 = Vector3.FromArray(positions, indices[index + 2] * 3);\r\n\r\n            const p1p2 = p1.subtract(p2);\r\n            const p3p2 = p3.subtract(p2);\r\n\r\n            const normal = Vector3.Normalize(Vector3.Cross(p1p2, p3p2));\r\n            if (flipNormalGeneration) {\r\n                normal.scaleInPlace(-1);\r\n            }\r\n\r\n            // Store same normals for every vertex\r\n            for (let localIndex = 0; localIndex < 3; localIndex++) {\r\n                normals[normalsCount++] = normal.x;\r\n                normals[normalsCount++] = normal.y;\r\n                normals[normalsCount++] = normal.z;\r\n            }\r\n        }\r\n\r\n        return normals;\r\n    }\r\n\r\n    private _convertToUnIndexedMesh(flattenNormals: boolean = false): Mesh {\r\n        const kinds = this.getVerticesDataKinds().filter((kind) => !this.getVertexBuffer(kind)?.getIsInstanced());\r\n        const indices = this.getIndices()!;\r\n        const data: { [kind: string]: FloatArray } = {};\r\n\r\n        const separateVertices = (data: FloatArray, size: number): Float32Array => {\r\n            const newData = new Float32Array(indices.length * size);\r\n            let count = 0;\r\n            for (let index = 0; index < indices.length; index++) {\r\n                for (let offset = 0; offset < size; offset++) {\r\n                    newData[count++] = data[indices[index] * size + offset];\r\n                }\r\n            }\r\n            return newData;\r\n        };\r\n\r\n        // Save mesh bounding info\r\n        const meshBoundingInfo = this.getBoundingInfo();\r\n\r\n        // Save previous submeshes\r\n        const previousSubmeshes = this.geometry ? this.subMeshes.slice(0) : [];\r\n\r\n        // Cache vertex data\r\n        for (const kind of kinds) {\r\n            data[kind] = this.getVerticesData(kind)!;\r\n        }\r\n\r\n        // Update vertex data\r\n        for (const kind of kinds) {\r\n            const vertexBuffer = this.getVertexBuffer(kind)!;\r\n            const size = vertexBuffer.getSize();\r\n\r\n            if (flattenNormals && kind === VertexBuffer.NormalKind) {\r\n                const normals = this._getFlattenedNormals(indices, data[VertexBuffer.PositionKind]);\r\n                this.setVerticesData(VertexBuffer.NormalKind, normals, vertexBuffer.isUpdatable(), size);\r\n            } else {\r\n                this.setVerticesData(kind, separateVertices(data[kind], size), vertexBuffer.isUpdatable(), size);\r\n            }\r\n        }\r\n\r\n        // Update morph targets\r\n        if (this.morphTargetManager) {\r\n            for (let targetIndex = 0; targetIndex < this.morphTargetManager.numTargets; targetIndex++) {\r\n                const target = this.morphTargetManager.getTarget(targetIndex);\r\n\r\n                const positions = target.getPositions()!;\r\n                target.setPositions(separateVertices(positions, 3));\r\n\r\n                const normals = target.getNormals();\r\n                if (normals) {\r\n                    target.setNormals(flattenNormals ? this._getFlattenedNormals(indices, positions) : separateVertices(normals, 3));\r\n                }\r\n\r\n                const tangents = target.getTangents();\r\n                if (tangents) {\r\n                    target.setTangents(separateVertices(tangents, 3));\r\n                }\r\n\r\n                const uvs = target.getUVs();\r\n                if (uvs) {\r\n                    target.setUVs(separateVertices(uvs, 2));\r\n                }\r\n\r\n                const colors = target.getColors();\r\n                if (colors) {\r\n                    target.setColors(separateVertices(colors, 4));\r\n                }\r\n            }\r\n            this.morphTargetManager.synchronize();\r\n        }\r\n\r\n        // Update indices\r\n        for (let index = 0; index < indices.length; index++) {\r\n            indices[index] = index;\r\n        }\r\n        this.setIndices(indices);\r\n\r\n        this._unIndexed = true;\r\n\r\n        // Update submeshes\r\n        this.releaseSubMeshes();\r\n        for (const previousOne of previousSubmeshes) {\r\n            const boundingInfo = previousOne.getBoundingInfo();\r\n            const subMesh = SubMesh.AddToMesh(previousOne.materialIndex, previousOne.indexStart, previousOne.indexCount, previousOne.indexStart, previousOne.indexCount, this);\r\n            subMesh.setBoundingInfo(boundingInfo);\r\n        }\r\n\r\n        this.setBoundingInfo(meshBoundingInfo);\r\n\r\n        this.synchronizeInstances();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Modify the mesh to get a flat shading rendering.\r\n     * This means each mesh facet will then have its own normals. Usually new vertices are added in the mesh geometry to get this result.\r\n     * Warning : the mesh is really modified even if not set originally as updatable and, under the hood, a new VertexBuffer is allocated.\r\n     * @returns current mesh\r\n     */\r\n    public convertToFlatShadedMesh(): Mesh {\r\n        return this._convertToUnIndexedMesh(true);\r\n    }\r\n\r\n    /**\r\n     * This method removes all the mesh indices and add new vertices (duplication) in order to unfold facets into buffers.\r\n     * In other words, more vertices, no more indices and a single bigger VBO.\r\n     * The mesh is really modified even if not set originally as updatable. Under the hood, a new VertexBuffer is allocated.\r\n     * @returns current mesh\r\n     */\r\n    public convertToUnIndexedMesh(): Mesh {\r\n        return this._convertToUnIndexedMesh();\r\n    }\r\n\r\n    /**\r\n     * Inverses facet orientations.\r\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\r\n     * @param flipNormals will also inverts the normals\r\n     * @returns current mesh\r\n     */\r\n    public flipFaces(flipNormals: boolean = false): Mesh {\r\n        const vertexData = VertexData.ExtractFromMesh(this);\r\n        let i: number;\r\n        if (flipNormals && this.isVerticesDataPresent(VertexBuffer.NormalKind) && vertexData.normals) {\r\n            for (i = 0; i < vertexData.normals.length; i++) {\r\n                vertexData.normals[i] *= -1;\r\n            }\r\n            this.setVerticesData(VertexBuffer.NormalKind, vertexData.normals, this.isVertexBufferUpdatable(VertexBuffer.NormalKind));\r\n        }\r\n\r\n        if (vertexData.indices) {\r\n            let temp;\r\n            for (i = 0; i < vertexData.indices.length; i += 3) {\r\n                // reassign indices\r\n                temp = vertexData.indices[i + 1];\r\n                vertexData.indices[i + 1] = vertexData.indices[i + 2];\r\n                vertexData.indices[i + 2] = temp;\r\n            }\r\n            this.setIndices(vertexData.indices, null, this.isVertexBufferUpdatable(VertexBuffer.PositionKind), true);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Increase the number of facets and hence vertices in a mesh\r\n     * Vertex normals are interpolated from existing vertex normals\r\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\r\n     * @param numberPerEdge the number of new vertices to add to each edge of a facet, optional default 1\r\n     */\r\n    public increaseVertices(numberPerEdge: number = 1): void {\r\n        const vertexData = VertexData.ExtractFromMesh(this);\r\n        const currentIndices = vertexData.indices && !Array.isArray(vertexData.indices) && Array.from ? Array.from(vertexData.indices) : vertexData.indices;\r\n        const positions = vertexData.positions && !Array.isArray(vertexData.positions) && Array.from ? Array.from(vertexData.positions) : vertexData.positions;\r\n        const uvs = vertexData.uvs && !Array.isArray(vertexData.uvs) && Array.from ? Array.from(vertexData.uvs) : vertexData.uvs;\r\n        const normals = vertexData.normals && !Array.isArray(vertexData.normals) && Array.from ? Array.from(vertexData.normals) : vertexData.normals;\r\n\r\n        if (!currentIndices || !positions) {\r\n            Logger.Warn(\"Couldn't increase number of vertices : VertexData must contain at least indices and positions\");\r\n        } else {\r\n            vertexData.indices = currentIndices;\r\n            vertexData.positions = positions;\r\n            if (uvs) {\r\n                vertexData.uvs = uvs;\r\n            }\r\n            if (normals) {\r\n                vertexData.normals = normals;\r\n            }\r\n\r\n            const segments: number = numberPerEdge + 1; //segments per current facet edge, become sides of new facets\r\n            const tempIndices: Array<Array<number>> = [];\r\n            for (let i = 0; i < segments + 1; i++) {\r\n                tempIndices[i] = [];\r\n            }\r\n            let a: number; //vertex index of one end of a side\r\n            let b: number; //vertex index of other end of the side\r\n            const deltaPosition: Vector3 = new Vector3(0, 0, 0);\r\n            const deltaNormal: Vector3 = new Vector3(0, 0, 0);\r\n            const deltaUV: Vector2 = new Vector2(0, 0);\r\n            const indices: number[] = [];\r\n            const vertexIndex: number[] = [];\r\n            const side: Array<Array<Array<number>>> = [];\r\n            let len: number;\r\n            let positionPtr: number = positions.length;\r\n            let uvPtr: number;\r\n            if (uvs) {\r\n                uvPtr = uvs.length;\r\n            }\r\n            let normalsPtr: number;\r\n            if (normals) {\r\n                normalsPtr = normals.length;\r\n            }\r\n\r\n            for (let i = 0; i < currentIndices.length; i += 3) {\r\n                vertexIndex[0] = currentIndices[i];\r\n                vertexIndex[1] = currentIndices[i + 1];\r\n                vertexIndex[2] = currentIndices[i + 2];\r\n                for (let j = 0; j < 3; j++) {\r\n                    a = vertexIndex[j];\r\n                    b = vertexIndex[(j + 1) % 3];\r\n                    if (side[a] === undefined && side[b] === undefined) {\r\n                        side[a] = [];\r\n                        side[b] = [];\r\n                    } else {\r\n                        if (side[a] === undefined) {\r\n                            side[a] = [];\r\n                        }\r\n                        if (side[b] === undefined) {\r\n                            side[b] = [];\r\n                        }\r\n                    }\r\n                    if (side[a][b] === undefined && side[b][a] === undefined) {\r\n                        side[a][b] = [];\r\n                        deltaPosition.x = (positions[3 * b] - positions[3 * a]) / segments;\r\n                        deltaPosition.y = (positions[3 * b + 1] - positions[3 * a + 1]) / segments;\r\n                        deltaPosition.z = (positions[3 * b + 2] - positions[3 * a + 2]) / segments;\r\n                        if (normals) {\r\n                            deltaNormal.x = (normals[3 * b] - normals[3 * a]) / segments;\r\n                            deltaNormal.y = (normals[3 * b + 1] - normals[3 * a + 1]) / segments;\r\n                            deltaNormal.z = (normals[3 * b + 2] - normals[3 * a + 2]) / segments;\r\n                        }\r\n                        if (uvs) {\r\n                            deltaUV.x = (uvs[2 * b] - uvs[2 * a]) / segments;\r\n                            deltaUV.y = (uvs[2 * b + 1] - uvs[2 * a + 1]) / segments;\r\n                        }\r\n                        side[a][b].push(a);\r\n                        for (let k = 1; k < segments; k++) {\r\n                            side[a][b].push(positions.length / 3);\r\n                            positions[positionPtr++] = positions[3 * a] + k * deltaPosition.x;\r\n                            positions[positionPtr++] = positions[3 * a + 1] + k * deltaPosition.y;\r\n                            positions[positionPtr++] = positions[3 * a + 2] + k * deltaPosition.z;\r\n                            if (normals) {\r\n                                normals[normalsPtr!++] = normals[3 * a] + k * deltaNormal.x;\r\n                                normals[normalsPtr!++] = normals[3 * a + 1] + k * deltaNormal.y;\r\n                                normals[normalsPtr!++] = normals[3 * a + 2] + k * deltaNormal.z;\r\n                            }\r\n                            if (uvs) {\r\n                                uvs[uvPtr!++] = uvs[2 * a] + k * deltaUV.x;\r\n                                uvs[uvPtr!++] = uvs[2 * a + 1] + k * deltaUV.y;\r\n                            }\r\n                        }\r\n                        side[a][b].push(b);\r\n                        side[b][a] = [];\r\n                        len = side[a][b].length;\r\n                        for (let idx = 0; idx < len; idx++) {\r\n                            side[b][a][idx] = side[a][b][len - 1 - idx];\r\n                        }\r\n                    }\r\n                }\r\n                //Calculate positions, normals and uvs of new internal vertices\r\n                tempIndices[0][0] = currentIndices[i];\r\n                tempIndices[1][0] = side[currentIndices[i]][currentIndices[i + 1]][1];\r\n                tempIndices[1][1] = side[currentIndices[i]][currentIndices[i + 2]][1];\r\n                for (let k = 2; k < segments; k++) {\r\n                    tempIndices[k][0] = side[currentIndices[i]][currentIndices[i + 1]][k];\r\n                    tempIndices[k][k] = side[currentIndices[i]][currentIndices[i + 2]][k];\r\n                    deltaPosition.x = (positions[3 * tempIndices[k][k]] - positions[3 * tempIndices[k][0]]) / k;\r\n                    deltaPosition.y = (positions[3 * tempIndices[k][k] + 1] - positions[3 * tempIndices[k][0] + 1]) / k;\r\n                    deltaPosition.z = (positions[3 * tempIndices[k][k] + 2] - positions[3 * tempIndices[k][0] + 2]) / k;\r\n                    if (normals) {\r\n                        deltaNormal.x = (normals[3 * tempIndices[k][k]] - normals[3 * tempIndices[k][0]]) / k;\r\n                        deltaNormal.y = (normals[3 * tempIndices[k][k] + 1] - normals[3 * tempIndices[k][0] + 1]) / k;\r\n                        deltaNormal.z = (normals[3 * tempIndices[k][k] + 2] - normals[3 * tempIndices[k][0] + 2]) / k;\r\n                    }\r\n                    if (uvs) {\r\n                        deltaUV.x = (uvs[2 * tempIndices[k][k]] - uvs[2 * tempIndices[k][0]]) / k;\r\n                        deltaUV.y = (uvs[2 * tempIndices[k][k] + 1] - uvs[2 * tempIndices[k][0] + 1]) / k;\r\n                    }\r\n                    for (let j = 1; j < k; j++) {\r\n                        tempIndices[k][j] = positions.length / 3;\r\n                        positions[positionPtr++] = positions[3 * tempIndices[k][0]] + j * deltaPosition.x;\r\n                        positions[positionPtr++] = positions[3 * tempIndices[k][0] + 1] + j * deltaPosition.y;\r\n                        positions[positionPtr++] = positions[3 * tempIndices[k][0] + 2] + j * deltaPosition.z;\r\n                        if (normals) {\r\n                            normals[normalsPtr!++] = normals[3 * tempIndices[k][0]] + j * deltaNormal.x;\r\n                            normals[normalsPtr!++] = normals[3 * tempIndices[k][0] + 1] + j * deltaNormal.y;\r\n                            normals[normalsPtr!++] = normals[3 * tempIndices[k][0] + 2] + j * deltaNormal.z;\r\n                        }\r\n                        if (uvs) {\r\n                            uvs[uvPtr!++] = uvs[2 * tempIndices[k][0]] + j * deltaUV.x;\r\n                            uvs[uvPtr!++] = uvs[2 * tempIndices[k][0] + 1] + j * deltaUV.y;\r\n                        }\r\n                    }\r\n                }\r\n                tempIndices[segments] = side[currentIndices[i + 1]][currentIndices[i + 2]];\r\n\r\n                // reform indices\r\n                indices.push(tempIndices[0][0], tempIndices[1][0], tempIndices[1][1]);\r\n                for (let k = 1; k < segments; k++) {\r\n                    let j: number;\r\n                    for (j = 0; j < k; j++) {\r\n                        indices.push(tempIndices[k][j], tempIndices[k + 1][j], tempIndices[k + 1][j + 1]);\r\n                        indices.push(tempIndices[k][j], tempIndices[k + 1][j + 1], tempIndices[k][j + 1]);\r\n                    }\r\n                    indices.push(tempIndices[k][j], tempIndices[k + 1][j], tempIndices[k + 1][j + 1]);\r\n                }\r\n            }\r\n\r\n            vertexData.indices = indices;\r\n            vertexData.applyToMesh(this, this.isVertexBufferUpdatable(VertexBuffer.PositionKind));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Force adjacent facets to share vertices and remove any facets that have all vertices in a line\r\n     * This will undo any application of covertToFlatShadedMesh\r\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\r\n     */\r\n    public forceSharedVertices(): void {\r\n        const vertexData = VertexData.ExtractFromMesh(this);\r\n        const currentUVs = vertexData.uvs;\r\n        const currentIndices = vertexData.indices;\r\n        const currentPositions = vertexData.positions;\r\n        const currentColors = vertexData.colors;\r\n        const currentMatrixIndices = vertexData.matricesIndices;\r\n        const currentMatrixWeights = vertexData.matricesWeights;\r\n        const currentMatrixIndicesExtra = vertexData.matricesIndicesExtra;\r\n        const currentMatrixWeightsExtra = vertexData.matricesWeightsExtra;\r\n\r\n        if (currentIndices === void 0 || currentPositions === void 0 || currentIndices === null || currentPositions === null) {\r\n            Logger.Warn(\"VertexData contains empty entries\");\r\n        } else {\r\n            const positions: Array<number> = [];\r\n            const indices: Array<number> = [];\r\n            const uvs: Array<number> = [];\r\n            const colors: Array<number> = [];\r\n            const matrixIndices: Array<number> = [];\r\n            const matrixWeights: Array<number> = [];\r\n            const matrixIndicesExtra: Array<number> = [];\r\n            const matrixWeightsExtra: Array<number> = [];\r\n            let pstring: Array<string> = []; //lists facet vertex positions (a,b,c) as string \"a|b|c\"\r\n\r\n            let indexPtr: number = 0; // pointer to next available index value\r\n            const uniquePositions: { [key: string]: number } = {}; // unique vertex positions\r\n            let ptr: number; // pointer to element in uniquePositions\r\n            let facet: Array<number>;\r\n\r\n            for (let i = 0; i < currentIndices.length; i += 3) {\r\n                facet = [currentIndices[i], currentIndices[i + 1], currentIndices[i + 2]]; //facet vertex indices\r\n                pstring = [];\r\n                for (let j = 0; j < 3; j++) {\r\n                    pstring[j] = \"\";\r\n                    for (let k = 0; k < 3; k++) {\r\n                        //small values make 0\r\n                        if (Math.abs(currentPositions[3 * facet[j] + k]) < 0.00000001) {\r\n                            currentPositions[3 * facet[j] + k] = 0;\r\n                        }\r\n                        pstring[j] += currentPositions[3 * facet[j] + k] + \"|\";\r\n                    }\r\n                }\r\n                //check facet vertices to see that none are repeated\r\n                // do not process any facet that has a repeated vertex, ie is a line\r\n                if (!(pstring[0] == pstring[1] || pstring[0] == pstring[2] || pstring[1] == pstring[2])) {\r\n                    //for each facet position check if already listed in uniquePositions\r\n                    // if not listed add to uniquePositions and set index pointer\r\n                    // if listed use its index in uniquePositions and new index pointer\r\n                    for (let j = 0; j < 3; j++) {\r\n                        ptr = uniquePositions[pstring[j]];\r\n                        if (ptr === undefined) {\r\n                            uniquePositions[pstring[j]] = indexPtr;\r\n                            ptr = indexPtr++;\r\n                            //not listed so add individual x, y, z coordinates to positions\r\n                            for (let k = 0; k < 3; k++) {\r\n                                positions.push(currentPositions[3 * facet[j] + k]);\r\n                            }\r\n                            if (currentColors !== null && currentColors !== void 0) {\r\n                                for (let k = 0; k < 4; k++) {\r\n                                    colors.push(currentColors[4 * facet[j] + k]);\r\n                                }\r\n                            }\r\n                            if (currentUVs !== null && currentUVs !== void 0) {\r\n                                for (let k = 0; k < 2; k++) {\r\n                                    uvs.push(currentUVs[2 * facet[j] + k]);\r\n                                }\r\n                            }\r\n                            if (currentMatrixIndices !== null && currentMatrixIndices !== void 0) {\r\n                                for (let k = 0; k < 4; k++) {\r\n                                    matrixIndices.push(currentMatrixIndices[4 * facet[j] + k]);\r\n                                }\r\n                            }\r\n                            if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\r\n                                for (let k = 0; k < 4; k++) {\r\n                                    matrixWeights.push(currentMatrixWeights[4 * facet[j] + k]);\r\n                                }\r\n                            }\r\n                            if (currentMatrixIndicesExtra !== null && currentMatrixIndicesExtra !== void 0) {\r\n                                for (let k = 0; k < 4; k++) {\r\n                                    matrixIndicesExtra.push(currentMatrixIndicesExtra[4 * facet[j] + k]);\r\n                                }\r\n                            }\r\n                            if (currentMatrixWeightsExtra !== null && currentMatrixWeightsExtra !== void 0) {\r\n                                for (let k = 0; k < 4; k++) {\r\n                                    matrixWeightsExtra.push(currentMatrixWeightsExtra[4 * facet[j] + k]);\r\n                                }\r\n                            }\r\n                        }\r\n                        // add new index pointer to indices array\r\n                        indices.push(ptr);\r\n                    }\r\n                }\r\n            }\r\n\r\n            const normals: Array<number> = [];\r\n            VertexData.ComputeNormals(positions, indices, normals);\r\n\r\n            //create new vertex data object and update\r\n            vertexData.positions = positions;\r\n            vertexData.indices = indices;\r\n            vertexData.normals = normals;\r\n            if (currentUVs !== null && currentUVs !== void 0) {\r\n                vertexData.uvs = uvs;\r\n            }\r\n            if (currentColors !== null && currentColors !== void 0) {\r\n                vertexData.colors = colors;\r\n            }\r\n            if (currentMatrixIndices !== null && currentMatrixIndices !== void 0) {\r\n                vertexData.matricesIndices = matrixIndices;\r\n            }\r\n            if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\r\n                vertexData.matricesWeights = matrixWeights;\r\n            }\r\n            if (currentMatrixIndicesExtra !== null && currentMatrixIndicesExtra !== void 0) {\r\n                vertexData.matricesIndicesExtra = matrixIndicesExtra;\r\n            }\r\n            if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\r\n                vertexData.matricesWeightsExtra = matrixWeightsExtra;\r\n            }\r\n\r\n            vertexData.applyToMesh(this, this.isVertexBufferUpdatable(VertexBuffer.PositionKind));\r\n        }\r\n    }\r\n\r\n    // Instances\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/naming-convention\r\n    public static _instancedMeshFactory(name: string, mesh: Mesh): InstancedMesh {\r\n        throw _WarnImport(\"InstancedMesh\");\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _PhysicsImpostorParser(scene: Scene, physicObject: IPhysicsEnabledObject, jsonObject: any): PhysicsImpostor {\r\n        throw _WarnImport(\"PhysicsImpostor\");\r\n    }\r\n\r\n    /**\r\n     * Creates a new InstancedMesh object from the mesh model.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\r\n     * @param name defines the name of the new instance\r\n     * @returns a new InstancedMesh\r\n     */\r\n    public createInstance(name: string): InstancedMesh {\r\n        const instance = Mesh._instancedMeshFactory(name, this);\r\n\r\n        instance.parent = this.parent;\r\n\r\n        return instance;\r\n    }\r\n\r\n    /**\r\n     * Synchronises all the mesh instance submeshes to the current mesh submeshes, if any.\r\n     * After this call, all the mesh instances have the same submeshes than the current mesh.\r\n     * @returns the current mesh\r\n     */\r\n    public synchronizeInstances(): Mesh {\r\n        for (let instanceIndex = 0; instanceIndex < this.instances.length; instanceIndex++) {\r\n            const instance = this.instances[instanceIndex];\r\n            instance._syncSubMeshes();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Optimization of the mesh's indices, in case a mesh has duplicated vertices.\r\n     * The function will only reorder the indices and will not remove unused vertices to avoid problems with submeshes.\r\n     * This should be used together with the simplification to avoid disappearing triangles.\r\n     * @param successCallback an optional success callback to be called after the optimization finished.\r\n     * @returns the current mesh\r\n     */\r\n    public optimizeIndices(successCallback?: (mesh?: Mesh) => void): Mesh {\r\n        const indices = <IndicesArray>this.getIndices();\r\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        if (!positions || !indices) {\r\n            return this;\r\n        }\r\n\r\n        const vectorPositions: Vector3[] = [];\r\n        for (let pos = 0; pos < positions.length; pos = pos + 3) {\r\n            vectorPositions.push(Vector3.FromArray(positions, pos));\r\n        }\r\n        const dupes: number[] = [];\r\n\r\n        AsyncLoop.SyncAsyncForLoop(\r\n            vectorPositions.length,\r\n            40,\r\n            (iteration) => {\r\n                const realPos = vectorPositions.length - 1 - iteration;\r\n                const testedPosition = vectorPositions[realPos];\r\n                for (let j = 0; j < realPos; ++j) {\r\n                    const againstPosition = vectorPositions[j];\r\n                    if (testedPosition.equals(againstPosition)) {\r\n                        dupes[realPos] = j;\r\n                        break;\r\n                    }\r\n                }\r\n            },\r\n            () => {\r\n                for (let i = 0; i < indices.length; ++i) {\r\n                    indices[i] = dupes[indices[i]] || indices[i];\r\n                }\r\n\r\n                //indices are now reordered\r\n                const originalSubMeshes = this.subMeshes.slice(0);\r\n                this.setIndices(indices);\r\n                this.subMeshes = originalSubMeshes;\r\n                if (successCallback) {\r\n                    successCallback(this);\r\n                }\r\n            }\r\n        );\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Serialize current mesh\r\n     * @param serializationObject defines the object which will receive the serialization data\r\n     * @returns the serialized object\r\n     */\r\n    public override serialize(serializationObject: any = {}): any {\r\n        serializationObject.name = this.name;\r\n        serializationObject.id = this.id;\r\n        serializationObject.uniqueId = this.uniqueId;\r\n        serializationObject.type = this.getClassName();\r\n\r\n        if (Tags && Tags.HasTags(this)) {\r\n            serializationObject.tags = Tags.GetTags(this);\r\n        }\r\n\r\n        serializationObject.position = this.position.asArray();\r\n\r\n        if (this.rotationQuaternion) {\r\n            serializationObject.rotationQuaternion = this.rotationQuaternion.asArray();\r\n        } else if (this.rotation) {\r\n            serializationObject.rotation = this.rotation.asArray();\r\n        }\r\n\r\n        serializationObject.scaling = this.scaling.asArray();\r\n        if (this._postMultiplyPivotMatrix) {\r\n            serializationObject.pivotMatrix = this.getPivotMatrix().asArray();\r\n        } else {\r\n            serializationObject.localMatrix = this.getPivotMatrix().asArray();\r\n        }\r\n\r\n        serializationObject.isEnabled = this.isEnabled(false);\r\n        serializationObject.isVisible = this.isVisible;\r\n        serializationObject.infiniteDistance = this.infiniteDistance;\r\n        serializationObject.pickable = this.isPickable;\r\n\r\n        serializationObject.receiveShadows = this.receiveShadows;\r\n\r\n        serializationObject.billboardMode = this.billboardMode;\r\n        serializationObject.visibility = this.visibility;\r\n        serializationObject.alwaysSelectAsActiveMesh = this.alwaysSelectAsActiveMesh;\r\n\r\n        serializationObject.checkCollisions = this.checkCollisions;\r\n        serializationObject.ellipsoid = this.ellipsoid.asArray();\r\n        serializationObject.ellipsoidOffset = this.ellipsoidOffset.asArray();\r\n        serializationObject.doNotSyncBoundingInfo = this.doNotSyncBoundingInfo;\r\n        serializationObject.isBlocker = this.isBlocker;\r\n        serializationObject.sideOrientation = this.sideOrientation;\r\n\r\n        // Parent\r\n        if (this.parent) {\r\n            this.parent._serializeAsParent(serializationObject);\r\n        }\r\n\r\n        // Geometry\r\n        serializationObject.isUnIndexed = this.isUnIndexed;\r\n        const geometry = this._geometry;\r\n        if (geometry && this.subMeshes) {\r\n            serializationObject.geometryUniqueId = geometry.uniqueId;\r\n            serializationObject.geometryId = geometry.id;\r\n\r\n            // SubMeshes\r\n            serializationObject.subMeshes = [];\r\n            for (let subIndex = 0; subIndex < this.subMeshes.length; subIndex++) {\r\n                const subMesh = this.subMeshes[subIndex];\r\n\r\n                serializationObject.subMeshes.push({\r\n                    materialIndex: subMesh.materialIndex,\r\n                    verticesStart: subMesh.verticesStart,\r\n                    verticesCount: subMesh.verticesCount,\r\n                    indexStart: subMesh.indexStart,\r\n                    indexCount: subMesh.indexCount,\r\n                });\r\n            }\r\n        }\r\n\r\n        // Material\r\n        if (this.material) {\r\n            if (!this.material.doNotSerialize) {\r\n                serializationObject.materialUniqueId = this.material.uniqueId;\r\n                serializationObject.materialId = this.material.id; // back compat\r\n            }\r\n        } else {\r\n            this.material = null;\r\n            serializationObject.materialUniqueId = this._scene.defaultMaterial.uniqueId;\r\n            serializationObject.materialId = this._scene.defaultMaterial.id; // back compat\r\n        }\r\n\r\n        // Morph targets\r\n        if (this.morphTargetManager) {\r\n            serializationObject.morphTargetManagerId = this.morphTargetManager.uniqueId;\r\n        }\r\n\r\n        // Skeleton\r\n        if (this.skeleton) {\r\n            serializationObject.skeletonId = this.skeleton.id;\r\n            serializationObject.numBoneInfluencers = this.numBoneInfluencers;\r\n        }\r\n\r\n        // Physics\r\n        //TODO implement correct serialization for physics impostors.\r\n        if (this.getScene()._getComponent(SceneComponentConstants.NAME_PHYSICSENGINE)) {\r\n            const impostor = this.getPhysicsImpostor();\r\n            if (impostor) {\r\n                serializationObject.physicsMass = impostor.getParam(\"mass\");\r\n                serializationObject.physicsFriction = impostor.getParam(\"friction\");\r\n                serializationObject.physicsRestitution = impostor.getParam(\"mass\");\r\n                serializationObject.physicsImpostor = impostor.type;\r\n            }\r\n        }\r\n\r\n        // Metadata\r\n        if (this.metadata) {\r\n            serializationObject.metadata = this.metadata;\r\n        }\r\n\r\n        // Instances\r\n        serializationObject.instances = [];\r\n        for (let index = 0; index < this.instances.length; index++) {\r\n            const instance = this.instances[index];\r\n            if (instance.doNotSerialize) {\r\n                continue;\r\n            }\r\n\r\n            const serializationInstance: any = {\r\n                name: instance.name,\r\n                id: instance.id,\r\n                isEnabled: instance.isEnabled(false),\r\n                isVisible: instance.isVisible,\r\n                isPickable: instance.isPickable,\r\n                checkCollisions: instance.checkCollisions,\r\n                position: instance.position.asArray(),\r\n                scaling: instance.scaling.asArray(),\r\n            };\r\n\r\n            if (instance.parent) {\r\n                instance.parent._serializeAsParent(serializationInstance);\r\n            }\r\n\r\n            if (instance.rotationQuaternion) {\r\n                serializationInstance.rotationQuaternion = instance.rotationQuaternion.asArray();\r\n            } else if (instance.rotation) {\r\n                serializationInstance.rotation = instance.rotation.asArray();\r\n            }\r\n\r\n            // Physics\r\n            //TODO implement correct serialization for physics impostors.\r\n            if (this.getScene()._getComponent(SceneComponentConstants.NAME_PHYSICSENGINE)) {\r\n                const impostor = instance.getPhysicsImpostor();\r\n                if (impostor) {\r\n                    serializationInstance.physicsMass = impostor.getParam(\"mass\");\r\n                    serializationInstance.physicsFriction = impostor.getParam(\"friction\");\r\n                    serializationInstance.physicsRestitution = impostor.getParam(\"mass\");\r\n                    serializationInstance.physicsImpostor = impostor.type;\r\n                }\r\n            }\r\n\r\n            // Metadata\r\n            if (instance.metadata) {\r\n                serializationInstance.metadata = instance.metadata;\r\n            }\r\n\r\n            // Action Manager\r\n            if (instance.actionManager) {\r\n                serializationInstance.actions = instance.actionManager.serialize(instance.name);\r\n            }\r\n\r\n            serializationObject.instances.push(serializationInstance);\r\n\r\n            // Animations\r\n            SerializationHelper.AppendSerializedAnimations(instance, serializationInstance);\r\n            serializationInstance.ranges = instance.serializeAnimationRanges();\r\n        }\r\n\r\n        // Thin instances\r\n        if (this._thinInstanceDataStorage.instancesCount && this._thinInstanceDataStorage.matrixData) {\r\n            serializationObject.thinInstances = {\r\n                instancesCount: this._thinInstanceDataStorage.instancesCount,\r\n                matrixData: Array.from(this._thinInstanceDataStorage.matrixData),\r\n                matrixBufferSize: this._thinInstanceDataStorage.matrixBufferSize,\r\n                enablePicking: this.thinInstanceEnablePicking,\r\n            };\r\n\r\n            if (this._userThinInstanceBuffersStorage) {\r\n                const userThinInstance: any = {\r\n                    data: {},\r\n                    sizes: {},\r\n                    strides: {},\r\n                };\r\n\r\n                for (const kind in this._userThinInstanceBuffersStorage.data) {\r\n                    userThinInstance.data[kind] = Array.from(this._userThinInstanceBuffersStorage.data[kind]);\r\n                    userThinInstance.sizes[kind] = this._userThinInstanceBuffersStorage.sizes[kind];\r\n                    userThinInstance.strides[kind] = this._userThinInstanceBuffersStorage.strides[kind];\r\n                }\r\n\r\n                serializationObject.thinInstances.userThinInstance = userThinInstance;\r\n            }\r\n        }\r\n\r\n        // Animations\r\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\r\n        serializationObject.ranges = this.serializeAnimationRanges();\r\n\r\n        // Layer mask\r\n        serializationObject.layerMask = this.layerMask;\r\n\r\n        // Alpha\r\n        serializationObject.alphaIndex = this.alphaIndex;\r\n        serializationObject.hasVertexAlpha = this.hasVertexAlpha;\r\n\r\n        // Overlay\r\n        serializationObject.overlayAlpha = this.overlayAlpha;\r\n        serializationObject.overlayColor = this.overlayColor.asArray();\r\n        serializationObject.renderOverlay = this.renderOverlay;\r\n\r\n        // Fog\r\n        serializationObject.applyFog = this.applyFog;\r\n\r\n        // Action Manager\r\n        if (this.actionManager) {\r\n            serializationObject.actions = this.actionManager.serialize(this.name);\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _syncGeometryWithMorphTargetManager() {\r\n        if (!this.geometry) {\r\n            return;\r\n        }\r\n\r\n        this._markSubMeshesAsAttributesDirty();\r\n\r\n        const morphTargetManager = this._internalAbstractMeshDataInfo._morphTargetManager;\r\n        if (morphTargetManager && morphTargetManager.vertexCount) {\r\n            if (morphTargetManager.vertexCount !== this.getTotalVertices()) {\r\n                Logger.Error(\"Mesh is incompatible with morph targets. Targets and mesh must all have the same vertices count.\");\r\n                this.morphTargetManager = null;\r\n                return;\r\n            }\r\n\r\n            if (morphTargetManager.isUsingTextureForTargets) {\r\n                return;\r\n            }\r\n\r\n            for (let index = 0; index < morphTargetManager.numInfluencers; index++) {\r\n                const morphTarget = morphTargetManager.getActiveTarget(index);\r\n\r\n                const positions = morphTarget.getPositions();\r\n                if (!positions) {\r\n                    Logger.Error(\"Invalid morph target. Target must have positions.\");\r\n                    return;\r\n                }\r\n\r\n                this.geometry.setVerticesData(VertexBuffer.PositionKind + index, positions, false, 3);\r\n\r\n                const normals = morphTarget.getNormals();\r\n                if (normals) {\r\n                    this.geometry.setVerticesData(VertexBuffer.NormalKind + index, normals, false, 3);\r\n                }\r\n\r\n                const tangents = morphTarget.getTangents();\r\n                if (tangents) {\r\n                    this.geometry.setVerticesData(VertexBuffer.TangentKind + index, tangents, false, 3);\r\n                }\r\n\r\n                const uvs = morphTarget.getUVs();\r\n                if (uvs) {\r\n                    this.geometry.setVerticesData(VertexBuffer.UVKind + \"_\" + index, uvs, false, 2);\r\n                }\r\n\r\n                const uv2s = morphTarget.getUV2s();\r\n                if (uv2s) {\r\n                    this.geometry.setVerticesData(VertexBuffer.UV2Kind + \"_\" + index, uv2s, false, 2);\r\n                }\r\n\r\n                const colors = morphTarget.getColors();\r\n                if (colors) {\r\n                    this.geometry.setVerticesData(VertexBuffer.ColorKind + index, colors, false, 4);\r\n                }\r\n            }\r\n        } else {\r\n            let index = 0;\r\n\r\n            // Positions\r\n            while (this.geometry.isVerticesDataPresent(VertexBuffer.PositionKind + index)) {\r\n                this.geometry.removeVerticesData(VertexBuffer.PositionKind + index);\r\n\r\n                if (this.geometry.isVerticesDataPresent(VertexBuffer.NormalKind + index)) {\r\n                    this.geometry.removeVerticesData(VertexBuffer.NormalKind + index);\r\n                }\r\n                if (this.geometry.isVerticesDataPresent(VertexBuffer.TangentKind + index)) {\r\n                    this.geometry.removeVerticesData(VertexBuffer.TangentKind + index);\r\n                }\r\n                if (this.geometry.isVerticesDataPresent(VertexBuffer.UVKind + index)) {\r\n                    this.geometry.removeVerticesData(VertexBuffer.UVKind + \"_\" + index);\r\n                }\r\n                if (this.geometry.isVerticesDataPresent(VertexBuffer.UV2Kind + index)) {\r\n                    this.geometry.removeVerticesData(VertexBuffer.UV2Kind + \"_\" + index);\r\n                }\r\n                if (this.geometry.isVerticesDataPresent(VertexBuffer.ColorKind + index)) {\r\n                    this.geometry.removeVerticesData(VertexBuffer.ColorKind + index);\r\n                }\r\n                index++;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _GroundMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\r\n        throw _WarnImport(\"GroundMesh\");\r\n    };\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _GoldbergMeshParser = (parsedMesh: any, scene: Scene): GoldbergMesh => {\r\n        throw _WarnImport(\"GoldbergMesh\");\r\n    };\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _LinesMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\r\n        throw _WarnImport(\"LinesMesh\");\r\n    };\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _GreasedLineMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\r\n        throw _WarnImport(\"GreasedLineMesh\");\r\n    };\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _GreasedLineRibbonMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\r\n        throw _WarnImport(\"GreasedLineRibbonMesh\");\r\n    };\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static _TrailMeshParser = (parsedMesh: any, scene: Scene): Mesh => {\r\n        throw _WarnImport(\"TrailMesh\");\r\n    };\r\n\r\n    /**\r\n     * Returns a new Mesh object parsed from the source provided.\r\n     * @param parsedMesh is the source\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl is the root URL to prefix the `delayLoadingFile` property with\r\n     * @returns a new Mesh\r\n     */\r\n    public static override Parse(parsedMesh: any, scene: Scene, rootUrl: string): Mesh {\r\n        let mesh: Mesh;\r\n\r\n        if (parsedMesh.type && parsedMesh.type === \"LinesMesh\") {\r\n            mesh = Mesh._LinesMeshParser(parsedMesh, scene);\r\n        } else if (parsedMesh.type && parsedMesh.type === \"GroundMesh\") {\r\n            mesh = Mesh._GroundMeshParser(parsedMesh, scene);\r\n        } else if (parsedMesh.type && parsedMesh.type === \"GoldbergMesh\") {\r\n            mesh = Mesh._GoldbergMeshParser(parsedMesh, scene);\r\n        } else if (parsedMesh.type && parsedMesh.type === \"GreasedLineMesh\") {\r\n            mesh = Mesh._GreasedLineMeshParser(parsedMesh, scene);\r\n        } else if (parsedMesh.type && parsedMesh.type === \"TrailMesh\") {\r\n            mesh = Mesh._TrailMeshParser(parsedMesh, scene);\r\n        } else {\r\n            mesh = new Mesh(parsedMesh.name, scene);\r\n        }\r\n        mesh.id = parsedMesh.id;\r\n        mesh._waitingParsedUniqueId = parsedMesh.uniqueId;\r\n\r\n        if (Tags) {\r\n            Tags.AddTagsTo(mesh, parsedMesh.tags);\r\n        }\r\n\r\n        mesh.position = Vector3.FromArray(parsedMesh.position);\r\n\r\n        if (parsedMesh.metadata !== undefined) {\r\n            mesh.metadata = parsedMesh.metadata;\r\n        }\r\n\r\n        if (parsedMesh.rotationQuaternion) {\r\n            mesh.rotationQuaternion = Quaternion.FromArray(parsedMesh.rotationQuaternion);\r\n        } else if (parsedMesh.rotation) {\r\n            mesh.rotation = Vector3.FromArray(parsedMesh.rotation);\r\n        }\r\n\r\n        mesh.scaling = Vector3.FromArray(parsedMesh.scaling);\r\n\r\n        if (parsedMesh.localMatrix) {\r\n            mesh.setPreTransformMatrix(Matrix.FromArray(parsedMesh.localMatrix));\r\n        } else if (parsedMesh.pivotMatrix) {\r\n            mesh.setPivotMatrix(Matrix.FromArray(parsedMesh.pivotMatrix));\r\n        }\r\n\r\n        mesh.setEnabled(parsedMesh.isEnabled);\r\n        mesh.isVisible = parsedMesh.isVisible;\r\n        mesh.infiniteDistance = parsedMesh.infiniteDistance;\r\n        mesh.alwaysSelectAsActiveMesh = !!parsedMesh.alwaysSelectAsActiveMesh;\r\n\r\n        mesh.showBoundingBox = parsedMesh.showBoundingBox;\r\n        mesh.showSubMeshesBoundingBox = parsedMesh.showSubMeshesBoundingBox;\r\n\r\n        if (parsedMesh.applyFog !== undefined) {\r\n            mesh.applyFog = parsedMesh.applyFog;\r\n        }\r\n\r\n        if (parsedMesh.pickable !== undefined) {\r\n            mesh.isPickable = parsedMesh.pickable;\r\n        }\r\n\r\n        if (parsedMesh.alphaIndex !== undefined) {\r\n            mesh.alphaIndex = parsedMesh.alphaIndex;\r\n        }\r\n\r\n        mesh.receiveShadows = parsedMesh.receiveShadows;\r\n\r\n        if (parsedMesh.billboardMode !== undefined) {\r\n            mesh.billboardMode = parsedMesh.billboardMode;\r\n        }\r\n\r\n        if (parsedMesh.visibility !== undefined) {\r\n            mesh.visibility = parsedMesh.visibility;\r\n        }\r\n\r\n        mesh.checkCollisions = parsedMesh.checkCollisions;\r\n        mesh.doNotSyncBoundingInfo = !!parsedMesh.doNotSyncBoundingInfo;\r\n\r\n        if (parsedMesh.ellipsoid) {\r\n            mesh.ellipsoid = Vector3.FromArray(parsedMesh.ellipsoid);\r\n        }\r\n\r\n        if (parsedMesh.ellipsoidOffset) {\r\n            mesh.ellipsoidOffset = Vector3.FromArray(parsedMesh.ellipsoidOffset);\r\n        }\r\n\r\n        // For Backward compatibility (\"!=\" to exclude null and undefined)\r\n        if (parsedMesh.overrideMaterialSideOrientation != null) {\r\n            mesh.sideOrientation = parsedMesh.overrideMaterialSideOrientation;\r\n        }\r\n\r\n        if (parsedMesh.sideOrientation !== undefined) {\r\n            mesh.sideOrientation = parsedMesh.sideOrientation;\r\n        }\r\n\r\n        if (parsedMesh.isBlocker !== undefined) {\r\n            mesh.isBlocker = parsedMesh.isBlocker;\r\n        }\r\n\r\n        mesh._shouldGenerateFlatShading = parsedMesh.useFlatShading;\r\n\r\n        // freezeWorldMatrix\r\n        if (parsedMesh.freezeWorldMatrix) {\r\n            mesh._waitingData.freezeWorldMatrix = parsedMesh.freezeWorldMatrix;\r\n        }\r\n\r\n        // Parent\r\n        if (parsedMesh.parentId !== undefined) {\r\n            mesh._waitingParentId = parsedMesh.parentId;\r\n        }\r\n\r\n        if (parsedMesh.parentInstanceIndex !== undefined) {\r\n            mesh._waitingParentInstanceIndex = parsedMesh.parentInstanceIndex;\r\n        }\r\n\r\n        // Actions\r\n        if (parsedMesh.actions !== undefined) {\r\n            mesh._waitingData.actions = parsedMesh.actions;\r\n        }\r\n\r\n        // Overlay\r\n        if (parsedMesh.overlayAlpha !== undefined) {\r\n            mesh.overlayAlpha = parsedMesh.overlayAlpha;\r\n        }\r\n\r\n        if (parsedMesh.overlayColor !== undefined) {\r\n            mesh.overlayColor = Color3.FromArray(parsedMesh.overlayColor);\r\n        }\r\n\r\n        if (parsedMesh.renderOverlay !== undefined) {\r\n            mesh.renderOverlay = parsedMesh.renderOverlay;\r\n        }\r\n\r\n        // Geometry\r\n        mesh.isUnIndexed = !!parsedMesh.isUnIndexed;\r\n        mesh.hasVertexAlpha = parsedMesh.hasVertexAlpha;\r\n\r\n        if (parsedMesh.delayLoadingFile) {\r\n            mesh.delayLoadState = Constants.DELAYLOADSTATE_NOTLOADED;\r\n            mesh.delayLoadingFile = rootUrl + parsedMesh.delayLoadingFile;\r\n            mesh.buildBoundingInfo(Vector3.FromArray(parsedMesh.boundingBoxMinimum), Vector3.FromArray(parsedMesh.boundingBoxMaximum));\r\n\r\n            if (parsedMesh._binaryInfo) {\r\n                mesh._binaryInfo = parsedMesh._binaryInfo;\r\n            }\r\n\r\n            mesh._delayInfo = [];\r\n            if (parsedMesh.hasUVs) {\r\n                mesh._delayInfo.push(VertexBuffer.UVKind);\r\n            }\r\n\r\n            if (parsedMesh.hasUVs2) {\r\n                mesh._delayInfo.push(VertexBuffer.UV2Kind);\r\n            }\r\n\r\n            if (parsedMesh.hasUVs3) {\r\n                mesh._delayInfo.push(VertexBuffer.UV3Kind);\r\n            }\r\n\r\n            if (parsedMesh.hasUVs4) {\r\n                mesh._delayInfo.push(VertexBuffer.UV4Kind);\r\n            }\r\n\r\n            if (parsedMesh.hasUVs5) {\r\n                mesh._delayInfo.push(VertexBuffer.UV5Kind);\r\n            }\r\n\r\n            if (parsedMesh.hasUVs6) {\r\n                mesh._delayInfo.push(VertexBuffer.UV6Kind);\r\n            }\r\n\r\n            if (parsedMesh.hasColors) {\r\n                mesh._delayInfo.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            if (parsedMesh.hasMatricesIndices) {\r\n                mesh._delayInfo.push(VertexBuffer.MatricesIndicesKind);\r\n            }\r\n\r\n            if (parsedMesh.hasMatricesWeights) {\r\n                mesh._delayInfo.push(VertexBuffer.MatricesWeightsKind);\r\n            }\r\n\r\n            mesh._delayLoadingFunction = Geometry._ImportGeometry;\r\n\r\n            if (SceneLoaderFlags.ForceFullSceneLoadingForIncremental) {\r\n                mesh._checkDelayState();\r\n            }\r\n        } else {\r\n            Geometry._ImportGeometry(parsedMesh, mesh);\r\n        }\r\n\r\n        // Material\r\n        if (parsedMesh.materialUniqueId) {\r\n            mesh._waitingMaterialId = parsedMesh.materialUniqueId;\r\n        } else if (parsedMesh.materialId) {\r\n            mesh._waitingMaterialId = parsedMesh.materialId;\r\n        }\r\n\r\n        // Morph targets\r\n        if (parsedMesh.morphTargetManagerId > -1) {\r\n            mesh._waitingMorphTargetManagerId = parsedMesh.morphTargetManagerId;\r\n        }\r\n\r\n        // Skeleton\r\n        if (parsedMesh.skeletonId !== undefined && parsedMesh.skeletonId !== null) {\r\n            mesh.skeleton = scene.getLastSkeletonById(parsedMesh.skeletonId);\r\n            if (parsedMesh.numBoneInfluencers) {\r\n                mesh.numBoneInfluencers = parsedMesh.numBoneInfluencers;\r\n            }\r\n        }\r\n\r\n        // Animations\r\n        if (parsedMesh.animations) {\r\n            for (let animationIndex = 0; animationIndex < parsedMesh.animations.length; animationIndex++) {\r\n                const parsedAnimation = parsedMesh.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    mesh.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n            Node.ParseAnimationRanges(mesh, parsedMesh, scene);\r\n        }\r\n\r\n        if (parsedMesh.autoAnimate) {\r\n            scene.beginAnimation(mesh, parsedMesh.autoAnimateFrom, parsedMesh.autoAnimateTo, parsedMesh.autoAnimateLoop, parsedMesh.autoAnimateSpeed || 1.0);\r\n        }\r\n\r\n        // Layer Mask\r\n        if (parsedMesh.layerMask && !isNaN(parsedMesh.layerMask)) {\r\n            mesh.layerMask = Math.abs(parseInt(parsedMesh.layerMask));\r\n        } else {\r\n            mesh.layerMask = 0x0fffffff;\r\n        }\r\n\r\n        // Physics\r\n        if (parsedMesh.physicsImpostor) {\r\n            mesh.physicsImpostor = Mesh._PhysicsImpostorParser(scene, mesh, parsedMesh);\r\n        }\r\n\r\n        // Levels\r\n        if (parsedMesh.lodMeshIds) {\r\n            mesh._waitingData.lods = {\r\n                ids: parsedMesh.lodMeshIds,\r\n                distances: parsedMesh.lodDistances ? parsedMesh.lodDistances : null,\r\n                coverages: parsedMesh.lodCoverages ? parsedMesh.lodCoverages : null,\r\n            };\r\n        }\r\n\r\n        // Instances\r\n        if (parsedMesh.instances) {\r\n            for (let index = 0; index < parsedMesh.instances.length; index++) {\r\n                const parsedInstance = parsedMesh.instances[index];\r\n                const instance = mesh.createInstance(parsedInstance.name);\r\n\r\n                if (parsedInstance.id) {\r\n                    instance.id = parsedInstance.id;\r\n                }\r\n\r\n                if (Tags) {\r\n                    if (parsedInstance.tags) {\r\n                        Tags.AddTagsTo(instance, parsedInstance.tags);\r\n                    } else {\r\n                        Tags.AddTagsTo(instance, parsedMesh.tags);\r\n                    }\r\n                }\r\n\r\n                instance.position = Vector3.FromArray(parsedInstance.position);\r\n\r\n                if (parsedInstance.metadata !== undefined) {\r\n                    instance.metadata = parsedInstance.metadata;\r\n                }\r\n\r\n                if (parsedInstance.parentId !== undefined) {\r\n                    instance._waitingParentId = parsedInstance.parentId;\r\n                }\r\n\r\n                if (parsedInstance.parentInstanceIndex !== undefined) {\r\n                    instance._waitingParentInstanceIndex = parsedInstance.parentInstanceIndex;\r\n                }\r\n\r\n                if (parsedInstance.isEnabled !== undefined && parsedInstance.isEnabled !== null) {\r\n                    instance.setEnabled(parsedInstance.isEnabled);\r\n                }\r\n\r\n                if (parsedInstance.isVisible !== undefined && parsedInstance.isVisible !== null) {\r\n                    instance.isVisible = parsedInstance.isVisible;\r\n                }\r\n\r\n                if (parsedInstance.isPickable !== undefined && parsedInstance.isPickable !== null) {\r\n                    instance.isPickable = parsedInstance.isPickable;\r\n                }\r\n\r\n                if (parsedInstance.rotationQuaternion) {\r\n                    instance.rotationQuaternion = Quaternion.FromArray(parsedInstance.rotationQuaternion);\r\n                } else if (parsedInstance.rotation) {\r\n                    instance.rotation = Vector3.FromArray(parsedInstance.rotation);\r\n                }\r\n\r\n                instance.scaling = Vector3.FromArray(parsedInstance.scaling);\r\n\r\n                if (parsedInstance.checkCollisions != undefined && parsedInstance.checkCollisions != null) {\r\n                    instance.checkCollisions = parsedInstance.checkCollisions;\r\n                }\r\n                if (parsedInstance.pickable != undefined && parsedInstance.pickable != null) {\r\n                    instance.isPickable = parsedInstance.pickable;\r\n                }\r\n                if (parsedInstance.showBoundingBox != undefined && parsedInstance.showBoundingBox != null) {\r\n                    instance.showBoundingBox = parsedInstance.showBoundingBox;\r\n                }\r\n                if (parsedInstance.showSubMeshesBoundingBox != undefined && parsedInstance.showSubMeshesBoundingBox != null) {\r\n                    instance.showSubMeshesBoundingBox = parsedInstance.showSubMeshesBoundingBox;\r\n                }\r\n                if (parsedInstance.alphaIndex != undefined && parsedInstance.showSubMeshesBoundingBox != null) {\r\n                    instance.alphaIndex = parsedInstance.alphaIndex;\r\n                }\r\n\r\n                // Physics\r\n                if (parsedInstance.physicsImpostor) {\r\n                    instance.physicsImpostor = Mesh._PhysicsImpostorParser(scene, instance, parsedInstance);\r\n                }\r\n\r\n                // Actions\r\n                if (parsedInstance.actions !== undefined) {\r\n                    instance._waitingData.actions = parsedInstance.actions;\r\n                }\r\n\r\n                // Animation\r\n                if (parsedInstance.animations) {\r\n                    for (let animationIndex = 0; animationIndex < parsedInstance.animations.length; animationIndex++) {\r\n                        const parsedAnimation = parsedInstance.animations[animationIndex];\r\n                        const internalClass = GetClass(\"BABYLON.Animation\");\r\n                        if (internalClass) {\r\n                            instance.animations.push(internalClass.Parse(parsedAnimation));\r\n                        }\r\n                    }\r\n                    Node.ParseAnimationRanges(instance, parsedInstance, scene);\r\n\r\n                    if (parsedInstance.autoAnimate) {\r\n                        scene.beginAnimation(\r\n                            instance,\r\n                            parsedInstance.autoAnimateFrom,\r\n                            parsedInstance.autoAnimateTo,\r\n                            parsedInstance.autoAnimateLoop,\r\n                            parsedInstance.autoAnimateSpeed || 1.0\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Thin instances\r\n        if (parsedMesh.thinInstances) {\r\n            const thinInstances = parsedMesh.thinInstances;\r\n\r\n            mesh.thinInstanceEnablePicking = !!thinInstances.enablePicking;\r\n\r\n            if (thinInstances.matrixData) {\r\n                mesh.thinInstanceSetBuffer(\"matrix\", new Float32Array(thinInstances.matrixData), 16, false);\r\n\r\n                mesh._thinInstanceDataStorage.matrixBufferSize = thinInstances.matrixBufferSize;\r\n                mesh._thinInstanceDataStorage.instancesCount = thinInstances.instancesCount;\r\n            } else {\r\n                mesh._thinInstanceDataStorage.matrixBufferSize = thinInstances.matrixBufferSize;\r\n            }\r\n\r\n            if (parsedMesh.thinInstances.userThinInstance) {\r\n                const userThinInstance = parsedMesh.thinInstances.userThinInstance;\r\n\r\n                for (const kind in userThinInstance.data) {\r\n                    mesh.thinInstanceSetBuffer(kind, new Float32Array(userThinInstance.data[kind]), userThinInstance.strides[kind], false);\r\n                    mesh._userThinInstanceBuffersStorage.sizes[kind] = userThinInstance.sizes[kind];\r\n                }\r\n            }\r\n        }\r\n\r\n        return mesh;\r\n    }\r\n\r\n    // Skeletons\r\n\r\n    /**\r\n     * Prepare internal position array for software CPU skinning\r\n     * @returns original positions used for CPU skinning. Useful for integrating Morphing with skeletons in same mesh\r\n     */\r\n    public setPositionsForCPUSkinning(): Nullable<Float32Array> {\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n        if (!internalDataInfo._sourcePositions) {\r\n            const source = this.getVerticesData(VertexBuffer.PositionKind);\r\n            if (!source) {\r\n                return internalDataInfo._sourcePositions;\r\n            }\r\n\r\n            internalDataInfo._sourcePositions = new Float32Array(<any>source);\r\n\r\n            if (!this.isVertexBufferUpdatable(VertexBuffer.PositionKind)) {\r\n                this.setVerticesData(VertexBuffer.PositionKind, source, true);\r\n            }\r\n        }\r\n        return internalDataInfo._sourcePositions;\r\n    }\r\n\r\n    /**\r\n     * Prepare internal normal array for software CPU skinning\r\n     * @returns original normals used for CPU skinning. Useful for integrating Morphing with skeletons in same mesh.\r\n     */\r\n    public setNormalsForCPUSkinning(): Nullable<Float32Array> {\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n\r\n        if (!internalDataInfo._sourceNormals) {\r\n            const source = this.getVerticesData(VertexBuffer.NormalKind);\r\n\r\n            if (!source) {\r\n                return internalDataInfo._sourceNormals;\r\n            }\r\n\r\n            internalDataInfo._sourceNormals = new Float32Array(<any>source);\r\n\r\n            if (!this.isVertexBufferUpdatable(VertexBuffer.NormalKind)) {\r\n                this.setVerticesData(VertexBuffer.NormalKind, source, true);\r\n            }\r\n        }\r\n        return internalDataInfo._sourceNormals;\r\n    }\r\n\r\n    /**\r\n     * Updates the vertex buffer by applying transformation from the bones\r\n     * @param skeleton defines the skeleton to apply to current mesh\r\n     * @returns the current mesh\r\n     */\r\n    public applySkeleton(skeleton: Skeleton): Mesh {\r\n        if (!this.geometry) {\r\n            return this;\r\n        }\r\n\r\n        if (this.geometry._softwareSkinningFrameId == this.getScene().getFrameId()) {\r\n            return this;\r\n        }\r\n\r\n        this.geometry._softwareSkinningFrameId = this.getScene().getFrameId();\r\n\r\n        if (!this.isVerticesDataPresent(VertexBuffer.PositionKind)) {\r\n            return this;\r\n        }\r\n        if (!this.isVerticesDataPresent(VertexBuffer.MatricesIndicesKind)) {\r\n            return this;\r\n        }\r\n        if (!this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\r\n            return this;\r\n        }\r\n\r\n        const hasNormals = this.isVerticesDataPresent(VertexBuffer.NormalKind);\r\n\r\n        const internalDataInfo = this._internalMeshDataInfo;\r\n\r\n        if (!internalDataInfo._sourcePositions) {\r\n            const submeshes = this.subMeshes.slice();\r\n            this.setPositionsForCPUSkinning();\r\n            this.subMeshes = submeshes;\r\n        }\r\n\r\n        if (hasNormals && !internalDataInfo._sourceNormals) {\r\n            this.setNormalsForCPUSkinning();\r\n        }\r\n\r\n        // positionsData checks for not being Float32Array will only pass at most once\r\n        let positionsData = this.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        if (!positionsData) {\r\n            return this;\r\n        }\r\n\r\n        if (!(positionsData instanceof Float32Array)) {\r\n            positionsData = new Float32Array(positionsData);\r\n        }\r\n\r\n        // normalsData checks for not being Float32Array will only pass at most once\r\n        let normalsData = this.getVerticesData(VertexBuffer.NormalKind);\r\n\r\n        if (hasNormals) {\r\n            if (!normalsData) {\r\n                return this;\r\n            }\r\n\r\n            if (!(normalsData instanceof Float32Array)) {\r\n                normalsData = new Float32Array(normalsData);\r\n            }\r\n        }\r\n\r\n        const matricesIndicesData = this.getVerticesData(VertexBuffer.MatricesIndicesKind);\r\n        const matricesWeightsData = this.getVerticesData(VertexBuffer.MatricesWeightsKind);\r\n\r\n        if (!matricesWeightsData || !matricesIndicesData) {\r\n            return this;\r\n        }\r\n\r\n        const needExtras = this.numBoneInfluencers > 4;\r\n        const matricesIndicesExtraData = needExtras ? this.getVerticesData(VertexBuffer.MatricesIndicesExtraKind) : null;\r\n        const matricesWeightsExtraData = needExtras ? this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind) : null;\r\n\r\n        const skeletonMatrices = skeleton.getTransformMatrices(this);\r\n\r\n        const tempVector3 = Vector3.Zero();\r\n        const finalMatrix = new Matrix();\r\n        const tempMatrix = new Matrix();\r\n\r\n        let matWeightIdx = 0;\r\n        let inf: number;\r\n        for (let index = 0; index < positionsData.length; index += 3, matWeightIdx += 4) {\r\n            let weight: number;\r\n            for (inf = 0; inf < 4; inf++) {\r\n                weight = matricesWeightsData[matWeightIdx + inf];\r\n                if (weight > 0) {\r\n                    Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesData[matWeightIdx + inf] * 16), weight, tempMatrix);\r\n                    finalMatrix.addToSelf(tempMatrix);\r\n                }\r\n            }\r\n            if (needExtras) {\r\n                for (inf = 0; inf < 4; inf++) {\r\n                    weight = matricesWeightsExtraData![matWeightIdx + inf];\r\n                    if (weight > 0) {\r\n                        Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesExtraData![matWeightIdx + inf] * 16), weight, tempMatrix);\r\n                        finalMatrix.addToSelf(tempMatrix);\r\n                    }\r\n                }\r\n            }\r\n\r\n            Vector3.TransformCoordinatesFromFloatsToRef(\r\n                internalDataInfo._sourcePositions![index],\r\n                internalDataInfo._sourcePositions![index + 1],\r\n                internalDataInfo._sourcePositions![index + 2],\r\n                finalMatrix,\r\n                tempVector3\r\n            );\r\n            tempVector3.toArray(positionsData, index);\r\n\r\n            if (hasNormals) {\r\n                Vector3.TransformNormalFromFloatsToRef(\r\n                    internalDataInfo._sourceNormals![index],\r\n                    internalDataInfo._sourceNormals![index + 1],\r\n                    internalDataInfo._sourceNormals![index + 2],\r\n                    finalMatrix,\r\n                    tempVector3\r\n                );\r\n                tempVector3.toArray(normalsData!, index);\r\n            }\r\n\r\n            finalMatrix.reset();\r\n        }\r\n\r\n        this.updateVerticesData(VertexBuffer.PositionKind, positionsData);\r\n        if (hasNormals) {\r\n            this.updateVerticesData(VertexBuffer.NormalKind, normalsData!);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // Tools\r\n\r\n    /**\r\n     * Returns an object containing a min and max Vector3 which are the minimum and maximum vectors of each mesh bounding box from the passed array, in the world coordinates\r\n     * @param meshes defines the list of meshes to scan\r\n     * @returns an object `{min:` Vector3`, max:` Vector3`}`\r\n     */\r\n    public static MinMax(meshes: AbstractMesh[]): { min: Vector3; max: Vector3 } {\r\n        let minVector: Nullable<Vector3> = null;\r\n        let maxVector: Nullable<Vector3> = null;\r\n\r\n        for (const mesh of meshes) {\r\n            const boundingInfo = mesh.getBoundingInfo();\r\n\r\n            const boundingBox = boundingInfo.boundingBox;\r\n            if (!minVector || !maxVector) {\r\n                minVector = boundingBox.minimumWorld;\r\n                maxVector = boundingBox.maximumWorld;\r\n            } else {\r\n                minVector.minimizeInPlace(boundingBox.minimumWorld);\r\n                maxVector.maximizeInPlace(boundingBox.maximumWorld);\r\n            }\r\n        }\r\n\r\n        if (!minVector || !maxVector) {\r\n            return {\r\n                min: Vector3.Zero(),\r\n                max: Vector3.Zero(),\r\n            };\r\n        }\r\n\r\n        return {\r\n            min: minVector,\r\n            max: maxVector,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns the center of the `{min:` Vector3`, max:` Vector3`}` or the center of MinMax vector3 computed from a mesh array\r\n     * @param meshesOrMinMaxVector could be an array of meshes or a `{min:` Vector3`, max:` Vector3`}` object\r\n     * @returns a vector3\r\n     */\r\n    public static Center(meshesOrMinMaxVector: { min: Vector3; max: Vector3 } | AbstractMesh[]): Vector3 {\r\n        const minMaxVector = meshesOrMinMaxVector instanceof Array ? Mesh.MinMax(meshesOrMinMaxVector) : meshesOrMinMaxVector;\r\n        return Vector3.Center(minMaxVector.min, minMaxVector.max);\r\n    }\r\n\r\n    /**\r\n     * Merge the array of meshes into a single mesh for performance reasons.\r\n     * @param meshes array of meshes with the vertices to merge. Entries cannot be empty meshes.\r\n     * @param disposeSource when true (default), dispose of the vertices from the source meshes.\r\n     * @param allow32BitsIndices when the sum of the vertices > 64k, this must be set to true.\r\n     * @param meshSubclass (optional) can be set to a Mesh where the merged vertices will be inserted.\r\n     * @param subdivideWithSubMeshes when true (false default), subdivide mesh into subMeshes.\r\n     * @param multiMultiMaterials when true (false default), subdivide mesh into subMeshes with multiple materials, ignores subdivideWithSubMeshes.\r\n     * @returns a new mesh\r\n     */\r\n    public static MergeMeshes(\r\n        meshes: Array<Mesh>,\r\n        disposeSource = true,\r\n        allow32BitsIndices?: boolean,\r\n        meshSubclass?: Mesh,\r\n        subdivideWithSubMeshes?: boolean,\r\n        multiMultiMaterials?: boolean\r\n    ) {\r\n        return runCoroutineSync(Mesh._MergeMeshesCoroutine(meshes, disposeSource, allow32BitsIndices, meshSubclass, subdivideWithSubMeshes, multiMultiMaterials, false));\r\n    }\r\n\r\n    /**\r\n     * Merge the array of meshes into a single mesh for performance reasons.\r\n     * @param meshes array of meshes with the vertices to merge. Entries cannot be empty meshes.\r\n     * @param disposeSource when true (default), dispose of the vertices from the source meshes.\r\n     * @param allow32BitsIndices when the sum of the vertices > 64k, this must be set to true.\r\n     * @param meshSubclass (optional) can be set to a Mesh where the merged vertices will be inserted.\r\n     * @param subdivideWithSubMeshes when true (false default), subdivide mesh into subMeshes.\r\n     * @param multiMultiMaterials when true (false default), subdivide mesh into subMeshes with multiple materials, ignores subdivideWithSubMeshes.\r\n     * @returns a new mesh\r\n     */\r\n    public static async MergeMeshesAsync(\r\n        meshes: Array<Mesh>,\r\n        disposeSource = true,\r\n        allow32BitsIndices?: boolean,\r\n        meshSubclass?: Mesh,\r\n        subdivideWithSubMeshes?: boolean,\r\n        multiMultiMaterials?: boolean\r\n    ) {\r\n        return await runCoroutineAsync(\r\n            Mesh._MergeMeshesCoroutine(meshes, disposeSource, allow32BitsIndices, meshSubclass, subdivideWithSubMeshes, multiMultiMaterials, true),\r\n            createYieldingScheduler()\r\n        );\r\n    }\r\n\r\n    private static *_MergeMeshesCoroutine(\r\n        meshes: Array<Mesh>,\r\n        disposeSource = true,\r\n        allow32BitsIndices: boolean | undefined,\r\n        meshSubclass: Mesh | undefined,\r\n        subdivideWithSubMeshes: boolean | undefined,\r\n        multiMultiMaterials: boolean | undefined,\r\n        isAsync: boolean\r\n    ): Coroutine<Nullable<Mesh>> {\r\n        // Remove any null/undefined entries from the mesh array\r\n        meshes = meshes.filter(Boolean);\r\n\r\n        if (meshes.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        let index: number;\r\n        if (!allow32BitsIndices) {\r\n            let totalVertices = 0;\r\n\r\n            // Counting vertices\r\n            for (index = 0; index < meshes.length; index++) {\r\n                totalVertices += meshes[index].getTotalVertices();\r\n\r\n                if (totalVertices >= 65536) {\r\n                    Logger.Warn(\"Cannot merge meshes because resulting mesh will have more than 65536 vertices. Please use allow32BitsIndices = true to use 32 bits indices\");\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n        if (multiMultiMaterials) {\r\n            subdivideWithSubMeshes = false;\r\n        }\r\n        const materialArray: Array<Material> = new Array<Material>();\r\n        const materialIndexArray: Array<number> = new Array<number>();\r\n        // Merge\r\n        const indiceArray: Array<{ start: number; count: number }> = new Array<{ start: number; count: number }>();\r\n        const currentsideOrientation = meshes[0].sideOrientation;\r\n\r\n        for (index = 0; index < meshes.length; index++) {\r\n            const mesh = meshes[index];\r\n            if (mesh.isAnInstance) {\r\n                Logger.Warn(\"Cannot merge instance meshes.\");\r\n                return null;\r\n            }\r\n\r\n            if (currentsideOrientation !== mesh.sideOrientation) {\r\n                Logger.Warn(\"Cannot merge meshes with different sideOrientation values.\");\r\n                return null;\r\n            }\r\n\r\n            if (subdivideWithSubMeshes) {\r\n                indiceArray.push({ start: 0, count: mesh.getTotalIndices() });\r\n            }\r\n\r\n            if (multiMultiMaterials) {\r\n                const indexOffset = indiceArray.reduce((accumulator, currentValue) => {\r\n                    return Math.max(accumulator, currentValue.start + currentValue.count);\r\n                }, 0);\r\n\r\n                if (mesh.material) {\r\n                    const material = mesh.material;\r\n                    if (material instanceof MultiMaterial) {\r\n                        for (let matIndex = 0; matIndex < material.subMaterials.length; matIndex++) {\r\n                            if (materialArray.indexOf(<Material>material.subMaterials[matIndex]) < 0) {\r\n                                materialArray.push(<Material>material.subMaterials[matIndex]);\r\n                            }\r\n                        }\r\n                        for (let subIndex = 0; subIndex < mesh.subMeshes.length; subIndex++) {\r\n                            materialIndexArray.push(materialArray.indexOf(<Material>material.subMaterials[mesh.subMeshes[subIndex].materialIndex]));\r\n                            indiceArray.push({ start: indexOffset + mesh.subMeshes[subIndex].indexStart, count: mesh.subMeshes[subIndex].indexCount });\r\n                        }\r\n                    } else {\r\n                        if (materialArray.indexOf(material) < 0) {\r\n                            materialArray.push(material);\r\n                        }\r\n                        for (let subIndex = 0; subIndex < mesh.subMeshes.length; subIndex++) {\r\n                            materialIndexArray.push(materialArray.indexOf(material));\r\n                            indiceArray.push({ start: indexOffset + mesh.subMeshes[subIndex].indexStart, count: mesh.subMeshes[subIndex].indexCount });\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (let subIndex = 0; subIndex < mesh.subMeshes.length; subIndex++) {\r\n                        materialIndexArray.push(0);\r\n                        indiceArray.push({ start: indexOffset + mesh.subMeshes[subIndex].indexStart, count: mesh.subMeshes[subIndex].indexCount });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const source = meshes[0];\r\n\r\n        const getVertexDataFromMesh = (mesh: Mesh) => {\r\n            const wm = mesh.computeWorldMatrix(true);\r\n            const vertexData = VertexData.ExtractFromMesh(mesh, false, false);\r\n            return { vertexData, transform: wm };\r\n        };\r\n\r\n        const { vertexData: sourceVertexData, transform: sourceTransform } = getVertexDataFromMesh(source);\r\n        if (isAsync) {\r\n            yield;\r\n        }\r\n\r\n        const meshVertexDatas = new Array<{ vertexData: VertexData; transform?: Matrix }>(meshes.length - 1);\r\n        for (let i = 1; i < meshes.length; i++) {\r\n            meshVertexDatas[i - 1] = getVertexDataFromMesh(meshes[i]);\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n        }\r\n\r\n        const mergeCoroutine = sourceVertexData._mergeCoroutine(sourceTransform, meshVertexDatas, allow32BitsIndices, isAsync, !disposeSource);\r\n        let mergeCoroutineStep = mergeCoroutine.next();\r\n        while (!mergeCoroutineStep.done) {\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n            mergeCoroutineStep = mergeCoroutine.next();\r\n        }\r\n        const vertexData = mergeCoroutineStep.value;\r\n\r\n        if (!meshSubclass) {\r\n            meshSubclass = new Mesh(source.name + \"_merged\", source.getScene());\r\n        }\r\n\r\n        const applyToCoroutine = vertexData._applyToCoroutine(meshSubclass, undefined, isAsync);\r\n        let applyToCoroutineStep = applyToCoroutine.next();\r\n        while (!applyToCoroutineStep.done) {\r\n            if (isAsync) {\r\n                yield;\r\n            }\r\n            applyToCoroutineStep = applyToCoroutine.next();\r\n        }\r\n\r\n        // Setting properties\r\n        meshSubclass.checkCollisions = source.checkCollisions;\r\n        meshSubclass.sideOrientation = source.sideOrientation;\r\n\r\n        // Cleaning\r\n        if (disposeSource) {\r\n            for (index = 0; index < meshes.length; index++) {\r\n                meshes[index].dispose();\r\n            }\r\n        }\r\n\r\n        // Subdivide\r\n        if (subdivideWithSubMeshes || multiMultiMaterials) {\r\n            //-- removal of global submesh\r\n            meshSubclass.releaseSubMeshes();\r\n            index = 0;\r\n\r\n            //-- apply subdivision according to index table\r\n            while (index < indiceArray.length) {\r\n                SubMesh.CreateFromIndices(0, indiceArray[index].start, indiceArray[index].count, meshSubclass, undefined, false);\r\n                index++;\r\n            }\r\n\r\n            for (const subMesh of meshSubclass.subMeshes) {\r\n                subMesh.refreshBoundingInfo();\r\n            }\r\n\r\n            meshSubclass.computeWorldMatrix(true);\r\n        }\r\n\r\n        if (multiMultiMaterials) {\r\n            const newMultiMaterial = new MultiMaterial(source.name + \"_merged\", source.getScene());\r\n            newMultiMaterial.subMaterials = materialArray;\r\n            for (let subIndex = 0; subIndex < meshSubclass.subMeshes.length; subIndex++) {\r\n                meshSubclass.subMeshes[subIndex].materialIndex = materialIndexArray[subIndex];\r\n            }\r\n            meshSubclass.material = newMultiMaterial;\r\n        } else {\r\n            meshSubclass.material = source.material;\r\n        }\r\n\r\n        return meshSubclass;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public addInstance(instance: InstancedMesh) {\r\n        instance._indexInSourceMeshInstanceArray = this.instances.length;\r\n        this.instances.push(instance);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public removeInstance(instance: InstancedMesh) {\r\n        // Remove from mesh\r\n        const index = instance._indexInSourceMeshInstanceArray;\r\n        if (index != -1) {\r\n            if (index !== this.instances.length - 1) {\r\n                const last = this.instances[this.instances.length - 1];\r\n                this.instances[index] = last;\r\n                last._indexInSourceMeshInstanceArray = index;\r\n            }\r\n\r\n            instance._indexInSourceMeshInstanceArray = -1;\r\n            this.instances.pop();\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public override _shouldConvertRHS() {\r\n        return this._scene.useRightHandedSystem && this.sideOrientation === Material.CounterClockWiseSideOrientation;\r\n    }\r\n\r\n    /** @internal */\r\n    public _getRenderingFillMode(fillMode: number): number {\r\n        const scene = this.getScene();\r\n\r\n        if (scene.forcePointsCloud) {\r\n            return Material.PointFillMode;\r\n        }\r\n\r\n        if (scene.forceWireframe) {\r\n            return Material.WireFrameFillMode;\r\n        }\r\n\r\n        return this.overrideRenderingFillMode ?? fillMode;\r\n    }\r\n\r\n    // deprecated methods\r\n    /**\r\n     * Sets the mesh material by the material or multiMaterial `id` property\r\n     * @param id is a string identifying the material or the multiMaterial\r\n     * @returns the current mesh\r\n     * @deprecated Please use MeshBuilder instead Please use setMaterialById instead\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public setMaterialByID(id: string): Mesh {\r\n        return this.setMaterialById(id);\r\n    }\r\n\r\n    /**\r\n     * Creates a ribbon mesh.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param\r\n     * @param name defines the name of the mesh to create\r\n     * @param pathArray is a required array of paths, what are each an array of successive Vector3. The pathArray parameter depicts the ribbon geometry.\r\n     * @param closeArray creates a seam between the first and the last paths of the path array (default is false)\r\n     * @param closePath creates a seam between the first and the last points of each path of the path array\r\n     * @param offset is taken in account only if the `pathArray` is containing a single path\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @param instance defines an instance of an existing Ribbon object to be updated with the passed `pathArray` parameter (https://doc.babylonjs.com/how_to/How_to_dynamically_morph_a_mesh#ribbon)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateRibbon(\r\n        name: string,\r\n        pathArray: Vector3[][],\r\n        closeArray: boolean,\r\n        closePath: boolean,\r\n        offset: number,\r\n        scene?: Scene,\r\n        updatable?: boolean,\r\n        sideOrientation?: number,\r\n        instance?: Mesh\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a plane polygonal mesh.  By default, this is a disc.\r\n     * @param name defines the name of the mesh to create\r\n     * @param radius sets the radius size (float) of the polygon (default 0.5)\r\n     * @param tessellation sets the number of polygon sides (positive integer, default 64). So a tessellation valued to 3 will build a triangle, to 4 a square, etc\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateDisc(name: string, radius: number, tessellation: number, scene: Nullable<Scene>, updatable?: boolean, sideOrientation?: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a box mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param size sets the size (float) of each box side (default 1)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateBox(name: string, size: number, scene: Nullable<Scene>, updatable?: boolean, sideOrientation?: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a sphere mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param segments sets the sphere number of horizontal stripes (positive integer, default 32)\r\n     * @param diameter sets the diameter size (float) of the sphere (default 1)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateSphere(name: string, segments: number, diameter: number, scene?: Scene, updatable?: boolean, sideOrientation?: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a hemisphere mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param segments sets the sphere number of horizontal stripes (positive integer, default 32)\r\n     * @param diameter sets the diameter size (float) of the sphere (default 1)\r\n     * @param scene defines the hosting scene\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateHemisphere(name: string, segments: number, diameter: number, scene?: Scene): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a cylinder or a cone mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param height sets the height size (float) of the cylinder/cone (float, default 2)\r\n     * @param diameterTop set the top cap diameter (floats, default 1)\r\n     * @param diameterBottom set the bottom cap diameter (floats, default 1). This value can't be zero\r\n     * @param tessellation sets the number of cylinder sides (positive integer, default 24). Set it to 3 to get a prism for instance\r\n     * @param subdivisions sets the number of rings along the cylinder height (positive integer, default 1)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateCylinder(\r\n        name: string,\r\n        height: number,\r\n        diameterTop: number,\r\n        diameterBottom: number,\r\n        tessellation: number,\r\n        subdivisions: any,\r\n        scene?: Scene,\r\n        updatable?: any,\r\n        sideOrientation?: number\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    // Torus  (Code from SharpDX.org)\r\n    /**\r\n     * Creates a torus mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param diameter sets the diameter size (float) of the torus (default 1)\r\n     * @param thickness sets the diameter size of the tube of the torus (float, default 0.5)\r\n     * @param tessellation sets the number of torus sides (positive integer, default 16)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateTorus(name: string, diameter: number, thickness: number, tessellation: number, scene?: Scene, updatable?: boolean, sideOrientation?: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a torus knot mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param radius sets the global radius size (float) of the torus knot (default 2)\r\n     * @param tube sets the diameter size of the tube of the torus (float, default 0.5)\r\n     * @param radialSegments sets the number of sides on each tube segments (positive integer, default 32)\r\n     * @param tubularSegments sets the number of tubes to decompose the knot into (positive integer, default 32)\r\n     * @param p the number of windings on X axis (positive integers, default 2)\r\n     * @param q the number of windings on Y axis (positive integers, default 3)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateTorusKnot(\r\n        name: string,\r\n        radius: number,\r\n        tube: number,\r\n        radialSegments: number,\r\n        tubularSegments: number,\r\n        p: number,\r\n        q: number,\r\n        scene?: Scene,\r\n        updatable?: boolean,\r\n        sideOrientation?: number\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a line mesh..\r\n     * @param name defines the name of the mesh to create\r\n     * @param points is an array successive Vector3\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param instance is an instance of an existing LineMesh object to be updated with the passed `points` parameter (https://doc.babylonjs.com/how_to/How_to_dynamically_morph_a_mesh#lines-and-dashedlines).\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateLines(name: string, points: Vector3[], scene: Nullable<Scene>, updatable: boolean, instance?: Nullable<LinesMesh>): LinesMesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a dashed line mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param points is an array successive Vector3\r\n     * @param dashSize is the size of the dashes relatively the dash number (positive float, default 3)\r\n     * @param gapSize is the size of the gap between two successive dashes relatively the dash number (positive float, default 1)\r\n     * @param dashNb is the intended total number of dashes (positive integer, default 200)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param instance is an instance of an existing LineMesh object to be updated with the passed `points` parameter (https://doc.babylonjs.com/how_to/How_to_dynamically_morph_a_mesh#lines-and-dashedlines)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateDashedLines(\r\n        name: string,\r\n        points: Vector3[],\r\n        dashSize: number,\r\n        gapSize: number,\r\n        dashNb: number,\r\n        scene: Nullable<Scene>,\r\n        updatable?: boolean,\r\n        instance?: LinesMesh\r\n    ): LinesMesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a polygon mesh.Please consider using the same method from the MeshBuilder class instead\r\n     * The polygon's shape will depend on the input parameters and is constructed parallel to a ground mesh.\r\n     * The parameter `shape` is a required array of successive Vector3 representing the corners of the polygon in th XoZ plane, that is y = 0 for all vectors.\r\n     * You can set the mesh side orientation with the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\r\n     * Remember you can only change the shape positions, not their number when updating a polygon.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param#non-regular-polygon\r\n     * @param name defines the name of the mesh to create\r\n     * @param shape is a required array of successive Vector3 representing the corners of the polygon in th XoZ plane, that is y = 0 for all vectors\r\n     * @param scene defines the hosting scene\r\n     * @param holes is a required array of arrays of successive Vector3 used to defines holes in the polygon\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @param earcutInjection can be used to inject your own earcut reference\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreatePolygon(name: string, shape: Vector3[], scene: Scene, holes?: Vector3[][], updatable?: boolean, sideOrientation?: number, earcutInjection?: any): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates an extruded polygon mesh, with depth in the Y direction..\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param#extruded-non-regular-polygon\r\n     * @param name defines the name of the mesh to create\r\n     * @param shape is a required array of successive Vector3 representing the corners of the polygon in th XoZ plane, that is y = 0 for all vectors\r\n     * @param depth defines the height of extrusion\r\n     * @param scene defines the hosting scene\r\n     * @param holes is a required array of arrays of successive Vector3 used to defines holes in the polygon\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @param earcutInjection can be used to inject your own earcut reference\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static ExtrudePolygon(\r\n        name: string,\r\n        shape: Vector3[],\r\n        depth: number,\r\n        scene: Scene,\r\n        holes?: Vector3[][],\r\n        updatable?: boolean,\r\n        sideOrientation?: number,\r\n        earcutInjection?: any\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates an extruded shape mesh.\r\n     * The extrusion is a parametric shape. It has no predefined shape. Its final shape will depend on the input parameters.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param#extruded-shapes\r\n     * @param name defines the name of the mesh to create\r\n     * @param shape is a required array of successive Vector3. This array depicts the shape to be extruded in its local space : the shape must be designed in the xOy plane and will be extruded along the Z axis\r\n     * @param path is a required array of successive Vector3. This is the axis curve the shape is extruded along\r\n     * @param scale is the value to scale the shape\r\n     * @param rotation is the angle value to rotate the shape each step (each path point), from the former step (so rotation added each step) along the curve\r\n     * @param cap sets the way the extruded shape is capped. Possible values : Mesh.NO_CAP (default), Mesh.CAP_START, Mesh.CAP_END, Mesh.CAP_ALL\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @param instance is an instance of an existing ExtrudedShape object to be updated with the passed `shape`, `path`, `scale` or `rotation` parameters (https://doc.babylonjs.com/how_to/How_to_dynamically_morph_a_mesh#extruded-shape)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static ExtrudeShape(\r\n        name: string,\r\n        shape: Vector3[],\r\n        path: Vector3[],\r\n        scale: number,\r\n        rotation: number,\r\n        cap: number,\r\n        scene: Nullable<Scene>,\r\n        updatable?: boolean,\r\n        sideOrientation?: number,\r\n        instance?: Mesh\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates an custom extruded shape mesh.\r\n     * The custom extrusion is a parametric shape.\r\n     * It has no predefined shape. Its final shape will depend on the input parameters.\r\n     *\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param#extruded-shapes\r\n     * @param name defines the name of the mesh to create\r\n     * @param shape is a required array of successive Vector3. This array depicts the shape to be extruded in its local space : the shape must be designed in the xOy plane and will be extruded along the Z axis\r\n     * @param path is a required array of successive Vector3. This is the axis curve the shape is extruded along\r\n     * @param scaleFunction is a custom Javascript function called on each path point\r\n     * @param rotationFunction is a custom Javascript function called on each path point\r\n     * @param ribbonCloseArray forces the extrusion underlying ribbon to close all the paths in its `pathArray`\r\n     * @param ribbonClosePath forces the extrusion underlying ribbon to close its `pathArray`\r\n     * @param cap sets the way the extruded shape is capped. Possible values : Mesh.NO_CAP (default), Mesh.CAP_START, Mesh.CAP_END, Mesh.CAP_ALL\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @param instance is an instance of an existing ExtrudedShape object to be updated with the passed `shape`, `path`, `scale` or `rotation` parameters (https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph#extruded-shape)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static ExtrudeShapeCustom(\r\n        name: string,\r\n        shape: Vector3[],\r\n        path: Vector3[],\r\n        scaleFunction: Nullable<{ (i: number, distance: number): number }>,\r\n        rotationFunction: Nullable<{ (i: number, distance: number): number }>,\r\n        ribbonCloseArray: boolean,\r\n        ribbonClosePath: boolean,\r\n        cap: number,\r\n        scene: Scene,\r\n        updatable?: boolean,\r\n        sideOrientation?: number,\r\n        instance?: Mesh\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates lathe mesh.\r\n     * The lathe is a shape with a symmetry axis : a 2D model shape is rotated around this axis to design the lathe.\r\n     * @param name defines the name of the mesh to create\r\n     * @param shape is a required array of successive Vector3. This array depicts the shape to be rotated in its local space : the shape must be designed in the xOy plane and will be rotated around the Y axis. It's usually a 2D shape, so the Vector3 z coordinates are often set to zero\r\n     * @param radius is the radius value of the lathe\r\n     * @param tessellation is the side number of the lathe.\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateLathe(name: string, shape: Vector3[], radius: number, tessellation: number, scene: Scene, updatable?: boolean, sideOrientation?: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a plane mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param size sets the size (float) of both sides of the plane at once (default 1)\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreatePlane(name: string, size: number, scene: Scene, updatable?: boolean, sideOrientation?: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a ground mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param width set the width of the ground\r\n     * @param height set the height of the ground\r\n     * @param subdivisions sets the number of subdivisions per side\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateGround(name: string, width: number, height: number, subdivisions: number, scene?: Scene, updatable?: boolean): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a tiled ground mesh.\r\n     * @param name defines the name of the mesh to create\r\n     * @param xmin set the ground minimum X coordinate\r\n     * @param zmin set the ground minimum Y coordinate\r\n     * @param xmax set the ground maximum X coordinate\r\n     * @param zmax set the ground maximum Z coordinate\r\n     * @param subdivisions is an object `{w: positive integer, h: positive integer}` (default `{w: 6, h: 6}`). `w` and `h` are the numbers of subdivisions on the ground width and height. Each subdivision is called a tile\r\n     * @param precision is an object `{w: positive integer, h: positive integer}` (default `{w: 2, h: 2}`). `w` and `h` are the numbers of subdivisions on the ground width and height of each tile\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateTiledGround(\r\n        name: string,\r\n        xmin: number,\r\n        zmin: number,\r\n        xmax: number,\r\n        zmax: number,\r\n        subdivisions: { w: number; h: number },\r\n        precision: { w: number; h: number },\r\n        scene: Scene,\r\n        updatable?: boolean\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a ground mesh from a height map.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set/height_map\r\n     * @param name defines the name of the mesh to create\r\n     * @param url sets the URL of the height map image resource\r\n     * @param width set the ground width size\r\n     * @param height set the ground height size\r\n     * @param subdivisions sets the number of subdivision per side\r\n     * @param minHeight is the minimum altitude on the ground\r\n     * @param maxHeight is the maximum altitude on the ground\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param onReady  is a callback function that will be called  once the mesh is built (the height map download can last some time)\r\n     * @param alphaFilter will filter any data where the alpha channel is below this value, defaults 0 (all data visible)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateGroundFromHeightMap(\r\n        name: string,\r\n        url: string,\r\n        width: number,\r\n        height: number,\r\n        subdivisions: number,\r\n        minHeight: number,\r\n        maxHeight: number,\r\n        scene: Scene,\r\n        updatable?: boolean,\r\n        onReady?: (mesh: GroundMesh) => void,\r\n        alphaFilter?: number\r\n    ): GroundMesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a tube mesh.\r\n     * The tube is a parametric shape.\r\n     * It has no predefined shape. Its final shape will depend on the input parameters.\r\n     *\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/param\r\n     * @param name defines the name of the mesh to create\r\n     * @param path is a required array of successive Vector3. It is the curve used as the axis of the tube\r\n     * @param radius sets the tube radius size\r\n     * @param tessellation is the number of sides on the tubular surface\r\n     * @param radiusFunction is a custom function. If it is not null, it overrides the parameter `radius`. This function is called on each point of the tube path and is passed the index `i` of the i-th point and the distance of this point from the first point of the path\r\n     * @param cap sets the way the extruded shape is capped. Possible values : Mesh.NO_CAP (default), Mesh.CAP_START, Mesh.CAP_END, Mesh.CAP_ALL\r\n     * @param scene defines the hosting scene\r\n     * @param updatable defines if the mesh must be flagged as updatable\r\n     * @param sideOrientation defines the mesh side orientation (https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation)\r\n     * @param instance is an instance of an existing Tube object to be updated with the passed `pathArray` parameter (https://doc.babylonjs.com/how_to/How_to_dynamically_morph_a_mesh#tube)\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateTube(\r\n        name: string,\r\n        path: Vector3[],\r\n        radius: number,\r\n        tessellation: number,\r\n        radiusFunction: { (i: number, distance: number): number },\r\n        cap: number,\r\n        scene: Scene,\r\n        updatable?: boolean,\r\n        sideOrientation?: number,\r\n        instance?: Mesh\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a polyhedron mesh.\r\n     *.\r\n     * * The parameter `type` (positive integer, max 14, default 0) sets the polyhedron type to build among the 15 embedded types. Please refer to the type sheet in the tutorial to choose the wanted type\r\n     * * The parameter `size` (positive float, default 1) sets the polygon size\r\n     * * You can overwrite the `size` on each dimension bu using the parameters `sizeX`, `sizeY` or `sizeZ` (positive floats, default to `size` value)\r\n     * * You can build other polyhedron types than the 15 embbeded ones by setting the parameter `custom` (`polyhedronObject`, default null). If you set the parameter `custom`, this overwrittes the parameter `type`\r\n     * * A `polyhedronObject` is a formatted javascript object. You'll find a full file with pre-set polyhedra here : https://github.com/BabylonJS/Extensions/tree/master/Polyhedron\r\n     * * You can set the color and the UV of each side of the polyhedron with the parameters `faceColors` (Color4, default `(1, 1, 1, 1)`) and faceUV (Vector4, default `(0, 0, 1, 1)`)\r\n     * * To understand how to set `faceUV` or `faceColors`, please read this by considering the right number of faces of your polyhedron, instead of only 6 for the box : https://doc.babylonjs.com/features/featuresDeepDive/materials/using/texturePerBoxFace\r\n     * * The parameter `flat` (boolean, default true). If set to false, it gives the polyhedron a single global face, so less vertices and shared normals. In this case, `faceColors` and `faceUV` are ignored\r\n     * * You can also set the mesh side orientation with the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n     * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n     * @param name defines the name of the mesh to create\r\n     * @param options defines the options used to create the mesh\r\n     * @param scene defines the hosting scene\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreatePolyhedron(\r\n        name: string,\r\n        options: {\r\n            type?: number;\r\n            size?: number;\r\n            sizeX?: number;\r\n            sizeY?: number;\r\n            sizeZ?: number;\r\n            custom?: any;\r\n            faceUV?: Vector4[];\r\n            faceColors?: Color4[];\r\n            updatable?: boolean;\r\n            sideOrientation?: number;\r\n        },\r\n        scene: Scene\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a sphere based upon an icosahedron with 20 triangular faces which can be subdivided\r\n     * * The parameter `radius` sets the radius size (float) of the icosphere (default 1)\r\n     * * You can set some different icosphere dimensions, for instance to build an ellipsoid, by using the parameters `radiusX`, `radiusY` and `radiusZ` (all by default have the same value than `radius`)\r\n     * * The parameter `subdivisions` sets the number of subdivisions (positive integer, default 4). The more subdivisions, the more faces on the icosphere whatever its size\r\n     * * The parameter `flat` (boolean, default true) gives each side its own normals. Set it to false to get a smooth continuous light reflection on the surface\r\n     * * You can also set the mesh side orientation with the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/set#side-orientation\r\n     * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/creation/polyhedra#icosphere\r\n     * @param name defines the name of the mesh\r\n     * @param options defines the options used to create the mesh\r\n     * @param scene defines the hosting scene\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateIcoSphere(\r\n        name: string,\r\n        options: { radius?: number; flat?: boolean; subdivisions?: number; sideOrientation?: number; updatable?: boolean },\r\n        scene: Scene\r\n    ): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Creates a decal mesh.\r\n     *.\r\n     * A decal is a mesh usually applied as a model onto the surface of another mesh\r\n     * @param name  defines the name of the mesh\r\n     * @param sourceMesh defines the mesh receiving the decal\r\n     * @param position sets the position of the decal in world coordinates\r\n     * @param normal sets the normal of the mesh where the decal is applied onto in world coordinates\r\n     * @param size sets the decal scaling\r\n     * @param angle sets the angle to rotate the decal\r\n     * @returns a new Mesh\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateDecal(name: string, sourceMesh: AbstractMesh, position: Vector3, normal: Vector3, size: Vector3, angle: number): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /** Creates a Capsule Mesh\r\n     * @param name defines the name of the mesh.\r\n     * @param options the constructors options used to shape the mesh.\r\n     * @param scene defines the scene the mesh is scoped to.\r\n     * @returns the capsule mesh\r\n     * @see https://doc.babylonjs.com/how_to/capsule_shape\r\n     * @deprecated Please use MeshBuilder instead\r\n     */\r\n    public static CreateCapsule(name: string, options: ICreateCapsuleOptions, scene: Scene): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n\r\n    /**\r\n     * Extends a mesh to a Goldberg mesh\r\n     * Warning  the mesh to convert MUST be an import of a perviously exported Goldberg mesh\r\n     * @param mesh the mesh to convert\r\n     * @returns the extended mesh\r\n     * @deprecated Please use ExtendMeshToGoldberg instead\r\n     */\r\n    public static ExtendToGoldberg(mesh: Mesh): Mesh {\r\n        throw new Error(\"Import MeshBuilder to populate this function\");\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.Mesh\", Mesh);\r\n", "import type { Nullable, FloatArray, IndicesArray } from \"../types\";\r\nimport type { Vector3 } from \"../Maths/math.vector\";\r\nimport { Matrix, TmpVectors } from \"../Maths/math.vector\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Node } from \"../node\";\r\nimport type { IMeshDataOptions } from \"../Meshes/abstractMesh\";\r\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport type { Material } from \"../Materials/material\";\r\nimport type { Skeleton } from \"../Bones/skeleton\";\r\nimport { DeepCopier } from \"../Misc/deepCopier\";\r\nimport { TransformNode } from \"./transformNode\";\r\nimport type { Light } from \"../Lights/light\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport type { ThinEngine } from \"../Engines/thinEngine\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport type { Geometry } from \"./geometry\";\r\n\r\nMesh._instancedMeshFactory = (name: string, mesh: Mesh): InstancedMesh => {\r\n    const instance = new InstancedMesh(name, mesh);\r\n\r\n    if (mesh.instancedBuffers) {\r\n        instance.instancedBuffers = {};\r\n\r\n        for (const key in mesh.instancedBuffers) {\r\n            instance.instancedBuffers[key] = mesh.instancedBuffers[key];\r\n        }\r\n    }\r\n\r\n    return instance;\r\n};\r\n\r\n/**\r\n * Creates an instance based on a source mesh.\r\n */\r\nexport class InstancedMesh extends AbstractMesh {\r\n    private _sourceMesh: Mesh;\r\n    private _currentLOD: Mesh;\r\n    private _billboardWorldMatrix: Matrix;\r\n\r\n    /** @internal */\r\n    public _indexInSourceMeshInstanceArray = -1;\r\n    /** @internal */\r\n    public _distanceToCamera: number = 0;\r\n    /** @internal */\r\n    public _previousWorldMatrix: Nullable<Matrix>;\r\n\r\n    /**\r\n     * Creates a new InstancedMesh object from the mesh source.\r\n     * @param name defines the name of the instance\r\n     * @param source the mesh to create the instance from\r\n     */\r\n    constructor(name: string, source: Mesh) {\r\n        super(name, source.getScene());\r\n\r\n        source.addInstance(this);\r\n\r\n        this._sourceMesh = source;\r\n\r\n        this._unIndexed = source._unIndexed;\r\n\r\n        this.position.copyFrom(source.position);\r\n        this.rotation.copyFrom(source.rotation);\r\n        this.scaling.copyFrom(source.scaling);\r\n\r\n        if (source.rotationQuaternion) {\r\n            this.rotationQuaternion = source.rotationQuaternion.clone();\r\n        }\r\n\r\n        this.animations = source.animations.slice();\r\n        for (const range of source.getAnimationRanges()) {\r\n            if (range != null) {\r\n                this.createAnimationRange(range.name, range.from, range.to);\r\n            }\r\n        }\r\n\r\n        this.infiniteDistance = source.infiniteDistance;\r\n\r\n        this.setPivotMatrix(source.getPivotMatrix());\r\n\r\n        if (!source.skeleton && !source.morphTargetManager && source.hasBoundingInfo) {\r\n            // without skeleton or morphTargetManager, use bounding info of source mesh directly\r\n            const boundingInfo = source.getBoundingInfo();\r\n            this.buildBoundingInfo(boundingInfo.minimum, boundingInfo.maximum);\r\n        } else {\r\n            this.refreshBoundingInfo(true, true);\r\n        }\r\n        this._syncSubMeshes();\r\n    }\r\n\r\n    /**\r\n     * @returns the string \"InstancedMesh\".\r\n     */\r\n    public override getClassName(): string {\r\n        return \"InstancedMesh\";\r\n    }\r\n\r\n    /** Gets the list of lights affecting that mesh */\r\n    public override get lightSources(): Light[] {\r\n        return this._sourceMesh._lightSources;\r\n    }\r\n\r\n    public override _resyncLightSources(): void {\r\n        // Do nothing as all the work will be done by source mesh\r\n    }\r\n\r\n    public override _resyncLightSource(): void {\r\n        // Do nothing as all the work will be done by source mesh\r\n    }\r\n\r\n    public override _removeLightSource(): void {\r\n        // Do nothing as all the work will be done by source mesh\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * If the source mesh receives shadows\r\n     */\r\n    public override get receiveShadows(): boolean {\r\n        return this._sourceMesh.receiveShadows;\r\n    }\r\n\r\n    public override set receiveShadows(_value: boolean) {\r\n        if (this._sourceMesh?.receiveShadows !== _value) {\r\n            Tools.Warn(\"Setting receiveShadows on an instanced mesh has no effect\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The material of the source mesh\r\n     */\r\n    public override get material(): Nullable<Material> {\r\n        return this._sourceMesh.material;\r\n    }\r\n\r\n    public override set material(_value: Nullable<Material>) {\r\n        if (this._sourceMesh?.material !== _value) {\r\n            Tools.Warn(\"Setting material on an instanced mesh has no effect\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Visibility of the source mesh\r\n     */\r\n    public override get visibility(): number {\r\n        return this._sourceMesh.visibility;\r\n    }\r\n\r\n    public override set visibility(_value: number) {\r\n        if (this._sourceMesh?.visibility !== _value) {\r\n            Tools.Warn(\"Setting visibility on an instanced mesh has no effect\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Skeleton of the source mesh\r\n     */\r\n    public override get skeleton(): Nullable<Skeleton> {\r\n        return this._sourceMesh.skeleton;\r\n    }\r\n\r\n    public override set skeleton(_value: Nullable<Skeleton>) {\r\n        if (this._sourceMesh?.skeleton !== _value) {\r\n            Tools.Warn(\"Setting skeleton on an instanced mesh has no effect\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rendering ground id of the source mesh\r\n     */\r\n    public override get renderingGroupId(): number {\r\n        return this._sourceMesh.renderingGroupId;\r\n    }\r\n\r\n    public override set renderingGroupId(value: number) {\r\n        if (!this._sourceMesh || value === this._sourceMesh.renderingGroupId) {\r\n            return;\r\n        }\r\n\r\n        //no-op with warning\r\n        Logger.Warn(\"Note - setting renderingGroupId of an instanced mesh has no effect on the scene\");\r\n    }\r\n\r\n    /**\r\n     * @returns the total number of vertices (integer).\r\n     */\r\n    public override getTotalVertices(): number {\r\n        return this._sourceMesh ? this._sourceMesh.getTotalVertices() : 0;\r\n    }\r\n\r\n    /**\r\n     * Returns a positive integer : the total number of indices in this mesh geometry.\r\n     * @returns the number of indices or zero if the mesh has no geometry.\r\n     */\r\n    public override getTotalIndices(): number {\r\n        return this._sourceMesh.getTotalIndices();\r\n    }\r\n\r\n    /**\r\n     * The source mesh of the instance\r\n     */\r\n    public get sourceMesh(): Mesh {\r\n        return this._sourceMesh;\r\n    }\r\n\r\n    /**\r\n     * Gets the mesh internal Geometry object\r\n     */\r\n    public override get geometry(): Nullable<Geometry> {\r\n        return this._sourceMesh._geometry;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InstancedMesh object from the mesh model.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances\r\n     * @param name defines the name of the new instance\r\n     * @returns a new InstancedMesh\r\n     */\r\n    public createInstance(name: string): InstancedMesh {\r\n        return this._sourceMesh.createInstance(name);\r\n    }\r\n\r\n    /**\r\n     * Is this node ready to be used/rendered\r\n     * @param completeCheck defines if a complete check (including materials and lights) has to be done (false by default)\r\n     * @returns {boolean} is it ready\r\n     */\r\n    public override isReady(completeCheck = false): boolean {\r\n        return this._sourceMesh.isReady(completeCheck, true);\r\n    }\r\n\r\n    /**\r\n     * Returns an array of integers or a typed array (Int32Array, Uint32Array, Uint16Array) populated with the mesh indices.\r\n     * @param kind kind of verticies to retrieve (eg. positions, normals, uvs, etc.)\r\n     * @param copyWhenShared If true (default false) and and if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one.\r\n     * @param forceCopy defines a boolean forcing the copy of the buffer no matter what the value of copyWhenShared is\r\n     * @returns a float array or a Float32Array of the requested kind of data : positions, normals, uvs, etc.\r\n     */\r\n    public override getVerticesData(kind: string, copyWhenShared?: boolean, forceCopy?: boolean): Nullable<FloatArray> {\r\n        return this._sourceMesh.getVerticesData(kind, copyWhenShared, forceCopy);\r\n    }\r\n\r\n    public override copyVerticesData(kind: string, vertexData: { [kind: string]: Float32Array }): void {\r\n        this._sourceMesh.copyVerticesData(kind, vertexData);\r\n    }\r\n\r\n    public override getVertexBuffer(kind: string, bypassInstanceData?: boolean): Nullable<VertexBuffer> {\r\n        return this._sourceMesh.getVertexBuffer(kind, bypassInstanceData);\r\n    }\r\n\r\n    /**\r\n     * Sets the vertex data of the mesh geometry for the requested `kind`.\r\n     * If the mesh has no geometry, a new Geometry object is set to the mesh and then passed this vertex data.\r\n     * The `data` are either a numeric array either a Float32Array.\r\n     * The parameter `updatable` is passed as is to the underlying Geometry object constructor (if initially none) or updater.\r\n     * The parameter `stride` is an optional positive integer, it is usually automatically deducted from the `kind` (3 for positions or normals, 2 for UV, etc).\r\n     * Note that a new underlying VertexBuffer object is created each call.\r\n     * If the `kind` is the `PositionKind`, the mesh BoundingInfo is renewed, so the bounding box and sphere, and the mesh World Matrix is recomputed.\r\n     *\r\n     * Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     *\r\n     * Returns the Mesh.\r\n     * @param kind defines vertex data kind\r\n     * @param data defines the data source\r\n     * @param updatable defines if the data must be flagged as updatable (false as default)\r\n     * @param stride defines the vertex stride (optional)\r\n     * @returns the current mesh\r\n     */\r\n    public override setVerticesData(kind: string, data: FloatArray, updatable?: boolean, stride?: number): AbstractMesh {\r\n        if (this.sourceMesh) {\r\n            this.sourceMesh.setVerticesData(kind, data, updatable, stride);\r\n        }\r\n        return this.sourceMesh;\r\n    }\r\n\r\n    /**\r\n     * Updates the existing vertex data of the mesh geometry for the requested `kind`.\r\n     * If the mesh has no geometry, it is simply returned as it is.\r\n     * The `data` are either a numeric array either a Float32Array.\r\n     * No new underlying VertexBuffer object is created.\r\n     * If the `kind` is the `PositionKind` and if `updateExtends` is true, the mesh BoundingInfo is renewed, so the bounding box and sphere, and the mesh World Matrix is recomputed.\r\n     * If the parameter `makeItUnique` is true, a new global geometry is created from this positions and is set to the mesh.\r\n     *\r\n     * Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     *\r\n     * Returns the Mesh.\r\n     * @param kind defines vertex data kind\r\n     * @param data defines the data source\r\n     * @param updateExtends defines if extends info of the mesh must be updated (can be null). This is mostly useful for \"position\" kind\r\n     * @param makeItUnique defines it the updated vertex buffer must be flagged as unique (false by default)\r\n     * @returns the source mesh\r\n     */\r\n    public override updateVerticesData(kind: string, data: FloatArray, updateExtends?: boolean, makeItUnique?: boolean): Mesh {\r\n        if (this.sourceMesh) {\r\n            this.sourceMesh.updateVerticesData(kind, data, updateExtends, makeItUnique);\r\n        }\r\n        return this.sourceMesh;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh indices.\r\n     * Expects an array populated with integers or a typed array (Int32Array, Uint32Array, Uint16Array).\r\n     * If the mesh has no geometry, a new Geometry object is created and set to the mesh.\r\n     * This method creates a new index buffer each call.\r\n     * Returns the Mesh.\r\n     * @param indices the source data\r\n     * @param totalVertices defines the total number of vertices referenced by indices (could be null)\r\n     * @returns source mesh\r\n     */\r\n    public override setIndices(indices: IndicesArray, totalVertices: Nullable<number> = null): Mesh {\r\n        if (this.sourceMesh) {\r\n            this.sourceMesh.setIndices(indices, totalVertices);\r\n        }\r\n        return this.sourceMesh;\r\n    }\r\n\r\n    /**\r\n     * Boolean : True if the mesh owns the requested kind of data.\r\n     * @param kind defines which buffer to check (positions, indices, normals, etc). Possible `kind` values :\r\n     * - VertexBuffer.PositionKind\r\n     * - VertexBuffer.UVKind\r\n     * - VertexBuffer.UV2Kind\r\n     * - VertexBuffer.UV3Kind\r\n     * - VertexBuffer.UV4Kind\r\n     * - VertexBuffer.UV5Kind\r\n     * - VertexBuffer.UV6Kind\r\n     * - VertexBuffer.ColorKind\r\n     * - VertexBuffer.MatricesIndicesKind\r\n     * - VertexBuffer.MatricesIndicesExtraKind\r\n     * - VertexBuffer.MatricesWeightsKind\r\n     * - VertexBuffer.MatricesWeightsExtraKind\r\n     * @returns true if data kind is present\r\n     */\r\n    public override isVerticesDataPresent(kind: string): boolean {\r\n        return this._sourceMesh.isVerticesDataPresent(kind);\r\n    }\r\n\r\n    /**\r\n     * @returns an array of indices (IndicesArray).\r\n     */\r\n    public override getIndices(): Nullable<IndicesArray> {\r\n        return this._sourceMesh.getIndices();\r\n    }\r\n\r\n    public override get _positions(): Nullable<Vector3[]> {\r\n        return this._sourceMesh._positions;\r\n    }\r\n\r\n    public override refreshBoundingInfo(applySkeletonOrOptions: boolean | IMeshDataOptions = false, applyMorph: boolean = false): InstancedMesh {\r\n        if (this.hasBoundingInfo && this.getBoundingInfo().isLocked) {\r\n            return this;\r\n        }\r\n\r\n        let options: IMeshDataOptions;\r\n        if (typeof applySkeletonOrOptions === \"object\") {\r\n            options = applySkeletonOrOptions;\r\n        } else {\r\n            options = {\r\n                applySkeleton: applySkeletonOrOptions,\r\n                applyMorph: applyMorph,\r\n            };\r\n        }\r\n\r\n        const bias = this._sourceMesh.geometry ? this._sourceMesh.geometry.boundingBias : null;\r\n        this._refreshBoundingInfo(this._sourceMesh._getData(options, null, VertexBuffer.PositionKind), bias);\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _preActivate(): InstancedMesh {\r\n        if (this._currentLOD) {\r\n            this._currentLOD._preActivate();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _activate(renderId: number, intermediateRendering: boolean): boolean {\r\n        super._activate(renderId, intermediateRendering);\r\n\r\n        if (!this._sourceMesh.subMeshes) {\r\n            Logger.Warn(\"Instances should only be created for meshes with geometry.\");\r\n        }\r\n\r\n        if (this._currentLOD) {\r\n            const differentSign = this._currentLOD._getWorldMatrixDeterminant() >= 0 !== this._getWorldMatrixDeterminant() >= 0;\r\n            if (differentSign) {\r\n                this._internalAbstractMeshDataInfo._actAsRegularMesh = true;\r\n                return true;\r\n            }\r\n            this._internalAbstractMeshDataInfo._actAsRegularMesh = false;\r\n\r\n            this._currentLOD._registerInstanceForRenderId(this, renderId);\r\n\r\n            if (intermediateRendering) {\r\n                if (!this._currentLOD._internalAbstractMeshDataInfo._isActiveIntermediate) {\r\n                    this._currentLOD._internalAbstractMeshDataInfo._onlyForInstancesIntermediate = true;\r\n                    return true;\r\n                }\r\n            } else {\r\n                if (!this._currentLOD._internalAbstractMeshDataInfo._isActive) {\r\n                    this._currentLOD._internalAbstractMeshDataInfo._onlyForInstances = true;\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _postActivate(): void {\r\n        if (this._sourceMesh.edgesShareWithInstances && this._sourceMesh._edgesRenderer && this._sourceMesh._edgesRenderer.isEnabled && this._sourceMesh._renderingGroup) {\r\n            // we are using the edge renderer of the source mesh\r\n            this._sourceMesh._renderingGroup._edgesRenderers.pushNoDuplicate(this._sourceMesh._edgesRenderer);\r\n            this._sourceMesh._edgesRenderer.customInstances.push(this.getWorldMatrix());\r\n        } else if (this._edgesRenderer && this._edgesRenderer.isEnabled && this._sourceMesh._renderingGroup) {\r\n            // we are using the edge renderer defined for this instance\r\n            this._sourceMesh._renderingGroup._edgesRenderers.push(this._edgesRenderer);\r\n        }\r\n    }\r\n\r\n    public override getWorldMatrix(): Matrix {\r\n        if (\r\n            this._currentLOD &&\r\n            this._currentLOD !== this._sourceMesh &&\r\n            this._currentLOD.billboardMode !== TransformNode.BILLBOARDMODE_NONE &&\r\n            this._currentLOD._masterMesh !== this\r\n        ) {\r\n            if (!this._billboardWorldMatrix) {\r\n                this._billboardWorldMatrix = new Matrix();\r\n            }\r\n            const tempMaster = this._currentLOD._masterMesh;\r\n            this._currentLOD._masterMesh = this;\r\n            TmpVectors.Vector3[7].copyFrom(this._currentLOD.position);\r\n            this._currentLOD.position.set(0, 0, 0);\r\n            this._billboardWorldMatrix.copyFrom(this._currentLOD.computeWorldMatrix(true));\r\n            this._currentLOD.position.copyFrom(TmpVectors.Vector3[7]);\r\n            this._currentLOD._masterMesh = tempMaster;\r\n            return this._billboardWorldMatrix;\r\n        }\r\n\r\n        return super.getWorldMatrix();\r\n    }\r\n\r\n    public override get isAnInstance(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns the current associated LOD AbstractMesh.\r\n     * @param camera defines the camera to use to pick the LOD level\r\n     * @returns a Mesh or `null` if no LOD is associated with the AbstractMesh\r\n     */\r\n    public override getLOD(camera: Camera): AbstractMesh {\r\n        if (!camera) {\r\n            return this;\r\n        }\r\n\r\n        const sourceMeshLODLevels = this.sourceMesh.getLODLevels();\r\n        if (!sourceMeshLODLevels || sourceMeshLODLevels.length === 0) {\r\n            this._currentLOD = this.sourceMesh;\r\n        } else {\r\n            const boundingInfo = this.getBoundingInfo();\r\n            this._currentLOD = <Mesh>this.sourceMesh.getLOD(camera, boundingInfo.boundingSphere);\r\n        }\r\n\r\n        return this._currentLOD;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _preActivateForIntermediateRendering(renderId: number): Mesh {\r\n        return this.sourceMesh._preActivateForIntermediateRendering(renderId);\r\n    }\r\n\r\n    /** @internal */\r\n    public _syncSubMeshes(): InstancedMesh {\r\n        this.releaseSubMeshes();\r\n        if (this._sourceMesh.subMeshes) {\r\n            for (let index = 0; index < this._sourceMesh.subMeshes.length; index++) {\r\n                this._sourceMesh.subMeshes[index].clone(this, this._sourceMesh);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _generatePointsArray(): boolean {\r\n        return this._sourceMesh._generatePointsArray();\r\n    }\r\n\r\n    /** @internal */\r\n    public override _updateBoundingInfo(): AbstractMesh {\r\n        if (this.hasBoundingInfo) {\r\n            this.getBoundingInfo().update(this.worldMatrixFromCache);\r\n        } else {\r\n            this.buildBoundingInfo(this.absolutePosition, this.absolutePosition, this.worldMatrixFromCache);\r\n        }\r\n        this._updateSubMeshesBoundingInfo(this.worldMatrixFromCache);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InstancedMesh from the current mesh.\r\n     *\r\n     * Returns the clone.\r\n     * @param name the cloned mesh name\r\n     * @param newParent the optional Node to parent the clone to.\r\n     * @param doNotCloneChildren if `true` the model children aren't cloned.\r\n     * @param newSourceMesh if set this mesh will be used as the source mesh instead of ths instance's one\r\n     * @returns the clone\r\n     */\r\n    public override clone(name: string, newParent: Nullable<Node> = null, doNotCloneChildren?: boolean, newSourceMesh?: Mesh): InstancedMesh {\r\n        const result = (newSourceMesh || this._sourceMesh).createInstance(name);\r\n\r\n        // Deep copy\r\n        DeepCopier.DeepCopy(\r\n            this,\r\n            result,\r\n            [\r\n                \"name\",\r\n                \"subMeshes\",\r\n                \"uniqueId\",\r\n                \"parent\",\r\n                \"lightSources\",\r\n                \"receiveShadows\",\r\n                \"material\",\r\n                \"visibility\",\r\n                \"skeleton\",\r\n                \"sourceMesh\",\r\n                \"isAnInstance\",\r\n                \"facetNb\",\r\n                \"isFacetDataEnabled\",\r\n                \"isBlocked\",\r\n                \"useBones\",\r\n                \"hasInstances\",\r\n                \"collider\",\r\n                \"edgesRenderer\",\r\n                \"forward\",\r\n                \"up\",\r\n                \"right\",\r\n                \"absolutePosition\",\r\n                \"absoluteScaling\",\r\n                \"absoluteRotationQuaternion\",\r\n                \"isWorldMatrixFrozen\",\r\n                \"nonUniformScaling\",\r\n                \"behaviors\",\r\n                \"worldMatrixFromCache\",\r\n                \"hasThinInstances\",\r\n                \"hasBoundingInfo\",\r\n                \"geometry\",\r\n            ],\r\n            []\r\n        );\r\n\r\n        // Parent\r\n        if (newParent) {\r\n            result.parent = newParent;\r\n        }\r\n\r\n        if (!doNotCloneChildren) {\r\n            // Children\r\n            for (let index = 0; index < this.getScene().meshes.length; index++) {\r\n                const mesh = this.getScene().meshes[index];\r\n\r\n                if (mesh.parent === this) {\r\n                    mesh.clone(mesh.name, result);\r\n                }\r\n            }\r\n        }\r\n\r\n        result.computeWorldMatrix(true);\r\n\r\n        this.onClonedObservable.notifyObservers(result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Disposes the InstancedMesh.\r\n     * Returns nothing.\r\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\r\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\r\n     */\r\n    public override dispose(doNotRecurse?: boolean, disposeMaterialAndTextures = false): void {\r\n        // Remove from mesh\r\n        this._sourceMesh.removeInstance(this);\r\n        super.dispose(doNotRecurse, disposeMaterialAndTextures);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _serializeAsParent(serializationObject: any) {\r\n        super._serializeAsParent(serializationObject);\r\n\r\n        serializationObject.parentId = this._sourceMesh.uniqueId;\r\n        serializationObject.parentInstanceIndex = this._indexInSourceMeshInstanceArray;\r\n    }\r\n\r\n    /**\r\n     * Instantiate (when possible) or clone that node with its hierarchy\r\n     * @param newParent defines the new parent to use for the instance (or clone)\r\n     * @param options defines options to configure how copy is done\r\n     * @param options.doNotInstantiate defines if the model must be instantiated or just cloned\r\n     * @param options.newSourcedMesh newSourcedMesh the new source mesh for the instance (or clone)\r\n     * @param onNewNodeCreated defines an option callback to call when a clone or an instance is created\r\n     * @returns an instance (or a clone) of the current node with its hierarchy\r\n     */\r\n    public override instantiateHierarchy(\r\n        newParent: Nullable<TransformNode> = null,\r\n        options?: { doNotInstantiate: boolean | ((node: TransformNode) => boolean); newSourcedMesh?: Mesh },\r\n        onNewNodeCreated?: (source: TransformNode, clone: TransformNode) => void\r\n    ): Nullable<TransformNode> {\r\n        const clone = this.clone(\"Clone of \" + (this.name || this.id), newParent || this.parent, true, options && options.newSourcedMesh);\r\n\r\n        if (clone) {\r\n            if (onNewNodeCreated) {\r\n                onNewNodeCreated(this, clone);\r\n            }\r\n        }\r\n\r\n        for (const child of this.getChildTransformNodes(true)) {\r\n            child.instantiateHierarchy(clone, options, onNewNodeCreated);\r\n        }\r\n\r\n        return clone;\r\n    }\r\n}\r\n\r\ndeclare module \"./mesh\" {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    export interface Mesh {\r\n        /**\r\n         * Register a custom buffer that will be instanced\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances#custom-buffers\r\n         * @param kind defines the buffer kind\r\n         * @param stride defines the stride in floats\r\n         */\r\n        registerInstancedBuffer(kind: string, stride: number): void;\r\n\r\n        /**\r\n         * Invalidate VertexArrayObjects belonging to the mesh (but not to the Geometry of the mesh).\r\n         */\r\n        _invalidateInstanceVertexArrayObject(): void;\r\n\r\n        /**\r\n         * true to use the edge renderer for all instances of this mesh\r\n         */\r\n        edgesShareWithInstances: boolean;\r\n\r\n        /** @internal */\r\n        _userInstancedBuffersStorage: {\r\n            data: { [key: string]: Float32Array };\r\n            sizes: { [key: string]: number };\r\n            vertexBuffers: { [key: string]: Nullable<VertexBuffer> };\r\n            strides: { [key: string]: number };\r\n            vertexArrayObjects?: { [key: string]: WebGLVertexArrayObject };\r\n            renderPasses?: {\r\n                [renderPassId: number]: { [kind: string]: Nullable<VertexBuffer> };\r\n            };\r\n        };\r\n    }\r\n}\r\n\r\ndeclare module \"./abstractMesh\" {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    export interface AbstractMesh {\r\n        /**\r\n         * Object used to store instanced buffers defined by user\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/copies/instances#custom-buffers\r\n         */\r\n        instancedBuffers: { [key: string]: any };\r\n    }\r\n}\r\n\r\nMesh.prototype.registerInstancedBuffer = function (kind: string, stride: number): void {\r\n    // Remove existing one\r\n    this._userInstancedBuffersStorage?.vertexBuffers[kind]?.dispose();\r\n\r\n    // Creates the instancedBuffer field if not present\r\n    if (!this.instancedBuffers) {\r\n        this.instancedBuffers = {};\r\n\r\n        for (const instance of this.instances) {\r\n            instance.instancedBuffers = {};\r\n        }\r\n    }\r\n\r\n    if (!this._userInstancedBuffersStorage) {\r\n        this._userInstancedBuffersStorage = {\r\n            data: {},\r\n            vertexBuffers: {},\r\n            strides: {},\r\n            sizes: {},\r\n            vertexArrayObjects: this.getEngine().getCaps().vertexArrayObject ? {} : undefined,\r\n        };\r\n    }\r\n\r\n    // Creates an empty property for this kind\r\n    this.instancedBuffers[kind] = null;\r\n\r\n    this._userInstancedBuffersStorage.strides[kind] = stride;\r\n    this._userInstancedBuffersStorage.sizes[kind] = stride * 32; // Initial size\r\n    this._userInstancedBuffersStorage.data[kind] = new Float32Array(this._userInstancedBuffersStorage.sizes[kind]);\r\n    this._userInstancedBuffersStorage.vertexBuffers[kind] = new VertexBuffer(this.getEngine(), this._userInstancedBuffersStorage.data[kind], kind, true, false, stride, true);\r\n\r\n    for (const instance of this.instances) {\r\n        instance.instancedBuffers[kind] = null;\r\n    }\r\n\r\n    this._invalidateInstanceVertexArrayObject();\r\n\r\n    this._markSubMeshesAsAttributesDirty();\r\n};\r\n\r\nMesh.prototype._processInstancedBuffers = function (visibleInstances: Nullable<InstancedMesh[]>, renderSelf: boolean) {\r\n    const instanceCount = visibleInstances ? visibleInstances.length : 0;\r\n\r\n    for (const kind in this.instancedBuffers) {\r\n        let size = this._userInstancedBuffersStorage.sizes[kind];\r\n        const stride = this._userInstancedBuffersStorage.strides[kind];\r\n\r\n        // Resize if required\r\n        const expectedSize = (instanceCount + 1) * stride;\r\n\r\n        while (size < expectedSize) {\r\n            size *= 2;\r\n        }\r\n\r\n        if (this._userInstancedBuffersStorage.data[kind].length != size) {\r\n            this._userInstancedBuffersStorage.data[kind] = new Float32Array(size);\r\n            this._userInstancedBuffersStorage.sizes[kind] = size;\r\n            if (this._userInstancedBuffersStorage.vertexBuffers[kind]) {\r\n                this._userInstancedBuffersStorage.vertexBuffers[kind].dispose();\r\n                this._userInstancedBuffersStorage.vertexBuffers[kind] = null;\r\n            }\r\n        }\r\n\r\n        const data = this._userInstancedBuffersStorage.data[kind];\r\n\r\n        // Update data buffer\r\n        let offset = 0;\r\n        if (renderSelf) {\r\n            const value = this.instancedBuffers[kind];\r\n\r\n            if (value.toArray) {\r\n                value.toArray(data, offset);\r\n            } else if (value.copyToArray) {\r\n                value.copyToArray(data, offset);\r\n            } else {\r\n                data[offset] = value;\r\n            }\r\n\r\n            offset += stride;\r\n        }\r\n\r\n        for (let instanceIndex = 0; instanceIndex < instanceCount; instanceIndex++) {\r\n            const instance = visibleInstances![instanceIndex];\r\n\r\n            const value = instance.instancedBuffers[kind];\r\n\r\n            if (value.toArray) {\r\n                value.toArray(data, offset);\r\n            } else if (value.copyToArray) {\r\n                value.copyToArray(data, offset);\r\n            } else {\r\n                data[offset] = value;\r\n            }\r\n\r\n            offset += stride;\r\n        }\r\n\r\n        // Update vertex buffer\r\n        if (!this._userInstancedBuffersStorage.vertexBuffers[kind]) {\r\n            this._userInstancedBuffersStorage.vertexBuffers[kind] = new VertexBuffer(\r\n                this.getEngine(),\r\n                this._userInstancedBuffersStorage.data[kind],\r\n                kind,\r\n                true,\r\n                false,\r\n                stride,\r\n                true\r\n            );\r\n            this._invalidateInstanceVertexArrayObject();\r\n        } else {\r\n            this._userInstancedBuffersStorage.vertexBuffers[kind].updateDirectly(data, 0);\r\n        }\r\n    }\r\n};\r\n\r\nMesh.prototype._invalidateInstanceVertexArrayObject = function () {\r\n    if (!this._userInstancedBuffersStorage || this._userInstancedBuffersStorage.vertexArrayObjects === undefined) {\r\n        return;\r\n    }\r\n\r\n    for (const kind in this._userInstancedBuffersStorage.vertexArrayObjects) {\r\n        (this.getEngine() as ThinEngine).releaseVertexArrayObject(this._userInstancedBuffersStorage.vertexArrayObjects[kind]);\r\n    }\r\n\r\n    this._userInstancedBuffersStorage.vertexArrayObjects = {};\r\n};\r\n\r\nMesh.prototype._disposeInstanceSpecificData = function () {\r\n    for (const renderPassId in this._instanceDataStorage.renderPasses) {\r\n        this._instanceDataStorage.renderPasses[renderPassId].instancesBuffer?.dispose();\r\n    }\r\n    this._instanceDataStorage.renderPasses = {};\r\n\r\n    while (this.instances.length) {\r\n        this.instances[0].dispose();\r\n    }\r\n\r\n    for (const kind in this.instancedBuffers) {\r\n        if (this._userInstancedBuffersStorage.vertexBuffers[kind]) {\r\n            this._userInstancedBuffersStorage.vertexBuffers[kind].dispose();\r\n        }\r\n    }\r\n\r\n    this._invalidateInstanceVertexArrayObject();\r\n\r\n    this.instancedBuffers = {};\r\n};\r\n\r\n// Register Class Name\r\nRegisterClass(\"BABYLON.InstancedMesh\", InstancedMesh);\r\n", "import type { Scene } from \"./scene\";\r\nimport { Mesh } from \"./Meshes/mesh\";\r\nimport { TransformNode } from \"./Meshes/transformNode\";\r\nimport type { Skeleton } from \"./Bones/skeleton\";\r\nimport type { AnimationGroup } from \"./Animations/animationGroup\";\r\nimport { type Animatable } from \"./Animations/animatable.core\";\r\nimport { AbstractMesh } from \"./Meshes/abstractMesh\";\r\nimport type { MultiMaterial } from \"./Materials/multiMaterial\";\r\nimport type { Material } from \"./Materials/material\";\r\nimport { Logger } from \"./Misc/logger\";\r\nimport { EngineStore } from \"./Engines/engineStore\";\r\nimport type { Nullable } from \"./types\";\r\nimport type { Node } from \"./node\";\r\nimport type { Observer } from \"./Misc/observable\";\r\nimport type { AbstractEngine } from \"./Engines/abstractEngine\";\r\nimport { InstancedMesh } from \"./Meshes/instancedMesh\";\r\nimport { Light } from \"./Lights/light\";\r\nimport { Camera } from \"./Cameras/camera\";\r\nimport { Tools } from \"./Misc/tools\";\r\nimport type { IParticleSystem } from \"./Particles/IParticleSystem\";\r\nimport type { IAssetContainer } from \"./IAssetContainer\";\r\nimport type { Animation } from \"./Animations/animation\";\r\nimport type { MorphTargetManager } from \"./Morph/morphTargetManager\";\r\nimport type { Geometry } from \"./Meshes/geometry\";\r\nimport type { AbstractActionManager } from \"./Actions/abstractActionManager\";\r\nimport type { BaseTexture } from \"./Materials/Textures/baseTexture\";\r\nimport type { PostProcess } from \"./PostProcesses/postProcess\";\r\nimport type { Sound } from \"./Audio/sound\";\r\nimport type { Layer } from \"./Layers/layer\";\r\nimport type { EffectLayer } from \"./Layers/effectLayer\";\r\nimport type { ReflectionProbe } from \"./Probes/reflectionProbe\";\r\nimport type { LensFlareSystem } from \"./LensFlares/lensFlareSystem\";\r\nimport type { ProceduralTexture } from \"./Materials/Textures/Procedurals/proceduralTexture\";\r\nimport { Tags } from \"./Misc/tags\";\r\n\r\n/**\r\n * Root class for AssetContainer and KeepAssets\r\n */\r\nexport class AbstractAssetContainer implements IAssetContainer {\r\n    /**\r\n     * Gets the list of root nodes (ie. nodes with no parent)\r\n     */\r\n    public rootNodes: Node[] = [];\r\n\r\n    /** All of the cameras added to this scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras\r\n     */\r\n    public cameras: Camera[] = [];\r\n\r\n    /**\r\n     * All of the lights added to this scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n     */\r\n    public lights: Light[] = [];\r\n\r\n    /**\r\n     * All of the (abstract) meshes added to this scene\r\n     */\r\n    public meshes: AbstractMesh[] = [];\r\n\r\n    /**\r\n     * The list of skeletons added to the scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/bonesSkeletons\r\n     */\r\n    public skeletons: Skeleton[] = [];\r\n\r\n    /**\r\n     * All of the particle systems added to this scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/particles/particle_system/particle_system_intro\r\n     */\r\n    public particleSystems: IParticleSystem[] = [];\r\n\r\n    /**\r\n     * Gets a list of Animations associated with the scene\r\n     */\r\n    public animations: Animation[] = [];\r\n\r\n    /**\r\n     * All of the animation groups added to this scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/groupAnimations\r\n     */\r\n    public animationGroups: AnimationGroup[] = [];\r\n\r\n    /**\r\n     * All of the multi-materials added to this scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/multiMaterials\r\n     */\r\n    public multiMaterials: MultiMaterial[] = [];\r\n\r\n    /**\r\n     * All of the materials added to this scene\r\n     * In the context of a Scene, it is not supposed to be modified manually.\r\n     * Any addition or removal should be done using the addMaterial and removeMaterial Scene methods.\r\n     * Note also that the order of the Material within the array is not significant and might change.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction\r\n     */\r\n    public materials: Material[] = [];\r\n\r\n    /**\r\n     * The list of morph target managers added to the scene\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/dynamicMeshMorph\r\n     */\r\n    public morphTargetManagers: MorphTargetManager[] = [];\r\n\r\n    /**\r\n     * The list of geometries used in the scene.\r\n     */\r\n    public geometries: Geometry[] = [];\r\n\r\n    /**\r\n     * All of the transform nodes added to this scene\r\n     * In the context of a Scene, it is not supposed to be modified manually.\r\n     * Any addition or removal should be done using the addTransformNode and removeTransformNode Scene methods.\r\n     * Note also that the order of the TransformNode within the array is not significant and might change.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/transforms/parent_pivot/transform_node\r\n     */\r\n    public transformNodes: TransformNode[] = [];\r\n\r\n    /**\r\n     * ActionManagers available on the scene.\r\n     * @deprecated\r\n     */\r\n    public actionManagers: AbstractActionManager[] = [];\r\n\r\n    /**\r\n     * Textures to keep.\r\n     */\r\n    public textures: BaseTexture[] = [];\r\n\r\n    /** @internal */\r\n    protected _environmentTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Texture used in all pbr material as the reflection texture.\r\n     * As in the majority of the scene they are the same (exception for multi room and so on),\r\n     * this is easier to reference from here than from all the materials.\r\n     */\r\n    public get environmentTexture(): Nullable<BaseTexture> {\r\n        return this._environmentTexture;\r\n    }\r\n\r\n    public set environmentTexture(value: Nullable<BaseTexture>) {\r\n        this._environmentTexture = value;\r\n    }\r\n\r\n    /**\r\n     * The list of postprocesses added to the scene\r\n     */\r\n    public postProcesses: PostProcess[] = [];\r\n\r\n    /**\r\n     * The list of sounds\r\n     */\r\n    public sounds: Nullable<Sound[]> = null;\r\n\r\n    /**\r\n     * The list of effect layers added to the scene\r\n     */\r\n    public effectLayers: EffectLayer[] = [];\r\n\r\n    /**\r\n     * The list of layers added to the scene\r\n     */\r\n    public layers: Layer[] = [];\r\n\r\n    /**\r\n     * The list of reflection probes added to the scene\r\n     */\r\n    public reflectionProbes: ReflectionProbe[] = [];\r\n\r\n    /**\r\n     * The list of lens flare systems added to the scene\r\n     */\r\n    public lensFlareSystems: LensFlareSystem[];\r\n\r\n    /**\r\n     * The list of procedural textures added to the scene\r\n     */\r\n    public proceduralTextures: ProceduralTexture[];\r\n\r\n    /**\r\n     * @returns all meshes, lights, cameras, transformNodes and bones\r\n     */\r\n    public getNodes(): Array<Node> {\r\n        let nodes: Node[] = [];\r\n        nodes = nodes.concat(this.meshes);\r\n        nodes = nodes.concat(this.lights);\r\n        nodes = nodes.concat(this.cameras);\r\n        nodes = nodes.concat(this.transformNodes); // dummies\r\n        for (const skeleton of this.skeletons) {\r\n            nodes = nodes.concat(skeleton.bones);\r\n        }\r\n        return nodes;\r\n    }\r\n}\r\n\r\n/**\r\n * Set of assets to keep when moving a scene into an asset container.\r\n */\r\nexport class KeepAssets extends AbstractAssetContainer {}\r\n\r\n/**\r\n * Class used to store the output of the AssetContainer.instantiateAllMeshesToScene function\r\n */\r\nexport class InstantiatedEntries {\r\n    /**\r\n     * List of new root nodes (eg. nodes with no parent)\r\n     */\r\n    public rootNodes: Node[] = [];\r\n\r\n    /**\r\n     * List of new skeletons\r\n     */\r\n    public skeletons: Skeleton[] = [];\r\n\r\n    /**\r\n     * List of new animation groups\r\n     */\r\n    public animationGroups: AnimationGroup[] = [];\r\n\r\n    /**\r\n     * Disposes the instantiated entries from the scene\r\n     */\r\n    public dispose() {\r\n        const rootNodes = this.rootNodes;\r\n        for (const rootNode of rootNodes) {\r\n            rootNode.dispose();\r\n        }\r\n        rootNodes.length = 0;\r\n\r\n        const skeletons = this.skeletons;\r\n        for (const skeleton of skeletons) {\r\n            skeleton.dispose();\r\n        }\r\n        skeletons.length = 0;\r\n\r\n        const animationGroups = this.animationGroups;\r\n        for (const animationGroup of animationGroups) {\r\n            animationGroup.dispose();\r\n        }\r\n        animationGroups.length = 0;\r\n    }\r\n}\r\n\r\n/**\r\n * Container with a set of assets that can be added or removed from a scene.\r\n */\r\nexport class AssetContainer extends AbstractAssetContainer {\r\n    private _wasAddedToScene = false;\r\n    private _onContextRestoredObserver: Nullable<Observer<AbstractEngine>>;\r\n\r\n    /**\r\n     * The scene the AssetContainer belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Instantiates an AssetContainer.\r\n     * @param scene The scene the AssetContainer belongs to.\r\n     */\r\n    constructor(scene?: Nullable<Scene>) {\r\n        super();\r\n        scene = scene || EngineStore.LastCreatedScene;\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this.scene = scene;\r\n        this[\"proceduralTextures\"] = [];\r\n\r\n        scene.onDisposeObservable.add(() => {\r\n            if (!this._wasAddedToScene) {\r\n                this.dispose();\r\n            }\r\n        });\r\n\r\n        this._onContextRestoredObserver = scene.getEngine().onContextRestoredObservable.add(() => {\r\n            for (const geometry of this.geometries) {\r\n                geometry._rebuild();\r\n            }\r\n\r\n            for (const mesh of this.meshes) {\r\n                mesh._rebuild();\r\n            }\r\n\r\n            for (const system of this.particleSystems) {\r\n                system.rebuild();\r\n            }\r\n\r\n            for (const texture of this.textures) {\r\n                texture._rebuild();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Given a list of nodes, return a topological sorting of them.\r\n     * @param nodes\r\n     * @returns a sorted array of nodes\r\n     */\r\n    private _topologicalSort(nodes: Node[]): Node[] {\r\n        const nodesUidMap = new Map<number, Node>();\r\n\r\n        for (const node of nodes) {\r\n            nodesUidMap.set(node.uniqueId, node);\r\n        }\r\n\r\n        const dependencyGraph = {\r\n            dependsOn: new Map<number, Set<number>>(), // given a node id, what are the ids of the nodes it depends on\r\n            dependedBy: new Map<number, Set<number>>(), // given a node id, what are the ids of the nodes that depend on it\r\n        };\r\n\r\n        // Build the dependency graph given the list of nodes\r\n\r\n        // First pass: Initialize the empty dependency graph\r\n        for (const node of nodes) {\r\n            const nodeId = node.uniqueId;\r\n            dependencyGraph.dependsOn.set(nodeId, new Set<number>());\r\n            dependencyGraph.dependedBy.set(nodeId, new Set<number>());\r\n        }\r\n\r\n        // Second pass: Populate the dependency graph. We assume that we\r\n        // don't need to check for cycles here, as the scene graph cannot\r\n        // contain cycles. Our graph also already contains all transitive\r\n        // dependencies because getDescendants returns the transitive\r\n        // dependencies by default.\r\n        for (const node of nodes) {\r\n            const nodeId = node.uniqueId;\r\n            const dependsOn = dependencyGraph.dependsOn.get(nodeId)!;\r\n            if (node instanceof InstancedMesh) {\r\n                const masterMesh = node.sourceMesh;\r\n                if (nodesUidMap.has(masterMesh.uniqueId)) {\r\n                    dependsOn.add(masterMesh.uniqueId);\r\n                    dependencyGraph.dependedBy.get(masterMesh.uniqueId)!.add(nodeId);\r\n                }\r\n            }\r\n            const dependedBy = dependencyGraph.dependedBy.get(nodeId)!;\r\n\r\n            for (const child of node.getDescendants()) {\r\n                const childId = child.uniqueId;\r\n                if (nodesUidMap.has(childId)) {\r\n                    dependedBy.add(childId);\r\n\r\n                    const childDependsOn = dependencyGraph.dependsOn.get(childId)!;\r\n                    childDependsOn.add(nodeId);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Third pass: Topological sort\r\n        const sortedNodes: Node[] = [];\r\n\r\n        // First: Find all nodes that have no dependencies\r\n        const leaves: Node[] = [];\r\n        for (const node of nodes) {\r\n            const nodeId = node.uniqueId;\r\n            if (dependencyGraph.dependsOn.get(nodeId)!.size === 0) {\r\n                leaves.push(node);\r\n                nodesUidMap.delete(nodeId);\r\n            }\r\n        }\r\n\r\n        const visitList = leaves;\r\n        while (visitList.length > 0) {\r\n            const nodeToVisit = visitList.shift()!;\r\n\r\n            sortedNodes.push(nodeToVisit);\r\n\r\n            // Remove the node from the dependency graph\r\n            // When a node is visited, we know that dependsOn is empty.\r\n            // So we only need to remove the node from dependedBy.\r\n            const dependedByVisitedNode = dependencyGraph.dependedBy.get(nodeToVisit.uniqueId)!;\r\n            // Array.from(x.values()) is to make the TS compiler happy\r\n            for (const dependedByVisitedNodeId of Array.from(dependedByVisitedNode.values())) {\r\n                const dependsOnDependedByVisitedNode = dependencyGraph.dependsOn.get(dependedByVisitedNodeId)!;\r\n                dependsOnDependedByVisitedNode.delete(nodeToVisit.uniqueId);\r\n\r\n                if (dependsOnDependedByVisitedNode.size === 0 && nodesUidMap.get(dependedByVisitedNodeId)) {\r\n                    visitList.push(nodesUidMap.get(dependedByVisitedNodeId)!);\r\n                    nodesUidMap.delete(dependedByVisitedNodeId);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (nodesUidMap.size > 0) {\r\n            Logger.Error(\"SceneSerializer._topologicalSort: There were unvisited nodes:\");\r\n            nodesUidMap.forEach((node) => {\r\n                Logger.Error(node.name);\r\n            });\r\n        }\r\n\r\n        return sortedNodes;\r\n    }\r\n\r\n    private _addNodeAndDescendantsToList(list: Node[], addedIds: Set<number>, rootNode?: Node, predicate?: (entity: any) => boolean) {\r\n        if (!rootNode || (predicate && !predicate(rootNode)) || addedIds.has(rootNode.uniqueId)) {\r\n            return;\r\n        }\r\n\r\n        list.push(rootNode);\r\n        addedIds.add(rootNode.uniqueId);\r\n\r\n        for (const child of rootNode.getDescendants(true)) {\r\n            this._addNodeAndDescendantsToList(list, addedIds, child, predicate);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if a specific node is contained in this asset container.\r\n     * @param node the node to check\r\n     * @returns true if the node is contained in this container, otherwise false.\r\n     */\r\n    private _isNodeInContainer(node: Node) {\r\n        if (node instanceof AbstractMesh && this.meshes.indexOf(node) !== -1) {\r\n            return true;\r\n        }\r\n        if (node instanceof TransformNode && this.transformNodes.indexOf(node) !== -1) {\r\n            return true;\r\n        }\r\n        if (node instanceof Light && this.lights.indexOf(node) !== -1) {\r\n            return true;\r\n        }\r\n        if (node instanceof Camera && this.cameras.indexOf(node) !== -1) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * For every node in the scene, check if its parent node is also in the scene.\r\n     * @returns true if every node's parent is also in the scene, otherwise false.\r\n     */\r\n    private _isValidHierarchy() {\r\n        for (const node of this.meshes) {\r\n            if (node.parent && !this._isNodeInContainer(node.parent)) {\r\n                Logger.Warn(`Node ${node.name} has a parent that is not in the container.`);\r\n                return false;\r\n            }\r\n        }\r\n        for (const node of this.transformNodes) {\r\n            if (node.parent && !this._isNodeInContainer(node.parent)) {\r\n                Logger.Warn(`Node ${node.name} has a parent that is not in the container.`);\r\n                return false;\r\n            }\r\n        }\r\n        for (const node of this.lights) {\r\n            if (node.parent && !this._isNodeInContainer(node.parent)) {\r\n                Logger.Warn(`Node ${node.name} has a parent that is not in the container.`);\r\n                return false;\r\n            }\r\n        }\r\n        for (const node of this.cameras) {\r\n            if (node.parent && !this._isNodeInContainer(node.parent)) {\r\n                Logger.Warn(`Node ${node.name} has a parent that is not in the container.`);\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Instantiate or clone all meshes and add the new ones to the scene.\r\n     * Skeletons and animation groups will all be cloned\r\n     * @param nameFunction defines an optional function used to get new names for clones\r\n     * @param cloneMaterials defines an optional boolean that defines if materials must be cloned as well (false by default)\r\n     * @param options defines an optional list of options to control how to instantiate / clone models\r\n     * @param options.doNotInstantiate defines if the model must be instantiated or just cloned\r\n     * @param options.predicate defines a predicate used to filter whih mesh to instantiate/clone\r\n     * @returns a list of rootNodes, skeletons and animation groups that were duplicated\r\n     */\r\n    public instantiateModelsToScene(\r\n        nameFunction?: (sourceName: string) => string,\r\n        cloneMaterials = false,\r\n        options?: { doNotInstantiate?: boolean | ((node: Node) => boolean); predicate?: (entity: any) => boolean }\r\n    ): InstantiatedEntries {\r\n        if (!this._isValidHierarchy()) {\r\n            Tools.Warn(\"SceneSerializer.InstantiateModelsToScene: The Asset Container hierarchy is not valid.\");\r\n        }\r\n        const conversionMap: { [key: number]: number } = {};\r\n        const storeMap: { [key: number]: any } = {};\r\n        const result = new InstantiatedEntries();\r\n        const alreadySwappedSkeletons: Skeleton[] = [];\r\n        const alreadySwappedMaterials: Material[] = [];\r\n\r\n        const localOptions = {\r\n            doNotInstantiate: true,\r\n            ...options,\r\n        };\r\n\r\n        const onClone = (source: Node, clone: Node) => {\r\n            conversionMap[source.uniqueId] = clone.uniqueId;\r\n            storeMap[clone.uniqueId] = clone;\r\n\r\n            if (nameFunction) {\r\n                clone.name = nameFunction(source.name);\r\n            }\r\n\r\n            if (clone instanceof Mesh) {\r\n                const clonedMesh = clone;\r\n\r\n                if (clonedMesh.morphTargetManager) {\r\n                    const oldMorphTargetManager = (source as Mesh).morphTargetManager!;\r\n                    clonedMesh.morphTargetManager = oldMorphTargetManager.clone();\r\n\r\n                    for (let index = 0; index < oldMorphTargetManager.numTargets; index++) {\r\n                        const oldTarget = oldMorphTargetManager.getTarget(index);\r\n                        const newTarget = clonedMesh.morphTargetManager.getTarget(index);\r\n\r\n                        conversionMap[oldTarget.uniqueId] = newTarget.uniqueId;\r\n                        storeMap[newTarget.uniqueId] = newTarget;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        const nodesToSort: Node[] = [];\r\n        const idsOnSortList = new Set<number>();\r\n\r\n        for (const transformNode of this.transformNodes) {\r\n            if (transformNode.parent === null) {\r\n                this._addNodeAndDescendantsToList(nodesToSort, idsOnSortList, transformNode, localOptions.predicate);\r\n            }\r\n        }\r\n\r\n        for (const mesh of this.meshes) {\r\n            if (mesh.parent === null) {\r\n                this._addNodeAndDescendantsToList(nodesToSort, idsOnSortList, mesh, localOptions.predicate);\r\n            }\r\n        }\r\n\r\n        // Topologically sort nodes by parenting/instancing relationships so that all resources are in place\r\n        // when a given node is instantiated.\r\n        const sortedNodes = this._topologicalSort(nodesToSort);\r\n\r\n        const onNewCreated = (source: Node, clone: Node) => {\r\n            onClone(source, clone);\r\n\r\n            if (source.parent) {\r\n                const replicatedParentId = conversionMap[source.parent.uniqueId];\r\n                const replicatedParent = storeMap[replicatedParentId];\r\n\r\n                if (replicatedParent) {\r\n                    clone.parent = replicatedParent;\r\n                } else {\r\n                    clone.parent = source.parent;\r\n                }\r\n            }\r\n\r\n            if ((clone as any).position && (source as any).position) {\r\n                (clone as any).position.copyFrom((source as any).position);\r\n            }\r\n            if ((clone as any).rotationQuaternion && (source as any).rotationQuaternion) {\r\n                (clone as any).rotationQuaternion.copyFrom((source as any).rotationQuaternion);\r\n            }\r\n            if ((clone as any).rotation && (source as any).rotation) {\r\n                (clone as any).rotation.copyFrom((source as any).rotation);\r\n            }\r\n            if ((clone as any).scaling && (source as any).scaling) {\r\n                (clone as any).scaling.copyFrom((source as any).scaling);\r\n            }\r\n\r\n            if ((clone as any).material) {\r\n                const mesh = clone as AbstractMesh;\r\n\r\n                if (mesh.material) {\r\n                    if (cloneMaterials) {\r\n                        const sourceMaterial = (source as AbstractMesh).material!;\r\n\r\n                        if (alreadySwappedMaterials.indexOf(sourceMaterial) === -1) {\r\n                            let swap = sourceMaterial.clone(nameFunction ? nameFunction(sourceMaterial.name) : \"Clone of \" + sourceMaterial.name)!;\r\n                            alreadySwappedMaterials.push(sourceMaterial);\r\n                            conversionMap[sourceMaterial.uniqueId] = swap.uniqueId;\r\n                            storeMap[swap.uniqueId] = swap;\r\n\r\n                            if (sourceMaterial.getClassName() === \"MultiMaterial\") {\r\n                                const multi = sourceMaterial as MultiMaterial;\r\n\r\n                                for (const material of multi.subMaterials) {\r\n                                    if (!material) {\r\n                                        continue;\r\n                                    }\r\n                                    swap = material.clone(nameFunction ? nameFunction(material.name) : \"Clone of \" + material.name)!;\r\n                                    alreadySwappedMaterials.push(material);\r\n                                    conversionMap[material.uniqueId] = swap.uniqueId;\r\n                                    storeMap[swap.uniqueId] = swap;\r\n                                }\r\n\r\n                                multi.subMaterials = multi.subMaterials.map((m) => m && storeMap[conversionMap[m.uniqueId]]);\r\n                            }\r\n                        }\r\n\r\n                        if (mesh.getClassName() !== \"InstancedMesh\") {\r\n                            mesh.material = storeMap[conversionMap[sourceMaterial.uniqueId]];\r\n                        }\r\n                    } else {\r\n                        if (mesh.material.getClassName() === \"MultiMaterial\") {\r\n                            if (this.scene.multiMaterials.indexOf(mesh.material as MultiMaterial) === -1) {\r\n                                this.scene.addMultiMaterial(mesh.material as MultiMaterial);\r\n                            }\r\n                        } else {\r\n                            if (this.scene.materials.indexOf(mesh.material) === -1) {\r\n                                this.scene.addMaterial(mesh.material);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (clone.parent === null) {\r\n                result.rootNodes.push(clone);\r\n            }\r\n        };\r\n\r\n        for (const node of sortedNodes) {\r\n            if (node.getClassName() === \"InstancedMesh\") {\r\n                const instancedNode = node as InstancedMesh;\r\n                const sourceMesh = instancedNode.sourceMesh;\r\n                const replicatedSourceId = conversionMap[sourceMesh.uniqueId];\r\n                const replicatedSource = typeof replicatedSourceId === \"number\" ? storeMap[replicatedSourceId] : sourceMesh;\r\n                const replicatedInstancedNode = replicatedSource.createInstance(instancedNode.name);\r\n                onNewCreated(instancedNode, replicatedInstancedNode);\r\n            } else {\r\n                // Mesh or TransformNode\r\n                let canInstance = true;\r\n                if (\r\n                    node.getClassName() === \"TransformNode\" ||\r\n                    node.getClassName() === \"Node\" ||\r\n                    (node as Mesh).skeleton ||\r\n                    !(node as any).getTotalVertices ||\r\n                    (node as Mesh).getTotalVertices() === 0\r\n                ) {\r\n                    // Transform nodes, skinned meshes, and meshes with no vertices can never be instanced!\r\n                    canInstance = false;\r\n                } else if (localOptions.doNotInstantiate) {\r\n                    if (typeof localOptions.doNotInstantiate === \"function\") {\r\n                        canInstance = !localOptions.doNotInstantiate(node);\r\n                    } else {\r\n                        canInstance = !localOptions.doNotInstantiate;\r\n                    }\r\n                }\r\n                const replicatedNode = canInstance ? (node as Mesh).createInstance(`instance of ${node.name}`) : node.clone(`Clone of ${node.name}`, null, true);\r\n                if (!replicatedNode) {\r\n                    throw new Error(`Could not clone or instantiate node on Asset Container ${node.name}`);\r\n                }\r\n                onNewCreated(node, replicatedNode);\r\n            }\r\n        }\r\n\r\n        for (const s of this.skeletons) {\r\n            if (localOptions.predicate && !localOptions.predicate(s)) {\r\n                continue;\r\n            }\r\n\r\n            const clone = s.clone(nameFunction ? nameFunction(s.name) : \"Clone of \" + s.name);\r\n\r\n            for (const m of this.meshes) {\r\n                if (m.skeleton === s && !m.isAnInstance) {\r\n                    const copy = storeMap[conversionMap[m.uniqueId]] as Mesh;\r\n                    if (!copy || copy.isAnInstance) {\r\n                        continue;\r\n                    }\r\n                    copy.skeleton = clone;\r\n\r\n                    if (alreadySwappedSkeletons.indexOf(clone) !== -1) {\r\n                        continue;\r\n                    }\r\n\r\n                    alreadySwappedSkeletons.push(clone);\r\n\r\n                    // Check if bones are mesh linked\r\n                    for (const bone of clone.bones) {\r\n                        if (bone._linkedTransformNode) {\r\n                            bone._linkedTransformNode = storeMap[conversionMap[bone._linkedTransformNode.uniqueId]];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            result.skeletons.push(clone);\r\n        }\r\n\r\n        for (const o of this.animationGroups) {\r\n            if (localOptions.predicate && !localOptions.predicate(o)) {\r\n                continue;\r\n            }\r\n\r\n            const clone = o.clone(nameFunction ? nameFunction(o.name) : \"Clone of \" + o.name, (oldTarget) => {\r\n                const newTarget = storeMap[conversionMap[oldTarget.uniqueId]];\r\n\r\n                return newTarget || oldTarget;\r\n            });\r\n\r\n            result.animationGroups.push(clone);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Adds all the assets from the container to the scene.\r\n     */\r\n    public addAllToScene() {\r\n        if (this._wasAddedToScene) {\r\n            return;\r\n        }\r\n        if (!this._isValidHierarchy()) {\r\n            Tools.Warn(\"SceneSerializer.addAllToScene: The Asset Container hierarchy is not valid.\");\r\n        }\r\n\r\n        this._wasAddedToScene = true;\r\n\r\n        this.addToScene(null);\r\n\r\n        if (this.environmentTexture) {\r\n            this.scene.environmentTexture = this.environmentTexture;\r\n        }\r\n\r\n        for (const component of this.scene._serializableComponents) {\r\n            component.addFromContainer(this);\r\n        }\r\n\r\n        this.scene.getEngine().onContextRestoredObservable.remove(this._onContextRestoredObserver);\r\n        this._onContextRestoredObserver = null;\r\n    }\r\n\r\n    /**\r\n     * Adds assets from the container to the scene.\r\n     * @param predicate defines a predicate used to select which entity will be added (can be null)\r\n     */\r\n    public addToScene(predicate: Nullable<(entity: any) => boolean> = null) {\r\n        const addedNodes: Node[] = [];\r\n        for (const o of this.cameras) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.addCamera(o);\r\n            addedNodes.push(o);\r\n        }\r\n        for (const o of this.lights) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.addLight(o);\r\n            addedNodes.push(o);\r\n        }\r\n        for (const o of this.meshes) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.addMesh(o);\r\n            addedNodes.push(o);\r\n        }\r\n        for (const o of this.skeletons) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.addSkeleton(o);\r\n        }\r\n        for (const o of this.animations) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.addAnimation(o);\r\n        }\r\n        for (const o of this.animationGroups) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.addAnimationGroup(o);\r\n        }\r\n        for (const o of this.multiMaterials) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.addMultiMaterial(o);\r\n        }\r\n        for (const o of this.materials) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.addMaterial(o);\r\n        }\r\n        for (const o of this.morphTargetManagers) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.addMorphTargetManager(o);\r\n        }\r\n        for (const o of this.geometries) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.addGeometry(o);\r\n        }\r\n        for (const o of this.transformNodes) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.addTransformNode(o);\r\n            addedNodes.push(o);\r\n        }\r\n        for (const o of this.actionManagers) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.addActionManager(o);\r\n        }\r\n        for (const o of this.textures) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.addTexture(o);\r\n        }\r\n        for (const o of this.reflectionProbes) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.addReflectionProbe(o);\r\n        }\r\n\r\n        // No more nodes added to scene after this line, so it's safe to make a \"snapshot\" of nodes\r\n        if (addedNodes.length) {\r\n            // build the nodeSet only if needed\r\n            const nodeSet = new Set<Node>(this.scene.meshes);\r\n            // benchmark shows Set constructor and Set.add have similar performance,\r\n            // but using Set.add here avoids another allocate in scene.getNodes().\r\n            for (const light of this.scene.lights) {\r\n                nodeSet.add(light);\r\n            }\r\n            for (const camera of this.scene.cameras) {\r\n                nodeSet.add(camera);\r\n            }\r\n            for (const transformNode of this.scene.transformNodes) {\r\n                nodeSet.add(transformNode);\r\n            }\r\n            for (const skeleton of this.skeletons) {\r\n                for (const bone of skeleton.bones) {\r\n                    nodeSet.add(bone);\r\n                }\r\n            }\r\n            for (const addedNode of addedNodes) {\r\n                // If node was added to the scene, but parent is not in the scene, break the relationship\r\n                if (addedNode.parent && !nodeSet.has(addedNode.parent)) {\r\n                    // Use setParent to keep transform if possible\r\n                    if ((addedNode as TransformNode).setParent) {\r\n                        (addedNode as TransformNode).setParent(null);\r\n                    } else {\r\n                        addedNode.parent = null;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all the assets in the container from the scene\r\n     */\r\n    public removeAllFromScene() {\r\n        if (!this._isValidHierarchy()) {\r\n            Tools.Warn(\"SceneSerializer.removeAllFromScene: The Asset Container hierarchy is not valid.\");\r\n        }\r\n\r\n        this._wasAddedToScene = false;\r\n\r\n        this.removeFromScene(null);\r\n\r\n        if (this.environmentTexture === this.scene.environmentTexture) {\r\n            this.scene.environmentTexture = null;\r\n        }\r\n\r\n        for (const component of this.scene._serializableComponents) {\r\n            component.removeFromContainer(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes assets in the container from the scene\r\n     * @param predicate defines a predicate used to select which entity will be added (can be null)\r\n     */\r\n    public removeFromScene(predicate: Nullable<(entity: any) => boolean> = null) {\r\n        for (const o of this.cameras) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.removeCamera(o);\r\n        }\r\n        for (const o of this.lights) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.removeLight(o);\r\n        }\r\n        for (const o of this.meshes) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.removeMesh(o, true);\r\n        }\r\n        for (const o of this.skeletons) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.removeSkeleton(o);\r\n        }\r\n        for (const o of this.animations) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.removeAnimation(o);\r\n        }\r\n        for (const o of this.animationGroups) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.removeAnimationGroup(o);\r\n        }\r\n        for (const o of this.multiMaterials) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.removeMultiMaterial(o);\r\n        }\r\n        for (const o of this.materials) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.removeMaterial(o);\r\n        }\r\n        for (const o of this.morphTargetManagers) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.removeMorphTargetManager(o);\r\n        }\r\n        for (const o of this.geometries) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.removeGeometry(o);\r\n        }\r\n        for (const o of this.transformNodes) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.removeTransformNode(o);\r\n        }\r\n        for (const o of this.actionManagers) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.removeActionManager(o);\r\n        }\r\n        for (const o of this.textures) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.removeTexture(o);\r\n        }\r\n        for (const o of this.reflectionProbes) {\r\n            if (predicate && !predicate(o)) {\r\n                continue;\r\n            }\r\n            this.scene.removeReflectionProbe(o);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes all the assets in the container\r\n     */\r\n    public dispose() {\r\n        const cameras = this.cameras.slice(0);\r\n        for (const camera of cameras) {\r\n            camera.dispose();\r\n        }\r\n        this.cameras.length = 0;\r\n\r\n        const lights = this.lights.slice(0);\r\n        for (const light of lights) {\r\n            light.dispose();\r\n        }\r\n        this.lights.length = 0;\r\n\r\n        const meshes = this.meshes.slice(0);\r\n        for (const mesh of meshes) {\r\n            mesh.dispose();\r\n        }\r\n        this.meshes.length = 0;\r\n\r\n        const skeletons = this.skeletons.slice(0);\r\n        for (const skeleton of skeletons) {\r\n            skeleton.dispose();\r\n        }\r\n        this.skeletons.length = 0;\r\n\r\n        const animationGroups = this.animationGroups.slice(0);\r\n        for (const animationGroup of animationGroups) {\r\n            animationGroup.dispose();\r\n        }\r\n        this.animationGroups.length = 0;\r\n\r\n        const multiMaterials = this.multiMaterials.slice(0);\r\n        for (const multiMaterial of multiMaterials) {\r\n            multiMaterial.dispose();\r\n        }\r\n        this.multiMaterials.length = 0;\r\n\r\n        const materials = this.materials.slice(0);\r\n        for (const material of materials) {\r\n            material.dispose();\r\n        }\r\n        this.materials.length = 0;\r\n\r\n        const geometries = this.geometries.slice(0);\r\n        for (const geometry of geometries) {\r\n            geometry.dispose();\r\n        }\r\n        this.geometries.length = 0;\r\n\r\n        const transformNodes = this.transformNodes.slice(0);\r\n        for (const transformNode of transformNodes) {\r\n            transformNode.dispose();\r\n        }\r\n        this.transformNodes.length = 0;\r\n\r\n        const actionManagers = this.actionManagers.slice(0);\r\n        for (const actionManager of actionManagers) {\r\n            actionManager.dispose();\r\n        }\r\n        this.actionManagers.length = 0;\r\n\r\n        const textures = this.textures.slice(0);\r\n        for (const texture of textures) {\r\n            texture.dispose();\r\n        }\r\n        this.textures.length = 0;\r\n\r\n        const reflectionProbes = this.reflectionProbes.slice(0);\r\n        for (const reflectionProbe of reflectionProbes) {\r\n            reflectionProbe.dispose();\r\n        }\r\n        this.reflectionProbes.length = 0;\r\n\r\n        const morphTargetManagers = this.morphTargetManagers.slice(0);\r\n        for (const morphTargetManager of morphTargetManagers) {\r\n            morphTargetManager.dispose();\r\n        }\r\n        this.morphTargetManagers.length = 0;\r\n\r\n        if (this.environmentTexture) {\r\n            this.environmentTexture.dispose();\r\n            this.environmentTexture = null;\r\n        }\r\n\r\n        for (const component of this.scene._serializableComponents) {\r\n            component.removeFromContainer(this, true);\r\n        }\r\n\r\n        if (this._onContextRestoredObserver) {\r\n            this.scene.getEngine().onContextRestoredObservable.remove(this._onContextRestoredObserver);\r\n            this._onContextRestoredObserver = null;\r\n        }\r\n    }\r\n\r\n    private _moveAssets<T>(sourceAssets: T[], targetAssets: T[], keepAssets: T[]): void {\r\n        if (!sourceAssets || !targetAssets) {\r\n            return;\r\n        }\r\n\r\n        for (const asset of sourceAssets) {\r\n            let move = true;\r\n            if (keepAssets) {\r\n                for (const keepAsset of keepAssets) {\r\n                    if (asset === keepAsset) {\r\n                        move = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (move) {\r\n                targetAssets.push(asset);\r\n                (asset as any)._parentContainer = this;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all the assets contained in the scene and adds them to the container.\r\n     * @param keepAssets Set of assets to keep in the scene. (default: empty)\r\n     */\r\n    public moveAllFromScene(keepAssets?: KeepAssets): void {\r\n        this._wasAddedToScene = false;\r\n\r\n        if (keepAssets === undefined) {\r\n            keepAssets = new KeepAssets();\r\n        }\r\n\r\n        for (const key in this) {\r\n            if (Object.prototype.hasOwnProperty.call(this, key)) {\r\n                (<any>this)[key] = (<any>this)[key] || (key === \"_environmentTexture\" ? null : []);\r\n                this._moveAssets((<any>this.scene)[key], (<any>this)[key], (<any>keepAssets)[key]);\r\n            }\r\n        }\r\n\r\n        this.environmentTexture = this.scene.environmentTexture;\r\n\r\n        this.removeAllFromScene();\r\n    }\r\n\r\n    /**\r\n     * Adds all meshes in the asset container to a root mesh that can be used to position all the contained meshes. The root mesh is then added to the front of the meshes in the assetContainer.\r\n     * @returns the root mesh\r\n     */\r\n    public createRootMesh() {\r\n        const rootMesh = new Mesh(\"assetContainerRootMesh\", this.scene);\r\n        for (const m of this.meshes) {\r\n            if (!m.parent) {\r\n                rootMesh.addChild(m);\r\n            }\r\n        }\r\n        this.meshes.unshift(rootMesh);\r\n        return rootMesh;\r\n    }\r\n\r\n    /**\r\n     * Merge animations (direct and animation groups) from this asset container into a scene\r\n     * @param scene is the instance of BABYLON.Scene to append to (default: last created scene)\r\n     * @param animatables set of animatables to retarget to a node from the scene\r\n     * @param targetConverter defines a function used to convert animation targets from the asset container to the scene (default: search node by name)\r\n     * @returns an array of the new AnimationGroup added to the scene (empty array if none)\r\n     */\r\n    public mergeAnimationsTo(\r\n        scene: Nullable<Scene> = EngineStore.LastCreatedScene,\r\n        animatables: Animatable[],\r\n        targetConverter: Nullable<(target: any) => Nullable<Node>> = null\r\n    ): AnimationGroup[] {\r\n        if (!scene) {\r\n            Logger.Error(\"No scene available to merge animations to\");\r\n            return [];\r\n        }\r\n\r\n        const _targetConverter = targetConverter\r\n            ? targetConverter\r\n            : (target: any) => {\r\n                  let node = null;\r\n\r\n                  const targetProperty = target.animations.length ? target.animations[0].targetProperty : \"\";\r\n                  /*\r\n              BabylonJS adds special naming to targets that are children of nodes.\r\n              This name attempts to remove that special naming to get the parent nodes name in case the target\r\n              can't be found in the node tree\r\n\r\n              Ex: Torso_primitive0 likely points to a Mesh primitive. We take away primitive0 and are left with \"Torso\" which is the name\r\n              of the primitive's parent.\r\n          */\r\n                  const name = target.name.split(\".\").join(\"\").split(\"_primitive\")[0];\r\n\r\n                  switch (targetProperty) {\r\n                      case \"position\":\r\n                      case \"rotationQuaternion\":\r\n                          node = scene.getTransformNodeByName(target.name) || scene.getTransformNodeByName(name);\r\n                          break;\r\n                      case \"influence\":\r\n                          node = scene.getMorphTargetByName(target.name) || scene.getMorphTargetByName(name);\r\n                          break;\r\n                      default:\r\n                          node = scene.getNodeByName(target.name) || scene.getNodeByName(name);\r\n                  }\r\n\r\n                  return node;\r\n              };\r\n\r\n        // Copy new node animations\r\n        const nodesInAC = this.getNodes();\r\n        for (const nodeInAC of nodesInAC) {\r\n            const nodeInScene = _targetConverter(nodeInAC);\r\n            if (nodeInScene !== null) {\r\n                // Remove old animations with same target property as a new one\r\n                for (const animationInAC of nodeInAC.animations) {\r\n                    // Doing treatment on an array for safety measure\r\n                    const animationsWithSameProperty = nodeInScene.animations.filter((animationInScene) => {\r\n                        return animationInScene.targetProperty === animationInAC.targetProperty;\r\n                    });\r\n                    for (const animationWithSameProperty of animationsWithSameProperty) {\r\n                        const index = nodeInScene.animations.indexOf(animationWithSameProperty, 0);\r\n                        if (index > -1) {\r\n                            nodeInScene.animations.splice(index, 1);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Append new animations\r\n                nodeInScene.animations = nodeInScene.animations.concat(nodeInAC.animations);\r\n            }\r\n        }\r\n\r\n        const newAnimationGroups: AnimationGroup[] = [];\r\n\r\n        // Copy new animation groups\r\n        const animationGroups = this.animationGroups.slice();\r\n        for (const animationGroupInAC of animationGroups) {\r\n            // Clone the animation group and all its animatables\r\n            newAnimationGroups.push(animationGroupInAC.clone(animationGroupInAC.name, _targetConverter));\r\n\r\n            // Remove animatables related to the asset container\r\n            for (const animatable of animationGroupInAC.animatables) {\r\n                animatable.stop();\r\n            }\r\n        }\r\n\r\n        // Retarget animatables\r\n        for (const animatable of animatables) {\r\n            const target = _targetConverter(animatable.target);\r\n\r\n            if (target) {\r\n                // Clone the animatable and retarget it\r\n                scene.beginAnimation(\r\n                    target,\r\n                    animatable.fromFrame,\r\n                    animatable.toFrame,\r\n                    animatable.loopAnimation,\r\n                    animatable.speedRatio,\r\n                    animatable.onAnimationEnd ? animatable.onAnimationEnd : undefined,\r\n                    undefined,\r\n                    true,\r\n                    undefined,\r\n                    animatable.onAnimationLoop ? animatable.onAnimationLoop : undefined\r\n                );\r\n\r\n                // Stop animation for the target in the asset container\r\n                scene.stopAnimation(animatable.target);\r\n            }\r\n        }\r\n\r\n        return newAnimationGroups;\r\n    }\r\n\r\n    /**\r\n     * @since 6.15.0\r\n     * This method checks for any node that has no parent\r\n     * and is not in the rootNodes array, and adds the node\r\n     * there, if so.\r\n     */\r\n    public populateRootNodes() {\r\n        this.rootNodes.length = 0;\r\n        for (const m of this.meshes) {\r\n            if (!m.parent && this.rootNodes.indexOf(m) === -1) {\r\n                this.rootNodes.push(m);\r\n            }\r\n        }\r\n        for (const t of this.transformNodes) {\r\n            if (!t.parent && this.rootNodes.indexOf(t) === -1) {\r\n                this.rootNodes.push(t);\r\n            }\r\n        }\r\n        for (const l of this.lights) {\r\n            if (!l.parent && this.rootNodes.indexOf(l) === -1) {\r\n                this.rootNodes.push(l);\r\n            }\r\n        }\r\n        for (const c of this.cameras) {\r\n            if (!c.parent && this.rootNodes.indexOf(c) === -1) {\r\n                this.rootNodes.push(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @since 6.26.0\r\n     * Given a root asset, this method will traverse its hierarchy and add it, its children and any materials/skeletons/animation groups to the container.\r\n     * @param root root node\r\n     */\r\n    public addAllAssetsToContainer(root: Node) {\r\n        if (!root) {\r\n            return;\r\n        }\r\n\r\n        const nodesToVisit: Node[] = [];\r\n        const visitedNodes = new Set<Node>();\r\n\r\n        nodesToVisit.push(root);\r\n\r\n        while (nodesToVisit.length > 0) {\r\n            const nodeToVisit = nodesToVisit.pop()!;\r\n\r\n            if (nodeToVisit instanceof Mesh) {\r\n                if (nodeToVisit.geometry && this.geometries.indexOf(nodeToVisit.geometry) === -1) {\r\n                    this.geometries.push(nodeToVisit.geometry);\r\n                }\r\n                this.meshes.push(nodeToVisit);\r\n            } else if (nodeToVisit instanceof InstancedMesh) {\r\n                this.meshes.push(nodeToVisit);\r\n            } else if (nodeToVisit instanceof TransformNode) {\r\n                this.transformNodes.push(nodeToVisit);\r\n            } else if (nodeToVisit instanceof Light) {\r\n                this.lights.push(nodeToVisit);\r\n            } else if (nodeToVisit instanceof Camera) {\r\n                this.cameras.push(nodeToVisit);\r\n            }\r\n\r\n            if (nodeToVisit instanceof AbstractMesh) {\r\n                if (nodeToVisit.material && this.materials.indexOf(nodeToVisit.material) === -1) {\r\n                    this.materials.push(nodeToVisit.material);\r\n                    for (const texture of nodeToVisit.material.getActiveTextures()) {\r\n                        if (this.textures.indexOf(texture) === -1) {\r\n                            this.textures.push(texture);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (nodeToVisit.skeleton && this.skeletons.indexOf(nodeToVisit.skeleton) === -1) {\r\n                    this.skeletons.push(nodeToVisit.skeleton);\r\n                }\r\n\r\n                if (nodeToVisit.morphTargetManager && this.morphTargetManagers.indexOf(nodeToVisit.morphTargetManager) === -1) {\r\n                    this.morphTargetManagers.push(nodeToVisit.morphTargetManager);\r\n                }\r\n            }\r\n\r\n            for (const child of nodeToVisit.getChildren()) {\r\n                if (!visitedNodes.has(child)) {\r\n                    nodesToVisit.push(child);\r\n                }\r\n            }\r\n\r\n            visitedNodes.add(nodeToVisit);\r\n        }\r\n\r\n        this.populateRootNodes();\r\n    }\r\n\r\n    /**\r\n     * Get from a list of objects by tags\r\n     * @param list the list of objects to use\r\n     * @param tagsQuery the query to use\r\n     * @param filter a predicate to filter for tags\r\n     * @returns\r\n     */\r\n    private _getByTags<T>(list: T[], tagsQuery: string, filter?: (item: T) => boolean): T[] {\r\n        if (tagsQuery === undefined) {\r\n            // returns the complete list (could be done with Tags.MatchesQuery but no need to have a for-loop here)\r\n            return list;\r\n        }\r\n\r\n        const listByTags = [];\r\n\r\n        for (const i in list) {\r\n            const item = list[i];\r\n            if (Tags && Tags.MatchesQuery(item, tagsQuery) && (!filter || filter(item))) {\r\n                listByTags.push(item);\r\n            }\r\n        }\r\n\r\n        return listByTags;\r\n    }\r\n\r\n    /**\r\n     * Get a list of meshes by tags\r\n     * @param tagsQuery defines the tags query to use\r\n     * @param filter defines a predicate used to filter results\r\n     * @returns an array of Mesh\r\n     */\r\n    public getMeshesByTags(tagsQuery: string, filter?: (mesh: AbstractMesh) => boolean): AbstractMesh[] {\r\n        return this._getByTags(this.meshes, tagsQuery, filter);\r\n    }\r\n\r\n    /**\r\n     * Get a list of cameras by tags\r\n     * @param tagsQuery defines the tags query to use\r\n     * @param filter defines a predicate used to filter results\r\n     * @returns an array of Camera\r\n     */\r\n    public getCamerasByTags(tagsQuery: string, filter?: (camera: Camera) => boolean): Camera[] {\r\n        return this._getByTags(this.cameras, tagsQuery, filter);\r\n    }\r\n\r\n    /**\r\n     * Get a list of lights by tags\r\n     * @param tagsQuery defines the tags query to use\r\n     * @param filter defines a predicate used to filter results\r\n     * @returns an array of Light\r\n     */\r\n    public getLightsByTags(tagsQuery: string, filter?: (light: Light) => boolean): Light[] {\r\n        return this._getByTags(this.lights, tagsQuery, filter);\r\n    }\r\n\r\n    /**\r\n     * Get a list of materials by tags\r\n     * @param tagsQuery defines the tags query to use\r\n     * @param filter defines a predicate used to filter results\r\n     * @returns an array of Material\r\n     */\r\n    public getMaterialsByTags(tagsQuery: string, filter?: (material: Material) => boolean): Material[] {\r\n        return this._getByTags(this.materials, tagsQuery, filter).concat(this._getByTags(this.multiMaterials, tagsQuery, filter));\r\n    }\r\n\r\n    /**\r\n     * Get a list of transform nodes by tags\r\n     * @param tagsQuery defines the tags query to use\r\n     * @param filter defines a predicate used to filter results\r\n     * @returns an array of TransformNode\r\n     */\r\n    public getTransformNodesByTags(tagsQuery: string, filter?: (transform: TransformNode) => boolean): TransformNode[] {\r\n        return this._getByTags(this.transformNodes, tagsQuery, filter);\r\n    }\r\n}\r\n", "import { Decode } from \"./stringTools\";\r\n\r\n/**\r\n * Interface for a data buffer\r\n */\r\nexport interface IDataBuffer {\r\n    /**\r\n     * Reads bytes from the data buffer.\r\n     * @param byteOffset The byte offset to read\r\n     * @param byteLength The byte length to read\r\n     * @returns A promise that resolves when the bytes are read\r\n     */\r\n    readAsync(byteOffset: number, byteLength: number): Promise<ArrayBufferView>;\r\n\r\n    /**\r\n     * The byte length of the buffer.\r\n     */\r\n    readonly byteLength: number;\r\n}\r\n\r\n/**\r\n * Utility class for reading from a data buffer\r\n */\r\nexport class DataReader {\r\n    /**\r\n     * The data buffer associated with this data reader.\r\n     */\r\n    public readonly buffer: IDataBuffer;\r\n\r\n    /**\r\n     * The current byte offset from the beginning of the data buffer.\r\n     */\r\n    public byteOffset = 0;\r\n\r\n    private _dataView: DataView;\r\n    private _dataByteOffset: number;\r\n\r\n    /**\r\n     * Constructor\r\n     * @param buffer The buffer to read\r\n     */\r\n    constructor(buffer: IDataBuffer) {\r\n        this.buffer = buffer;\r\n    }\r\n\r\n    /**\r\n     * Loads the given byte length.\r\n     * @param byteLength The byte length to load\r\n     * @returns A promise that resolves when the load is complete\r\n     */\r\n    public async loadAsync(byteLength: number): Promise<void> {\r\n        const data = await this.buffer.readAsync(this.byteOffset, byteLength);\r\n        this._dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);\r\n        this._dataByteOffset = 0;\r\n    }\r\n\r\n    /**\r\n     * Read a unsigned 32-bit integer from the currently loaded data range.\r\n     * @returns The 32-bit integer read\r\n     */\r\n    public readUint32(): number {\r\n        const value = this._dataView.getUint32(this._dataByteOffset, true);\r\n        this._dataByteOffset += 4;\r\n        this.byteOffset += 4;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Read a byte array from the currently loaded data range.\r\n     * @param byteLength The byte length to read\r\n     * @returns The byte array read\r\n     */\r\n    public readUint8Array(byteLength: number): Uint8Array {\r\n        const value = new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + this._dataByteOffset, byteLength);\r\n        this._dataByteOffset += byteLength;\r\n        this.byteOffset += byteLength;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Read a string from the currently loaded data range.\r\n     * @param byteLength The byte length to read\r\n     * @returns The string read\r\n     */\r\n    public readString(byteLength: number): string {\r\n        return Decode(this.readUint8Array(byteLength));\r\n    }\r\n\r\n    /**\r\n     * Skips the given byte length the currently loaded data range.\r\n     * @param byteLength The byte length to skip\r\n     */\r\n    public skipBytes(byteLength: number): void {\r\n        this._dataByteOffset += byteLength;\r\n        this.byteOffset += byteLength;\r\n    }\r\n}\r\n", "/* eslint-disable github/no-then */\r\n/* eslint-disable no-restricted-syntax */\r\n/* eslint-disable @typescript-eslint/promise-function-async */\r\nimport type * as GLTF2 from \"babylonjs-gltf2interface\";\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare let GLTFValidator: GLTF2.IGLTFValidator;\r\n\r\n// WorkerGlobalScope\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare function importScripts(...urls: string[]): void;\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare function postMessage(message: any, transfer?: any[]): void;\r\n\r\nfunction ValidateAsync(\r\n    data: string | Uint8Array,\r\n    rootUrl: string,\r\n    fileName: string,\r\n    getExternalResource: (uri: string) => Promise<Uint8Array>\r\n): Promise<GLTF2.IGLTFValidationResults> {\r\n    const options: GLTF2.IGLTFValidationOptions = {\r\n        externalResourceFunction: getExternalResource,\r\n    };\r\n\r\n    if (fileName) {\r\n        options.uri = rootUrl === \"file:\" ? fileName : rootUrl + fileName;\r\n    }\r\n\r\n    return ArrayBuffer.isView(data) ? GLTFValidator.validateBytes(data, options) : GLTFValidator.validateString(data, options);\r\n}\r\n\r\n/**\r\n * The worker function that gets converted to a blob url to pass into a worker.\r\n */\r\nfunction WorkerFunc(): void {\r\n    const pendingExternalResources: Array<{ resolve: (data: any) => void; reject: (reason: any) => void }> = [];\r\n\r\n    onmessage = (message) => {\r\n        const data = message.data;\r\n        switch (data.id) {\r\n            case \"init\": {\r\n                importScripts(data.url);\r\n                break;\r\n            }\r\n            case \"validate\": {\r\n                ValidateAsync(\r\n                    data.data,\r\n                    data.rootUrl,\r\n                    data.fileName,\r\n                    (uri) =>\r\n                        new Promise((resolve, reject) => {\r\n                            const index = pendingExternalResources.length;\r\n                            pendingExternalResources.push({ resolve, reject });\r\n                            postMessage({ id: \"getExternalResource\", index: index, uri: uri });\r\n                        })\r\n                ).then(\r\n                    (value) => {\r\n                        postMessage({ id: \"validate.resolve\", value: value });\r\n                    },\r\n                    (reason) => {\r\n                        postMessage({ id: \"validate.reject\", reason: reason });\r\n                    }\r\n                );\r\n                break;\r\n            }\r\n            case \"getExternalResource.resolve\": {\r\n                pendingExternalResources[data.index].resolve(data.value);\r\n                break;\r\n            }\r\n            case \"getExternalResource.reject\": {\r\n                pendingExternalResources[data.index].reject(data.reason);\r\n                break;\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Configuration for glTF validation\r\n */\r\nexport interface IGLTFValidationConfiguration {\r\n    /**\r\n     * The url of the glTF validator.\r\n     */\r\n    url: string;\r\n}\r\n\r\n/**\r\n * glTF validation\r\n */\r\nexport class GLTFValidation {\r\n    /**\r\n     * The configuration. Defaults to `{ url: \"https://cdn.babylonjs.com/gltf_validator.js\" }`.\r\n     */\r\n    public static Configuration: IGLTFValidationConfiguration = {\r\n        url: `${Tools._DefaultCdnUrl}/gltf_validator.js`,\r\n    };\r\n\r\n    private static _LoadScriptPromise: Promise<void>;\r\n\r\n    /**\r\n     * Validate a glTF asset using the glTF-Validator.\r\n     * @param data The JSON of a glTF or the array buffer of a binary glTF\r\n     * @param rootUrl The root url for the glTF\r\n     * @param fileName The file name for the glTF\r\n     * @param getExternalResource The callback to get external resources for the glTF validator\r\n     * @returns A promise that resolves with the glTF validation results once complete\r\n     */\r\n    public static ValidateAsync(\r\n        data: string | Uint8Array,\r\n        rootUrl: string,\r\n        fileName: string,\r\n        getExternalResource: (uri: string) => Promise<Uint8Array>\r\n    ): Promise<GLTF2.IGLTFValidationResults> {\r\n        if (typeof Worker === \"function\") {\r\n            return new Promise((resolve, reject) => {\r\n                const workerContent = `${ValidateAsync}(${WorkerFunc})()`;\r\n                const workerBlobUrl = URL.createObjectURL(new Blob([workerContent], { type: \"application/javascript\" }));\r\n                const worker = new Worker(workerBlobUrl);\r\n\r\n                const onError = (error: ErrorEvent) => {\r\n                    worker.removeEventListener(\"error\", onError);\r\n                    worker.removeEventListener(\"message\", onMessage);\r\n                    // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\r\n                    reject(error);\r\n                };\r\n\r\n                const onMessage = (message: MessageEvent) => {\r\n                    const data = message.data;\r\n                    switch (data.id) {\r\n                        case \"getExternalResource\": {\r\n                            getExternalResource(data.uri).then(\r\n                                (value) => {\r\n                                    worker.postMessage({ id: \"getExternalResource.resolve\", index: data.index, value: value }, [value.buffer]);\r\n                                },\r\n                                (reason) => {\r\n                                    worker.postMessage({ id: \"getExternalResource.reject\", index: data.index, reason: reason });\r\n                                }\r\n                            );\r\n                            break;\r\n                        }\r\n                        case \"validate.resolve\": {\r\n                            worker.removeEventListener(\"error\", onError);\r\n                            worker.removeEventListener(\"message\", onMessage);\r\n                            resolve(data.value);\r\n                            worker.terminate();\r\n                            break;\r\n                        }\r\n                        case \"validate.reject\": {\r\n                            worker.removeEventListener(\"error\", onError);\r\n                            worker.removeEventListener(\"message\", onMessage);\r\n                            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\r\n                            reject(data.reason);\r\n                            worker.terminate();\r\n                        }\r\n                    }\r\n                };\r\n\r\n                worker.addEventListener(\"error\", onError);\r\n                worker.addEventListener(\"message\", onMessage);\r\n\r\n                worker.postMessage({ id: \"init\", url: Tools.GetBabylonScriptURL(this.Configuration.url) });\r\n\r\n                if (ArrayBuffer.isView(data)) {\r\n                    // Slice the data to avoid copying the whole array buffer.\r\n                    const slicedData = data.slice();\r\n                    worker.postMessage({ id: \"validate\", data: slicedData, rootUrl: rootUrl, fileName: fileName }, [slicedData.buffer]);\r\n                } else {\r\n                    worker.postMessage({ id: \"validate\", data: data, rootUrl: rootUrl, fileName: fileName });\r\n                }\r\n            });\r\n        } else {\r\n            if (!this._LoadScriptPromise) {\r\n                this._LoadScriptPromise = Tools.LoadBabylonScriptAsync(this.Configuration.url);\r\n            }\r\n\r\n            return this._LoadScriptPromise.then(() => {\r\n                return ValidateAsync(data, rootUrl, fileName, getExternalResource);\r\n            });\r\n        }\r\n    }\r\n}\r\n", "import type { ISceneLoaderPluginExtensions, ISceneLoaderPluginMetadata } from \"core/index\";\r\n\r\nexport const GLTFMagicBase64Encoded = \"Z2xURg\"; // \"glTF\" base64 encoded (without the quotes!)\r\n\r\nexport const GLTFFileLoaderMetadata = {\r\n    name: \"gltf\",\r\n\r\n    extensions: {\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        \".gltf\": { isBinary: false, mimeType: \"model/gltf+json\" },\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        \".glb\": { isBinary: true, mimeType: \"model/gltf-binary\" },\r\n    } as const satisfies ISceneLoaderPluginExtensions,\r\n\r\n    canDirectLoad(data: string): boolean {\r\n        return (\r\n            (data.indexOf(\"asset\") !== -1 && data.indexOf(\"version\") !== -1) ||\r\n            data.startsWith(\"data:base64,\" + GLTFMagicBase64Encoded) || // this is technically incorrect, but will continue to support for backcompat.\r\n            data.startsWith(\"data:;base64,\" + GLTFMagicBase64Encoded) ||\r\n            data.startsWith(\"data:application/octet-stream;base64,\" + GLTFMagicBase64Encoded) ||\r\n            data.startsWith(\"data:model/gltf-binary;base64,\" + GLTFMagicBase64Encoded)\r\n        );\r\n    },\r\n} as const satisfies ISceneLoaderPluginMetadata;\r\n", "/* eslint-disable github/no-then */\r\n/* eslint-disable @typescript-eslint/no-floating-promises */\r\n/* eslint-disable @typescript-eslint/prefer-promise-reject-errors */\r\n/* eslint-disable no-restricted-syntax */\r\n/* eslint-disable @typescript-eslint/promise-function-async */\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type * as GLTF2 from \"babylonjs-gltf2interface\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { ISceneLoaderPluginFactory, ISceneLoaderPluginAsync, ISceneLoaderProgressEvent, ISceneLoaderAsyncResult, SceneLoaderPluginOptions } from \"core/Loading/sceneLoader\";\r\nimport { RegisterSceneLoaderPlugin } from \"core/Loading/sceneLoader\";\r\nimport { AssetContainer } from \"core/assetContainer\";\r\nimport type { Scene, IDisposable } from \"core/scene\";\r\nimport type { WebRequest } from \"core/Misc/webRequest\";\r\nimport type { IFileRequest } from \"core/Misc/fileRequest\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport type { IDataBuffer } from \"core/Misc/dataReader\";\r\nimport { DataReader } from \"core/Misc/dataReader\";\r\nimport { GLTFValidation } from \"./glTFValidation\";\r\nimport { GLTFFileLoaderMetadata, GLTFMagicBase64Encoded } from \"./glTFFileLoader.metadata\";\r\nimport type { LoadFileError } from \"core/Misc/fileTools\";\r\nimport { DecodeBase64UrlToBinary } from \"core/Misc/fileTools\";\r\nimport { RuntimeError, ErrorCodes } from \"core/Misc/error\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { MorphTargetManager } from \"core/Morph/morphTargetManager\";\r\n\r\n/**\r\n * Defines options for glTF loader extensions. This interface is extended by specific extensions.\r\n */\r\nexport interface GLTFLoaderExtensionOptions extends Record<string, Record<string, unknown> | undefined> {}\r\n\r\ndeclare module \"core/Loading/sceneLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc\r\n    export interface SceneLoaderPluginOptions {\r\n        /**\r\n         * Defines options for the glTF loader.\r\n         */\r\n        [GLTFFileLoaderMetadata.name]: Partial<GLTFLoaderOptions>;\r\n    }\r\n}\r\n\r\ninterface IFileRequestInfo extends IFileRequest {\r\n    _lengthComputable?: boolean;\r\n    _loaded?: number;\r\n    _total?: number;\r\n}\r\n\r\nfunction readAsync(arrayBuffer: ArrayBuffer, byteOffset: number, byteLength: number): Promise<Uint8Array> {\r\n    try {\r\n        return Promise.resolve(new Uint8Array(arrayBuffer, byteOffset, byteLength));\r\n    } catch (e) {\r\n        return Promise.reject(e);\r\n    }\r\n}\r\n\r\nfunction readViewAsync(arrayBufferView: ArrayBufferView, byteOffset: number, byteLength: number): Promise<Uint8Array> {\r\n    try {\r\n        if (byteOffset < 0 || byteOffset >= arrayBufferView.byteLength) {\r\n            throw new RangeError(\"Offset is out of range.\");\r\n        }\r\n\r\n        if (byteOffset + byteLength > arrayBufferView.byteLength) {\r\n            throw new RangeError(\"Length is out of range.\");\r\n        }\r\n\r\n        return Promise.resolve(new Uint8Array(arrayBufferView.buffer, arrayBufferView.byteOffset + byteOffset, byteLength));\r\n    } catch (e) {\r\n        return Promise.reject(e);\r\n    }\r\n}\r\n\r\n/**\r\n * Mode that determines the coordinate system to use.\r\n */\r\nexport enum GLTFLoaderCoordinateSystemMode {\r\n    /**\r\n     * Automatically convert the glTF right-handed data to the appropriate system based on the current coordinate system mode of the scene.\r\n     */\r\n    AUTO,\r\n\r\n    /**\r\n     * Sets the useRightHandedSystem flag on the scene.\r\n     */\r\n    FORCE_RIGHT_HANDED,\r\n}\r\n\r\n/**\r\n * Mode that determines what animations will start.\r\n */\r\nexport enum GLTFLoaderAnimationStartMode {\r\n    /**\r\n     * No animation will start.\r\n     */\r\n    NONE,\r\n\r\n    /**\r\n     * The first animation will start.\r\n     */\r\n    FIRST,\r\n\r\n    /**\r\n     * All animations will start.\r\n     */\r\n    ALL,\r\n}\r\n\r\n/**\r\n * Interface that contains the data for the glTF asset.\r\n */\r\nexport interface IGLTFLoaderData {\r\n    /**\r\n     * The object that represents the glTF JSON.\r\n     */\r\n    json: object;\r\n\r\n    /**\r\n     * The BIN chunk of a binary glTF.\r\n     */\r\n    bin: Nullable<IDataBuffer>;\r\n}\r\n\r\n/**\r\n * Interface for extending the loader.\r\n */\r\nexport interface IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    readonly name: string;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    enabled: boolean;\r\n\r\n    /**\r\n     * Defines the order of this extension.\r\n     * The loader sorts the extensions using these values when loading.\r\n     */\r\n    order?: number;\r\n}\r\n\r\n/**\r\n * Loader state.\r\n */\r\nexport enum GLTFLoaderState {\r\n    /**\r\n     * The asset is loading.\r\n     */\r\n    LOADING,\r\n\r\n    /**\r\n     * The asset is ready for rendering.\r\n     */\r\n    READY,\r\n\r\n    /**\r\n     * The asset is completely loaded.\r\n     */\r\n    COMPLETE,\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFLoader extends IDisposable {\r\n    importMeshAsync: (\r\n        meshesNames: string | readonly string[] | null | undefined,\r\n        scene: Scene,\r\n        container: Nullable<AssetContainer>,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        fileName?: string\r\n    ) => Promise<ISceneLoaderAsyncResult>;\r\n    loadAsync: (scene: Scene, data: IGLTFLoaderData, rootUrl: string, onProgress?: (event: ISceneLoaderProgressEvent) => void, fileName?: string) => Promise<void>;\r\n}\r\n\r\n/**\r\n * Adds default/implicit options to extension specific options.\r\n */\r\ntype DefaultExtensionOptions<BaseExtensionOptions> = {\r\n    /**\r\n     * Defines if the extension is enabled\r\n     */\r\n    enabled?: boolean;\r\n} & BaseExtensionOptions;\r\n\r\n/**\r\n * This class contains all the concrete (not abstract) glTF options, excluding callbacks.\r\n * The purpose of this class is to make it easy to provide a way to mutate the default\r\n * loader options (see the GLTFLoaderDefaultOptions instance below) without duplicating\r\n * all the options in yet another object. Since this class is instantiated for the default\r\n * options object, abstract properties and callbacks are not included, it's more just\r\n * flag-type options.\r\n */\r\nclass GLTFLoaderBaseOptions {\r\n    /**\r\n     * Defines if the loader should always compute the bounding boxes of meshes and not use the min/max values from the position accessor. Defaults to false.\r\n     */\r\n    public alwaysComputeBoundingBox = false;\r\n\r\n    /**\r\n     * Defines if the loader should always compute the nearest common ancestor of the skeleton joints instead of using `skin.skeleton`. Defaults to false.\r\n     * Set this to true if loading assets with invalid `skin.skeleton` values.\r\n     */\r\n    public alwaysComputeSkeletonRootNode = false;\r\n\r\n    /**\r\n     * The animation start mode. Defaults to FIRST.\r\n     */\r\n    public animationStartMode = GLTFLoaderAnimationStartMode.FIRST;\r\n\r\n    /**\r\n     * Defines if the loader should compile materials before raising the success callback. Defaults to false.\r\n     */\r\n    public compileMaterials = false;\r\n\r\n    /**\r\n     * Defines if the loader should compile shadow generators before raising the success callback. Defaults to false.\r\n     */\r\n    public compileShadowGenerators = false;\r\n\r\n    /**\r\n     * The coordinate system mode. Defaults to AUTO.\r\n     */\r\n    public coordinateSystemMode = GLTFLoaderCoordinateSystemMode.AUTO;\r\n\r\n    /**\r\n     * Defines if the loader should create instances when multiple glTF nodes point to the same glTF mesh. Defaults to true.\r\n     */\r\n    public createInstances = true;\r\n\r\n    /**\r\n     * If true, load all materials defined in the file, even if not used by any mesh. Defaults to false.\r\n     */\r\n    public loadAllMaterials = false;\r\n\r\n    /**\r\n     * Defines if the loader should load morph targets. Defaults to true.\r\n     */\r\n    public loadMorphTargets = true;\r\n\r\n    /**\r\n     * Defines if the loader should load node animations. Defaults to true.\r\n     * NOTE: The animation of this node will still load if the node is also a joint of a skin and `loadSkins` is true.\r\n     */\r\n    public loadNodeAnimations = true;\r\n\r\n    /**\r\n     * If true, load only the materials defined in the file. Defaults to false.\r\n     */\r\n    public loadOnlyMaterials = false;\r\n\r\n    /**\r\n     * Defines if the loader should load skins. Defaults to true.\r\n     */\r\n    public loadSkins = true;\r\n\r\n    /**\r\n     * If true, do not load any materials defined in the file. Defaults to false.\r\n     */\r\n    public skipMaterials = false;\r\n\r\n    /**\r\n     * When loading glTF animations, which are defined in seconds, target them to this FPS. Defaults to 60.\r\n     */\r\n    public targetFps = 60;\r\n\r\n    /**\r\n     * Defines if the Alpha blended materials are only applied as coverage.\r\n     * If false, (default) The luminance of each pixel will reduce its opacity to simulate the behaviour of most physical materials.\r\n     * If true, no extra effects are applied to transparent pixels.\r\n     */\r\n    public transparencyAsCoverage = false;\r\n\r\n    /**\r\n     * Defines if the loader should also compile materials with clip planes. Defaults to false.\r\n     */\r\n    public useClipPlane = false;\r\n\r\n    /**\r\n     * If true, the loader will derive the name for Babylon textures from the glTF texture name, image name, or image url. Defaults to false.\r\n     * Note that it is possible for multiple Babylon textures to share the same name when the Babylon textures load from the same glTF texture or image.\r\n     */\r\n    public useGltfTextureNames = false;\r\n\r\n    /**\r\n     * Defines if the loader should use range requests when load binary glTF files from HTTP.\r\n     * Enabling will disable offline support and glTF validator.\r\n     * Defaults to false.\r\n     */\r\n    public useRangeRequests = false;\r\n\r\n    /**\r\n     * If true, load the color (gamma encoded) textures into sRGB buffers (if supported by the GPU), which will yield more accurate results when sampling the texture. Defaults to true.\r\n     */\r\n    public useSRGBBuffers = true;\r\n\r\n    /**\r\n     * Defines if the loader should validate the asset.\r\n     */\r\n    public validate = false;\r\n\r\n    /**\r\n     * Load the glTF files using the OpenPBR material.\r\n     * @experimental\r\n     */\r\n    public useOpenPBR = false;\r\n}\r\n\r\n/**\r\n * The default GLTF loader options.\r\n * Override the properties of this object to globally change the default loader options.\r\n * To specify options for a specific load call, pass those options into the associated load function.\r\n */\r\nexport const GLTFLoaderDefaultOptions = new GLTFLoaderBaseOptions();\r\n\r\nabstract class GLTFLoaderOptions extends GLTFLoaderBaseOptions {\r\n    // eslint-disable-next-line babylonjs/available\r\n    protected copyFrom(options?: Partial<Readonly<GLTFLoaderOptions>>) {\r\n        if (options) {\r\n            this.alwaysComputeBoundingBox = options.alwaysComputeBoundingBox ?? this.alwaysComputeBoundingBox;\r\n            this.alwaysComputeSkeletonRootNode = options.alwaysComputeSkeletonRootNode ?? this.alwaysComputeSkeletonRootNode;\r\n            this.animationStartMode = options.animationStartMode ?? this.animationStartMode;\r\n            this.capturePerformanceCounters = options.capturePerformanceCounters ?? this.capturePerformanceCounters;\r\n            this.compileMaterials = options.compileMaterials ?? this.compileMaterials;\r\n            this.compileShadowGenerators = options.compileShadowGenerators ?? this.compileShadowGenerators;\r\n            this.coordinateSystemMode = options.coordinateSystemMode ?? this.coordinateSystemMode;\r\n            this.createInstances = options.createInstances ?? this.createInstances;\r\n            this.customRootNode = options.customRootNode;\r\n            this.extensionOptions = options.extensionOptions ?? this.extensionOptions;\r\n            this.loadAllMaterials = options.loadAllMaterials ?? this.loadAllMaterials;\r\n            this.loadMorphTargets = options.loadMorphTargets ?? this.loadMorphTargets;\r\n            this.loadNodeAnimations = options.loadNodeAnimations ?? this.loadNodeAnimations;\r\n            this.loadOnlyMaterials = options.loadOnlyMaterials ?? this.loadOnlyMaterials;\r\n            this.loadSkins = options.loadSkins ?? this.loadSkins;\r\n            this.loggingEnabled = options.loggingEnabled ?? this.loggingEnabled;\r\n            this.onCameraLoaded = options.onCameraLoaded;\r\n            this.onMaterialLoaded = options.onMaterialLoaded;\r\n            this.onMeshLoaded = options.onMeshLoaded;\r\n            this.onParsed = options.onParsed;\r\n            this.onSkinLoaded = options.onSkinLoaded;\r\n            this.onTextureLoaded = options.onTextureLoaded;\r\n            this.onValidated = options.onValidated;\r\n            this.preprocessUrlAsync = options.preprocessUrlAsync ?? this.preprocessUrlAsync;\r\n            this.skipMaterials = options.skipMaterials ?? this.skipMaterials;\r\n            this.targetFps = options.targetFps ?? this.targetFps;\r\n            this.transparencyAsCoverage = options.transparencyAsCoverage ?? this.transparencyAsCoverage;\r\n            this.useClipPlane = options.useClipPlane ?? this.useClipPlane;\r\n            this.useGltfTextureNames = options.useGltfTextureNames ?? this.useGltfTextureNames;\r\n            this.useOpenPBR = options.useOpenPBR ?? this.useOpenPBR;\r\n            this.useRangeRequests = options.useRangeRequests ?? this.useRangeRequests;\r\n            this.useSRGBBuffers = options.useSRGBBuffers ?? this.useSRGBBuffers;\r\n            this.validate = options.validate ?? this.validate;\r\n        }\r\n    }\r\n\r\n    // --------------\r\n    // Common options\r\n    // --------------\r\n\r\n    /**\r\n     * Raised when the asset has been parsed\r\n     */\r\n    public abstract onParsed?: ((loaderData: IGLTFLoaderData) => void) | undefined;\r\n\r\n    // ----------\r\n    // V2 options\r\n    // ----------\r\n\r\n    /**\r\n     * Defines if the loader should capture performance counters.\r\n     */\r\n    public abstract capturePerformanceCounters: boolean;\r\n\r\n    /**\r\n     * Defines the node to use as the root of the hierarchy when loading the scene (default: undefined). If not defined, a root node will be automatically created.\r\n     * You can also pass null if you don't want a root node to be created.\r\n     */\r\n    public customRootNode?: Nullable<TransformNode>;\r\n\r\n    /**\r\n     * Defines options for glTF extensions.\r\n     */\r\n    public extensionOptions: {\r\n        // NOTE: This type is doing two things:\r\n        // 1. Adding an implicit 'enabled' property to the options for each extension.\r\n        // 2. Creating a mapped type of all the options of all the extensions to make it just look like a consolidated plain object in intellisense for the user.\r\n        [Extension in keyof GLTFLoaderExtensionOptions]?: {\r\n            [Option in keyof DefaultExtensionOptions<GLTFLoaderExtensionOptions[Extension]>]: DefaultExtensionOptions<GLTFLoaderExtensionOptions[Extension]>[Option];\r\n        };\r\n    } = {};\r\n\r\n    /**\r\n     * If true, enable logging for the loader. Defaults to false.\r\n     */\r\n    public abstract loggingEnabled: boolean;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a camera after parsing the glTF properties of the camera.\r\n     */\r\n    public abstract onCameraLoaded?: (camera: Camera) => void;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a material after parsing the glTF properties of the material.\r\n     */\r\n    public abstract onMaterialLoaded?: (material: Material) => void;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a mesh after parsing the glTF properties of the mesh.\r\n     * Note that the callback is called as soon as the mesh object is created, meaning some data may not have been setup yet for this mesh (vertex data, morph targets, material, ...)\r\n     */\r\n    public abstract onMeshLoaded?: (mesh: AbstractMesh) => void;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a skin after parsing the glTF properties of the skin node.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/importers/glTF/glTFSkinning#ignoring-the-transform-of-the-skinned-mesh\r\n     */\r\n    public abstract onSkinLoaded?: (node: TransformNode, skinnedNode: TransformNode) => void;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a texture after parsing the glTF properties of the texture.\r\n     */\r\n    public abstract onTextureLoaded?: (texture: BaseTexture) => void;\r\n\r\n    /**\r\n     * Callback raised after the asset is validated.\r\n     */\r\n    public abstract onValidated?: (results: GLTF2.IGLTFValidationResults) => void;\r\n\r\n    /**\r\n     * Function called before loading a url referenced by the asset.\r\n     * @param url url referenced by the asset\r\n     * @returns Async url to load\r\n     */\r\n    public preprocessUrlAsync = (url: string) => Promise.resolve(url);\r\n}\r\n\r\n/**\r\n * File loader for loading glTF files into a scene.\r\n */\r\nexport class GLTFFileLoader extends GLTFLoaderOptions implements IDisposable, ISceneLoaderPluginAsync, ISceneLoaderPluginFactory {\r\n    /** @internal */\r\n    public static _CreateGLTF1Loader: (parent: GLTFFileLoader) => IGLTFLoader;\r\n\r\n    /** @internal */\r\n    public static _CreateGLTF2Loader: (parent: GLTFFileLoader) => IGLTFLoader;\r\n\r\n    /**\r\n     * Creates a new glTF file loader.\r\n     * @param options The options for the loader\r\n     */\r\n    public constructor(options?: Partial<Readonly<GLTFLoaderOptions>>) {\r\n        super();\r\n        this.copyFrom(Object.assign({ ...GLTFLoaderDefaultOptions }, options));\r\n    }\r\n\r\n    // --------------------\r\n    // Begin Common options\r\n    // --------------------\r\n\r\n    /**\r\n     * Raised when the asset has been parsed\r\n     */\r\n    public onParsedObservable = new Observable<IGLTFLoaderData>();\r\n\r\n    private _onParsedObserver: Nullable<Observer<IGLTFLoaderData>>;\r\n\r\n    /**\r\n     * Raised when the asset has been parsed\r\n     */\r\n    public set onParsed(callback: ((loaderData: IGLTFLoaderData) => void) | undefined) {\r\n        if (this._onParsedObserver) {\r\n            this.onParsedObservable.remove(this._onParsedObserver);\r\n        }\r\n        if (callback) {\r\n            this._onParsedObserver = this.onParsedObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    // ------------------\r\n    // End Common options\r\n    // ------------------\r\n\r\n    // ----------------\r\n    // Begin V1 options\r\n    // ----------------\r\n\r\n    /**\r\n     * Set this property to false to disable incremental loading which delays the loader from calling the success callback until after loading the meshes and shaders.\r\n     * Textures always loads asynchronously. For example, the success callback can compute the bounding information of the loaded meshes when incremental loading is disabled.\r\n     * Defaults to true.\r\n     * @internal\r\n     */\r\n    public static IncrementalLoading = true;\r\n\r\n    /**\r\n     * Set this property to true in order to work with homogeneous coordinates, available with some converters and exporters.\r\n     * Defaults to false. See https://en.wikipedia.org/wiki/Homogeneous_coordinates.\r\n     * @internal\r\n     */\r\n    public static HomogeneousCoordinates = false;\r\n\r\n    // --------------\r\n    // End V1 options\r\n    // --------------\r\n\r\n    /**\r\n     * Observable raised when the loader creates a mesh after parsing the glTF properties of the mesh.\r\n     * Note that the observable is raised as soon as the mesh object is created, meaning some data may not have been setup yet for this mesh (vertex data, morph targets, material, ...)\r\n     */\r\n    public readonly onMeshLoadedObservable = new Observable<AbstractMesh>();\r\n\r\n    private _onMeshLoadedObserver: Nullable<Observer<AbstractMesh>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a mesh after parsing the glTF properties of the mesh.\r\n     * Note that the callback is called as soon as the mesh object is created, meaning some data may not have been setup yet for this mesh (vertex data, morph targets, material, ...)\r\n     */\r\n    public set onMeshLoaded(callback: ((mesh: AbstractMesh) => void) | undefined) {\r\n        if (this._onMeshLoadedObserver) {\r\n            this.onMeshLoadedObservable.remove(this._onMeshLoadedObserver);\r\n        }\r\n        if (callback) {\r\n            this._onMeshLoadedObserver = this.onMeshLoadedObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader creates a skin after parsing the glTF properties of the skin node.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/importers/glTF/glTFSkinning#ignoring-the-transform-of-the-skinned-mesh\r\n     * @param node - the transform node that corresponds to the original glTF skin node used for animations\r\n     * @param skinnedNode - the transform node that is the skinned mesh itself or the parent of the skinned meshes\r\n     */\r\n    public readonly onSkinLoadedObservable = new Observable<{ node: TransformNode; skinnedNode: TransformNode }>();\r\n\r\n    private _onSkinLoadedObserver: Nullable<Observer<{ node: TransformNode; skinnedNode: TransformNode }>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a skin after parsing the glTF properties of the skin node.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/importers/glTF/glTFSkinning#ignoring-the-transform-of-the-skinned-mesh\r\n     */\r\n    public set onSkinLoaded(callback: ((node: TransformNode, skinnedNode: TransformNode) => void) | undefined) {\r\n        if (this._onSkinLoadedObserver) {\r\n            this.onSkinLoadedObservable.remove(this._onSkinLoadedObserver);\r\n        }\r\n        if (callback) {\r\n            this._onSkinLoadedObserver = this.onSkinLoadedObservable.add((data) => callback(data.node, data.skinnedNode));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader creates a texture after parsing the glTF properties of the texture.\r\n     */\r\n    public readonly onTextureLoadedObservable = new Observable<BaseTexture>();\r\n\r\n    private _onTextureLoadedObserver: Nullable<Observer<BaseTexture>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a texture after parsing the glTF properties of the texture.\r\n     */\r\n    public set onTextureLoaded(callback: ((texture: BaseTexture) => void) | undefined) {\r\n        if (this._onTextureLoadedObserver) {\r\n            this.onTextureLoadedObservable.remove(this._onTextureLoadedObserver);\r\n        }\r\n        if (callback) {\r\n            this._onTextureLoadedObserver = this.onTextureLoadedObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader creates a material after parsing the glTF properties of the material.\r\n     */\r\n    public readonly onMaterialLoadedObservable = new Observable<Material>();\r\n\r\n    private _onMaterialLoadedObserver: Nullable<Observer<Material>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a material after parsing the glTF properties of the material.\r\n     */\r\n    public set onMaterialLoaded(callback: ((material: Material) => void) | undefined) {\r\n        if (this._onMaterialLoadedObserver) {\r\n            this.onMaterialLoadedObservable.remove(this._onMaterialLoadedObserver);\r\n        }\r\n        if (callback) {\r\n            this._onMaterialLoadedObserver = this.onMaterialLoadedObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader creates a camera after parsing the glTF properties of the camera.\r\n     */\r\n    public readonly onCameraLoadedObservable = new Observable<Camera>();\r\n\r\n    private _onCameraLoadedObserver: Nullable<Observer<Camera>>;\r\n\r\n    /**\r\n     * Callback raised when the loader creates a camera after parsing the glTF properties of the camera.\r\n     */\r\n    public set onCameraLoaded(callback: ((camera: Camera) => void) | undefined) {\r\n        if (this._onCameraLoadedObserver) {\r\n            this.onCameraLoadedObservable.remove(this._onCameraLoadedObserver);\r\n        }\r\n        if (callback) {\r\n            this._onCameraLoadedObserver = this.onCameraLoadedObservable.add(callback);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the asset is completely loaded, immediately before the loader is disposed.\r\n     * For assets with LODs, raised when all of the LODs are complete.\r\n     * For assets without LODs, raised when the model is complete, immediately after the loader resolves the returned promise.\r\n     */\r\n    public readonly onCompleteObservable = new Observable<void>();\r\n\r\n    private _onCompleteObserver: Nullable<Observer<void>>;\r\n\r\n    /**\r\n     * Callback raised when the asset is completely loaded, immediately before the loader is disposed.\r\n     * For assets with LODs, raised when all of the LODs are complete.\r\n     * For assets without LODs, raised when the model is complete, immediately after the loader resolves the returned promise.\r\n     */\r\n    public set onComplete(callback: () => void) {\r\n        if (this._onCompleteObserver) {\r\n            this.onCompleteObservable.remove(this._onCompleteObserver);\r\n        }\r\n        this._onCompleteObserver = this.onCompleteObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised when an error occurs.\r\n     */\r\n    public readonly onErrorObservable = new Observable<any>();\r\n\r\n    private _onErrorObserver: Nullable<Observer<any>>;\r\n\r\n    /**\r\n     * Callback raised when an error occurs.\r\n     */\r\n    public set onError(callback: (reason: any) => void) {\r\n        if (this._onErrorObserver) {\r\n            this.onErrorObservable.remove(this._onErrorObserver);\r\n        }\r\n        this._onErrorObserver = this.onErrorObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised after the loader is disposed.\r\n     */\r\n    public readonly onDisposeObservable = new Observable<void>();\r\n\r\n    private _onDisposeObserver: Nullable<Observer<void>>;\r\n\r\n    /**\r\n     * Callback raised after the loader is disposed.\r\n     */\r\n    public set onDispose(callback: () => void) {\r\n        if (this._onDisposeObserver) {\r\n            this.onDisposeObservable.remove(this._onDisposeObserver);\r\n        }\r\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Observable raised after a loader extension is created.\r\n     * Set additional options for a loader extension in this event.\r\n     */\r\n    public readonly onExtensionLoadedObservable = new Observable<IGLTFLoaderExtension>();\r\n\r\n    private _onExtensionLoadedObserver: Nullable<Observer<IGLTFLoaderExtension>>;\r\n\r\n    /**\r\n     * Callback raised after a loader extension is created.\r\n     */\r\n    public set onExtensionLoaded(callback: (extension: IGLTFLoaderExtension) => void) {\r\n        if (this._onExtensionLoadedObserver) {\r\n            this.onExtensionLoadedObservable.remove(this._onExtensionLoadedObserver);\r\n        }\r\n        this._onExtensionLoadedObserver = this.onExtensionLoadedObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Defines if the loader logging is enabled.\r\n     */\r\n    public get loggingEnabled(): boolean {\r\n        return this._loggingEnabled;\r\n    }\r\n\r\n    public set loggingEnabled(value: boolean) {\r\n        if (this._loggingEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._loggingEnabled = value;\r\n\r\n        if (this._loggingEnabled) {\r\n            this._log = this._logEnabled;\r\n        } else {\r\n            this._log = this._logDisabled;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines if the loader should capture performance counters.\r\n     */\r\n    public get capturePerformanceCounters(): boolean {\r\n        return this._capturePerformanceCounters;\r\n    }\r\n\r\n    public set capturePerformanceCounters(value: boolean) {\r\n        if (this._capturePerformanceCounters === value) {\r\n            return;\r\n        }\r\n\r\n        this._capturePerformanceCounters = value;\r\n\r\n        if (this._capturePerformanceCounters) {\r\n            this._startPerformanceCounter = this._startPerformanceCounterEnabled;\r\n            this._endPerformanceCounter = this._endPerformanceCounterEnabled;\r\n        } else {\r\n            this._startPerformanceCounter = this._startPerformanceCounterDisabled;\r\n            this._endPerformanceCounter = this._endPerformanceCounterDisabled;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Observable raised after validation when validate is set to true. The event data is the result of the validation.\r\n     */\r\n    public readonly onValidatedObservable = new Observable<GLTF2.IGLTFValidationResults>();\r\n\r\n    private _onValidatedObserver: Nullable<Observer<GLTF2.IGLTFValidationResults>>;\r\n\r\n    /**\r\n     * Callback raised after the asset is validated.\r\n     */\r\n    public set onValidated(callback: (results: GLTF2.IGLTFValidationResults) => void) {\r\n        if (this._onValidatedObserver) {\r\n            this.onValidatedObservable.remove(this._onValidatedObserver);\r\n        }\r\n        this._onValidatedObserver = this.onValidatedObservable.add(callback);\r\n    }\r\n\r\n    private _loader: Nullable<IGLTFLoader> = null;\r\n    private _state: Nullable<GLTFLoaderState> = null;\r\n    private _progressCallback?: (event: ISceneLoaderProgressEvent) => void;\r\n    private _requests = new Array<IFileRequestInfo>();\r\n\r\n    /**\r\n     * Name of the loader (\"gltf\")\r\n     */\r\n    public readonly name = GLTFFileLoaderMetadata.name;\r\n\r\n    /** @internal */\r\n    public readonly extensions = GLTFFileLoaderMetadata.extensions;\r\n\r\n    /**\r\n     * Disposes the loader, releases resources during load, and cancels any outstanding requests.\r\n     */\r\n    public dispose(): void {\r\n        if (this._loader) {\r\n            this._loader.dispose();\r\n            this._loader = null;\r\n        }\r\n\r\n        for (const request of this._requests) {\r\n            request.abort();\r\n        }\r\n\r\n        this._requests.length = 0;\r\n\r\n        delete this._progressCallback;\r\n\r\n        this.preprocessUrlAsync = (url) => Promise.resolve(url);\r\n\r\n        this.onMeshLoadedObservable.clear();\r\n        this.onSkinLoadedObservable.clear();\r\n        this.onTextureLoadedObservable.clear();\r\n        this.onMaterialLoadedObservable.clear();\r\n        this.onCameraLoadedObservable.clear();\r\n        this.onCompleteObservable.clear();\r\n        this.onExtensionLoadedObservable.clear();\r\n\r\n        this.onDisposeObservable.notifyObservers(undefined);\r\n        this.onDisposeObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadFile(\r\n        scene: Scene,\r\n        fileOrUrl: File | string | ArrayBufferView,\r\n        rootUrl: string,\r\n        onSuccess: (data: unknown, responseURL?: string) => void,\r\n        onProgress?: (ev: ISceneLoaderProgressEvent) => void,\r\n        useArrayBuffer?: boolean,\r\n        onError?: (request?: WebRequest, exception?: LoadFileError) => void,\r\n        name?: string\r\n    ): Nullable<IFileRequest> {\r\n        if (ArrayBuffer.isView(fileOrUrl)) {\r\n            this._loadBinary(scene, fileOrUrl, rootUrl, onSuccess, onError, name);\r\n            return null;\r\n        }\r\n\r\n        this._progressCallback = onProgress;\r\n\r\n        const fileName = (fileOrUrl as File).name || Tools.GetFilename(fileOrUrl as string);\r\n\r\n        if (useArrayBuffer) {\r\n            if (this.useRangeRequests) {\r\n                if (this.validate) {\r\n                    Logger.Warn(\"glTF validation is not supported when range requests are enabled\");\r\n                }\r\n\r\n                const fileRequest: IFileRequest = {\r\n                    abort: () => {},\r\n                    onCompleteObservable: new Observable<IFileRequest>(),\r\n                };\r\n\r\n                const dataBuffer = {\r\n                    readAsync: (byteOffset: number, byteLength: number) => {\r\n                        return new Promise<ArrayBufferView>((resolve, reject) => {\r\n                            this._loadFile(\r\n                                scene,\r\n                                fileOrUrl,\r\n                                (data) => {\r\n                                    resolve(new Uint8Array(data as ArrayBuffer));\r\n                                },\r\n                                true,\r\n                                (error) => {\r\n                                    reject(error);\r\n                                },\r\n                                (webRequest) => {\r\n                                    webRequest.setRequestHeader(\"Range\", `bytes=${byteOffset}-${byteOffset + byteLength - 1}`);\r\n                                }\r\n                            );\r\n                        });\r\n                    },\r\n                    byteLength: 0,\r\n                };\r\n\r\n                this._unpackBinaryAsync(new DataReader(dataBuffer)).then(\r\n                    (loaderData) => {\r\n                        fileRequest.onCompleteObservable.notifyObservers(fileRequest);\r\n                        onSuccess(loaderData);\r\n                    },\r\n                    onError ? (error) => onError(undefined, error) : undefined\r\n                );\r\n\r\n                return fileRequest;\r\n            }\r\n\r\n            return this._loadFile(\r\n                scene,\r\n                fileOrUrl,\r\n                (data) => {\r\n                    this._validate(scene, new Uint8Array(data as ArrayBuffer, 0, (data as ArrayBuffer).byteLength), rootUrl, fileName);\r\n                    this._unpackBinaryAsync(\r\n                        new DataReader({\r\n                            readAsync: (byteOffset, byteLength) => readAsync(data as ArrayBuffer, byteOffset, byteLength),\r\n                            byteLength: (data as ArrayBuffer).byteLength,\r\n                        })\r\n                    ).then(\r\n                        (loaderData) => {\r\n                            onSuccess(loaderData);\r\n                        },\r\n                        onError ? (error) => onError(undefined, error) : undefined\r\n                    );\r\n                },\r\n                true,\r\n                onError\r\n            );\r\n        } else {\r\n            return this._loadFile(\r\n                scene,\r\n                fileOrUrl,\r\n                (data) => {\r\n                    try {\r\n                        this._validate(scene, data as string, rootUrl, fileName);\r\n                        onSuccess({ json: this._parseJson(data as string) });\r\n                    } catch {\r\n                        if (onError) {\r\n                            onError();\r\n                        }\r\n                    }\r\n                },\r\n                false,\r\n                onError\r\n            );\r\n        }\r\n    }\r\n\r\n    private _loadBinary(\r\n        scene: Scene,\r\n        data: ArrayBufferView,\r\n        rootUrl: string,\r\n        onSuccess: (data: unknown, responseURL?: string) => void,\r\n        onError?: (request?: WebRequest, exception?: LoadFileError) => void,\r\n        fileName?: string\r\n    ): void {\r\n        this._validate(scene, new Uint8Array(data.buffer, data.byteOffset, data.byteLength), rootUrl, fileName);\r\n        this._unpackBinaryAsync(\r\n            new DataReader({\r\n                readAsync: (byteOffset, byteLength) => readViewAsync(data, byteOffset, byteLength),\r\n                byteLength: data.byteLength,\r\n            })\r\n        ).then(\r\n            (loaderData) => {\r\n                onSuccess(loaderData);\r\n            },\r\n            onError ? (error) => onError(undefined, error) : undefined\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public importMeshAsync(\r\n        meshesNames: string | readonly string[] | null | undefined,\r\n        scene: Scene,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        fileName?: string\r\n    ): Promise<ISceneLoaderAsyncResult> {\r\n        return Promise.resolve().then(() => {\r\n            this.onParsedObservable.notifyObservers(data);\r\n            this.onParsedObservable.clear();\r\n\r\n            this._log(`Loading ${fileName || \"\"}`);\r\n            this._loader = this._getLoader(data);\r\n            return this._loader.importMeshAsync(meshesNames, scene, null, data, rootUrl, onProgress, fileName);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadAsync(scene: Scene, data: IGLTFLoaderData, rootUrl: string, onProgress?: (event: ISceneLoaderProgressEvent) => void, fileName?: string): Promise<void> {\r\n        return Promise.resolve().then(() => {\r\n            this.onParsedObservable.notifyObservers(data);\r\n            this.onParsedObservable.clear();\r\n\r\n            this._log(`Loading ${fileName || \"\"}`);\r\n            this._loader = this._getLoader(data);\r\n            return this._loader.loadAsync(scene, data, rootUrl, onProgress, fileName);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public loadAssetContainerAsync(\r\n        scene: Scene,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        fileName?: string\r\n    ): Promise<AssetContainer> {\r\n        return Promise.resolve().then(() => {\r\n            this.onParsedObservable.notifyObservers(data);\r\n            this.onParsedObservable.clear();\r\n\r\n            this._log(`Loading ${fileName || \"\"}`);\r\n            this._loader = this._getLoader(data);\r\n\r\n            // Prepare the asset container.\r\n            const container = new AssetContainer(scene);\r\n\r\n            // Get materials/textures when loading to add to container\r\n            const materials: Array<Material> = [];\r\n            this.onMaterialLoadedObservable.add((material) => {\r\n                materials.push(material);\r\n            });\r\n            const textures: Array<BaseTexture> = [];\r\n            this.onTextureLoadedObservable.add((texture) => {\r\n                textures.push(texture);\r\n            });\r\n            const cameras: Array<Camera> = [];\r\n            this.onCameraLoadedObservable.add((camera) => {\r\n                cameras.push(camera);\r\n            });\r\n\r\n            const morphTargetManagers: Array<MorphTargetManager> = [];\r\n            this.onMeshLoadedObservable.add((mesh) => {\r\n                if (mesh.morphTargetManager) {\r\n                    morphTargetManagers.push(mesh.morphTargetManager);\r\n                }\r\n            });\r\n\r\n            return this._loader.importMeshAsync(null, scene, container, data, rootUrl, onProgress, fileName).then((result) => {\r\n                Array.prototype.push.apply(container.geometries, result.geometries);\r\n                Array.prototype.push.apply(container.meshes, result.meshes);\r\n                Array.prototype.push.apply(container.particleSystems, result.particleSystems);\r\n                Array.prototype.push.apply(container.skeletons, result.skeletons);\r\n                Array.prototype.push.apply(container.animationGroups, result.animationGroups);\r\n                Array.prototype.push.apply(container.materials, materials);\r\n                Array.prototype.push.apply(container.textures, textures);\r\n                Array.prototype.push.apply(container.lights, result.lights);\r\n                Array.prototype.push.apply(container.transformNodes, result.transformNodes);\r\n                Array.prototype.push.apply(container.cameras, cameras);\r\n                Array.prototype.push.apply(container.morphTargetManagers, morphTargetManagers);\r\n                return container;\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public canDirectLoad(data: string): boolean {\r\n        return GLTFFileLoaderMetadata.canDirectLoad(data);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public directLoad(scene: Scene, data: string): Promise<object> {\r\n        if (\r\n            data.startsWith(\"base64,\" + GLTFMagicBase64Encoded) || // this is technically incorrect, but will continue to support for backcompat.\r\n            data.startsWith(\";base64,\" + GLTFMagicBase64Encoded) ||\r\n            data.startsWith(\"application/octet-stream;base64,\" + GLTFMagicBase64Encoded) ||\r\n            data.startsWith(\"model/gltf-binary;base64,\" + GLTFMagicBase64Encoded)\r\n        ) {\r\n            const arrayBuffer = DecodeBase64UrlToBinary(data);\r\n\r\n            this._validate(scene, new Uint8Array(arrayBuffer, 0, arrayBuffer.byteLength));\r\n            return this._unpackBinaryAsync(\r\n                new DataReader({\r\n                    readAsync: (byteOffset, byteLength) => readAsync(arrayBuffer, byteOffset, byteLength),\r\n                    byteLength: arrayBuffer.byteLength,\r\n                })\r\n            );\r\n        }\r\n\r\n        this._validate(scene, data);\r\n        return Promise.resolve({ json: this._parseJson(data) });\r\n    }\r\n\r\n    /**\r\n     * The callback that allows custom handling of the root url based on the response url.\r\n     * @param rootUrl the original root url\r\n     * @param responseURL the response url if available\r\n     * @returns the new root url\r\n     */\r\n    public rewriteRootURL?(rootUrl: string, responseURL?: string): string;\r\n\r\n    /** @internal */\r\n    public createPlugin(options: SceneLoaderPluginOptions): ISceneLoaderPluginAsync {\r\n        return new GLTFFileLoader(options[GLTFFileLoaderMetadata.name]);\r\n    }\r\n\r\n    /**\r\n     * The loader state or null if the loader is not active.\r\n     */\r\n    public get loaderState(): Nullable<GLTFLoaderState> {\r\n        return this._state;\r\n    }\r\n\r\n    /**\r\n     * Observable raised when the loader state changes.\r\n     */\r\n    public onLoaderStateChangedObservable = new Observable<Nullable<GLTFLoaderState>>();\r\n\r\n    /**\r\n     * Returns a promise that resolves when the asset is completely loaded.\r\n     * @returns a promise that resolves when the asset is completely loaded.\r\n     */\r\n    public whenCompleteAsync(): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            this.onCompleteObservable.addOnce(() => {\r\n                resolve();\r\n            });\r\n            this.onErrorObservable.addOnce((reason) => {\r\n                reject(reason);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _setState(state: GLTFLoaderState): void {\r\n        if (this._state === state) {\r\n            return;\r\n        }\r\n\r\n        this._state = state;\r\n        this.onLoaderStateChangedObservable.notifyObservers(this._state);\r\n        this._log(GLTFLoaderState[this._state]);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadFile(\r\n        scene: Scene,\r\n        fileOrUrl: File | string,\r\n        onSuccess: (data: string | ArrayBuffer) => void,\r\n        useArrayBuffer?: boolean,\r\n        onError?: (request?: WebRequest) => void,\r\n        onOpened?: (request: WebRequest) => void\r\n    ): IFileRequest {\r\n        const request = scene._loadFile(\r\n            fileOrUrl,\r\n            onSuccess,\r\n            (event) => {\r\n                this._onProgress(event, request);\r\n            },\r\n            true,\r\n            useArrayBuffer,\r\n            onError,\r\n            onOpened\r\n        ) as IFileRequestInfo;\r\n        request.onCompleteObservable.add(() => {\r\n            // Force the length computable to be true since we can guarantee the data is loaded.\r\n            request._lengthComputable = true;\r\n            request._total = request._loaded;\r\n        });\r\n        this._requests.push(request);\r\n        return request;\r\n    }\r\n\r\n    private _onProgress(event: ProgressEvent, request: IFileRequestInfo): void {\r\n        if (!this._progressCallback) {\r\n            return;\r\n        }\r\n\r\n        request._lengthComputable = event.lengthComputable;\r\n        request._loaded = event.loaded;\r\n        request._total = event.total;\r\n\r\n        let lengthComputable = true;\r\n        let loaded = 0;\r\n        let total = 0;\r\n        for (const request of this._requests) {\r\n            if (request._lengthComputable === undefined || request._loaded === undefined || request._total === undefined) {\r\n                return;\r\n            }\r\n\r\n            lengthComputable = lengthComputable && request._lengthComputable;\r\n            loaded += request._loaded;\r\n            total += request._total;\r\n        }\r\n\r\n        this._progressCallback({\r\n            lengthComputable: lengthComputable,\r\n            loaded: loaded,\r\n            total: lengthComputable ? total : 0,\r\n        });\r\n    }\r\n\r\n    private _validate(scene: Scene, data: string | Uint8Array, rootUrl = \"\", fileName = \"\"): void {\r\n        if (!this.validate) {\r\n            return;\r\n        }\r\n\r\n        this._startPerformanceCounter(\"Validate JSON\");\r\n        GLTFValidation.ValidateAsync(data, rootUrl, fileName, (uri) => {\r\n            return this.preprocessUrlAsync(rootUrl + uri).then((url) => {\r\n                return scene._loadFileAsync(url, undefined, true, true).then((data) => {\r\n                    return new Uint8Array(data, 0, data.byteLength);\r\n                });\r\n            });\r\n        }).then(\r\n            (result) => {\r\n                this._endPerformanceCounter(\"Validate JSON\");\r\n                this.onValidatedObservable.notifyObservers(result);\r\n                this.onValidatedObservable.clear();\r\n            },\r\n            (reason) => {\r\n                this._endPerformanceCounter(\"Validate JSON\");\r\n                Tools.Warn(`Failed to validate: ${reason.message}`);\r\n                this.onValidatedObservable.clear();\r\n            }\r\n        );\r\n    }\r\n\r\n    private _getLoader(loaderData: IGLTFLoaderData): IGLTFLoader {\r\n        const asset = (<any>loaderData.json).asset || {};\r\n\r\n        this._log(`Asset version: ${asset.version}`);\r\n        asset.minVersion && this._log(`Asset minimum version: ${asset.minVersion}`);\r\n        asset.generator && this._log(`Asset generator: ${asset.generator}`);\r\n\r\n        const version = GLTFFileLoader._parseVersion(asset.version);\r\n        if (!version) {\r\n            throw new Error(\"Invalid version: \" + asset.version);\r\n        }\r\n\r\n        if (asset.minVersion !== undefined) {\r\n            const minVersion = GLTFFileLoader._parseVersion(asset.minVersion);\r\n            if (!minVersion) {\r\n                throw new Error(\"Invalid minimum version: \" + asset.minVersion);\r\n            }\r\n\r\n            if (GLTFFileLoader._compareVersion(minVersion, { major: 2, minor: 0 }) > 0) {\r\n                throw new Error(\"Incompatible minimum version: \" + asset.minVersion);\r\n            }\r\n        }\r\n\r\n        const createLoaders: { [key: number]: (parent: GLTFFileLoader) => IGLTFLoader } = {\r\n            1: GLTFFileLoader._CreateGLTF1Loader,\r\n            2: GLTFFileLoader._CreateGLTF2Loader,\r\n        };\r\n\r\n        const createLoader = createLoaders[version.major];\r\n        if (!createLoader) {\r\n            throw new Error(\"Unsupported version: \" + asset.version);\r\n        }\r\n\r\n        return createLoader(this);\r\n    }\r\n\r\n    private _parseJson(json: string): object {\r\n        this._startPerformanceCounter(\"Parse JSON\");\r\n        this._log(`JSON length: ${json.length}`);\r\n        const parsed = JSON.parse(json);\r\n        this._endPerformanceCounter(\"Parse JSON\");\r\n        return parsed;\r\n    }\r\n\r\n    private _unpackBinaryAsync(dataReader: DataReader): Promise<IGLTFLoaderData> {\r\n        this._startPerformanceCounter(\"Unpack Binary\");\r\n\r\n        // Read magic + version + length + json length + json format\r\n        return dataReader.loadAsync(20).then(() => {\r\n            const Binary = {\r\n                Magic: 0x46546c67,\r\n            };\r\n\r\n            const magic = dataReader.readUint32();\r\n            if (magic !== Binary.Magic) {\r\n                throw new RuntimeError(\"Unexpected magic: \" + magic, ErrorCodes.GLTFLoaderUnexpectedMagicError);\r\n            }\r\n\r\n            const version = dataReader.readUint32();\r\n\r\n            if (this.loggingEnabled) {\r\n                this._log(`Binary version: ${version}`);\r\n            }\r\n\r\n            const length = dataReader.readUint32();\r\n            if (!this.useRangeRequests && length !== dataReader.buffer.byteLength) {\r\n                Logger.Warn(`Length in header does not match actual data length: ${length} != ${dataReader.buffer.byteLength}`);\r\n            }\r\n\r\n            let unpacked: Promise<IGLTFLoaderData>;\r\n            switch (version) {\r\n                case 1: {\r\n                    unpacked = this._unpackBinaryV1Async(dataReader, length);\r\n                    break;\r\n                }\r\n                case 2: {\r\n                    unpacked = this._unpackBinaryV2Async(dataReader, length);\r\n                    break;\r\n                }\r\n                default: {\r\n                    throw new Error(\"Unsupported version: \" + version);\r\n                }\r\n            }\r\n\r\n            this._endPerformanceCounter(\"Unpack Binary\");\r\n\r\n            return unpacked;\r\n        });\r\n    }\r\n\r\n    private _unpackBinaryV1Async(dataReader: DataReader, length: number): Promise<IGLTFLoaderData> {\r\n        const ContentFormat = {\r\n            JSON: 0,\r\n        };\r\n\r\n        const contentLength = dataReader.readUint32();\r\n        const contentFormat = dataReader.readUint32();\r\n\r\n        if (contentFormat !== ContentFormat.JSON) {\r\n            throw new Error(`Unexpected content format: ${contentFormat}`);\r\n        }\r\n\r\n        const bodyLength = length - dataReader.byteOffset;\r\n\r\n        const data: IGLTFLoaderData = { json: this._parseJson(dataReader.readString(contentLength)), bin: null };\r\n        if (bodyLength !== 0) {\r\n            const startByteOffset = dataReader.byteOffset;\r\n            data.bin = {\r\n                readAsync: (byteOffset, byteLength) => dataReader.buffer.readAsync(startByteOffset + byteOffset, byteLength),\r\n                byteLength: bodyLength,\r\n            };\r\n        }\r\n\r\n        return Promise.resolve(data);\r\n    }\r\n\r\n    private _unpackBinaryV2Async(dataReader: DataReader, length: number): Promise<IGLTFLoaderData> {\r\n        const ChunkFormat = {\r\n            JSON: 0x4e4f534a,\r\n            BIN: 0x004e4942,\r\n        };\r\n\r\n        // Read the JSON chunk header.\r\n        const chunkLength = dataReader.readUint32();\r\n        const chunkFormat = dataReader.readUint32();\r\n        if (chunkFormat !== ChunkFormat.JSON) {\r\n            throw new Error(\"First chunk format is not JSON\");\r\n        }\r\n\r\n        // Bail if there are no other chunks.\r\n        if (dataReader.byteOffset + chunkLength === length) {\r\n            return dataReader.loadAsync(chunkLength).then(() => {\r\n                return { json: this._parseJson(dataReader.readString(chunkLength)), bin: null };\r\n            });\r\n        }\r\n\r\n        // Read the JSON chunk and the length and type of the next chunk.\r\n        return dataReader.loadAsync(chunkLength + 8).then(() => {\r\n            const data: IGLTFLoaderData = { json: this._parseJson(dataReader.readString(chunkLength)), bin: null };\r\n\r\n            const readAsync = (): Promise<IGLTFLoaderData> => {\r\n                const chunkLength = dataReader.readUint32();\r\n                const chunkFormat = dataReader.readUint32();\r\n\r\n                switch (chunkFormat) {\r\n                    case ChunkFormat.JSON: {\r\n                        throw new Error(\"Unexpected JSON chunk\");\r\n                    }\r\n                    case ChunkFormat.BIN: {\r\n                        const startByteOffset = dataReader.byteOffset;\r\n                        data.bin = {\r\n                            readAsync: (byteOffset, byteLength) => dataReader.buffer.readAsync(startByteOffset + byteOffset, byteLength),\r\n                            byteLength: chunkLength,\r\n                        };\r\n                        dataReader.skipBytes(chunkLength);\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        // ignore unrecognized chunkFormat\r\n                        dataReader.skipBytes(chunkLength);\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (dataReader.byteOffset !== length) {\r\n                    return dataReader.loadAsync(8).then(readAsync);\r\n                }\r\n\r\n                return Promise.resolve(data);\r\n            };\r\n\r\n            return readAsync();\r\n        });\r\n    }\r\n\r\n    private static _parseVersion(version: string): Nullable<{ major: number; minor: number }> {\r\n        if (version === \"1.0\" || version === \"1.0.1\") {\r\n            return {\r\n                major: 1,\r\n                minor: 0,\r\n            };\r\n        }\r\n\r\n        const match = (version + \"\").match(/^(\\d+)\\.(\\d+)/);\r\n        if (!match) {\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            major: parseInt(match[1]),\r\n            minor: parseInt(match[2]),\r\n        };\r\n    }\r\n\r\n    private static _compareVersion(a: { major: number; minor: number }, b: { major: number; minor: number }): number {\r\n        if (a.major > b.major) {\r\n            return 1;\r\n        }\r\n        if (a.major < b.major) {\r\n            return -1;\r\n        }\r\n        if (a.minor > b.minor) {\r\n            return 1;\r\n        }\r\n        if (a.minor < b.minor) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    private static readonly _logSpaces = \"                                \";\r\n    private _logIndentLevel = 0;\r\n    private _loggingEnabled = false;\r\n\r\n    /** @internal */\r\n    public _log = this._logDisabled;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _logOpen(message: string): void {\r\n        this._log(message);\r\n        this._logIndentLevel++;\r\n    }\r\n\r\n    /** @internal */\r\n    public _logClose(): void {\r\n        --this._logIndentLevel;\r\n    }\r\n\r\n    private _logEnabled(message: string): void {\r\n        const spaces = GLTFFileLoader._logSpaces.substring(0, this._logIndentLevel * 2);\r\n        Logger.Log(`${spaces}${message}`);\r\n    }\r\n\r\n    private _logDisabled(message: string): void {}\r\n\r\n    private _capturePerformanceCounters = false;\r\n\r\n    /** @internal */\r\n    public _startPerformanceCounter = this._startPerformanceCounterDisabled;\r\n\r\n    /** @internal */\r\n    public _endPerformanceCounter = this._endPerformanceCounterDisabled;\r\n\r\n    private _startPerformanceCounterEnabled(counterName: string): void {\r\n        Tools.StartPerformanceCounter(counterName);\r\n    }\r\n\r\n    private _startPerformanceCounterDisabled(counterName: string): void {}\r\n\r\n    private _endPerformanceCounterEnabled(counterName: string): void {\r\n        Tools.EndPerformanceCounter(counterName);\r\n    }\r\n\r\n    private _endPerformanceCounterDisabled(counterName: string): void {}\r\n}\r\n\r\nRegisterSceneLoaderPlugin(new GLTFFileLoader());\r\n", "export * from \"./glTFBinaryExtension\";\r\nexport * from \"./glTFLoader\";\r\nexport * from \"./glTFLoaderInterfaces\";\r\nexport * from \"./glTFLoaderUtils\";\r\nexport * from \"./glTFMaterialsCommonExtension\";\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { AssetContainer } from \"core/assetContainer\";\r\nimport type { Bone } from \"core/Bones/bone\";\r\nimport type { Skeleton } from \"core/Bones/skeleton\";\r\nimport type { Texture } from \"core/Materials/Textures/texture\";\r\nimport type { Node } from \"core/node\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\n/**\r\n * Enums\r\n * @internal\r\n */\r\nexport enum EComponentType {\r\n    BYTE = 5120,\r\n    UNSIGNED_BYTE = 5121,\r\n    SHORT = 5122,\r\n    UNSIGNED_SHORT = 5123,\r\n    FLOAT = 5126,\r\n}\r\n\r\n/** @internal */\r\nexport enum EShaderType {\r\n    FRAGMENT = 35632,\r\n    VERTEX = 35633,\r\n}\r\n\r\n/** @internal */\r\nexport enum EParameterType {\r\n    BYTE = 5120,\r\n    UNSIGNED_BYTE = 5121,\r\n    SHORT = 5122,\r\n    UNSIGNED_SHORT = 5123,\r\n    INT = 5124,\r\n    UNSIGNED_INT = 5125,\r\n    FLOAT = 5126,\r\n    FLOAT_VEC2 = 35664,\r\n    FLOAT_VEC3 = 35665,\r\n    FLOAT_VEC4 = 35666,\r\n    INT_VEC2 = 35667,\r\n    INT_VEC3 = 35668,\r\n    INT_VEC4 = 35669,\r\n    BOOL = 35670,\r\n    BOOL_VEC2 = 35671,\r\n    BOOL_VEC3 = 35672,\r\n    BOOL_VEC4 = 35673,\r\n    FLOAT_MAT2 = 35674,\r\n    FLOAT_MAT3 = 35675,\r\n    FLOAT_MAT4 = 35676,\r\n    SAMPLER_2D = 35678,\r\n}\r\n\r\n/** @internal */\r\nexport enum ETextureWrapMode {\r\n    CLAMP_TO_EDGE = 33071,\r\n    MIRRORED_REPEAT = 33648,\r\n    REPEAT = 10497,\r\n}\r\n\r\n/** @internal */\r\nexport enum ETextureFilterType {\r\n    NEAREST = 9728,\r\n    LINEAR = 9728,\r\n    NEAREST_MIPMAP_NEAREST = 9984,\r\n    LINEAR_MIPMAP_NEAREST = 9985,\r\n    NEAREST_MIPMAP_LINEAR = 9986,\r\n    LINEAR_MIPMAP_LINEAR = 9987,\r\n}\r\n\r\n/** @internal */\r\nexport enum ETextureFormat {\r\n    ALPHA = 6406,\r\n    RGB = 6407,\r\n    RGBA = 6408,\r\n    LUMINANCE = 6409,\r\n    LUMINANCE_ALPHA = 6410,\r\n}\r\n\r\n/** @internal */\r\nexport enum ECullingType {\r\n    FRONT = 1028,\r\n    BACK = 1029,\r\n    FRONT_AND_BACK = 1032,\r\n}\r\n\r\n/** @internal */\r\nexport enum EBlendingFunction {\r\n    ZERO = 0,\r\n    ONE = 1,\r\n    SRC_COLOR = 768,\r\n    ONE_MINUS_SRC_COLOR = 769,\r\n    DST_COLOR = 774,\r\n    ONE_MINUS_DST_COLOR = 775,\r\n    SRC_ALPHA = 770,\r\n    ONE_MINUS_SRC_ALPHA = 771,\r\n    DST_ALPHA = 772,\r\n    ONE_MINUS_DST_ALPHA = 773,\r\n    CONSTANT_COLOR = 32769,\r\n    ONE_MINUS_CONSTANT_COLOR = 32770,\r\n    CONSTANT_ALPHA = 32771,\r\n    ONE_MINUS_CONSTANT_ALPHA = 32772,\r\n    SRC_ALPHA_SATURATE = 776,\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFProperty {\r\n    extensions?: { [key: string]: any };\r\n    extras?: object;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFChildRootProperty extends IGLTFProperty {\r\n    name?: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFAccessor extends IGLTFChildRootProperty {\r\n    bufferView: string;\r\n    byteOffset: number;\r\n    byteStride: number;\r\n    count: number;\r\n    type: string;\r\n    componentType: EComponentType;\r\n\r\n    max?: number[];\r\n    min?: number[];\r\n    name?: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFBufferView extends IGLTFChildRootProperty {\r\n    buffer: string;\r\n    byteOffset: number;\r\n    byteLength: number;\r\n    byteStride: number;\r\n\r\n    target?: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFBuffer extends IGLTFChildRootProperty {\r\n    uri: string;\r\n\r\n    byteLength?: number;\r\n    type?: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFShader extends IGLTFChildRootProperty {\r\n    uri: string;\r\n    type: EShaderType;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFProgram extends IGLTFChildRootProperty {\r\n    attributes: string[];\r\n    fragmentShader: string;\r\n    vertexShader: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFTechniqueParameter {\r\n    type: number;\r\n\r\n    count?: number;\r\n    semantic?: string;\r\n    node?: string;\r\n    value?: number | boolean | string | Array<any>;\r\n    source?: string;\r\n\r\n    babylonValue?: any;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFTechniqueCommonProfile {\r\n    lightingModel: string;\r\n    texcoordBindings: object;\r\n\r\n    parameters?: Array<any>;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFTechniqueStatesFunctions {\r\n    blendColor?: number[];\r\n    blendEquationSeparate?: number[];\r\n    blendFuncSeparate?: number[];\r\n    colorMask: boolean[];\r\n    cullFace: number[];\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFTechniqueStates {\r\n    enable: number[];\r\n    functions: IGLTFTechniqueStatesFunctions;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFTechnique extends IGLTFChildRootProperty {\r\n    parameters: { [key: string]: IGLTFTechniqueParameter };\r\n    program: string;\r\n\r\n    attributes: { [key: string]: string };\r\n    uniforms: { [key: string]: string };\r\n    states: IGLTFTechniqueStates;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFMaterial extends IGLTFChildRootProperty {\r\n    technique?: string;\r\n    values: string[];\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFMeshPrimitive extends IGLTFProperty {\r\n    attributes: { [key: string]: string };\r\n    indices: string;\r\n    material: string;\r\n\r\n    mode?: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFMesh extends IGLTFChildRootProperty {\r\n    primitives: IGLTFMeshPrimitive[];\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFImage extends IGLTFChildRootProperty {\r\n    uri: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFSampler extends IGLTFChildRootProperty {\r\n    magFilter?: number;\r\n    minFilter?: number;\r\n    wrapS?: number;\r\n    wrapT?: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFTexture extends IGLTFChildRootProperty {\r\n    sampler: string;\r\n    source: string;\r\n\r\n    format?: ETextureFormat;\r\n    internalFormat?: ETextureFormat;\r\n    target?: number;\r\n    type?: number;\r\n\r\n    // Babylon.js values (optimize)\r\n    babylonTexture?: Texture;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFAmbienLight {\r\n    color?: number[];\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFDirectionalLight {\r\n    color?: number[];\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFPointLight {\r\n    color?: number[];\r\n    constantAttenuation?: number;\r\n    linearAttenuation?: number;\r\n    quadraticAttenuation?: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFSpotLight {\r\n    color?: number[];\r\n    constantAttenuation?: number;\r\n    fallOfAngle?: number;\r\n    fallOffExponent?: number;\r\n    linearAttenuation?: number;\r\n    quadraticAttenuation?: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFLight extends IGLTFChildRootProperty {\r\n    type: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFCameraOrthographic {\r\n    xmag: number;\r\n    ymag: number;\r\n    zfar: number;\r\n    znear: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFCameraPerspective {\r\n    aspectRatio: number;\r\n    yfov: number;\r\n    zfar: number;\r\n    znear: number;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFCamera extends IGLTFChildRootProperty {\r\n    type: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFAnimationChannelTarget {\r\n    id: string;\r\n    path: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFAnimationChannel {\r\n    sampler: string;\r\n    target: IGLTFAnimationChannelTarget;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFAnimationSampler {\r\n    input: string;\r\n    output: string;\r\n\r\n    interpolation?: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFAnimation extends IGLTFChildRootProperty {\r\n    channels?: IGLTFAnimationChannel[];\r\n    parameters?: { [key: string]: string };\r\n    samplers?: { [key: string]: IGLTFAnimationSampler };\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFNodeInstanceSkin {\r\n    skeletons: string[];\r\n    skin: string;\r\n    meshes: string[];\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFSkins extends IGLTFChildRootProperty {\r\n    bindShapeMatrix: number[];\r\n    inverseBindMatrices: string;\r\n    jointNames: string[];\r\n\r\n    babylonSkeleton?: Skeleton;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFNode extends IGLTFChildRootProperty {\r\n    camera?: string;\r\n    children: string[];\r\n    skin?: string;\r\n    jointName?: string;\r\n    light?: string;\r\n    matrix: number[];\r\n    mesh?: string;\r\n    meshes?: string[];\r\n    rotation?: number[];\r\n    scale?: number[];\r\n    translation?: number[];\r\n\r\n    // Babylon.js values (optimize)\r\n    babylonNode?: Node;\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFScene extends IGLTFChildRootProperty {\r\n    nodes: string[];\r\n}\r\n\r\n/** @internal */\r\nexport interface IGLTFRuntime {\r\n    extensions: { [key: string]: any };\r\n    accessors: { [key: string]: IGLTFAccessor };\r\n    buffers: { [key: string]: IGLTFBuffer };\r\n    bufferViews: { [key: string]: IGLTFBufferView };\r\n    meshes: { [key: string]: IGLTFMesh };\r\n    lights: { [key: string]: IGLTFLight };\r\n    cameras: { [key: string]: IGLTFCamera };\r\n    nodes: { [key: string]: IGLTFNode };\r\n    images: { [key: string]: IGLTFImage };\r\n    textures: { [key: string]: IGLTFTexture };\r\n    shaders: { [key: string]: IGLTFShader };\r\n    programs: { [key: string]: IGLTFProgram };\r\n    samplers: { [key: string]: IGLTFSampler };\r\n    techniques: { [key: string]: IGLTFTechnique };\r\n    materials: { [key: string]: IGLTFMaterial };\r\n    animations: { [key: string]: IGLTFAnimation };\r\n    skins: { [key: string]: IGLTFSkins };\r\n\r\n    currentScene?: object;\r\n    scenes: { [key: string]: IGLTFScene }; // v1.1\r\n\r\n    extensionsUsed: string[];\r\n    extensionsRequired?: string[]; // v1.1\r\n\r\n    buffersCount: number;\r\n    shaderscount: number;\r\n\r\n    scene: Scene;\r\n    rootUrl: string;\r\n\r\n    loadedBufferCount: number;\r\n    loadedBufferViews: { [name: string]: ArrayBufferView };\r\n\r\n    loadedShaderCount: number;\r\n\r\n    importOnlyMeshes: boolean;\r\n    importMeshesNames?: string[];\r\n\r\n    dummyNodes: Node[];\r\n\r\n    assetContainer: Nullable<AssetContainer>;\r\n}\r\n\r\n/** @internal */\r\nexport interface INodeToRoot {\r\n    bone: Bone;\r\n    node: IGLTFNode;\r\n    id: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface IJointNode {\r\n    node: IGLTFNode;\r\n    id: string;\r\n}\r\n", "import { serialize, serializeAsVector3, serializeAsMeshReference } from \"../Misc/decorators\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Camera } from \"./camera\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Quaternion, Matrix, Vector3, Vector2, TmpVectors } from \"../Maths/math.vector\";\r\nimport { Epsilon } from \"../Maths/math.constants\";\r\nimport { Axis } from \"../Maths/math.axis\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Node } from \"../node\";\r\n\r\nNode.AddNodeConstructor(\"TargetCamera\", (name, scene) => {\r\n    return () => new TargetCamera(name, Vector3.Zero(), scene);\r\n});\r\n\r\n// Temporary cache variables to avoid allocations.\r\nconst TmpMatrix = Matrix.Zero();\r\nconst TmpQuaternion = Quaternion.Identity();\r\n\r\n/**\r\n * A target camera takes a mesh or position as a target and continues to look at it while it moves.\r\n * This is the base of the follow, arc rotate cameras and Free camera\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras\r\n */\r\nexport class TargetCamera extends Camera {\r\n    private static _RigCamTransformMatrix = new Matrix();\r\n    private static _TargetTransformMatrix = new Matrix();\r\n    private static _TargetFocalPoint = new Vector3();\r\n\r\n    /**\r\n     * Define the current direction the camera is moving to\r\n     */\r\n    public cameraDirection = new Vector3(0, 0, 0);\r\n    /**\r\n     * Define the current rotation the camera is rotating to\r\n     */\r\n    public cameraRotation = new Vector2(0, 0);\r\n\r\n    /**\r\n     * When set, the up vector of the camera will be updated by the rotation of the camera\r\n     */\r\n    @serialize()\r\n    public updateUpVectorFromRotation = false;\r\n\r\n    /**\r\n     * Define the current rotation of the camera\r\n     */\r\n    @serializeAsVector3()\r\n    public rotation: Vector3;\r\n\r\n    /**\r\n     * Define the current rotation of the camera as a quaternion to prevent Gimbal lock\r\n     */\r\n    public rotationQuaternion: Quaternion;\r\n\r\n    /**\r\n     * Define the current speed of the camera\r\n     */\r\n    @serialize()\r\n    public speed = 2.0;\r\n\r\n    /**\r\n     * Add constraint to the camera to prevent it to move freely in all directions and\r\n     * around all axis.\r\n     */\r\n    public noRotationConstraint = false;\r\n\r\n    /**\r\n     * Reverses mouselook direction to 'natural' panning as opposed to traditional direct\r\n     * panning\r\n     */\r\n    public invertRotation = false;\r\n\r\n    /**\r\n     * Speed multiplier for inverse camera panning\r\n     */\r\n    public inverseRotationSpeed = 0.2;\r\n\r\n    /**\r\n     * @internal\r\n     * @experimental\r\n     * Can be used to change clamping behavior for inertia. Hook into onBeforeRenderObservable to change the value per-frame\r\n     */\r\n    public _panningEpsilon = Epsilon;\r\n    /**\r\n     * @internal\r\n     * @experimental\r\n     * Can be used to change clamping behavior for inertia. Hook into onBeforeRenderObservable to change the value per-frame\r\n     */\r\n    public _rotationEpsilon = Epsilon;\r\n\r\n    /**\r\n     * Define the current target of the camera as an object or a position.\r\n     * Please note that locking a target will disable panning.\r\n     */\r\n    @serializeAsMeshReference(\"lockedTargetId\")\r\n    public lockedTarget: any = null;\r\n\r\n    protected readonly _currentTarget = Vector3.Zero();\r\n    protected _initialFocalDistance = 1;\r\n    protected readonly _viewMatrix = Matrix.Zero();\r\n\r\n    /** @internal */\r\n    public readonly _cameraTransformMatrix = Matrix.Zero();\r\n    /** @internal */\r\n    public readonly _cameraRotationMatrix = Matrix.Zero();\r\n\r\n    protected readonly _referencePoint: Vector3;\r\n    protected readonly _transformedReferencePoint = Vector3.Zero();\r\n\r\n    protected readonly _deferredPositionUpdate = new Vector3();\r\n    protected readonly _deferredRotationQuaternionUpdate = new Quaternion();\r\n    protected readonly _deferredRotationUpdate = new Vector3();\r\n    protected _deferredUpdated = false;\r\n    protected _deferOnly: boolean = false;\r\n\r\n    /** @internal */\r\n    public _reset: () => void;\r\n\r\n    /**\r\n     * Instantiates a target camera that takes a mesh or position as a target and continues to look at it while it moves.\r\n     * This is the base of the follow, arc rotate cameras and Free camera\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras\r\n     * @param name Defines the name of the camera in the scene\r\n     * @param position Defines the start position of the camera in the scene\r\n     * @param scene Defines the scene the camera belongs to\r\n     * @param setActiveOnSceneIfNoneActive Defines whether the camera should be marked as active if not other active cameras have been defined\r\n     */\r\n    constructor(name: string, position: Vector3, scene?: Scene, setActiveOnSceneIfNoneActive = true) {\r\n        super(name, position, scene, setActiveOnSceneIfNoneActive);\r\n\r\n        this._referencePoint = Vector3.Forward(this.getScene().useRightHandedSystem);\r\n\r\n        // Set the y component of the rotation to Math.PI in right-handed system for backwards compatibility.\r\n        this.rotation = new Vector3(0, this.getScene().useRightHandedSystem ? Math.PI : 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Gets the position in front of the camera at a given distance.\r\n     * @param distance The distance from the camera we want the position to be\r\n     * @returns the position\r\n     */\r\n    public getFrontPosition(distance: number): Vector3 {\r\n        this.getWorldMatrix();\r\n        const worldForward = TmpVectors.Vector3[0];\r\n        const localForward = TmpVectors.Vector3[1];\r\n        localForward.set(0, 0, this._scene.useRightHandedSystem ? -1.0 : 1.0);\r\n        this.getDirectionToRef(localForward, worldForward);\r\n        worldForward.scaleInPlace(distance);\r\n        return this.globalPosition.add(worldForward);\r\n    }\r\n\r\n    /** @internal */\r\n    public _getLockedTargetPosition(): Nullable<Vector3> {\r\n        if (!this.lockedTarget) {\r\n            return null;\r\n        }\r\n\r\n        if (this.lockedTarget.absolutePosition) {\r\n            const lockedTarget = this.lockedTarget as AbstractMesh;\r\n            const m = lockedTarget.computeWorldMatrix();\r\n            // in some cases the absolute position resets externally, but doesn't update since the matrix is cached.\r\n            m.getTranslationToRef(lockedTarget.absolutePosition);\r\n        }\r\n\r\n        return this.lockedTarget.absolutePosition || this.lockedTarget;\r\n    }\r\n\r\n    private _storedPosition: Vector3;\r\n    private _storedRotation: Vector3;\r\n    private _storedRotationQuaternion: Quaternion;\r\n\r\n    /**\r\n     * Store current camera state of the camera (fov, position, rotation, etc..)\r\n     * @returns the camera\r\n     */\r\n    public override storeState(): Camera {\r\n        this._storedPosition = this.position.clone();\r\n        this._storedRotation = this.rotation.clone();\r\n        if (this.rotationQuaternion) {\r\n            this._storedRotationQuaternion = this.rotationQuaternion.clone();\r\n        }\r\n\r\n        return super.storeState();\r\n    }\r\n\r\n    /**\r\n     * Restored camera state. You must call storeState() first\r\n     * @returns whether it was successful or not\r\n     * @internal\r\n     */\r\n    public override _restoreStateValues(): boolean {\r\n        if (!super._restoreStateValues()) {\r\n            return false;\r\n        }\r\n\r\n        this.position = this._storedPosition.clone();\r\n        this.rotation = this._storedRotation.clone();\r\n\r\n        if (this.rotationQuaternion) {\r\n            this.rotationQuaternion = this._storedRotationQuaternion.clone();\r\n        }\r\n\r\n        this.cameraDirection.copyFromFloats(0, 0, 0);\r\n        this.cameraRotation.copyFromFloats(0, 0);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _initCache() {\r\n        super._initCache();\r\n        this._cache.lockedTarget = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n        this._cache.rotation = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n        this._cache.rotationQuaternion = new Quaternion(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _updateCache(ignoreParentClass?: boolean): void {\r\n        if (!ignoreParentClass) {\r\n            super._updateCache();\r\n        }\r\n\r\n        const lockedTargetPosition = this._getLockedTargetPosition();\r\n        if (!lockedTargetPosition) {\r\n            this._cache.lockedTarget = null;\r\n        } else {\r\n            if (!this._cache.lockedTarget) {\r\n                this._cache.lockedTarget = lockedTargetPosition.clone();\r\n            } else {\r\n                this._cache.lockedTarget.copyFrom(lockedTargetPosition);\r\n            }\r\n        }\r\n\r\n        this._cache.rotation.copyFrom(this.rotation);\r\n        if (this.rotationQuaternion) {\r\n            this._cache.rotationQuaternion.copyFrom(this.rotationQuaternion);\r\n        }\r\n    }\r\n\r\n    // Synchronized\r\n    /** @internal */\r\n    public override _isSynchronizedViewMatrix(): boolean {\r\n        if (!super._isSynchronizedViewMatrix()) {\r\n            return false;\r\n        }\r\n\r\n        const lockedTargetPosition = this._getLockedTargetPosition();\r\n\r\n        return (\r\n            (this._cache.lockedTarget ? this._cache.lockedTarget.equals(lockedTargetPosition) : !lockedTargetPosition) &&\r\n            (this.rotationQuaternion ? this.rotationQuaternion.equals(this._cache.rotationQuaternion) : this._cache.rotation.equals(this.rotation))\r\n        );\r\n    }\r\n\r\n    // Methods\r\n    /** @internal */\r\n    public _computeLocalCameraSpeed(): number {\r\n        const engine = this.getEngine();\r\n        return this.speed * Math.sqrt(engine.getDeltaTime() / (engine.getFps() * 100.0));\r\n    }\r\n\r\n    // Target\r\n\r\n    /**\r\n     * Defines the target the camera should look at.\r\n     * @param target Defines the new target as a Vector\r\n     */\r\n    public setTarget(target: Vector3): void {\r\n        this.upVector.normalize();\r\n\r\n        this._initialFocalDistance = target.subtract(this.position).length();\r\n\r\n        if (this.position.z === target.z) {\r\n            this.position.z += Epsilon;\r\n        }\r\n\r\n        this._referencePoint.normalize().scaleInPlace(this._initialFocalDistance);\r\n\r\n        if (this.getScene().useRightHandedSystem) {\r\n            Matrix.LookAtRHToRef(this.position, target, Vector3.UpReadOnly, TmpMatrix);\r\n        } else {\r\n            Matrix.LookAtLHToRef(this.position, target, Vector3.UpReadOnly, TmpMatrix);\r\n        }\r\n        TmpMatrix.invert();\r\n\r\n        const rotationQuaternion = this.rotationQuaternion || TmpQuaternion;\r\n        Quaternion.FromRotationMatrixToRef(TmpMatrix, rotationQuaternion);\r\n\r\n        rotationQuaternion.toEulerAnglesToRef(this.rotation);\r\n\r\n        // Explicitly set z to 0 to match previous behavior.\r\n        this.rotation.z = 0;\r\n    }\r\n\r\n    /**\r\n     * Defines the target point of the camera.\r\n     * The camera looks towards it form the radius distance.\r\n     */\r\n    public get target(): Vector3 {\r\n        return this.getTarget();\r\n    }\r\n    public set target(value: Vector3) {\r\n        this.setTarget(value);\r\n    }\r\n\r\n    /**\r\n     * Return the current target position of the camera. This value is expressed in local space.\r\n     * @returns the target position\r\n     */\r\n    public getTarget(): Vector3 {\r\n        return this._currentTarget;\r\n    }\r\n\r\n    /** @internal */\r\n    public _decideIfNeedsToMove(): boolean {\r\n        return Math.abs(this.cameraDirection.x) > 0 || Math.abs(this.cameraDirection.y) > 0 || Math.abs(this.cameraDirection.z) > 0;\r\n    }\r\n\r\n    /** @internal */\r\n    public _updatePosition(): void {\r\n        if (this.parent) {\r\n            this.parent.getWorldMatrix().invertToRef(TmpVectors.Matrix[0]);\r\n            Vector3.TransformNormalToRef(this.cameraDirection, TmpVectors.Matrix[0], TmpVectors.Vector3[0]);\r\n            this._deferredPositionUpdate.addInPlace(TmpVectors.Vector3[0]);\r\n            if (!this._deferOnly) {\r\n                this.position.copyFrom(this._deferredPositionUpdate);\r\n            } else {\r\n                this._deferredUpdated = true;\r\n            }\r\n            return;\r\n        }\r\n        this._deferredPositionUpdate.addInPlace(this.cameraDirection);\r\n        if (!this._deferOnly) {\r\n            this.position.copyFrom(this._deferredPositionUpdate);\r\n        } else {\r\n            this._deferredUpdated = true;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public override _checkInputs(): void {\r\n        const directionMultiplier = this.invertRotation ? -this.inverseRotationSpeed : 1.0;\r\n        const needToMove = this._decideIfNeedsToMove();\r\n        const needToRotate = this.cameraRotation.x || this.cameraRotation.y;\r\n\r\n        this._deferredUpdated = false;\r\n        this._deferredRotationUpdate.copyFrom(this.rotation);\r\n        this._deferredPositionUpdate.copyFrom(this.position);\r\n        if (this.rotationQuaternion) {\r\n            this._deferredRotationQuaternionUpdate.copyFrom(this.rotationQuaternion);\r\n        }\r\n\r\n        // Move\r\n        if (needToMove) {\r\n            this._updatePosition();\r\n        }\r\n\r\n        // Rotate\r\n        if (needToRotate) {\r\n            //rotate, if quaternion is set and rotation was used\r\n            if (this.rotationQuaternion) {\r\n                this.rotationQuaternion.toEulerAnglesToRef(this._deferredRotationUpdate);\r\n            }\r\n\r\n            this._deferredRotationUpdate.x += this.cameraRotation.x * directionMultiplier;\r\n            this._deferredRotationUpdate.y += this.cameraRotation.y * directionMultiplier;\r\n\r\n            // Apply constraints\r\n            if (!this.noRotationConstraint) {\r\n                const limit = 1.570796;\r\n\r\n                if (this._deferredRotationUpdate.x > limit) {\r\n                    this._deferredRotationUpdate.x = limit;\r\n                }\r\n                if (this._deferredRotationUpdate.x < -limit) {\r\n                    this._deferredRotationUpdate.x = -limit;\r\n                }\r\n            }\r\n\r\n            if (!this._deferOnly) {\r\n                this.rotation.copyFrom(this._deferredRotationUpdate);\r\n            } else {\r\n                this._deferredUpdated = true;\r\n            }\r\n\r\n            //rotate, if quaternion is set and rotation was used\r\n            if (this.rotationQuaternion) {\r\n                const len = this._deferredRotationUpdate.lengthSquared();\r\n                if (len) {\r\n                    Quaternion.RotationYawPitchRollToRef(\r\n                        this._deferredRotationUpdate.y,\r\n                        this._deferredRotationUpdate.x,\r\n                        this._deferredRotationUpdate.z,\r\n                        this._deferredRotationQuaternionUpdate\r\n                    );\r\n                    if (!this._deferOnly) {\r\n                        this.rotationQuaternion.copyFrom(this._deferredRotationQuaternionUpdate);\r\n                    } else {\r\n                        this._deferredUpdated = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const inertialPanningLimit = this.speed * this._panningEpsilon;\r\n        const inertialRotationLimit = this.speed * this._rotationEpsilon;\r\n        // Inertia\r\n        if (needToMove) {\r\n            if (Math.abs(this.cameraDirection.x) < inertialPanningLimit) {\r\n                this.cameraDirection.x = 0;\r\n            }\r\n\r\n            if (Math.abs(this.cameraDirection.y) < inertialPanningLimit) {\r\n                this.cameraDirection.y = 0;\r\n            }\r\n\r\n            if (Math.abs(this.cameraDirection.z) < inertialPanningLimit) {\r\n                this.cameraDirection.z = 0;\r\n            }\r\n\r\n            this.cameraDirection.scaleInPlace(this.inertia);\r\n        }\r\n        if (needToRotate) {\r\n            if (Math.abs(this.cameraRotation.x) < inertialRotationLimit) {\r\n                this.cameraRotation.x = 0;\r\n            }\r\n\r\n            if (Math.abs(this.cameraRotation.y) < inertialRotationLimit) {\r\n                this.cameraRotation.y = 0;\r\n            }\r\n            this.cameraRotation.scaleInPlace(this.inertia);\r\n        }\r\n\r\n        super._checkInputs();\r\n    }\r\n\r\n    protected _updateCameraRotationMatrix() {\r\n        if (this.rotationQuaternion) {\r\n            this.rotationQuaternion.toRotationMatrix(this._cameraRotationMatrix);\r\n        } else {\r\n            Matrix.RotationYawPitchRollToRef(this.rotation.y, this.rotation.x, this.rotation.z, this._cameraRotationMatrix);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the up vector to apply the rotation of the camera (So if you changed the camera rotation.z this will let you update the up vector as well)\r\n     * @returns the current camera\r\n     */\r\n    private _rotateUpVectorWithCameraRotationMatrix(): TargetCamera {\r\n        Vector3.TransformNormalToRef(Vector3.UpReadOnly, this._cameraRotationMatrix, this.upVector);\r\n        return this;\r\n    }\r\n\r\n    private _cachedRotationZ = 0;\r\n    private _cachedQuaternionRotationZ = 0;\r\n    /** @internal */\r\n    public override _getViewMatrix(): Matrix {\r\n        if (this.lockedTarget) {\r\n            this.setTarget(this._getLockedTargetPosition()!);\r\n        }\r\n\r\n        // Compute\r\n        this._updateCameraRotationMatrix();\r\n\r\n        // Apply the changed rotation to the upVector\r\n        if (this.rotationQuaternion && this._cachedQuaternionRotationZ != this.rotationQuaternion.z) {\r\n            this._rotateUpVectorWithCameraRotationMatrix();\r\n            this._cachedQuaternionRotationZ = this.rotationQuaternion.z;\r\n        } else if (this._cachedRotationZ !== this.rotation.z) {\r\n            this._rotateUpVectorWithCameraRotationMatrix();\r\n            this._cachedRotationZ = this.rotation.z;\r\n        }\r\n\r\n        Vector3.TransformCoordinatesToRef(this._referencePoint, this._cameraRotationMatrix, this._transformedReferencePoint);\r\n\r\n        // Computing target and final matrix\r\n        this.position.addToRef(this._transformedReferencePoint, this._currentTarget);\r\n        if (this.updateUpVectorFromRotation) {\r\n            if (this.rotationQuaternion) {\r\n                Axis.Y.rotateByQuaternionToRef(this.rotationQuaternion, this.upVector);\r\n            } else {\r\n                Quaternion.FromEulerVectorToRef(this.rotation, TmpQuaternion);\r\n                Axis.Y.rotateByQuaternionToRef(TmpQuaternion, this.upVector);\r\n            }\r\n        }\r\n        this._computeViewMatrix(this.position, this._currentTarget, this.upVector);\r\n        return this._viewMatrix;\r\n    }\r\n\r\n    protected _computeViewMatrix(position: Vector3, target: Vector3, up: Vector3): void {\r\n        if (this.getScene().useRightHandedSystem) {\r\n            Matrix.LookAtRHToRef(position, target, up, this._viewMatrix);\r\n        } else {\r\n            Matrix.LookAtLHToRef(position, target, up, this._viewMatrix);\r\n        }\r\n\r\n        if (this.parent) {\r\n            const parentWorldMatrix = this.parent.getWorldMatrix();\r\n            this._viewMatrix.invert();\r\n            this._viewMatrix.multiplyToRef(parentWorldMatrix, this._viewMatrix);\r\n            this._viewMatrix.getTranslationToRef(this._globalPosition);\r\n            this._viewMatrix.invert();\r\n\r\n            this._markSyncedWithParent();\r\n        } else {\r\n            this._globalPosition.copyFrom(position);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public override createRigCamera(name: string, cameraIndex: number): Nullable<Camera> {\r\n        if (this.cameraRigMode !== Camera.RIG_MODE_NONE) {\r\n            const rigCamera = new TargetCamera(name, this.position.clone(), this.getScene());\r\n            rigCamera.isRigCamera = true;\r\n            rigCamera.rigParent = this;\r\n            if (this.cameraRigMode === Camera.RIG_MODE_VR) {\r\n                if (!this.rotationQuaternion) {\r\n                    this.rotationQuaternion = new Quaternion();\r\n                }\r\n                rigCamera._cameraRigParams = {};\r\n                rigCamera.rotationQuaternion = new Quaternion();\r\n            }\r\n\r\n            rigCamera.mode = this.mode;\r\n            rigCamera.orthoLeft = this.orthoLeft;\r\n            rigCamera.orthoRight = this.orthoRight;\r\n            rigCamera.orthoTop = this.orthoTop;\r\n            rigCamera.orthoBottom = this.orthoBottom;\r\n\r\n            return rigCamera;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public override _updateRigCameras() {\r\n        const camLeft = <TargetCamera>this._rigCameras[0];\r\n        const camRight = <TargetCamera>this._rigCameras[1];\r\n\r\n        this.computeWorldMatrix();\r\n\r\n        switch (this.cameraRigMode) {\r\n            case Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH:\r\n            case Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL:\r\n            case Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED:\r\n            case Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER:\r\n            case Camera.RIG_MODE_STEREOSCOPIC_INTERLACED: {\r\n                //provisionnaly using _cameraRigParams.stereoHalfAngle instead of calculations based on _cameraRigParams.interaxialDistance:\r\n                const leftSign = this.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED ? 1 : -1;\r\n                const rightSign = this.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED ? -1 : 1;\r\n                this._getRigCamPositionAndTarget(this._cameraRigParams.stereoHalfAngle * leftSign, camLeft);\r\n                this._getRigCamPositionAndTarget(this._cameraRigParams.stereoHalfAngle * rightSign, camRight);\r\n                break;\r\n            }\r\n            case Camera.RIG_MODE_VR:\r\n                if (camLeft.rotationQuaternion) {\r\n                    camLeft.rotationQuaternion.copyFrom(this.rotationQuaternion);\r\n                    camRight.rotationQuaternion.copyFrom(this.rotationQuaternion);\r\n                } else {\r\n                    camLeft.rotation.copyFrom(this.rotation);\r\n                    camRight.rotation.copyFrom(this.rotation);\r\n                }\r\n                camLeft.position.copyFrom(this.position);\r\n                camRight.position.copyFrom(this.position);\r\n\r\n                break;\r\n        }\r\n        super._updateRigCameras();\r\n    }\r\n\r\n    private _getRigCamPositionAndTarget(halfSpace: number, rigCamera: TargetCamera) {\r\n        const target = this.getTarget();\r\n        target.subtractToRef(this.position, TargetCamera._TargetFocalPoint);\r\n\r\n        TargetCamera._TargetFocalPoint.normalize().scaleInPlace(this._initialFocalDistance);\r\n        const newFocalTarget = TargetCamera._TargetFocalPoint.addInPlace(this.position);\r\n\r\n        Matrix.TranslationToRef(-newFocalTarget.x, -newFocalTarget.y, -newFocalTarget.z, TargetCamera._TargetTransformMatrix);\r\n        TargetCamera._TargetTransformMatrix.multiplyToRef(Matrix.RotationAxis(rigCamera.upVector, halfSpace), TargetCamera._RigCamTransformMatrix);\r\n        Matrix.TranslationToRef(newFocalTarget.x, newFocalTarget.y, newFocalTarget.z, TargetCamera._TargetTransformMatrix);\r\n\r\n        TargetCamera._RigCamTransformMatrix.multiplyToRef(TargetCamera._TargetTransformMatrix, TargetCamera._RigCamTransformMatrix);\r\n\r\n        Vector3.TransformCoordinatesToRef(this.position, TargetCamera._RigCamTransformMatrix, rigCamera.position);\r\n        rigCamera.setTarget(newFocalTarget);\r\n    }\r\n\r\n    /**\r\n     * Gets the current object class name.\r\n     * @returns the class name\r\n     */\r\n    public override getClassName(): string {\r\n        return \"TargetCamera\";\r\n    }\r\n}\r\n", "import { Logger } from \"../Misc/logger\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Camera } from \"./camera\";\r\n/**\r\n * @ignore\r\n * This is a list of all the different input types that are available in the application.\r\n * Fo instance: ArcRotateCameraGamepadInput...\r\n */\r\n// eslint-disable-next-line no-var, @typescript-eslint/naming-convention\r\nexport var CameraInputTypes = {};\r\n\r\n/**\r\n * This is the contract to implement in order to create a new input class.\r\n * Inputs are dealing with listening to user actions and moving the camera accordingly.\r\n */\r\nexport interface ICameraInput<Tcamera extends Camera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    camera: Nullable<Tcamera>;\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    getClassName(): string;\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    getSimpleName(): string;\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    attachControl(noPreventDefault?: boolean): void;\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    detachControl(): void;\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    checkInputs?: () => void;\r\n}\r\n\r\n/**\r\n * Represents a map of input types to input instance or input index to input instance.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport interface CameraInputsMap<Tcamera extends Camera> {\r\n    /**\r\n     * Accessor to the input by input type.\r\n     */\r\n    [name: string]: ICameraInput<Tcamera>;\r\n    /**\r\n     * Accessor to the input by input index.\r\n     */\r\n    [idx: number]: ICameraInput<Tcamera>;\r\n}\r\n\r\n/**\r\n * This represents the input manager used within a camera.\r\n * It helps dealing with all the different kind of input attached to a camera.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n */\r\nexport class CameraInputsManager<Tcamera extends Camera> {\r\n    /**\r\n     * Defines the list of inputs attached to the camera.\r\n     */\r\n    public attached: CameraInputsMap<Tcamera>;\r\n\r\n    /**\r\n     * Defines the dom element the camera is collecting inputs from.\r\n     * This is null if the controls have not been attached.\r\n     */\r\n    public attachedToElement: boolean = false;\r\n\r\n    /**\r\n     * Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public noPreventDefault: boolean;\r\n\r\n    /**\r\n     * Defined the camera the input manager belongs to.\r\n     */\r\n    public camera: Tcamera;\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs: () => void;\r\n\r\n    /**\r\n     * Instantiate a new Camera Input Manager.\r\n     * @param camera Defines the camera the input manager belongs to\r\n     */\r\n    constructor(camera: Tcamera) {\r\n        this.attached = {};\r\n        this.camera = camera;\r\n        this.checkInputs = () => {};\r\n    }\r\n\r\n    /**\r\n     * Add an input method to a camera\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n     * @param input Camera input method\r\n     */\r\n    public add(input: ICameraInput<Tcamera>): void {\r\n        const type = input.getSimpleName();\r\n        if (this.attached[type]) {\r\n            Logger.Warn(\"camera input of type \" + type + \" already exists on camera\");\r\n            return;\r\n        }\r\n\r\n        this.attached[type] = input;\r\n\r\n        input.camera = this.camera;\r\n\r\n        // for checkInputs, we are dynamically creating a function\r\n        // the goal is to avoid the performance penalty of looping for inputs in the render loop\r\n        if (input.checkInputs) {\r\n            this.checkInputs = this._addCheckInputs(input.checkInputs.bind(input));\r\n        }\r\n\r\n        if (this.attachedToElement) {\r\n            input.attachControl(this.noPreventDefault);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a specific input method from a camera\r\n     * example: camera.inputs.remove(camera.inputs.attached.mouse);\r\n     * @param inputToRemove camera input method\r\n     */\r\n    public remove(inputToRemove: ICameraInput<Tcamera>): void {\r\n        for (const cam in this.attached) {\r\n            const input = this.attached[cam];\r\n            if (input === inputToRemove) {\r\n                input.detachControl();\r\n                input.camera = null;\r\n                delete this.attached[cam];\r\n                this.rebuildInputCheck();\r\n\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a specific input type from a camera\r\n     * example: camera.inputs.remove(\"ArcRotateCameraGamepadInput\");\r\n     * @param inputType the type of the input to remove\r\n     */\r\n    public removeByType(inputType: string): void {\r\n        for (const cam in this.attached) {\r\n            const input = this.attached[cam];\r\n            if (input.getClassName() === inputType) {\r\n                input.detachControl();\r\n                input.camera = null;\r\n                delete this.attached[cam];\r\n                this.rebuildInputCheck();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _addCheckInputs(fn: () => void) {\r\n        const current = this.checkInputs;\r\n        return () => {\r\n            current();\r\n            fn();\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Attach the input controls to the currently attached dom element to listen the events from.\r\n     * @param input Defines the input to attach\r\n     */\r\n    public attachInput(input: ICameraInput<Tcamera>): void {\r\n        if (this.attachedToElement) {\r\n            input.attachControl(this.noPreventDefault);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attach the current manager inputs controls to a specific dom element to listen the events from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachElement(noPreventDefault: boolean = false): void {\r\n        if (this.attachedToElement) {\r\n            return;\r\n        }\r\n\r\n        noPreventDefault = Camera.ForceAttachControlToAlwaysPreventDefault ? false : noPreventDefault;\r\n        this.attachedToElement = true;\r\n        this.noPreventDefault = noPreventDefault;\r\n\r\n        for (const cam in this.attached) {\r\n            this.attached[cam].attachControl(noPreventDefault);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Detach the current manager inputs controls from a specific dom element.\r\n     * @param disconnect Defines whether the input should be removed from the current list of attached inputs\r\n     */\r\n    public detachElement(disconnect = false): void {\r\n        for (const cam in this.attached) {\r\n            this.attached[cam].detachControl();\r\n\r\n            if (disconnect) {\r\n                this.attached[cam].camera = null;\r\n            }\r\n        }\r\n        this.attachedToElement = false;\r\n    }\r\n\r\n    /**\r\n     * Rebuild the dynamic inputCheck function from the current list of\r\n     * defined inputs in the manager.\r\n     */\r\n    public rebuildInputCheck(): void {\r\n        this.checkInputs = () => {};\r\n\r\n        for (const cam in this.attached) {\r\n            const input = this.attached[cam];\r\n            if (input.checkInputs) {\r\n                this.checkInputs = this._addCheckInputs(input.checkInputs.bind(input));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove all attached input methods from a camera\r\n     */\r\n    public clear(): void {\r\n        if (this.attachedToElement) {\r\n            this.detachElement(true);\r\n        }\r\n        this.attached = {};\r\n        this.attachedToElement = false;\r\n        this.checkInputs = () => {};\r\n    }\r\n\r\n    /**\r\n     * Serialize the current input manager attached to a camera.\r\n     * This ensures than once parsed,\r\n     * the input associated to the camera will be identical to the current ones\r\n     * @param serializedCamera Defines the camera serialization JSON the input serialization should write to\r\n     */\r\n    public serialize(serializedCamera: any): void {\r\n        const inputs: { [key: string]: any } = {};\r\n        for (const cam in this.attached) {\r\n            const input = this.attached[cam];\r\n            const res = SerializationHelper.Serialize(input);\r\n            inputs[input.getClassName()] = res;\r\n        }\r\n\r\n        serializedCamera.inputsmgr = inputs;\r\n    }\r\n\r\n    /**\r\n     * Parses an input manager serialized JSON to restore the previous list of inputs\r\n     * and states associated to a camera.\r\n     * @param parsedCamera Defines the JSON to parse\r\n     */\r\n    public parse(parsedCamera: any): void {\r\n        const parsedInputs = parsedCamera.inputsmgr;\r\n        if (parsedInputs) {\r\n            this.clear();\r\n\r\n            for (const n in parsedInputs) {\r\n                const construct = (<any>CameraInputTypes)[n];\r\n                if (construct) {\r\n                    const parsedinput = parsedInputs[n];\r\n                    const input = SerializationHelper.Parse(\r\n                        () => {\r\n                            return new construct();\r\n                        },\r\n                        parsedinput,\r\n                        null\r\n                    );\r\n                    this.add(input);\r\n                }\r\n            }\r\n        } else {\r\n            //2016-03-08 this part is for managing backward compatibility\r\n            for (const n in this.attached) {\r\n                const construct = (<any>CameraInputTypes)[this.attached[n].getClassName()];\r\n                if (construct) {\r\n                    const input = SerializationHelper.Parse(\r\n                        () => {\r\n                            return new construct();\r\n                        },\r\n                        parsedCamera,\r\n                        null\r\n                    );\r\n                    this.remove(this.attached[n]);\r\n                    this.add(input);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import { serialize } from \"../../Misc/decorators\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport type { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport type { KeyboardInfo } from \"../../Events/keyboardEvents\";\r\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport type { AbstractEngine } from \"../../Engines/abstractEngine\";\r\n/**\r\n * Manage the keyboard inputs to control the movement of a free camera.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n */\r\nexport class FreeCameraKeyboardMoveInput implements ICameraInput<FreeCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FreeCamera;\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the forward move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysUp = [38];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the upward move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysUpward = [33];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the backward move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysDown = [40];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the downward move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysDownward = [34];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the left strafe move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysLeft = [37];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the right strafe move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysRight = [39];\r\n\r\n    /**\r\n     * Defines the pointer angular sensibility  along the X and Y axis or how fast is the camera rotating.\r\n     */\r\n    @serialize()\r\n    public rotationSpeed = 0.5;\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the left rotation move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysRotateLeft: number[] = [];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the right rotation move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysRotateRight: number[] = [];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the up rotation move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysRotateUp: number[] = [];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the down rotation move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysRotateDown: number[] = [];\r\n\r\n    private _keys = new Array<number>();\r\n    private _onCanvasBlurObserver: Nullable<Observer<AbstractEngine>>;\r\n    private _onKeyboardObserver: Nullable<Observer<KeyboardInfo>>;\r\n    private _engine: AbstractEngine;\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n        if (this._onCanvasBlurObserver) {\r\n            return;\r\n        }\r\n\r\n        this._scene = this.camera.getScene();\r\n        this._engine = this._scene.getEngine();\r\n\r\n        this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(() => {\r\n            this._keys.length = 0;\r\n        });\r\n\r\n        this._onKeyboardObserver = this._scene.onKeyboardObservable.add((info) => {\r\n            const evt = info.event;\r\n            if (!evt.metaKey) {\r\n                if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                    if (\r\n                        this.keysUp.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysDown.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysLeft.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRight.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysUpward.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysDownward.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotateLeft.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotateRight.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotateUp.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotateDown.indexOf(evt.keyCode) !== -1\r\n                    ) {\r\n                        const index = this._keys.indexOf(evt.keyCode);\r\n\r\n                        if (index === -1) {\r\n                            this._keys.push(evt.keyCode);\r\n                        }\r\n                        if (!noPreventDefault) {\r\n                            evt.preventDefault();\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (\r\n                        this.keysUp.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysDown.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysLeft.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRight.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysUpward.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysDownward.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotateLeft.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotateRight.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotateUp.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotateDown.indexOf(evt.keyCode) !== -1\r\n                    ) {\r\n                        const index = this._keys.indexOf(evt.keyCode);\r\n\r\n                        if (index >= 0) {\r\n                            this._keys.splice(index, 1);\r\n                        }\r\n                        if (!noPreventDefault) {\r\n                            evt.preventDefault();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        if (this._scene) {\r\n            if (this._onKeyboardObserver) {\r\n                this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\r\n            }\r\n\r\n            if (this._onCanvasBlurObserver) {\r\n                this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\r\n            }\r\n            this._onKeyboardObserver = null;\r\n            this._onCanvasBlurObserver = null;\r\n        }\r\n        this._keys.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs(): void {\r\n        if (this._onKeyboardObserver) {\r\n            const camera = this.camera;\r\n            // Keyboard\r\n            for (let index = 0; index < this._keys.length; index++) {\r\n                const keyCode = this._keys[index];\r\n                const speed = camera._computeLocalCameraSpeed();\r\n\r\n                if (this.keysLeft.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(-speed, 0, 0);\r\n                } else if (this.keysUp.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, 0, speed);\r\n                } else if (this.keysRight.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(speed, 0, 0);\r\n                } else if (this.keysDown.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, 0, -speed);\r\n                } else if (this.keysUpward.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, speed, 0);\r\n                } else if (this.keysDownward.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, -speed, 0);\r\n                } else if (this.keysRotateLeft.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, 0, 0);\r\n                    camera.cameraRotation.y -= this._getLocalRotation();\r\n                } else if (this.keysRotateRight.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, 0, 0);\r\n                    camera.cameraRotation.y += this._getLocalRotation();\r\n                } else if (this.keysRotateUp.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, 0, 0);\r\n                    camera.cameraRotation.x -= this._getLocalRotation();\r\n                } else if (this.keysRotateDown.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, 0, 0);\r\n                    camera.cameraRotation.x += this._getLocalRotation();\r\n                }\r\n\r\n                if (camera.getScene().useRightHandedSystem) {\r\n                    camera._localDirection.z *= -1;\r\n                }\r\n\r\n                camera.getViewMatrix().invertToRef(camera._cameraTransformMatrix);\r\n                Vector3.TransformNormalToRef(camera._localDirection, camera._cameraTransformMatrix, camera._transformedDirection);\r\n                camera.cameraDirection.addInPlace(camera._transformedDirection);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FreeCameraKeyboardMoveInput\";\r\n    }\r\n\r\n    /** @internal */\r\n    public _onLostFocus(): void {\r\n        this._keys.length = 0;\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"keyboard\";\r\n    }\r\n\r\n    private _getLocalRotation(): number {\r\n        const handednessMultiplier = this.camera._calculateHandednessMultiplier();\r\n        const rotation = ((this.rotationSpeed * this._engine.getDeltaTime()) / 1000) * handednessMultiplier;\r\n\r\n        return rotation;\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FreeCameraKeyboardMoveInput\"] = FreeCameraKeyboardMoveInput;\r\n", "import type { Observer, EventState } from \"../../Misc/observable\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport type { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport type { PointerInfo } from \"../../Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport type { IMouseEvent, IPointerEvent } from \"../../Events/deviceInputEvents\";\r\n/**\r\n * Manage the mouse inputs to control the movement of a free camera.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n */\r\nexport class FreeCameraMouseInput implements ICameraInput<FreeCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FreeCamera;\r\n\r\n    /**\r\n     * Defines the buttons associated with the input to handle camera move.\r\n     */\r\n    @serialize()\r\n    public buttons = [0, 1, 2];\r\n\r\n    /**\r\n     * Defines the pointer angular sensibility  along the X and Y axis or how fast is the camera rotating.\r\n     */\r\n    @serialize()\r\n    public angularSensibility = 2000.0;\r\n\r\n    private _pointerInput: (p: PointerInfo, s: EventState) => void;\r\n    private _onMouseMove: Nullable<(e: IMouseEvent) => any>;\r\n    private _observer: Nullable<Observer<PointerInfo>>;\r\n    private _previousPosition: Nullable<{ x: number; y: number }> = null;\r\n\r\n    /**\r\n     * Observable for when a pointer move event occurs containing the move offset\r\n     */\r\n    public onPointerMovedObservable = new Observable<{ offsetX: number; offsetY: number }>();\r\n    /**\r\n     * @internal\r\n     * If the camera should be rotated automatically based on pointer movement\r\n     */\r\n    public _allowCameraRotation = true;\r\n\r\n    private _currentActiveButton: number = -1;\r\n    private _activePointerId: number = -1;\r\n    private _contextMenuBind: (evt: MouseEvent) => void;\r\n\r\n    /**\r\n     * Manage the mouse inputs to control the movement of a free camera.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n     * @param touchEnabled Defines if touch is enabled or not\r\n     */\r\n    constructor(\r\n        /**\r\n         * [true] Define if touch is enabled in the mouse input\r\n         */\r\n        public touchEnabled = true\r\n    ) {}\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n        const engine = this.camera.getEngine();\r\n        const element = engine.getInputElement();\r\n\r\n        if (!this._pointerInput) {\r\n            this._pointerInput = (p) => {\r\n                const evt = <IPointerEvent>p.event;\r\n                const isTouch = evt.pointerType === \"touch\";\r\n\r\n                if (!this.touchEnabled && isTouch) {\r\n                    return;\r\n                }\r\n\r\n                if (p.type !== PointerEventTypes.POINTERMOVE && this.buttons.indexOf(evt.button) === -1) {\r\n                    return;\r\n                }\r\n\r\n                const srcElement = <HTMLElement>evt.target;\r\n\r\n                if (p.type === PointerEventTypes.POINTERDOWN) {\r\n                    // If the input is touch with more than one touch OR if the input is mouse and there is already an active button, return\r\n                    if ((isTouch && this._activePointerId !== -1) || (!isTouch && this._currentActiveButton !== -1)) {\r\n                        return;\r\n                    }\r\n\r\n                    this._activePointerId = evt.pointerId;\r\n                    try {\r\n                        srcElement?.setPointerCapture(evt.pointerId);\r\n                    } catch (e) {\r\n                        //Nothing to do with the error. Execution will continue.\r\n                    }\r\n\r\n                    if (this._currentActiveButton === -1) {\r\n                        this._currentActiveButton = evt.button;\r\n                    }\r\n\r\n                    this._previousPosition = {\r\n                        x: evt.clientX,\r\n                        y: evt.clientY,\r\n                    };\r\n\r\n                    if (!noPreventDefault) {\r\n                        evt.preventDefault();\r\n                        if (element) {\r\n                            element.focus();\r\n                        }\r\n                    }\r\n\r\n                    // This is required to move while pointer button is down\r\n                    if (engine.isPointerLock && this._onMouseMove) {\r\n                        this._onMouseMove(p.event);\r\n                    }\r\n                } else if (p.type === PointerEventTypes.POINTERUP) {\r\n                    // If input is touch with a different touch id OR if input is mouse with a different button, return\r\n                    if ((isTouch && this._activePointerId !== evt.pointerId) || (!isTouch && this._currentActiveButton !== evt.button)) {\r\n                        return;\r\n                    }\r\n\r\n                    try {\r\n                        srcElement?.releasePointerCapture(evt.pointerId);\r\n                    } catch (e) {\r\n                        //Nothing to do with the error.\r\n                    }\r\n                    this._currentActiveButton = -1;\r\n\r\n                    this._previousPosition = null;\r\n                    if (!noPreventDefault) {\r\n                        evt.preventDefault();\r\n                    }\r\n\r\n                    this._activePointerId = -1;\r\n                } else if (p.type === PointerEventTypes.POINTERMOVE && (this._activePointerId === evt.pointerId || !isTouch)) {\r\n                    if (engine.isPointerLock && this._onMouseMove) {\r\n                        this._onMouseMove(p.event);\r\n                    } else if (this._previousPosition) {\r\n                        const handednessMultiplier = this.camera._calculateHandednessMultiplier();\r\n                        const offsetX = (evt.clientX - this._previousPosition.x) * handednessMultiplier;\r\n                        const offsetY = (evt.clientY - this._previousPosition.y) * handednessMultiplier;\r\n\r\n                        if (this._allowCameraRotation) {\r\n                            this.camera.cameraRotation.y += offsetX / this.angularSensibility;\r\n                            this.camera.cameraRotation.x += offsetY / this.angularSensibility;\r\n                        }\r\n                        this.onPointerMovedObservable.notifyObservers({ offsetX: offsetX, offsetY: offsetY });\r\n\r\n                        this._previousPosition = {\r\n                            x: evt.clientX,\r\n                            y: evt.clientY,\r\n                        };\r\n\r\n                        if (!noPreventDefault) {\r\n                            evt.preventDefault();\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        this._onMouseMove = (evt) => {\r\n            if (!engine.isPointerLock) {\r\n                return;\r\n            }\r\n\r\n            const handednessMultiplier = this.camera._calculateHandednessMultiplier();\r\n            this.camera.cameraRotation.y += (evt.movementX * handednessMultiplier) / this.angularSensibility;\r\n            this.camera.cameraRotation.x += (evt.movementY * handednessMultiplier) / this.angularSensibility;\r\n\r\n            this._previousPosition = null;\r\n\r\n            if (!noPreventDefault) {\r\n                evt.preventDefault();\r\n            }\r\n        };\r\n\r\n        this._observer = this.camera\r\n            .getScene()\r\n            ._inputManager._addCameraPointerObserver(this._pointerInput, PointerEventTypes.POINTERDOWN | PointerEventTypes.POINTERUP | PointerEventTypes.POINTERMOVE);\r\n\r\n        if (element) {\r\n            this._contextMenuBind = (evt: MouseEvent) => this.onContextMenu(evt as PointerEvent);\r\n            element.addEventListener(\"contextmenu\", this._contextMenuBind, false); // TODO: We need to figure out how to handle this for Native\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called on JS contextmenu event.\r\n     * Override this method to provide functionality.\r\n     * @param evt the context menu event\r\n     */\r\n    public onContextMenu(evt: PointerEvent): void {\r\n        evt.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        if (this._observer) {\r\n            this.camera.getScene()._inputManager._removeCameraPointerObserver(this._observer);\r\n\r\n            if (this._contextMenuBind) {\r\n                const engine = this.camera.getEngine();\r\n                const element = engine.getInputElement();\r\n                if (element) {\r\n                    element.removeEventListener(\"contextmenu\", this._contextMenuBind);\r\n                }\r\n            }\r\n\r\n            if (this.onPointerMovedObservable) {\r\n                this.onPointerMovedObservable.clear();\r\n            }\r\n\r\n            this._observer = null;\r\n            this._onMouseMove = null;\r\n            this._previousPosition = null;\r\n        }\r\n\r\n        this._activePointerId = -1;\r\n        this._currentActiveButton = -1;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FreeCameraMouseInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"mouse\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FreeCameraMouseInput\"] = FreeCameraMouseInput;\r\n", "import type { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport type { Camera } from \"../../Cameras/camera\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport type { PointerInfo } from \"../../Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\r\nimport type { IWheelEvent } from \"../../Events/deviceInputEvents\";\r\nimport { EventConstants } from \"../../Events/deviceInputEvents\";\r\nimport { Tools } from \"../../Misc/tools\";\r\n\r\n/**\r\n * Base class for mouse wheel input..\r\n * See FollowCameraMouseWheelInput in src/Cameras/Inputs/freeCameraMouseWheelInput.ts\r\n * for example usage.\r\n */\r\nexport abstract class BaseCameraMouseWheelInput implements ICameraInput<Camera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public abstract camera: Camera;\r\n\r\n    /**\r\n     * How fast is the camera moves in relation to X axis mouseWheel events.\r\n     * Use negative value to reverse direction.\r\n     */\r\n    @serialize()\r\n    public wheelPrecisionX = 3.0;\r\n\r\n    /**\r\n     * How fast is the camera moves in relation to Y axis mouseWheel events.\r\n     * Use negative value to reverse direction.\r\n     */\r\n    @serialize()\r\n    public wheelPrecisionY = 3.0;\r\n\r\n    /**\r\n     * How fast is the camera moves in relation to Z axis mouseWheel events.\r\n     * Use negative value to reverse direction.\r\n     */\r\n    @serialize()\r\n    public wheelPrecisionZ = 3.0;\r\n\r\n    /**\r\n     * Observable for when a mouse wheel move event occurs.\r\n     */\r\n    public onChangedObservable = new Observable<{ wheelDeltaX: number; wheelDeltaY: number; wheelDeltaZ: number }>();\r\n\r\n    private _wheel: Nullable<(pointer: PointerInfo) => void>;\r\n    private _observer: Nullable<Observer<PointerInfo>>;\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls\r\n     *   should call preventdefault().\r\n     *   (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n\r\n        this._wheel = (pointer) => {\r\n            // sanity check - this should be a PointerWheel event.\r\n            if (pointer.type !== PointerEventTypes.POINTERWHEEL) {\r\n                return;\r\n            }\r\n\r\n            const event = <IWheelEvent>pointer.event;\r\n\r\n            const platformScale = event.deltaMode === EventConstants.DOM_DELTA_LINE ? this._ffMultiplier : 1; // If this happens to be set to DOM_DELTA_LINE, adjust accordingly\r\n\r\n            this._wheelDeltaX += (this.wheelPrecisionX * platformScale * event.deltaX) / this._normalize;\r\n            this._wheelDeltaY -= (this.wheelPrecisionY * platformScale * event.deltaY) / this._normalize;\r\n            this._wheelDeltaZ += (this.wheelPrecisionZ * platformScale * event.deltaZ) / this._normalize;\r\n\r\n            if (event.preventDefault) {\r\n                if (!noPreventDefault) {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        };\r\n\r\n        this._observer = this.camera.getScene()._inputManager._addCameraPointerObserver(this._wheel, PointerEventTypes.POINTERWHEEL);\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        if (this._observer) {\r\n            this.camera.getScene()._inputManager._removeCameraPointerObserver(this._observer);\r\n            this._observer = null;\r\n            this._wheel = null;\r\n        }\r\n        if (this.onChangedObservable) {\r\n            this.onChangedObservable.clear();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called for each rendered frame.\r\n     */\r\n    public checkInputs(): void {\r\n        this.onChangedObservable.notifyObservers({\r\n            wheelDeltaX: this._wheelDeltaX,\r\n            wheelDeltaY: this._wheelDeltaY,\r\n            wheelDeltaZ: this._wheelDeltaZ,\r\n        });\r\n\r\n        // Clear deltas.\r\n        this._wheelDeltaX = 0;\r\n        this._wheelDeltaY = 0;\r\n        this._wheelDeltaZ = 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"BaseCameraMouseWheelInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"mousewheel\";\r\n    }\r\n\r\n    /**\r\n     * Incremental value of multiple mouse wheel movements of the X axis.\r\n     * Should be zero-ed when read.\r\n     */\r\n    protected _wheelDeltaX: number = 0;\r\n\r\n    /**\r\n     * Incremental value of multiple mouse wheel movements of the Y axis.\r\n     * Should be zero-ed when read.\r\n     */\r\n    protected _wheelDeltaY: number = 0;\r\n\r\n    /**\r\n     * Incremental value of multiple mouse wheel movements of the Z axis.\r\n     * Should be zero-ed when read.\r\n     */\r\n    protected _wheelDeltaZ: number = 0;\r\n\r\n    /**\r\n     * Firefox uses a different scheme to report scroll distances to other\r\n     * browsers. Rather than use complicated methods to calculate the exact\r\n     * multiple we need to apply, let's just cheat and use a constant.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaMode\r\n     * https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\r\n     */\r\n    private readonly _ffMultiplier = 12;\r\n\r\n    /**\r\n     * Different event attributes for wheel data fall into a few set ranges.\r\n     * Some relevant but dated date here:\r\n     * https://stackoverflow.com/questions/5527601/normalizing-mousewheel-speed-across-browsers\r\n     */\r\n    private readonly _normalize = 120;\r\n}\r\n", "import type { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport type { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport { BaseCameraMouseWheelInput } from \"../../Cameras/Inputs/BaseCameraMouseWheelInput\";\r\nimport { Matrix, Vector3 } from \"../../Maths/math.vector\";\r\nimport { Coordinate } from \"../../Maths/math.axis\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nenum _CameraProperty {\r\n    MoveRelative,\r\n    RotateRelative,\r\n    MoveScene,\r\n}\r\n\r\n/**\r\n * Manage the mouse wheel inputs to control a free camera.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n */\r\nexport class FreeCameraMouseWheelInput extends BaseCameraMouseWheelInput {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FreeCamera;\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public override getClassName(): string {\r\n        return \"FreeCameraMouseWheelInput\";\r\n    }\r\n\r\n    /**\r\n     * Set which movement axis (relative to camera's orientation) the mouse\r\n     * wheel's X axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelXMoveRelative(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelXAction !== _CameraProperty.MoveRelative) {\r\n            // Attempting to clear different _wheelXAction.\r\n            return;\r\n        }\r\n        this._wheelXAction = _CameraProperty.MoveRelative;\r\n        this._wheelXActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured movement axis (relative to camera's orientation) the\r\n     * mouse wheel's X axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelXMoveRelative(): Nullable<Coordinate> {\r\n        if (this._wheelXAction !== _CameraProperty.MoveRelative) {\r\n            return null;\r\n        }\r\n        return this._wheelXActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which movement axis (relative to camera's orientation) the mouse\r\n     * wheel's Y axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelYMoveRelative(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelYAction !== _CameraProperty.MoveRelative) {\r\n            // Attempting to clear different _wheelYAction.\r\n            return;\r\n        }\r\n        this._wheelYAction = _CameraProperty.MoveRelative;\r\n        this._wheelYActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured movement axis (relative to camera's orientation) the\r\n     * mouse wheel's Y axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelYMoveRelative(): Nullable<Coordinate> {\r\n        if (this._wheelYAction !== _CameraProperty.MoveRelative) {\r\n            return null;\r\n        }\r\n        return this._wheelYActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which movement axis (relative to camera's orientation) the mouse\r\n     * wheel's Z axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelZMoveRelative(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelZAction !== _CameraProperty.MoveRelative) {\r\n            // Attempting to clear different _wheelZAction.\r\n            return;\r\n        }\r\n        this._wheelZAction = _CameraProperty.MoveRelative;\r\n        this._wheelZActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured movement axis (relative to camera's orientation) the\r\n     * mouse wheel's Z axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelZMoveRelative(): Nullable<Coordinate> {\r\n        if (this._wheelZAction !== _CameraProperty.MoveRelative) {\r\n            return null;\r\n        }\r\n        return this._wheelZActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which rotation axis (relative to camera's orientation) the mouse\r\n     * wheel's X axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelXRotateRelative(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelXAction !== _CameraProperty.RotateRelative) {\r\n            // Attempting to clear different _wheelXAction.\r\n            return;\r\n        }\r\n        this._wheelXAction = _CameraProperty.RotateRelative;\r\n        this._wheelXActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured rotation axis (relative to camera's orientation) the\r\n     * mouse wheel's X axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelXRotateRelative(): Nullable<Coordinate> {\r\n        if (this._wheelXAction !== _CameraProperty.RotateRelative) {\r\n            return null;\r\n        }\r\n        return this._wheelXActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which rotation axis (relative to camera's orientation) the mouse\r\n     * wheel's Y axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelYRotateRelative(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelYAction !== _CameraProperty.RotateRelative) {\r\n            // Attempting to clear different _wheelYAction.\r\n            return;\r\n        }\r\n        this._wheelYAction = _CameraProperty.RotateRelative;\r\n        this._wheelYActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured rotation axis (relative to camera's orientation) the\r\n     * mouse wheel's Y axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelYRotateRelative(): Nullable<Coordinate> {\r\n        if (this._wheelYAction !== _CameraProperty.RotateRelative) {\r\n            return null;\r\n        }\r\n        return this._wheelYActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which rotation axis (relative to camera's orientation) the mouse\r\n     * wheel's Z axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelZRotateRelative(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelZAction !== _CameraProperty.RotateRelative) {\r\n            // Attempting to clear different _wheelZAction.\r\n            return;\r\n        }\r\n        this._wheelZAction = _CameraProperty.RotateRelative;\r\n        this._wheelZActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured rotation axis (relative to camera's orientation) the\r\n     * mouse wheel's Z axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelZRotateRelative(): Nullable<Coordinate> {\r\n        if (this._wheelZAction !== _CameraProperty.RotateRelative) {\r\n            return null;\r\n        }\r\n        return this._wheelZActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which movement axis (relative to the scene) the mouse wheel's X axis\r\n     * controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelXMoveScene(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelXAction !== _CameraProperty.MoveScene) {\r\n            // Attempting to clear different _wheelXAction.\r\n            return;\r\n        }\r\n        this._wheelXAction = _CameraProperty.MoveScene;\r\n        this._wheelXActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\r\n     * X axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelXMoveScene(): Nullable<Coordinate> {\r\n        if (this._wheelXAction !== _CameraProperty.MoveScene) {\r\n            return null;\r\n        }\r\n        return this._wheelXActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which movement axis (relative to the scene) the mouse wheel's Y axis\r\n     * controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelYMoveScene(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelYAction !== _CameraProperty.MoveScene) {\r\n            // Attempting to clear different _wheelYAction.\r\n            return;\r\n        }\r\n        this._wheelYAction = _CameraProperty.MoveScene;\r\n        this._wheelYActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\r\n     * Y axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelYMoveScene(): Nullable<Coordinate> {\r\n        if (this._wheelYAction !== _CameraProperty.MoveScene) {\r\n            return null;\r\n        }\r\n        return this._wheelYActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which movement axis (relative to the scene) the mouse wheel's Z axis\r\n     * controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelZMoveScene(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelZAction !== _CameraProperty.MoveScene) {\r\n            // Attempting to clear different _wheelZAction.\r\n            return;\r\n        }\r\n        this._wheelZAction = _CameraProperty.MoveScene;\r\n        this._wheelZActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\r\n     * Z axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelZMoveScene(): Nullable<Coordinate> {\r\n        if (this._wheelZAction !== _CameraProperty.MoveScene) {\r\n            return null;\r\n        }\r\n        return this._wheelZActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Called for each rendered frame.\r\n     */\r\n    public override checkInputs(): void {\r\n        if (this._wheelDeltaX === 0 && this._wheelDeltaY === 0 && this._wheelDeltaZ == 0) {\r\n            return;\r\n        }\r\n\r\n        // Clear the camera properties that we might be updating.\r\n        this._moveRelative.setAll(0);\r\n        this._rotateRelative.setAll(0);\r\n        this._moveScene.setAll(0);\r\n\r\n        // Set the camera properties that are to be updated.\r\n        this._updateCamera();\r\n\r\n        if (this.camera.getScene().useRightHandedSystem) {\r\n            // TODO: Does this need done for worldUpdate too?\r\n            this._moveRelative.z *= -1;\r\n        }\r\n\r\n        // Convert updates relative to camera to world position update.\r\n        const cameraTransformMatrix = Matrix.Zero();\r\n        this.camera.getViewMatrix().invertToRef(cameraTransformMatrix);\r\n\r\n        const transformedDirection = Vector3.Zero();\r\n        Vector3.TransformNormalToRef(this._moveRelative, cameraTransformMatrix, transformedDirection);\r\n\r\n        // Apply updates to camera position.\r\n        this.camera.cameraRotation.x += this._rotateRelative.x / 200;\r\n        this.camera.cameraRotation.y += this._rotateRelative.y / 200;\r\n        this.camera.cameraDirection.addInPlace(transformedDirection);\r\n        this.camera.cameraDirection.addInPlace(this._moveScene);\r\n\r\n        // Call the base class implementation to handle observers and do cleanup.\r\n        super.checkInputs();\r\n    }\r\n\r\n    private _moveRelative = Vector3.Zero();\r\n    private _rotateRelative = Vector3.Zero();\r\n    private _moveScene = Vector3.Zero();\r\n\r\n    /**\r\n     * These are set to the desired default behaviour.\r\n     */\r\n    private _wheelXAction: Nullable<_CameraProperty> = _CameraProperty.MoveRelative;\r\n    private _wheelXActionCoordinate: Nullable<Coordinate> = Coordinate.X;\r\n    private _wheelYAction: Nullable<_CameraProperty> = _CameraProperty.MoveRelative;\r\n    private _wheelYActionCoordinate: Nullable<Coordinate> = Coordinate.Z;\r\n    private _wheelZAction: Nullable<_CameraProperty> = null;\r\n    private _wheelZActionCoordinate: Nullable<Coordinate> = null;\r\n\r\n    /**\r\n     * Update the camera according to any configured properties for the 3\r\n     * mouse-wheel axis.\r\n     */\r\n    private _updateCamera(): void {\r\n        // Do the camera updates for each of the 3 touch-wheel axis.\r\n        this._updateCameraProperty(this._wheelDeltaX, this._wheelXAction, this._wheelXActionCoordinate);\r\n        this._updateCameraProperty(this._wheelDeltaY, this._wheelYAction, this._wheelYActionCoordinate);\r\n        this._updateCameraProperty(this._wheelDeltaZ, this._wheelZAction, this._wheelZActionCoordinate);\r\n    }\r\n\r\n    /**\r\n     * Update one property of the camera.\r\n     * @param value\r\n     * @param cameraProperty\r\n     * @param coordinate\r\n     */\r\n    private _updateCameraProperty(\r\n        /* Mouse-wheel delta. */\r\n        value: number,\r\n        /* Camera property to be changed. */\r\n        cameraProperty: Nullable<_CameraProperty>,\r\n        /* Axis of Camera property to be changed. */\r\n        coordinate: Nullable<Coordinate>\r\n    ): void {\r\n        if (value === 0) {\r\n            // Mouse wheel has not moved.\r\n            return;\r\n        }\r\n        if (cameraProperty === null || coordinate === null) {\r\n            // Mouse wheel axis not configured.\r\n            return;\r\n        }\r\n\r\n        let action = null;\r\n        switch (cameraProperty) {\r\n            case _CameraProperty.MoveRelative:\r\n                action = this._moveRelative;\r\n                break;\r\n            case _CameraProperty.RotateRelative:\r\n                action = this._rotateRelative;\r\n                break;\r\n            case _CameraProperty.MoveScene:\r\n                action = this._moveScene;\r\n                break;\r\n        }\r\n\r\n        switch (coordinate) {\r\n            case Coordinate.X:\r\n                action.set(value, 0, 0);\r\n                break;\r\n            case Coordinate.Y:\r\n                action.set(0, value, 0);\r\n                break;\r\n            case Coordinate.Z:\r\n                action.set(0, 0, value);\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FreeCameraMouseWheelInput\"] = FreeCameraMouseWheelInput;\r\n", "import { serialize } from \"../../Misc/decorators\";\r\nimport type { Observer, EventState } from \"../../Misc/observable\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport type { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport type { PointerInfo } from \"../../Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\r\nimport { Matrix, Vector3 } from \"../../Maths/math.vector\";\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport type { IPointerEvent } from \"../../Events/deviceInputEvents\";\r\n/**\r\n * Manage the touch inputs to control the movement of a free camera.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n */\r\nexport class FreeCameraTouchInput implements ICameraInput<FreeCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FreeCamera;\r\n\r\n    /**\r\n     * Defines the touch sensibility for rotation.\r\n     * The lower the faster.\r\n     */\r\n    @serialize()\r\n    public touchAngularSensibility: number = 200000.0;\r\n\r\n    /**\r\n     * Defines the touch sensibility for move.\r\n     * The lower the faster.\r\n     */\r\n    @serialize()\r\n    public touchMoveSensibility: number = 250.0;\r\n\r\n    /**\r\n     * Swap touch actions so that one touch is used for rotation and multiple for movement\r\n     */\r\n    public singleFingerRotate: boolean = false;\r\n\r\n    private _offsetX: Nullable<number> = null;\r\n    private _offsetY: Nullable<number> = null;\r\n\r\n    private _pointerPressed = new Array<number>();\r\n    private _pointerInput?: (p: PointerInfo, s: EventState) => void;\r\n    private _observer: Nullable<Observer<PointerInfo>>;\r\n    private _onLostFocus: Nullable<(e: FocusEvent) => any>;\r\n    private _isSafari: boolean;\r\n\r\n    /**\r\n     * Manage the touch inputs to control the movement of a free camera.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n     * @param allowMouse Defines if mouse events can be treated as touch events\r\n     */\r\n    constructor(\r\n        /**\r\n         * [false] Define if mouse events can be treated as touch events\r\n         */\r\n        public allowMouse = false\r\n    ) {\r\n        this._isSafari = Tools.IsSafari();\r\n    }\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n        let previousPosition: Nullable<{ x: number; y: number }> = null;\r\n\r\n        if (this._pointerInput === undefined) {\r\n            this._onLostFocus = () => {\r\n                this._offsetX = null;\r\n                this._offsetY = null;\r\n            };\r\n\r\n            this._pointerInput = (p) => {\r\n                const evt = <IPointerEvent>p.event;\r\n\r\n                const isMouseEvent = evt.pointerType === \"mouse\" || (this._isSafari && typeof evt.pointerType === \"undefined\");\r\n\r\n                if (!this.allowMouse && isMouseEvent) {\r\n                    return;\r\n                }\r\n\r\n                if (p.type === PointerEventTypes.POINTERDOWN) {\r\n                    if (!noPreventDefault) {\r\n                        evt.preventDefault();\r\n                    }\r\n\r\n                    this._pointerPressed.push(evt.pointerId);\r\n\r\n                    if (this._pointerPressed.length !== 1) {\r\n                        return;\r\n                    }\r\n\r\n                    previousPosition = {\r\n                        x: evt.clientX,\r\n                        y: evt.clientY,\r\n                    };\r\n                } else if (p.type === PointerEventTypes.POINTERUP) {\r\n                    if (!noPreventDefault) {\r\n                        evt.preventDefault();\r\n                    }\r\n\r\n                    const index: number = this._pointerPressed.indexOf(evt.pointerId);\r\n\r\n                    if (index === -1) {\r\n                        return;\r\n                    }\r\n                    this._pointerPressed.splice(index, 1);\r\n\r\n                    if (index != 0) {\r\n                        return;\r\n                    }\r\n                    previousPosition = null;\r\n                    this._offsetX = null;\r\n                    this._offsetY = null;\r\n                } else if (p.type === PointerEventTypes.POINTERMOVE) {\r\n                    if (!noPreventDefault) {\r\n                        evt.preventDefault();\r\n                    }\r\n\r\n                    if (!previousPosition) {\r\n                        return;\r\n                    }\r\n\r\n                    const index: number = this._pointerPressed.indexOf(evt.pointerId);\r\n\r\n                    if (index != 0) {\r\n                        return;\r\n                    }\r\n\r\n                    this._offsetX = evt.clientX - previousPosition.x;\r\n                    this._offsetY = -(evt.clientY - previousPosition.y);\r\n                }\r\n            };\r\n        }\r\n\r\n        this._observer = this.camera\r\n            .getScene()\r\n            ._inputManager._addCameraPointerObserver(this._pointerInput, PointerEventTypes.POINTERDOWN | PointerEventTypes.POINTERUP | PointerEventTypes.POINTERMOVE);\r\n\r\n        if (this._onLostFocus) {\r\n            const engine = this.camera.getEngine();\r\n            const element = engine.getInputElement();\r\n            if (element) {\r\n                element.addEventListener(\"blur\", this._onLostFocus);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        if (this._pointerInput) {\r\n            if (this._observer) {\r\n                this.camera.getScene()._inputManager._removeCameraPointerObserver(this._observer);\r\n                this._observer = null;\r\n            }\r\n\r\n            if (this._onLostFocus) {\r\n                const engine = this.camera.getEngine();\r\n                const element = engine.getInputElement();\r\n                if (element) {\r\n                    element.removeEventListener(\"blur\", this._onLostFocus);\r\n                }\r\n\r\n                this._onLostFocus = null;\r\n            }\r\n            this._pointerPressed.length = 0;\r\n            this._offsetX = null;\r\n            this._offsetY = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs(): void {\r\n        if (this._offsetX === null || this._offsetY === null) {\r\n            return;\r\n        }\r\n        if (this._offsetX === 0 && this._offsetY === 0) {\r\n            return;\r\n        }\r\n\r\n        const camera = this.camera;\r\n        const handednessMultiplier = camera._calculateHandednessMultiplier();\r\n        camera.cameraRotation.y = (this._offsetX * handednessMultiplier) / this.touchAngularSensibility;\r\n\r\n        const rotateCamera = (this.singleFingerRotate && this._pointerPressed.length === 1) || (!this.singleFingerRotate && this._pointerPressed.length > 1);\r\n\r\n        if (rotateCamera) {\r\n            camera.cameraRotation.x = -(this._offsetY * handednessMultiplier) / this.touchAngularSensibility;\r\n        } else {\r\n            const speed = camera._computeLocalCameraSpeed();\r\n            const direction = new Vector3(0, 0, this.touchMoveSensibility !== 0 ? (speed * this._offsetY) / this.touchMoveSensibility : 0);\r\n\r\n            Matrix.RotationYawPitchRollToRef(camera.rotation.y, camera.rotation.x, 0, camera._cameraRotationMatrix);\r\n            camera.cameraDirection.addInPlace(Vector3.TransformCoordinates(direction, camera._cameraRotationMatrix));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FreeCameraTouchInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"touch\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FreeCameraTouchInput\"] = FreeCameraTouchInput;\r\n", "import type { FreeCamera } from \"./freeCamera\";\r\nimport { CameraInputsManager } from \"./cameraInputsManager\";\r\nimport { FreeCameraKeyboardMoveInput } from \"../Cameras/Inputs/freeCameraKeyboardMoveInput\";\r\nimport { FreeCameraMouseInput } from \"../Cameras/Inputs/freeCameraMouseInput\";\r\nimport { FreeCameraMouseWheelInput } from \"../Cameras/Inputs/freeCameraMouseWheelInput\";\r\nimport { FreeCameraTouchInput } from \"../Cameras/Inputs/freeCameraTouchInput\";\r\nimport type { Nullable } from \"../types\";\r\n\r\n/**\r\n * Default Inputs manager for the FreeCamera.\r\n * It groups all the default supported inputs for ease of use.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/customizingCameraInputs\r\n */\r\nexport class FreeCameraInputsManager extends CameraInputsManager<FreeCamera> {\r\n    /**\r\n     * @internal\r\n     */\r\n    public _mouseInput: Nullable<FreeCameraMouseInput> = null;\r\n    /**\r\n     * @internal\r\n     */\r\n    public _mouseWheelInput: Nullable<FreeCameraMouseWheelInput> = null;\r\n    /**\r\n     * Instantiates a new FreeCameraInputsManager.\r\n     * @param camera Defines the camera the inputs belong to\r\n     */\r\n    constructor(camera: FreeCamera) {\r\n        super(camera);\r\n    }\r\n\r\n    /**\r\n     * Add keyboard input support to the input manager.\r\n     * @returns the current input manager\r\n     */\r\n    addKeyboard(): FreeCameraInputsManager {\r\n        this.add(new FreeCameraKeyboardMoveInput());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add mouse input support to the input manager.\r\n     * @param touchEnabled if the FreeCameraMouseInput should support touch (default: true)\r\n     * @returns the current input manager\r\n     */\r\n    addMouse(touchEnabled = true): FreeCameraInputsManager {\r\n        if (!this._mouseInput) {\r\n            this._mouseInput = new FreeCameraMouseInput(touchEnabled);\r\n            this.add(this._mouseInput);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes the mouse input support from the manager\r\n     * @returns the current input manager\r\n     */\r\n    removeMouse(): FreeCameraInputsManager {\r\n        if (this._mouseInput) {\r\n            this.remove(this._mouseInput);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add mouse wheel input support to the input manager.\r\n     * @returns the current input manager\r\n     */\r\n    addMouseWheel(): FreeCameraInputsManager {\r\n        if (!this._mouseWheelInput) {\r\n            this._mouseWheelInput = new FreeCameraMouseWheelInput();\r\n            this.add(this._mouseWheelInput);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes the mouse wheel input support from the manager\r\n     * @returns the current input manager\r\n     */\r\n    removeMouseWheel(): FreeCameraInputsManager {\r\n        if (this._mouseWheelInput) {\r\n            this.remove(this._mouseWheelInput);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add touch input support to the input manager.\r\n     * @returns the current input manager\r\n     */\r\n    addTouch(): FreeCameraInputsManager {\r\n        this.add(new FreeCameraTouchInput());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove all attached input methods from a camera\r\n     */\r\n    public override clear(): void {\r\n        super.clear();\r\n        this._mouseInput = null;\r\n    }\r\n}\r\n", "import type { Nullable } from \"../types\";\r\nimport { serializeAsVector3, serialize } from \"../Misc/decorators\";\r\nimport { Vector3, Vector2 } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Scene } from \"../scene\";\r\nimport { TargetCamera } from \"./targetCamera\";\r\nimport { FreeCameraInputsManager } from \"./freeCameraInputsManager\";\r\nimport type { FreeCameraMouseInput } from \"../Cameras/Inputs/freeCameraMouseInput\";\r\nimport type { FreeCameraKeyboardMoveInput } from \"../Cameras/Inputs/freeCameraKeyboardMoveInput\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\nimport type { Collider } from \"../Collisions/collider\";\r\nimport { AbstractEngine } from \"core/Engines/abstractEngine\";\r\n\r\n/**\r\n * This represents a free type of camera. It can be useful in First Person Shooter game for instance.\r\n * Please consider using the new UniversalCamera instead as it adds more functionality like the gamepad.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_introduction#universal-camera\r\n */\r\nexport class FreeCamera extends TargetCamera {\r\n    /**\r\n     * Define the collision ellipsoid of the camera.\r\n     * This is helpful to simulate a camera body like the player body around the camera\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_collisions#arcrotatecamera\r\n     */\r\n    @serializeAsVector3()\r\n    public ellipsoid = new Vector3(0.5, 1, 0.5);\r\n\r\n    /**\r\n     * Define an offset for the position of the ellipsoid around the camera.\r\n     * This can be helpful to determine the center of the body near the gravity center of the body\r\n     * instead of its head.\r\n     */\r\n    @serializeAsVector3()\r\n    public ellipsoidOffset = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Enable or disable collisions of the camera with the rest of the scene objects.\r\n     */\r\n    @serialize()\r\n    public checkCollisions = false;\r\n\r\n    /**\r\n     * Enable or disable gravity on the camera.\r\n     */\r\n    @serialize()\r\n    public applyGravity = false;\r\n\r\n    /**\r\n     * Define the input manager associated to the camera.\r\n     */\r\n    public override inputs: FreeCameraInputsManager;\r\n\r\n    /**\r\n     * Gets the input sensibility for a mouse input. (default is 2000.0)\r\n     * Higher values reduce sensitivity.\r\n     */\r\n    public get angularSensibility(): number {\r\n        const mouse = <FreeCameraMouseInput>this.inputs.attached[\"mouse\"];\r\n        if (mouse) {\r\n            return mouse.angularSensibility;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the input sensibility for a mouse input. (default is 2000.0)\r\n     * Higher values reduce sensitivity.\r\n     */\r\n    public set angularSensibility(value: number) {\r\n        const mouse = <FreeCameraMouseInput>this.inputs.attached[\"mouse\"];\r\n        if (mouse) {\r\n            mouse.angularSensibility = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the forward move of the camera.\r\n     */\r\n    public get keysUp(): number[] {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysUp;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public set keysUp(value: number[]) {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysUp = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the upward move of the camera.\r\n     */\r\n    public get keysUpward(): number[] {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysUpward;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public set keysUpward(value: number[]) {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysUpward = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the backward move of the camera.\r\n     */\r\n    public get keysDown(): number[] {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysDown;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public set keysDown(value: number[]) {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysDown = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the downward move of the camera.\r\n     */\r\n    public get keysDownward(): number[] {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysDownward;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public set keysDownward(value: number[]) {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysDownward = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the left strafe move of the camera.\r\n     */\r\n    public get keysLeft(): number[] {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysLeft;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public set keysLeft(value: number[]) {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysLeft = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the right strafe move of the camera.\r\n     */\r\n    public get keysRight(): number[] {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysRight;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public set keysRight(value: number[]) {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysRight = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the left rotation move of the camera.\r\n     */\r\n    public get keysRotateLeft(): number[] {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysRotateLeft;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public set keysRotateLeft(value: number[]) {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysRotateLeft = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the right rotation move of the camera.\r\n     */\r\n    public get keysRotateRight(): number[] {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysRotateRight;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public set keysRotateRight(value: number[]) {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysRotateRight = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the up rotation move of the camera.\r\n     */\r\n    public get keysRotateUp(): number[] {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysRotateUp;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public set keysRotateUp(value: number[]) {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysRotateUp = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the down rotation move of the camera.\r\n     */\r\n    public get keysRotateDown(): number[] {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysRotateDown;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public set keysRotateDown(value: number[]) {\r\n        const keyboard = <FreeCameraKeyboardMoveInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysRotateDown = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event raised when the camera collide with a mesh in the scene.\r\n     */\r\n    public onCollide: (collidedMesh: AbstractMesh) => void;\r\n\r\n    private _collider: Collider;\r\n    private _needMoveForGravity = false;\r\n    private _oldPosition = Vector3.Zero();\r\n    private _diffPosition = Vector3.Zero();\r\n    private _newPosition = Vector3.Zero();\r\n\r\n    /** @internal */\r\n    public _localDirection: Vector3;\r\n    /** @internal */\r\n    public _transformedDirection: Vector3;\r\n\r\n    /**\r\n     * Instantiates a Free Camera.\r\n     * This represents a free type of camera. It can be useful in First Person Shooter game for instance.\r\n     * Please consider using the new UniversalCamera instead as it adds more functionality like touch to this camera.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/camera_introduction#universal-camera\r\n     * @param name Define the name of the camera in the scene\r\n     * @param position Define the start position of the camera in the scene\r\n     * @param scene Define the scene the camera belongs to\r\n     * @param setActiveOnSceneIfNoneActive Defines whether the camera should be marked as active if not other active cameras have been defined\r\n     */\r\n    constructor(name: string, position: Vector3, scene?: Scene, setActiveOnSceneIfNoneActive = true) {\r\n        super(name, position, scene, setActiveOnSceneIfNoneActive);\r\n        this.inputs = new FreeCameraInputsManager(this);\r\n        this.inputs.addKeyboard().addMouse();\r\n    }\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public override attachControl(noPreventDefault?: boolean): void;\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     * BACK COMPAT SIGNATURE ONLY.\r\n     */\r\n    public override attachControl(ignored: any, noPreventDefault?: boolean): void;\r\n    /**\r\n     * Attached controls to the current camera.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public override attachControl(ignored?: any, noPreventDefault?: boolean): void {\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n        this.inputs.attachElement(noPreventDefault);\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public override detachControl(): void {\r\n        this.inputs.detachElement();\r\n\r\n        this.cameraDirection = new Vector3(0, 0, 0);\r\n        this.cameraRotation = new Vector2(0, 0);\r\n    }\r\n\r\n    // Collisions\r\n    private _collisionMask = -1;\r\n\r\n    /**\r\n     * Define a collision mask to limit the list of object the camera can collide with\r\n     */\r\n    public get collisionMask(): number {\r\n        return this._collisionMask;\r\n    }\r\n\r\n    public set collisionMask(mask: number) {\r\n        this._collisionMask = !isNaN(mask) ? mask : -1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _collideWithWorld(displacement: Vector3): void {\r\n        let globalPosition: Vector3;\r\n\r\n        if (this.parent) {\r\n            globalPosition = Vector3.TransformCoordinates(this.position, this.parent.getWorldMatrix());\r\n        } else {\r\n            globalPosition = this.position;\r\n        }\r\n\r\n        globalPosition.subtractFromFloatsToRef(0, this.ellipsoid.y, 0, this._oldPosition);\r\n        this._oldPosition.addInPlace(this.ellipsoidOffset);\r\n\r\n        const coordinator = this.getScene().collisionCoordinator;\r\n        if (!this._collider) {\r\n            this._collider = coordinator.createCollider();\r\n        }\r\n\r\n        this._collider._radius = this.ellipsoid;\r\n        this._collider.collisionMask = this._collisionMask;\r\n\r\n        //no need for clone, as long as gravity is not on.\r\n        let actualDisplacement = displacement;\r\n\r\n        //add gravity to the direction to prevent the dual-collision checking\r\n        if (this.applyGravity) {\r\n            //this prevents mending with cameraDirection, a global variable of the free camera class.\r\n            actualDisplacement = displacement.add(this.getScene().gravity);\r\n        }\r\n\r\n        coordinator.getNewPosition(this._oldPosition, actualDisplacement, this._collider, 3, null, this._onCollisionPositionChange, this.uniqueId);\r\n    }\r\n\r\n    private _onCollisionPositionChange = (collisionId: number, newPosition: Vector3, collidedMesh: Nullable<AbstractMesh> = null) => {\r\n        this._newPosition.copyFrom(newPosition);\r\n\r\n        this._newPosition.subtractToRef(this._oldPosition, this._diffPosition);\r\n\r\n        if (this._diffPosition.length() > AbstractEngine.CollisionsEpsilon) {\r\n            this.position.addToRef(this._diffPosition, this._deferredPositionUpdate);\r\n            if (!this._deferOnly) {\r\n                this.position.copyFrom(this._deferredPositionUpdate);\r\n            } else {\r\n                this._deferredUpdated = true;\r\n            }\r\n            // call onCollide, if defined. Note that in case of deferred update, the actual position change might happen in the next frame.\r\n            if (this.onCollide && collidedMesh) {\r\n                this.onCollide(collidedMesh);\r\n            }\r\n        }\r\n    };\r\n\r\n    /** @internal */\r\n    public override _checkInputs(): void {\r\n        if (!this._localDirection) {\r\n            this._localDirection = Vector3.Zero();\r\n            this._transformedDirection = Vector3.Zero();\r\n        }\r\n\r\n        this.inputs.checkInputs();\r\n\r\n        super._checkInputs();\r\n    }\r\n\r\n    /**\r\n     * Enable movement without a user input. This allows gravity to always be applied.\r\n     */\r\n    public set needMoveForGravity(value: boolean) {\r\n        this._needMoveForGravity = value;\r\n    }\r\n\r\n    /**\r\n     * When true, gravity is applied whether there is user input or not.\r\n     */\r\n    public get needMoveForGravity(): boolean {\r\n        return this._needMoveForGravity;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _decideIfNeedsToMove(): boolean {\r\n        return this._needMoveForGravity || Math.abs(this.cameraDirection.x) > 0 || Math.abs(this.cameraDirection.y) > 0 || Math.abs(this.cameraDirection.z) > 0;\r\n    }\r\n\r\n    /** @internal */\r\n    public override _updatePosition(): void {\r\n        if (this.checkCollisions && this.getScene().collisionsEnabled) {\r\n            this._collideWithWorld(this.cameraDirection);\r\n        } else {\r\n            super._updatePosition();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy the camera and release the current resources hold by it.\r\n     */\r\n    public override dispose(): void {\r\n        this.inputs.clear();\r\n        super.dispose();\r\n    }\r\n\r\n    /**\r\n     * Gets the current object class name.\r\n     * @returns the class name\r\n     */\r\n    public override getClassName(): string {\r\n        return \"FreeCamera\";\r\n    }\r\n}\r\n\r\n// Register Class Name\r\nRegisterClass(\"BABYLON.FreeCamera\", FreeCamera);\r\n", "import { Texture } from \"./texture\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { AbstractEngine } from \"../../Engines/abstractEngine\";\r\n\r\nimport type { Scene } from \"../../scene\";\r\n\r\n/**\r\n * Raw texture can help creating a texture directly from an array of data.\r\n * This can be super useful if you either get the data from an uncompressed source or\r\n * if you wish to create your texture pixel by pixel.\r\n */\r\nexport class RawTexture extends Texture {\r\n    private _waitingForData: boolean;\r\n    /**\r\n     * Instantiates a new RawTexture.\r\n     * Raw texture can help creating a texture directly from an array of data.\r\n     * This can be super useful if you either get the data from an uncompressed source or\r\n     * if you wish to create your texture pixel by pixel.\r\n     * @param data define the array of data to use to create the texture (null to create an empty texture)\r\n     * @param width define the width of the texture\r\n     * @param height define the height of the texture\r\n     * @param format define the format of the data (RGB, RGBA... Engine.TEXTUREFORMAT_xxx)\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps define whether mip maps should be generated or not\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\r\n     * @param creationFlags specific flags to use when creating the texture (Constants.TEXTURE_CREATIONFLAG_STORAGE for storage textures, for eg)\r\n     * @param useSRGBBuffer defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU).\r\n     * @param waitDataToBeReady If set to true Rawtexture will wait data to be set in order to be flaged as ready.\r\n     */\r\n    constructor(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        /**\r\n         * Define the format of the data (RGB, RGBA... Engine.TEXTUREFORMAT_xxx)\r\n         */\r\n        public format: number,\r\n        sceneOrEngine: Nullable<Scene | AbstractEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        type: number = Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n        creationFlags?: number,\r\n        useSRGBBuffer?: boolean,\r\n        waitDataToBeReady?: boolean\r\n    ) {\r\n        super(null, sceneOrEngine, !generateMipMaps, invertY, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, creationFlags);\r\n\r\n        if (!this._engine) {\r\n            return;\r\n        }\r\n\r\n        if (!this._engine._caps.textureFloatLinearFiltering && type === Constants.TEXTURETYPE_FLOAT) {\r\n            samplingMode = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n        }\r\n        if (!this._engine._caps.textureHalfFloatLinearFiltering && type === Constants.TEXTURETYPE_HALF_FLOAT) {\r\n            samplingMode = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n        }\r\n\r\n        this._texture = this._engine.createRawTexture(data, width, height, format, generateMipMaps, invertY, samplingMode, null, type, creationFlags ?? 0, useSRGBBuffer ?? false);\r\n\r\n        this.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n        this.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n        this._waitingForData = !!waitDataToBeReady && !data;\r\n    }\r\n\r\n    /**\r\n     * Updates the texture underlying data.\r\n     * @param data Define the new data of the texture\r\n     */\r\n    public update(data: ArrayBufferView): void {\r\n        this._getEngine()!.updateRawTexture(this._texture, data, this._texture!.format, this._texture!.invertY, null, this._texture!.type, this._texture!._useSRGBBuffer);\r\n        this._waitingForData = false;\r\n    }\r\n\r\n    /**\r\n     * Clones the texture.\r\n     * @returns the cloned texture\r\n     */\r\n    public override clone(): Texture {\r\n        if (!this._texture) {\r\n            return super.clone();\r\n        }\r\n\r\n        const rawTexture = new RawTexture(\r\n            null,\r\n            this.getSize().width,\r\n            this.getSize().height,\r\n            this.format,\r\n            this.getScene(),\r\n            this._texture.generateMipMaps,\r\n            this._invertY,\r\n            this.samplingMode,\r\n            this._texture.type,\r\n            this._texture._creationFlags,\r\n            this._useSRGBBuffer\r\n        );\r\n\r\n        rawTexture._texture = this._texture;\r\n        this._texture.incrementReferences();\r\n\r\n        return rawTexture;\r\n    }\r\n\r\n    public override isReady(): boolean {\r\n        return super.isReady() && !this._waitingForData;\r\n    }\r\n\r\n    /**\r\n     * Creates a luminance texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @returns the luminance texture\r\n     */\r\n    public static CreateLuminanceTexture(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        sceneOrEngine: Nullable<Scene | AbstractEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE\r\n    ): RawTexture {\r\n        return new RawTexture(data, width, height, Constants.TEXTUREFORMAT_LUMINANCE, sceneOrEngine, generateMipMaps, invertY, samplingMode);\r\n    }\r\n\r\n    /**\r\n     * Creates a luminance alpha texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @returns the luminance alpha texture\r\n     */\r\n    public static CreateLuminanceAlphaTexture(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        sceneOrEngine: Nullable<Scene | AbstractEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE\r\n    ): RawTexture {\r\n        return new RawTexture(data, width, height, Constants.TEXTUREFORMAT_LUMINANCE_ALPHA, sceneOrEngine, generateMipMaps, invertY, samplingMode);\r\n    }\r\n\r\n    /**\r\n     * Creates an alpha texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @returns the alpha texture\r\n     */\r\n    public static CreateAlphaTexture(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        sceneOrEngine: Nullable<Scene | AbstractEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE\r\n    ): RawTexture {\r\n        return new RawTexture(data, width, height, Constants.TEXTUREFORMAT_ALPHA, sceneOrEngine, generateMipMaps, invertY, samplingMode);\r\n    }\r\n\r\n    /**\r\n     * Creates a RGB texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\r\n     * @param creationFlags specific flags to use when creating the texture (Constants.TEXTURE_CREATIONFLAG_STORAGE for storage textures, for eg)\r\n     * @param useSRGBBuffer defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU).\r\n     * @returns the RGB alpha texture\r\n     */\r\n    public static CreateRGBTexture(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        sceneOrEngine: Nullable<Scene | AbstractEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        type: number = Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n        creationFlags: number = 0,\r\n        useSRGBBuffer: boolean = false\r\n    ): RawTexture {\r\n        return new RawTexture(data, width, height, Constants.TEXTUREFORMAT_RGB, sceneOrEngine, generateMipMaps, invertY, samplingMode, type, creationFlags, useSRGBBuffer);\r\n    }\r\n\r\n    /**\r\n     * Creates a RGBA texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\r\n     * @param creationFlags specific flags to use when creating the texture (Constants.TEXTURE_CREATIONFLAG_STORAGE for storage textures, for eg)\r\n     * @param useSRGBBuffer defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU).\r\n     * @param waitDataToBeReady if set to true this will force texture to wait for data to be set before it is considered ready.\r\n     * @returns the RGBA texture\r\n     */\r\n    public static CreateRGBATexture(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        sceneOrEngine: Nullable<Scene | AbstractEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        type: number = Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n        creationFlags: number = 0,\r\n        useSRGBBuffer: boolean = false,\r\n        waitDataToBeReady: boolean = false\r\n    ): RawTexture {\r\n        return new RawTexture(\r\n            data,\r\n            width,\r\n            height,\r\n            Constants.TEXTUREFORMAT_RGBA,\r\n            sceneOrEngine,\r\n            generateMipMaps,\r\n            invertY,\r\n            samplingMode,\r\n            type,\r\n            creationFlags,\r\n            useSRGBBuffer,\r\n            waitDataToBeReady\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates a RGBA storage texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\r\n     * @param useSRGBBuffer defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU).\r\n     * @returns the RGBA texture\r\n     */\r\n    public static CreateRGBAStorageTexture(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        sceneOrEngine: Nullable<Scene | AbstractEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        type: number = Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n        useSRGBBuffer: boolean = false\r\n    ): RawTexture {\r\n        return new RawTexture(\r\n            data,\r\n            width,\r\n            height,\r\n            Constants.TEXTUREFORMAT_RGBA,\r\n            sceneOrEngine,\r\n            generateMipMaps,\r\n            invertY,\r\n            samplingMode,\r\n            type,\r\n            Constants.TEXTURE_CREATIONFLAG_STORAGE,\r\n            useSRGBBuffer\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates a R texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\r\n     * @returns the R texture\r\n     */\r\n    public static CreateRTexture(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        sceneOrEngine: Nullable<Scene | AbstractEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Texture.TRILINEAR_SAMPLINGMODE,\r\n        type: number = Constants.TEXTURETYPE_FLOAT\r\n    ): RawTexture {\r\n        return new RawTexture(data, width, height, Constants.TEXTUREFORMAT_R, sceneOrEngine, generateMipMaps, invertY, samplingMode, type);\r\n    }\r\n\r\n    /**\r\n     * Creates a R storage texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param sceneOrEngine defines the scene or engine the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\r\n     * @returns the R texture\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static CreateRStorageTexture(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        sceneOrEngine: Nullable<Scene | AbstractEngine>,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Texture.TRILINEAR_SAMPLINGMODE,\r\n        type: number = Constants.TEXTURETYPE_FLOAT\r\n    ): RawTexture {\r\n        return new RawTexture(data, width, height, Constants.TEXTUREFORMAT_R, sceneOrEngine, generateMipMaps, invertY, samplingMode, type, Constants.TEXTURE_CREATIONFLAG_STORAGE);\r\n    }\r\n}\r\n", "import { Bone } from \"./bone\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Vector3, Matrix, TmpVectors } from \"../Maths/math.vector\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { RawTexture } from \"../Materials/Textures/rawTexture\";\r\nimport type { Animatable } from \"../Animations/animatable.core\";\r\nimport type { AnimationPropertiesOverride } from \"../Animations/animationPropertiesOverride\";\r\nimport { Animation } from \"../Animations/animation\";\r\nimport { AnimationRange } from \"../Animations/animationRange\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { DeepCopier } from \"../Misc/deepCopier\";\r\nimport type { IInspectable } from \"../Misc/iInspectable\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\nimport type { IAssetContainer } from \"core/IAssetContainer\";\r\n\r\n/**\r\n * Class used to handle skinning animations\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/bonesSkeletons\r\n */\r\nexport class Skeleton implements IAnimatable {\r\n    /**\r\n     * Defines the list of child bones\r\n     */\r\n    public bones: Bone[] = [];\r\n    /**\r\n     * Defines an estimate of the dimension of the skeleton at rest\r\n     */\r\n    public dimensionsAtRest: Vector3;\r\n    /**\r\n     * Defines a boolean indicating if the root matrix is provided by meshes or by the current skeleton (this is the default value)\r\n     */\r\n    public needInitialSkinMatrix = false;\r\n\r\n    /**\r\n     * Gets the list of animations attached to this skeleton\r\n     */\r\n    public animations: Array<Animation>;\r\n\r\n    private _scene: Scene;\r\n    private _isDirty = true;\r\n    private _transformMatrices: Float32Array;\r\n    private _transformMatrixTexture: Nullable<RawTexture>;\r\n    private _meshesWithPoseMatrix = new Array<AbstractMesh>();\r\n    private _animatables: IAnimatable[];\r\n    private _identity = Matrix.Identity();\r\n    private _synchronizedWithMesh: AbstractMesh;\r\n    private _currentRenderId = -1;\r\n\r\n    private _ranges: { [name: string]: Nullable<AnimationRange> } = {};\r\n\r\n    private _absoluteTransformIsDirty = true;\r\n\r\n    private _canUseTextureForBones = false;\r\n    private _uniqueId = 0;\r\n\r\n    /** @internal */\r\n    public _numBonesWithLinkedTransformNode = 0;\r\n\r\n    /** @internal */\r\n    public _hasWaitingData: Nullable<boolean> = null;\r\n\r\n    /** @internal */\r\n    public _parentContainer: Nullable<IAssetContainer> = null;\r\n\r\n    /**\r\n     * Specifies if the skeleton should be serialized\r\n     */\r\n    public doNotSerialize = false;\r\n\r\n    private _useTextureToStoreBoneMatrices = true;\r\n    /**\r\n     * Gets or sets a boolean indicating that bone matrices should be stored as a texture instead of using shader uniforms (default is true).\r\n     * Please note that this option is not available if the hardware does not support it\r\n     */\r\n    public get useTextureToStoreBoneMatrices(): boolean {\r\n        return this._useTextureToStoreBoneMatrices;\r\n    }\r\n\r\n    public set useTextureToStoreBoneMatrices(value: boolean) {\r\n        this._useTextureToStoreBoneMatrices = value;\r\n        this._markAsDirty();\r\n    }\r\n\r\n    private _animationPropertiesOverride: Nullable<AnimationPropertiesOverride> = null;\r\n\r\n    /**\r\n     * Gets or sets the animation properties override\r\n     */\r\n    public get animationPropertiesOverride(): Nullable<AnimationPropertiesOverride> {\r\n        if (!this._animationPropertiesOverride) {\r\n            return this._scene.animationPropertiesOverride;\r\n        }\r\n        return this._animationPropertiesOverride;\r\n    }\r\n\r\n    public set animationPropertiesOverride(value: Nullable<AnimationPropertiesOverride>) {\r\n        this._animationPropertiesOverride = value;\r\n    }\r\n\r\n    /**\r\n     * List of inspectable custom properties (used by the Inspector)\r\n     * @see https://doc.babylonjs.com/toolsAndResources/inspector#extensibility\r\n     */\r\n    public inspectableCustomProperties: IInspectable[];\r\n\r\n    // Events\r\n\r\n    /**\r\n     * An observable triggered before computing the skeleton's matrices\r\n     */\r\n    public onBeforeComputeObservable = new Observable<Skeleton>();\r\n\r\n    /**\r\n     * Gets a boolean indicating that the skeleton effectively stores matrices into a texture\r\n     */\r\n    public get isUsingTextureForMatrices() {\r\n        return this.useTextureToStoreBoneMatrices && this._canUseTextureForBones;\r\n    }\r\n\r\n    /**\r\n     * Gets the unique ID of this skeleton\r\n     */\r\n    public get uniqueId(): number {\r\n        return this._uniqueId;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the skeleton\r\n     */\r\n    public metadata: any = null;\r\n\r\n    /**\r\n     * Creates a new skeleton\r\n     * @param name defines the skeleton name\r\n     * @param id defines the skeleton Id\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(\r\n        /** defines the skeleton name */\r\n        public name: string,\r\n        /** defines the skeleton Id */\r\n        public id: string,\r\n        scene: Scene\r\n    ) {\r\n        this.bones = [];\r\n\r\n        this._scene = scene || EngineStore.LastCreatedScene;\r\n        this._uniqueId = this._scene.getUniqueId();\r\n\r\n        this._scene.addSkeleton(this);\r\n\r\n        //make sure it will recalculate the matrix next time prepare is called.\r\n        this._isDirty = true;\r\n\r\n        const engineCaps = this._scene.getEngine().getCaps();\r\n        this._canUseTextureForBones = engineCaps.textureFloat && engineCaps.maxVertexTextureImageUnits > 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the current object class name.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"Skeleton\";\r\n    }\r\n\r\n    /**\r\n     * Returns an array containing the root bones\r\n     * @returns an array containing the root bones\r\n     */\r\n    public getChildren(): Array<Bone> {\r\n        return this.bones.filter((b) => !b.getParent());\r\n    }\r\n\r\n    // Members\r\n    /**\r\n     * Gets the list of transform matrices to send to shaders (one matrix per bone)\r\n     * @param mesh defines the mesh to use to get the root matrix (if needInitialSkinMatrix === true)\r\n     * @returns a Float32Array containing matrices data\r\n     */\r\n    public getTransformMatrices(mesh: Nullable<AbstractMesh>): Float32Array {\r\n        if (this.needInitialSkinMatrix) {\r\n            if (!mesh) {\r\n                throw new Error(\"getTransformMatrices: When using the needInitialSkinMatrix flag, a mesh must be provided\");\r\n            }\r\n            if (!mesh._bonesTransformMatrices) {\r\n                this.prepare(true);\r\n            }\r\n\r\n            return mesh._bonesTransformMatrices!;\r\n        }\r\n\r\n        if (!this._transformMatrices || this._isDirty) {\r\n            this.prepare(!this._transformMatrices);\r\n        }\r\n\r\n        return this._transformMatrices;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of transform matrices to send to shaders inside a texture (one matrix per bone)\r\n     * @param mesh defines the mesh to use to get the root matrix (if needInitialSkinMatrix === true)\r\n     * @returns a raw texture containing the data\r\n     */\r\n    public getTransformMatrixTexture(mesh: AbstractMesh): Nullable<RawTexture> {\r\n        if (this.needInitialSkinMatrix && mesh._transformMatrixTexture) {\r\n            return mesh._transformMatrixTexture;\r\n        }\r\n\r\n        return this._transformMatrixTexture;\r\n    }\r\n\r\n    /**\r\n     * Gets the current hosting scene\r\n     * @returns a scene object\r\n     */\r\n    public getScene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    // Methods\r\n\r\n    /**\r\n     * Gets a string representing the current skeleton data\r\n     * @param fullDetails defines a boolean indicating if we want a verbose version\r\n     * @returns a string representing the current skeleton data\r\n     */\r\n    public toString(fullDetails?: boolean): string {\r\n        let ret = `Name: ${this.name}, nBones: ${this.bones.length}`;\r\n        ret += `, nAnimationRanges: ${this._ranges ? Object.keys(this._ranges).length : \"none\"}`;\r\n        if (fullDetails) {\r\n            ret += \", Ranges: {\";\r\n            let first = true;\r\n            for (const name in this._ranges) {\r\n                if (first) {\r\n                    ret += \", \";\r\n                    first = false;\r\n                }\r\n                ret += name;\r\n            }\r\n            ret += \"}\";\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Get bone's index searching by name\r\n     * @param name defines bone's name to search for\r\n     * @returns the indice of the bone. Returns -1 if not found\r\n     */\r\n    public getBoneIndexByName(name: string): number {\r\n        for (let boneIndex = 0, cache = this.bones.length; boneIndex < cache; boneIndex++) {\r\n            if (this.bones[boneIndex].name === name) {\r\n                return boneIndex;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * Create a new animation range\r\n     * @param name defines the name of the range\r\n     * @param from defines the start key\r\n     * @param to defines the end key\r\n     */\r\n    public createAnimationRange(name: string, from: number, to: number): void {\r\n        // check name not already in use\r\n        if (!this._ranges[name]) {\r\n            this._ranges[name] = new AnimationRange(name, from, to);\r\n            for (let i = 0, nBones = this.bones.length; i < nBones; i++) {\r\n                if (this.bones[i].animations[0]) {\r\n                    this.bones[i].animations[0].createRange(name, from, to);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete a specific animation range\r\n     * @param name defines the name of the range\r\n     * @param deleteFrames defines if frames must be removed as well\r\n     */\r\n    public deleteAnimationRange(name: string, deleteFrames = true): void {\r\n        for (let i = 0, nBones = this.bones.length; i < nBones; i++) {\r\n            if (this.bones[i].animations[0]) {\r\n                this.bones[i].animations[0].deleteRange(name, deleteFrames);\r\n            }\r\n        }\r\n        this._ranges[name] = null; // said much faster than 'delete this._range[name]'\r\n    }\r\n\r\n    /**\r\n     * Gets a specific animation range\r\n     * @param name defines the name of the range to look for\r\n     * @returns the requested animation range or null if not found\r\n     */\r\n    public getAnimationRange(name: string): Nullable<AnimationRange> {\r\n        return this._ranges[name] || null;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of all animation ranges defined on this skeleton\r\n     * @returns an array\r\n     */\r\n    public getAnimationRanges(): Nullable<AnimationRange>[] {\r\n        const animationRanges: Nullable<AnimationRange>[] = [];\r\n        let name: string;\r\n        for (name in this._ranges) {\r\n            animationRanges.push(this._ranges[name]);\r\n        }\r\n        return animationRanges;\r\n    }\r\n\r\n    /**\r\n     * Copy animation range from a source skeleton.\r\n     * This is not for a complete retargeting, only between very similar skeleton's with only possible bone length differences\r\n     * @param source defines the source skeleton\r\n     * @param name defines the name of the range to copy\r\n     * @param rescaleAsRequired defines if rescaling must be applied if required\r\n     * @returns true if operation was successful\r\n     */\r\n    public copyAnimationRange(source: Skeleton, name: string, rescaleAsRequired = false): boolean {\r\n        if (this._ranges[name] || !source.getAnimationRange(name)) {\r\n            return false;\r\n        }\r\n        let ret = true;\r\n        const frameOffset = this._getHighestAnimationFrame() + 1;\r\n\r\n        // make a dictionary of source skeleton's bones, so exact same order or doubly nested loop is not required\r\n        const boneDict: { [key: string]: Bone } = {};\r\n        const sourceBones = source.bones;\r\n        let nBones: number;\r\n        let i: number;\r\n        for (i = 0, nBones = sourceBones.length; i < nBones; i++) {\r\n            boneDict[sourceBones[i].name] = sourceBones[i];\r\n        }\r\n\r\n        if (this.bones.length !== sourceBones.length) {\r\n            Logger.Warn(`copyAnimationRange: this rig has ${this.bones.length} bones, while source as ${sourceBones.length}`);\r\n            ret = false;\r\n        }\r\n\r\n        const skelDimensionsRatio = rescaleAsRequired && this.dimensionsAtRest && source.dimensionsAtRest ? this.dimensionsAtRest.divide(source.dimensionsAtRest) : null;\r\n\r\n        for (i = 0, nBones = this.bones.length; i < nBones; i++) {\r\n            const boneName = this.bones[i].name;\r\n            const sourceBone = boneDict[boneName];\r\n            if (sourceBone) {\r\n                ret = ret && this.bones[i].copyAnimationRange(sourceBone, name, frameOffset, rescaleAsRequired, skelDimensionsRatio);\r\n            } else {\r\n                Logger.Warn(\"copyAnimationRange: not same rig, missing source bone \" + boneName);\r\n                ret = false;\r\n            }\r\n        }\r\n        // do not call createAnimationRange(), since it also is done to bones, which was already done\r\n        const range = source.getAnimationRange(name);\r\n        if (range) {\r\n            this._ranges[name] = new AnimationRange(name, range.from + frameOffset, range.to + frameOffset);\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Forces the skeleton to go to rest pose\r\n     */\r\n    public returnToRest(): void {\r\n        for (const bone of this.bones) {\r\n            if (bone._index !== -1) {\r\n                bone.returnToRest();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _getHighestAnimationFrame(): number {\r\n        let ret = 0;\r\n        for (let i = 0, nBones = this.bones.length; i < nBones; i++) {\r\n            if (this.bones[i].animations[0]) {\r\n                const highest = this.bones[i].animations[0].getHighestFrame();\r\n                if (ret < highest) {\r\n                    ret = highest;\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Begin a specific animation range\r\n     * @param name defines the name of the range to start\r\n     * @param loop defines if looping must be turned on (false by default)\r\n     * @param speedRatio defines the speed ratio to apply (1 by default)\r\n     * @param onAnimationEnd defines a callback which will be called when animation will end\r\n     * @returns a new animatable\r\n     */\r\n    public beginAnimation(name: string, loop?: boolean, speedRatio?: number, onAnimationEnd?: () => void): Nullable<Animatable> {\r\n        const range = this.getAnimationRange(name);\r\n\r\n        if (!range) {\r\n            return null;\r\n        }\r\n\r\n        return this._scene.beginAnimation(this, range.from, range.to, loop, speedRatio, onAnimationEnd);\r\n    }\r\n\r\n    /**\r\n     * Convert the keyframes for a range of animation on a skeleton to be relative to a given reference frame.\r\n     * @param skeleton defines the Skeleton containing the animation range to convert\r\n     * @param referenceFrame defines the frame that keyframes in the range will be relative to\r\n     * @param range defines the name of the AnimationRange belonging to the Skeleton to convert\r\n     * @returns the original skeleton\r\n     */\r\n    public static MakeAnimationAdditive(skeleton: Skeleton, referenceFrame = 0, range: string): Nullable<Skeleton> {\r\n        const rangeValue = skeleton.getAnimationRange(range);\r\n\r\n        // We can't make a range additive if it doesn't exist\r\n        if (!rangeValue) {\r\n            return null;\r\n        }\r\n\r\n        // Find any current scene-level animatable belonging to the target that matches the range\r\n        const sceneAnimatables = skeleton._scene.getAllAnimatablesByTarget(skeleton);\r\n        let rangeAnimatable: Nullable<Animatable> = null;\r\n\r\n        for (let index = 0; index < sceneAnimatables.length; index++) {\r\n            const sceneAnimatable = sceneAnimatables[index];\r\n\r\n            if (sceneAnimatable.fromFrame === rangeValue?.from && sceneAnimatable.toFrame === rangeValue?.to) {\r\n                rangeAnimatable = sceneAnimatable;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Convert the animations belonging to the skeleton to additive keyframes\r\n        const animatables = skeleton.getAnimatables();\r\n\r\n        for (let index = 0; index < animatables.length; index++) {\r\n            const animatable = animatables[index];\r\n            const animations = animatable.animations;\r\n\r\n            if (!animations) {\r\n                continue;\r\n            }\r\n\r\n            for (let animIndex = 0; animIndex < animations.length; animIndex++) {\r\n                Animation.MakeAnimationAdditive(animations[animIndex], referenceFrame, range);\r\n            }\r\n        }\r\n\r\n        // Mark the scene-level animatable as additive\r\n        if (rangeAnimatable) {\r\n            rangeAnimatable.isAdditive = true;\r\n        }\r\n\r\n        return skeleton;\r\n    }\r\n\r\n    /** @internal */\r\n    public _markAsDirty(): void {\r\n        this._isDirty = true;\r\n        this._absoluteTransformIsDirty = true;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _registerMeshWithPoseMatrix(mesh: AbstractMesh): void {\r\n        this._meshesWithPoseMatrix.push(mesh);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _unregisterMeshWithPoseMatrix(mesh: AbstractMesh): void {\r\n        const index = this._meshesWithPoseMatrix.indexOf(mesh);\r\n\r\n        if (index > -1) {\r\n            this._meshesWithPoseMatrix.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    private _computeTransformMatrices(targetMatrix: Float32Array, initialSkinMatrix: Nullable<Matrix>): void {\r\n        this.onBeforeComputeObservable.notifyObservers(this);\r\n\r\n        for (let index = 0; index < this.bones.length; index++) {\r\n            const bone = this.bones[index];\r\n            bone._childUpdateId++;\r\n            const parentBone = bone.getParent();\r\n\r\n            if (parentBone) {\r\n                bone.getLocalMatrix().multiplyToRef(parentBone.getFinalMatrix(), bone.getFinalMatrix());\r\n            } else {\r\n                if (initialSkinMatrix) {\r\n                    bone.getLocalMatrix().multiplyToRef(initialSkinMatrix, bone.getFinalMatrix());\r\n                } else {\r\n                    bone.getFinalMatrix().copyFrom(bone.getLocalMatrix());\r\n                }\r\n            }\r\n\r\n            if (bone._index !== -1) {\r\n                const mappedIndex = bone._index === null ? index : bone._index;\r\n                bone.getAbsoluteInverseBindMatrix().multiplyToArray(bone.getFinalMatrix(), targetMatrix, mappedIndex * 16);\r\n            }\r\n        }\r\n\r\n        this._identity.copyToArray(targetMatrix, this.bones.length * 16);\r\n    }\r\n\r\n    /**\r\n     * Build all resources required to render a skeleton\r\n     * @param dontCheckFrameId defines a boolean indicating if prepare should be run without checking first the current frame id (default: false)\r\n     */\r\n    public prepare(dontCheckFrameId = false): void {\r\n        if (!dontCheckFrameId) {\r\n            const currentRenderId = this.getScene().getRenderId();\r\n            if (this._currentRenderId === currentRenderId) {\r\n                return;\r\n            }\r\n            this._currentRenderId = currentRenderId;\r\n        }\r\n\r\n        // Update the local matrix of bones with linked transform nodes.\r\n        if (this._numBonesWithLinkedTransformNode > 0) {\r\n            for (const bone of this.bones) {\r\n                if (bone._linkedTransformNode) {\r\n                    const node = bone._linkedTransformNode;\r\n                    bone.position = node.position;\r\n                    if (node.rotationQuaternion) {\r\n                        bone.rotationQuaternion = node.rotationQuaternion;\r\n                    } else {\r\n                        bone.rotation = node.rotation;\r\n                    }\r\n                    bone.scaling = node.scaling;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.needInitialSkinMatrix) {\r\n            for (const mesh of this._meshesWithPoseMatrix) {\r\n                const poseMatrix = mesh.getPoseMatrix();\r\n\r\n                let needsUpdate = this._isDirty;\r\n                if (!mesh._bonesTransformMatrices || mesh._bonesTransformMatrices.length !== 16 * (this.bones.length + 1)) {\r\n                    mesh._bonesTransformMatrices = new Float32Array(16 * (this.bones.length + 1));\r\n                    needsUpdate = true;\r\n                }\r\n\r\n                if (!needsUpdate) {\r\n                    continue;\r\n                }\r\n\r\n                if (this._synchronizedWithMesh !== mesh) {\r\n                    this._synchronizedWithMesh = mesh;\r\n\r\n                    // Prepare bones\r\n                    for (const bone of this.bones) {\r\n                        if (!bone.getParent()) {\r\n                            const matrix = bone.getBindMatrix();\r\n                            matrix.multiplyToRef(poseMatrix, TmpVectors.Matrix[1]);\r\n                            bone._updateAbsoluteBindMatrices(TmpVectors.Matrix[1]);\r\n                        }\r\n                    }\r\n\r\n                    if (this.isUsingTextureForMatrices) {\r\n                        const textureWidth = (this.bones.length + 1) * 4;\r\n                        if (!mesh._transformMatrixTexture || mesh._transformMatrixTexture.getSize().width !== textureWidth) {\r\n                            if (mesh._transformMatrixTexture) {\r\n                                mesh._transformMatrixTexture.dispose();\r\n                            }\r\n\r\n                            mesh._transformMatrixTexture = RawTexture.CreateRGBATexture(\r\n                                mesh._bonesTransformMatrices,\r\n                                (this.bones.length + 1) * 4,\r\n                                1,\r\n                                this._scene,\r\n                                false,\r\n                                false,\r\n                                Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n                                Constants.TEXTURETYPE_FLOAT\r\n                            );\r\n                        }\r\n                    }\r\n                }\r\n\r\n                this._computeTransformMatrices(mesh._bonesTransformMatrices, poseMatrix);\r\n\r\n                if (this.isUsingTextureForMatrices && mesh._transformMatrixTexture) {\r\n                    mesh._transformMatrixTexture.update(mesh._bonesTransformMatrices);\r\n                }\r\n            }\r\n        } else {\r\n            if (!this._isDirty) {\r\n                return;\r\n            }\r\n\r\n            if (!this._transformMatrices || this._transformMatrices.length !== 16 * (this.bones.length + 1)) {\r\n                this._transformMatrices = new Float32Array(16 * (this.bones.length + 1));\r\n\r\n                if (this.isUsingTextureForMatrices) {\r\n                    if (this._transformMatrixTexture) {\r\n                        this._transformMatrixTexture.dispose();\r\n                    }\r\n\r\n                    this._transformMatrixTexture = RawTexture.CreateRGBATexture(\r\n                        this._transformMatrices,\r\n                        (this.bones.length + 1) * 4,\r\n                        1,\r\n                        this._scene,\r\n                        false,\r\n                        false,\r\n                        Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n                        Constants.TEXTURETYPE_FLOAT\r\n                    );\r\n                }\r\n            }\r\n\r\n            this._computeTransformMatrices(this._transformMatrices, null);\r\n\r\n            if (this.isUsingTextureForMatrices && this._transformMatrixTexture) {\r\n                this._transformMatrixTexture.update(this._transformMatrices);\r\n            }\r\n        }\r\n\r\n        this._isDirty = false;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of animatables currently running for this skeleton\r\n     * @returns an array of animatables\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        if (!this._animatables || this._animatables.length !== this.bones.length) {\r\n            this._animatables = [];\r\n\r\n            for (let index = 0; index < this.bones.length; index++) {\r\n                this._animatables.push(this.bones[index]);\r\n            }\r\n        }\r\n\r\n        return this._animatables;\r\n    }\r\n\r\n    /**\r\n     * Clone the current skeleton\r\n     * @param name defines the name of the new skeleton\r\n     * @param id defines the id of the new skeleton\r\n     * @returns the new skeleton\r\n     */\r\n    public clone(name: string, id?: string): Skeleton {\r\n        const result = new Skeleton(name, id || name, this._scene);\r\n\r\n        result.needInitialSkinMatrix = this.needInitialSkinMatrix;\r\n        result.metadata = this.metadata;\r\n\r\n        for (let index = 0; index < this.bones.length; index++) {\r\n            const source = this.bones[index];\r\n            let parentBone = null;\r\n\r\n            const parent = source.getParent();\r\n            if (parent) {\r\n                const parentIndex = this.bones.indexOf(parent);\r\n                parentBone = result.bones[parentIndex];\r\n            }\r\n\r\n            const bone = new Bone(source.name, result, parentBone, source.getBindMatrix().clone(), source.getRestMatrix().clone());\r\n            bone._index = source._index;\r\n\r\n            if (source._linkedTransformNode) {\r\n                bone.linkTransformNode(source._linkedTransformNode);\r\n            }\r\n\r\n            DeepCopier.DeepCopy(source.animations, bone.animations);\r\n        }\r\n\r\n        if (this._ranges) {\r\n            result._ranges = {};\r\n            for (const rangeName in this._ranges) {\r\n                const range = this._ranges[rangeName];\r\n\r\n                if (range) {\r\n                    result._ranges[rangeName] = range.clone();\r\n                }\r\n            }\r\n        }\r\n\r\n        this._isDirty = true;\r\n\r\n        result.prepare(true);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Enable animation blending for this skeleton\r\n     * @param blendingSpeed defines the blending speed to apply\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#animation-blending\r\n     */\r\n    public enableBlending(blendingSpeed = 0.01) {\r\n        for (const bone of this.bones) {\r\n            for (const animation of bone.animations) {\r\n                animation.enableBlending = true;\r\n                animation.blendingSpeed = blendingSpeed;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all resources associated with the current skeleton\r\n     */\r\n    public dispose() {\r\n        this._meshesWithPoseMatrix.length = 0;\r\n        this.metadata = null;\r\n\r\n        // Animations\r\n        this.getScene().stopAnimation(this);\r\n\r\n        // Remove from scene\r\n        this.getScene().removeSkeleton(this);\r\n\r\n        if (this._parentContainer) {\r\n            const index = this._parentContainer.skeletons.indexOf(this);\r\n            if (index > -1) {\r\n                this._parentContainer.skeletons.splice(index, 1);\r\n            }\r\n            this._parentContainer = null;\r\n        }\r\n\r\n        if (this._transformMatrixTexture) {\r\n            this._transformMatrixTexture.dispose();\r\n            this._transformMatrixTexture = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serialize the skeleton in a JSON object\r\n     * @returns a JSON object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.name = this.name;\r\n        serializationObject.id = this.id;\r\n\r\n        if (this.dimensionsAtRest) {\r\n            serializationObject.dimensionsAtRest = this.dimensionsAtRest.asArray();\r\n        }\r\n\r\n        serializationObject.bones = [];\r\n\r\n        serializationObject.needInitialSkinMatrix = this.needInitialSkinMatrix;\r\n\r\n        if (this.metadata) {\r\n            serializationObject.metadata = this.metadata;\r\n        }\r\n\r\n        for (let index = 0; index < this.bones.length; index++) {\r\n            const bone = this.bones[index];\r\n            const parent = bone.getParent();\r\n\r\n            const serializedBone: any = {\r\n                parentBoneIndex: parent ? this.bones.indexOf(parent) : -1,\r\n                index: bone.getIndex(),\r\n                name: bone.name,\r\n                id: bone.id,\r\n                matrix: bone.getBindMatrix().asArray(),\r\n                rest: bone.getRestMatrix().asArray(),\r\n                linkedTransformNodeId: bone.getTransformNode()?.id,\r\n            };\r\n\r\n            serializationObject.bones.push(serializedBone);\r\n\r\n            if (bone.length) {\r\n                serializedBone.length = bone.length;\r\n            }\r\n\r\n            if (bone.metadata) {\r\n                serializedBone.metadata = bone.metadata;\r\n            }\r\n\r\n            if (bone.animations && bone.animations.length > 0) {\r\n                serializedBone.animation = bone.animations[0].serialize();\r\n            }\r\n\r\n            serializationObject.ranges = [];\r\n            for (const name in this._ranges) {\r\n                const source = this._ranges[name];\r\n\r\n                if (!source) {\r\n                    continue;\r\n                }\r\n\r\n                const range: any = {};\r\n                range.name = name;\r\n                range.from = source.from;\r\n                range.to = source.to;\r\n                serializationObject.ranges.push(range);\r\n            }\r\n        }\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a new skeleton from serialized data\r\n     * @param parsedSkeleton defines the serialized data\r\n     * @param scene defines the hosting scene\r\n     * @returns a new skeleton\r\n     */\r\n    public static Parse(parsedSkeleton: any, scene: Scene): Skeleton {\r\n        const skeleton = new Skeleton(parsedSkeleton.name, parsedSkeleton.id, scene);\r\n        if (parsedSkeleton.dimensionsAtRest) {\r\n            skeleton.dimensionsAtRest = Vector3.FromArray(parsedSkeleton.dimensionsAtRest);\r\n        }\r\n\r\n        skeleton.needInitialSkinMatrix = parsedSkeleton.needInitialSkinMatrix;\r\n\r\n        if (parsedSkeleton.metadata) {\r\n            skeleton.metadata = parsedSkeleton.metadata;\r\n        }\r\n\r\n        let index: number;\r\n        for (index = 0; index < parsedSkeleton.bones.length; index++) {\r\n            const parsedBone = parsedSkeleton.bones[index];\r\n            const parsedBoneIndex = parsedSkeleton.bones[index].index;\r\n            let parentBone = null;\r\n            if (parsedBone.parentBoneIndex > -1) {\r\n                parentBone = skeleton.bones[parsedBone.parentBoneIndex];\r\n            }\r\n\r\n            const rest: Nullable<Matrix> = parsedBone.rest ? Matrix.FromArray(parsedBone.rest) : null;\r\n            const bone = new Bone(parsedBone.name, skeleton, parentBone, Matrix.FromArray(parsedBone.matrix), rest, null, parsedBoneIndex);\r\n\r\n            if (parsedBone.id !== undefined && parsedBone.id !== null) {\r\n                bone.id = parsedBone.id;\r\n            }\r\n\r\n            if (parsedBone.length) {\r\n                bone.length = parsedBone.length;\r\n            }\r\n\r\n            if (parsedBone.metadata) {\r\n                bone.metadata = parsedBone.metadata;\r\n            }\r\n\r\n            if (parsedBone.animation) {\r\n                bone.animations.push(Animation.Parse(parsedBone.animation));\r\n            }\r\n\r\n            if (parsedBone.linkedTransformNodeId !== undefined && parsedBone.linkedTransformNodeId !== null) {\r\n                skeleton._hasWaitingData = true;\r\n                bone._waitingTransformNodeId = parsedBone.linkedTransformNodeId;\r\n            }\r\n        }\r\n\r\n        // placed after bones, so createAnimationRange can cascade down\r\n        if (parsedSkeleton.ranges) {\r\n            for (index = 0; index < parsedSkeleton.ranges.length; index++) {\r\n                const data = parsedSkeleton.ranges[index];\r\n                skeleton.createAnimationRange(data.name, data.from, data.to);\r\n            }\r\n        }\r\n        return skeleton;\r\n    }\r\n\r\n    /**\r\n     * Compute all node absolute matrices\r\n     * @param forceUpdate defines if computation must be done even if cache is up to date\r\n     */\r\n    public computeAbsoluteMatrices(forceUpdate = false): void {\r\n        if (this._absoluteTransformIsDirty || forceUpdate) {\r\n            this.bones[0].computeAbsoluteMatrices();\r\n            this._absoluteTransformIsDirty = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compute all node absolute matrices\r\n     * @param forceUpdate defines if computation must be done even if cache is up to date\r\n     * @deprecated Please use computeAbsoluteMatrices instead\r\n     */\r\n    public computeAbsoluteTransforms(forceUpdate = false): void {\r\n        this.computeAbsoluteMatrices(forceUpdate);\r\n    }\r\n\r\n    /**\r\n     * Gets the root pose matrix\r\n     * @returns a matrix\r\n     */\r\n    public getPoseMatrix(): Nullable<Matrix> {\r\n        let poseMatrix: Nullable<Matrix> = null;\r\n\r\n        if (this._meshesWithPoseMatrix.length > 0) {\r\n            poseMatrix = this._meshesWithPoseMatrix[0].getPoseMatrix();\r\n        }\r\n\r\n        return poseMatrix;\r\n    }\r\n\r\n    /**\r\n     * Sorts bones per internal index\r\n     */\r\n    public sortBones(): void {\r\n        const bones: Bone[] = [];\r\n        const visited = new Array<boolean>(this.bones.length);\r\n        for (let index = 0; index < this.bones.length; index++) {\r\n            this._sortBones(index, bones, visited);\r\n        }\r\n\r\n        this.bones = bones;\r\n    }\r\n\r\n    private _sortBones(index: number, bones: Bone[], visited: boolean[]): void {\r\n        if (visited[index]) {\r\n            return;\r\n        }\r\n\r\n        visited[index] = true;\r\n\r\n        const bone = this.bones[index];\r\n        if (!bone) {\r\n            return;\r\n        }\r\n\r\n        if (bone._index === undefined) {\r\n            bone._index = index;\r\n        }\r\n\r\n        const parentBone = bone.getParent();\r\n        if (parentBone) {\r\n            this._sortBones(this.bones.indexOf(parentBone), bones, visited);\r\n        }\r\n\r\n        bones.push(bone);\r\n    }\r\n\r\n    /**\r\n     * Set the current local matrix as the restPose for all bones in the skeleton.\r\n     */\r\n    public setCurrentPoseAsRest(): void {\r\n        for (const b of this.bones) {\r\n            b.setCurrentPoseAsRest();\r\n        }\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { serialize, serializeAsColor3, expandToProperty, serializeAsFresnelParameters, serializeAsTexture } from \"../Misc/decorators\";\r\nimport { SmartArray } from \"../Misc/smartArray\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\n\r\nimport type { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport type { Matrix } from \"../Maths/math.vector\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport { PrePassConfiguration } from \"./prePassConfiguration\";\r\n\r\nimport { ImageProcessingDefinesMixin } from \"./imageProcessingConfiguration.defines\";\r\nimport { ImageProcessingConfiguration } from \"./imageProcessingConfiguration\";\r\nimport type { FresnelParameters } from \"./fresnelParameters\";\r\nimport type { ICustomShaderNameResolveOptions } from \"../Materials/material\";\r\nimport { Material } from \"../Materials/material\";\r\nimport { MaterialPluginEvent } from \"./materialPluginEvent\";\r\nimport { MaterialDefines } from \"../Materials/materialDefines\";\r\nimport { PushMaterial } from \"./pushMaterial\";\r\n\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport type { CubeTexture } from \"../Materials/Textures/cubeTexture\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { MaterialFlags } from \"./materialFlags\";\r\n\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { EffectFallbacks } from \"./effectFallbacks\";\r\nimport type { Effect, IEffectCreationOptions } from \"./effect\";\r\nimport { DetailMapConfiguration } from \"./material.detailMapConfiguration\";\r\nimport { AddClipPlaneUniforms, BindClipPlane } from \"./clipPlaneMaterialHelper\";\r\nimport {\r\n    BindBonesParameters,\r\n    BindFogParameters,\r\n    BindLights,\r\n    BindLogDepth,\r\n    BindMorphTargetParameters,\r\n    BindTextureMatrix,\r\n    BindIBLParameters,\r\n    HandleFallbacksForShadows,\r\n    PrepareAttributesForBakedVertexAnimation,\r\n    PrepareAttributesForBones,\r\n    PrepareAttributesForInstances,\r\n    PrepareAttributesForMorphTargets,\r\n    PrepareDefinesForAttributes,\r\n    PrepareDefinesForFrameBoundValues,\r\n    PrepareDefinesForLights,\r\n    PrepareDefinesForIBL,\r\n    PrepareDefinesForMergedUV,\r\n    PrepareDefinesForMisc,\r\n    PrepareDefinesForMultiview,\r\n    PrepareDefinesForOIT,\r\n    PrepareDefinesForPrePass,\r\n    PrepareUniformsAndSamplersForIBL,\r\n    PrepareUniformsAndSamplersList,\r\n    PrepareUniformLayoutForIBL,\r\n} from \"./materialHelper.functions\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport { ShaderLanguage } from \"./shaderLanguage\";\r\nimport { MaterialHelperGeometryRendering } from \"./materialHelper.geometryrendering\";\r\nimport { UVDefinesMixin } from \"./uv.defines\";\r\nimport { ImageProcessingMixin } from \"./imageProcessing\";\r\n\r\nconst onCreatedEffectParameters = { effect: null as unknown as Effect, subMesh: null as unknown as Nullable<SubMesh> };\r\n\r\nclass StandardMaterialDefinesBase extends UVDefinesMixin(MaterialDefines) {}\r\n\r\n/** @internal */\r\nexport class StandardMaterialDefines extends ImageProcessingDefinesMixin(StandardMaterialDefinesBase) {\r\n    public DIFFUSE = false;\r\n    public DIFFUSEDIRECTUV = 0;\r\n    public BAKED_VERTEX_ANIMATION_TEXTURE = false;\r\n    public AMBIENT = false;\r\n    public AMBIENTDIRECTUV = 0;\r\n    public OPACITY = false;\r\n    public OPACITYDIRECTUV = 0;\r\n    public OPACITYRGB = false;\r\n    public REFLECTION = false;\r\n    public EMISSIVE = false;\r\n    public EMISSIVEDIRECTUV = 0;\r\n    public SPECULAR = false;\r\n    public SPECULARDIRECTUV = 0;\r\n    public BUMP = false;\r\n    public BUMPDIRECTUV = 0;\r\n    public PARALLAX = false;\r\n    public PARALLAX_RHS = false;\r\n    public PARALLAXOCCLUSION = false;\r\n    public SPECULAROVERALPHA = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public ALPHAFROMDIFFUSE = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public SPECULARTERM = false;\r\n    public DIFFUSEFRESNEL = false;\r\n    public OPACITYFRESNEL = false;\r\n    public REFLECTIONFRESNEL = false;\r\n    public REFRACTIONFRESNEL = false;\r\n    public EMISSIVEFRESNEL = false;\r\n    public FRESNEL = false;\r\n    public NORMAL = false;\r\n    public TANGENT = false;\r\n    public VERTEXCOLOR = false;\r\n    public VERTEXALPHA = false;\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public BONETEXTURE = false;\r\n    public BONES_VELOCITY_ENABLED = false;\r\n    public INSTANCES = false;\r\n    public THIN_INSTANCES = false;\r\n    public INSTANCESCOLOR = false;\r\n    public GLOSSINESS = false;\r\n    public ROUGHNESS = false;\r\n    public EMISSIVEASILLUMINATION = false;\r\n    public LINKEMISSIVEWITHDIFFUSE = false;\r\n    public REFLECTIONFRESNELFROMSPECULAR = false;\r\n    public LIGHTMAP = false;\r\n    public LIGHTMAPDIRECTUV = 0;\r\n    public OBJECTSPACE_NORMALMAP = false;\r\n    public USELIGHTMAPASSHADOWMAP = false;\r\n    public REFLECTIONMAP_3D = false;\r\n    public REFLECTIONMAP_SPHERICAL = false;\r\n    public REFLECTIONMAP_PLANAR = false;\r\n    public REFLECTIONMAP_CUBIC = false;\r\n    public USE_LOCAL_REFLECTIONMAP_CUBIC = false;\r\n    public USE_LOCAL_REFRACTIONMAP_CUBIC = false;\r\n    public REFLECTIONMAP_PROJECTION = false;\r\n    public REFLECTIONMAP_SKYBOX = false;\r\n    public REFLECTIONMAP_EXPLICIT = false;\r\n    public REFLECTIONMAP_EQUIRECTANGULAR = false;\r\n    public REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\r\n    public REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\r\n    public REFLECTIONMAP_OPPOSITEZ = false;\r\n    public INVERTCUBICMAP = false;\r\n    public LOGARITHMICDEPTH = false;\r\n    public REFRACTION = false;\r\n    public REFRACTIONMAP_3D = false;\r\n    public REFLECTIONOVERALPHA = false;\r\n    public TWOSIDEDLIGHTING = false;\r\n    public SHADOWFLOAT = false;\r\n    public MORPHTARGETS = false;\r\n    public MORPHTARGETS_POSITION = false;\r\n    public MORPHTARGETS_NORMAL = false;\r\n    public MORPHTARGETS_TANGENT = false;\r\n    public MORPHTARGETS_UV = false;\r\n    public MORPHTARGETS_UV2 = false;\r\n    public MORPHTARGETS_COLOR = false;\r\n    public MORPHTARGETTEXTURE_HASPOSITIONS = false;\r\n    public MORPHTARGETTEXTURE_HASNORMALS = false;\r\n    public MORPHTARGETTEXTURE_HASTANGENTS = false;\r\n    public MORPHTARGETTEXTURE_HASUVS = false;\r\n    public MORPHTARGETTEXTURE_HASUV2S = false;\r\n    public MORPHTARGETTEXTURE_HASCOLORS = false;\r\n    public NUM_MORPH_INFLUENCERS = 0;\r\n    public MORPHTARGETS_TEXTURE = false;\r\n    public NONUNIFORMSCALING = false; // https://playground.babylonjs.com#V6DWIH\r\n    public PREMULTIPLYALPHA = false; // https://playground.babylonjs.com#LNVJJ7\r\n    public ALPHATEST_AFTERALLALPHACOMPUTATIONS = false;\r\n    public ALPHABLEND = true;\r\n\r\n    public PREPASS = false;\r\n    public PREPASS_COLOR = false;\r\n    public PREPASS_COLOR_INDEX = -1;\r\n    public PREPASS_IRRADIANCE = false;\r\n    public PREPASS_IRRADIANCE_INDEX = -1;\r\n    public PREPASS_ALBEDO = false;\r\n    public PREPASS_ALBEDO_INDEX = -1;\r\n    public PREPASS_ALBEDO_SQRT = false;\r\n    public PREPASS_ALBEDO_SQRT_INDEX = -1;\r\n    public PREPASS_DEPTH = false;\r\n    public PREPASS_DEPTH_INDEX = -1;\r\n    public PREPASS_SCREENSPACE_DEPTH = false;\r\n    public PREPASS_SCREENSPACE_DEPTH_INDEX = -1;\r\n    public PREPASS_NORMALIZED_VIEW_DEPTH = false;\r\n    public PREPASS_NORMALIZED_VIEW_DEPTH_INDEX = -1;\r\n    public PREPASS_NORMAL = false;\r\n    public PREPASS_NORMAL_INDEX = -1;\r\n    public PREPASS_NORMAL_WORLDSPACE = false;\r\n    public PREPASS_WORLD_NORMAL = false;\r\n    public PREPASS_WORLD_NORMAL_INDEX = -1;\r\n    public PREPASS_POSITION = false;\r\n    public PREPASS_POSITION_INDEX = -1;\r\n    public PREPASS_LOCAL_POSITION = false;\r\n    public PREPASS_LOCAL_POSITION_INDEX = -1;\r\n    public PREPASS_VELOCITY = false;\r\n    public PREPASS_VELOCITY_INDEX = -1;\r\n    public PREPASS_VELOCITY_LINEAR = false;\r\n    public PREPASS_VELOCITY_LINEAR_INDEX = -1;\r\n    public PREPASS_REFLECTIVITY = false;\r\n    public PREPASS_REFLECTIVITY_INDEX = -1;\r\n    public SCENE_MRT_COUNT = 0;\r\n\r\n    public RGBDLIGHTMAP = false;\r\n    public RGBDREFLECTION = false;\r\n    public RGBDREFRACTION = false;\r\n    public MULTIVIEW = false;\r\n    public ORDER_INDEPENDENT_TRANSPARENCY = false;\r\n    public ORDER_INDEPENDENT_TRANSPARENCY_16BITS = false;\r\n    public CAMERA_ORTHOGRAPHIC = false;\r\n    public CAMERA_PERSPECTIVE = false;\r\n    public AREALIGHTSUPPORTED = true;\r\n    public USE_VERTEX_PULLING = false;\r\n\r\n    public CLUSTLIGHT_SLICES = 0;\r\n    public CLUSTLIGHT_BATCH = 0;\r\n\r\n    /**\r\n     * If the reflection texture on this material is in linear color space\r\n     * @internal\r\n     */\r\n    public IS_REFLECTION_LINEAR = false;\r\n    /**\r\n     * If the refraction texture on this material is in linear color space\r\n     * @internal\r\n     */\r\n    public IS_REFRACTION_LINEAR = false;\r\n\r\n    public DECAL_AFTER_DETAIL = false;\r\n\r\n    /**\r\n     * Initializes the Standard Material defines.\r\n     * @param externalProperties The external properties\r\n     */\r\n    constructor(externalProperties?: { [name: string]: { type: string; default: any } }) {\r\n        super(externalProperties);\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\nclass StandardMaterialBase extends ImageProcessingMixin(PushMaterial) {}\r\n/**\r\n * This is the default material used in Babylon. It is the best trade off between quality\r\n * and performances.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction\r\n */\r\nexport class StandardMaterial extends StandardMaterialBase {\r\n    /**\r\n     * Force all the standard materials to compile to glsl even on WebGPU engines.\r\n     * False by default. This is mostly meant for backward compatibility.\r\n     */\r\n    public static ForceGLSL = false;\r\n\r\n    @serializeAsTexture(\"diffuseTexture\")\r\n    private _diffuseTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * The basic texture of the material as viewed under a light.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public diffuseTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"ambientTexture\")\r\n    private _ambientTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * AKA Occlusion Texture in other nomenclature, it helps adding baked shadows into your material.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public ambientTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"opacityTexture\")\r\n    private _opacityTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define the transparency of the material from a texture.\r\n     * The final alpha value can be read either from the red channel (if texture.getAlphaFromRGB is false)\r\n     * or from the luminance or the current texel (if texture.getAlphaFromRGB is true)\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public opacityTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"reflectionTexture\")\r\n    private _reflectionTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define the texture used to display the reflection.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public reflectionTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"emissiveTexture\")\r\n    private _emissiveTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define texture of the material as if self lit.\r\n     * This will be mixed in the final result even in the absence of light.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public emissiveTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"specularTexture\")\r\n    private _specularTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define how the color and intensity of the highlight given by the light in the material.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public specularTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"bumpTexture\")\r\n    private _bumpTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Bump mapping is a technique to simulate bump and dents on a rendered surface.\r\n     * These are made by creating a normal map from an image. The means to do this can be found on the web, a search for 'normal map generator' will bring up free and paid for methods of doing this.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/moreMaterials#bump-map\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public bumpTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"lightmapTexture\")\r\n    private _lightmapTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Complex lighting can be computationally expensive to compute at runtime.\r\n     * To save on computation, lightmaps may be used to store calculated lighting in a texture which will be applied to a given mesh.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction#lightmaps\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public lightmapTexture: Nullable<BaseTexture>;\r\n\r\n    @serializeAsTexture(\"refractionTexture\")\r\n    private _refractionTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define the texture used to display the refraction.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public refractionTexture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * The color of the material lit by the environmental background lighting.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction#ambient-color-example\r\n     */\r\n    @serializeAsColor3(\"ambient\")\r\n    public ambientColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * The basic color of the material as viewed under a light.\r\n     */\r\n    @serializeAsColor3(\"diffuse\")\r\n    public diffuseColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * Define how the color and intensity of the highlight given by the light in the material.\r\n     */\r\n    @serializeAsColor3(\"specular\")\r\n    public specularColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * Define the color of the material as if self lit.\r\n     * This will be mixed in the final result even in the absence of light.\r\n     */\r\n    @serializeAsColor3(\"emissive\")\r\n    public emissiveColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * Defines how sharp are the highlights in the material.\r\n     * The bigger the value the sharper giving a more glossy feeling to the result.\r\n     * Reversely, the smaller the value the blurrier giving a more rough feeling to the result.\r\n     */\r\n    @serialize()\r\n    public specularPower = 64;\r\n\r\n    @serialize(\"useAlphaFromDiffuseTexture\")\r\n    private _useAlphaFromDiffuseTexture = false;\r\n    /**\r\n     * Does the transparency come from the diffuse texture alpha channel.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesAndMiscDirty\")\r\n    public useAlphaFromDiffuseTexture: boolean;\r\n\r\n    @serialize(\"useEmissiveAsIllumination\")\r\n    private _useEmissiveAsIllumination = false;\r\n    /**\r\n     * If true, the emissive value is added into the end result, otherwise it is multiplied in.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useEmissiveAsIllumination: boolean;\r\n\r\n    @serialize(\"linkEmissiveWithDiffuse\")\r\n    private _linkEmissiveWithDiffuse = false;\r\n    /**\r\n     * If true, some kind of energy conservation will prevent the end result to be more than 1 by reducing\r\n     * the emissive level when the final color is close to one.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public linkEmissiveWithDiffuse: boolean;\r\n\r\n    @serialize(\"useSpecularOverAlpha\")\r\n    private _useSpecularOverAlpha = false;\r\n    /**\r\n     * Specifies that the material will keep the specular highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good exemple of that. When sun reflects on it you can not see what is behind.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useSpecularOverAlpha: boolean;\r\n\r\n    @serialize(\"useReflectionOverAlpha\")\r\n    private _useReflectionOverAlpha = false;\r\n    /**\r\n     * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good exemple of that. When the street lights reflects on it you can not see what is behind.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useReflectionOverAlpha: boolean;\r\n\r\n    @serialize(\"disableLighting\")\r\n    private _disableLighting = false;\r\n    /**\r\n     * Does lights from the scene impacts this material.\r\n     * It can be a nice trick for performance to disable lighting on a fully emissive material.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting: boolean;\r\n\r\n    @serialize(\"useObjectSpaceNormalMap\")\r\n    private _useObjectSpaceNormalMap = false;\r\n    /**\r\n     * Allows using an object space normal map (instead of tangent space).\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useObjectSpaceNormalMap: boolean;\r\n\r\n    @serialize(\"useParallax\")\r\n    private _useParallax = false;\r\n    /**\r\n     * Is parallax enabled or not.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/parallaxMapping\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useParallax: boolean;\r\n\r\n    @serialize(\"useParallaxOcclusion\")\r\n    private _useParallaxOcclusion = false;\r\n    /**\r\n     * Is parallax occlusion enabled or not.\r\n     * If true, the outcome is way more realistic than traditional Parallax but you can expect a performance hit that worthes consideration.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/parallaxMapping\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useParallaxOcclusion: boolean;\r\n\r\n    /**\r\n     * Apply a scaling factor that determine which \"depth\" the height map should reprensent. A value between 0.05 and 0.1 is reasonnable in Parallax, you can reach 0.2 using Parallax Occlusion.\r\n     */\r\n    @serialize()\r\n    public parallaxScaleBias = 0.05;\r\n\r\n    @serialize(\"roughness\")\r\n    private _roughness = 0;\r\n    /**\r\n     * Helps to define how blurry the reflections should appears in the material.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public roughness: number;\r\n\r\n    /**\r\n     * In case of refraction, define the value of the index of refraction.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions\r\n     */\r\n    @serialize()\r\n    public indexOfRefraction = 0.98;\r\n\r\n    /**\r\n     * Invert the refraction texture alongside the y axis.\r\n     * It can be useful with procedural textures or probe for instance.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#how-to-obtain-reflections-and-refractions\r\n     */\r\n    @serialize()\r\n    public invertRefractionY = true;\r\n\r\n    /**\r\n     * Defines the alpha limits in alpha test mode.\r\n     */\r\n    @serialize()\r\n    public alphaCutOff = 0.4;\r\n\r\n    @serialize(\"useLightmapAsShadowmap\")\r\n    private _useLightmapAsShadowmap = false;\r\n    /**\r\n     * In case of light mapping, define whether the map contains light or shadow informations.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useLightmapAsShadowmap: boolean;\r\n\r\n    // Fresnel\r\n    @serializeAsFresnelParameters(\"diffuseFresnelParameters\")\r\n    private _diffuseFresnelParameters: FresnelParameters;\r\n    /**\r\n     * Define the diffuse fresnel parameters of the material.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\r\n    public diffuseFresnelParameters: FresnelParameters;\r\n\r\n    @serializeAsFresnelParameters(\"opacityFresnelParameters\")\r\n    private _opacityFresnelParameters: FresnelParameters;\r\n    /**\r\n     * Define the opacity fresnel parameters of the material.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelAndMiscDirty\")\r\n    public opacityFresnelParameters: FresnelParameters;\r\n\r\n    @serializeAsFresnelParameters(\"reflectionFresnelParameters\")\r\n    private _reflectionFresnelParameters: FresnelParameters;\r\n    /**\r\n     * Define the reflection fresnel parameters of the material.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\r\n    public reflectionFresnelParameters: FresnelParameters;\r\n\r\n    @serializeAsFresnelParameters(\"refractionFresnelParameters\")\r\n    private _refractionFresnelParameters: FresnelParameters;\r\n    /**\r\n     * Define the refraction fresnel parameters of the material.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\r\n    public refractionFresnelParameters: FresnelParameters;\r\n\r\n    @serializeAsFresnelParameters(\"emissiveFresnelParameters\")\r\n    private _emissiveFresnelParameters: FresnelParameters;\r\n    /**\r\n     * Define the emissive fresnel parameters of the material.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\r\n    public emissiveFresnelParameters: FresnelParameters;\r\n\r\n    @serialize(\"useReflectionFresnelFromSpecular\")\r\n    private _useReflectionFresnelFromSpecular = false;\r\n    /**\r\n     * If true automatically deducts the fresnels values from the material specularity.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/fresnelParameters\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsFresnelDirty\")\r\n    public useReflectionFresnelFromSpecular: boolean;\r\n\r\n    @serialize(\"useGlossinessFromSpecularMapAlpha\")\r\n    private _useGlossinessFromSpecularMapAlpha = false;\r\n    /**\r\n     * Defines if the glossiness/roughness of the material should be read from the specular map alpha channel\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useGlossinessFromSpecularMapAlpha: boolean;\r\n\r\n    @serialize(\"maxSimultaneousLights\")\r\n    private _maxSimultaneousLights = 4;\r\n    /**\r\n     * Defines the maximum number of lights that can be used in the material\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights: number;\r\n\r\n    @serialize(\"invertNormalMapX\")\r\n    private _invertNormalMapX = false;\r\n    /**\r\n     * If sets to true, x component of normal map value will invert (x = 1.0 - x).\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public invertNormalMapX: boolean;\r\n\r\n    @serialize(\"invertNormalMapY\")\r\n    private _invertNormalMapY = false;\r\n    /**\r\n     * If sets to true, y component of normal map value will invert (y = 1.0 - y).\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public invertNormalMapY: boolean;\r\n\r\n    @serialize(\"twoSidedLighting\")\r\n    private _twoSidedLighting = false;\r\n    /**\r\n     * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public twoSidedLighting: boolean;\r\n\r\n    @serialize(\"applyDecalMapAfterDetailMap\")\r\n    private _applyDecalMapAfterDetailMap = false;\r\n    /**\r\n     * If sets to true, the decal map will be applied after the detail map. Else, it is applied before (default: false)\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public applyDecalMapAfterDetailMap: boolean;\r\n\r\n    private _shadersLoaded = false;\r\n\r\n    /**\r\n     * Defines additional PrePass parameters for the material.\r\n     */\r\n    public readonly prePassConfiguration: PrePassConfiguration;\r\n\r\n    /**\r\n     * Can this material render to prepass\r\n     */\r\n    public override get isPrePassCapable(): boolean {\r\n        return !this.disableDepthWrite;\r\n    }\r\n\r\n    /**\r\n     * Can this material render to several textures at once\r\n     */\r\n    public override get canRenderToMRT() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Defines the detail map parameters for the material.\r\n     */\r\n    public readonly detailMap: DetailMapConfiguration;\r\n\r\n    protected _renderTargets = new SmartArray<RenderTargetTexture>(16);\r\n    protected _globalAmbientColor = new Color3(0, 0, 0);\r\n    protected _cacheHasRenderTargetTextures = false;\r\n\r\n    /**\r\n     * Instantiates a new standard material.\r\n     * This is the default material used in Babylon. It is the best trade off between quality\r\n     * and performances.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/materials_introduction\r\n     * @param name Define the name of the material in the scene\r\n     * @param scene Define the scene the material belong to\r\n     * @param forceGLSL Use the GLSL code generation for the shader (even on WebGPU). Default is false\r\n     */\r\n    constructor(name: string, scene?: Scene, forceGLSL = false) {\r\n        super(name, scene, undefined, forceGLSL || StandardMaterial.ForceGLSL);\r\n\r\n        this.detailMap = new DetailMapConfiguration(this);\r\n\r\n        // Setup the default processing configuration to the scene.\r\n        this._attachImageProcessingConfiguration(null);\r\n        this.prePassConfiguration = new PrePassConfiguration();\r\n\r\n        this.getRenderTargetTextures = (): SmartArray<RenderTargetTexture> => {\r\n            this._renderTargets.reset();\r\n\r\n            if (StandardMaterial.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\r\n                this._renderTargets.push(<RenderTargetTexture>this._reflectionTexture);\r\n            }\r\n\r\n            if (StandardMaterial.RefractionTextureEnabled && this._refractionTexture && this._refractionTexture.isRenderTarget) {\r\n                this._renderTargets.push(<RenderTargetTexture>this._refractionTexture);\r\n            }\r\n\r\n            this._eventInfo.renderTargets = this._renderTargets;\r\n            this._callbackPluginEventFillRenderTargetTextures(this._eventInfo);\r\n\r\n            return this._renderTargets;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that current material needs to register RTT\r\n     */\r\n    public override get hasRenderTargetTextures(): boolean {\r\n        if (StandardMaterial.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\r\n            return true;\r\n        }\r\n\r\n        if (StandardMaterial.RefractionTextureEnabled && this._refractionTexture && this._refractionTexture.isRenderTarget) {\r\n            return true;\r\n        }\r\n\r\n        return this._cacheHasRenderTargetTextures;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name of the material e.g. \"StandardMaterial\"\r\n     * Mainly use in serialization.\r\n     * @returns the class name\r\n     */\r\n    public override getClassName(): string {\r\n        return \"StandardMaterial\";\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material will require alpha blending\r\n     * @returns a boolean specifying if alpha blending is needed\r\n     */\r\n    public override needAlphaBlending(): boolean {\r\n        if (this._hasTransparencyMode) {\r\n            return this._transparencyModeIsBlend;\r\n        }\r\n\r\n        if (this._disableAlphaBlending) {\r\n            return false;\r\n        }\r\n\r\n        return (\r\n            this.alpha < 1.0 ||\r\n            this._opacityTexture != null ||\r\n            this._shouldUseAlphaFromDiffuseTexture() ||\r\n            (this._opacityFresnelParameters && this._opacityFresnelParameters.isEnabled)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Specifies if this material should be rendered in alpha test mode\r\n     * @returns a boolean specifying if an alpha test is needed.\r\n     */\r\n    public override needAlphaTesting(): boolean {\r\n        if (this._hasTransparencyMode) {\r\n            return this._transparencyModeIsTest;\r\n        }\r\n\r\n        return this._hasAlphaChannel() && (this._transparencyMode == null || this._transparencyMode === Material.MATERIAL_ALPHATEST);\r\n    }\r\n\r\n    /**\r\n     * @returns whether or not the alpha value of the diffuse texture should be used for alpha blending.\r\n     */\r\n    protected _shouldUseAlphaFromDiffuseTexture(): boolean {\r\n        return this._diffuseTexture != null && this._diffuseTexture.hasAlpha && this._useAlphaFromDiffuseTexture && this._transparencyMode !== Material.MATERIAL_OPAQUE;\r\n    }\r\n\r\n    /**\r\n     * @returns whether or not there is a usable alpha channel for transparency.\r\n     */\r\n    protected _hasAlphaChannel(): boolean {\r\n        return (this._diffuseTexture != null && this._diffuseTexture.hasAlpha) || this._opacityTexture != null;\r\n    }\r\n\r\n    /**\r\n     * Get the texture used for alpha test purpose.\r\n     * @returns the diffuse texture in case of the standard material.\r\n     */\r\n    public override getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return this._diffuseTexture;\r\n    }\r\n\r\n    /**\r\n     * Get if the submesh is ready to be used and all its information available.\r\n     * Child classes can use it to update shaders\r\n     * @param mesh defines the mesh to check\r\n     * @param subMesh defines which submesh to check\r\n     * @param useInstances specifies that instances should be used\r\n     * @returns a boolean indicating that the submesh is ready or not\r\n     */\r\n    public override isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances: boolean = false): boolean {\r\n        if (!this._uniformBufferLayoutBuilt) {\r\n            this.buildUniformLayout();\r\n        }\r\n\r\n        const drawWrapper = subMesh._drawWrapper;\r\n\r\n        if (drawWrapper.effect && this.isFrozen) {\r\n            if (drawWrapper._wasPreviouslyReady && drawWrapper._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            this._callbackPluginEventGeneric(MaterialPluginEvent.GetDefineNames, this._eventInfo);\r\n            subMesh.materialDefines = new StandardMaterialDefines(this._eventInfo.defineNames);\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        const defines = <StandardMaterialDefines>subMesh.materialDefines;\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Lights\r\n        defines._needNormals = PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\r\n\r\n        // Multiview\r\n        PrepareDefinesForMultiview(scene, defines);\r\n\r\n        // PrePass\r\n        const oit = this.needAlphaBlendingForMesh(mesh) && this.getScene().useOrderIndependentTransparency;\r\n        PrepareDefinesForPrePass(scene, defines, this.canRenderToMRT && !oit);\r\n\r\n        // Order independant transparency\r\n        PrepareDefinesForOIT(scene, defines, oit);\r\n\r\n        MaterialHelperGeometryRendering.PrepareDefines(engine.currentRenderPassId, mesh, defines);\r\n\r\n        // Textures\r\n        if (defines._areTexturesDirty) {\r\n            this._eventInfo.hasRenderTargetTextures = false;\r\n            this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\r\n            this._cacheHasRenderTargetTextures = this._eventInfo.hasRenderTargetTextures;\r\n            defines._needUVs = false;\r\n            for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\r\n                defines[\"MAINUV\" + i] = false;\r\n            }\r\n            if (scene.texturesEnabled) {\r\n                defines.DIFFUSEDIRECTUV = 0;\r\n                defines.BUMPDIRECTUV = 0;\r\n                defines.AMBIENTDIRECTUV = 0;\r\n                defines.OPACITYDIRECTUV = 0;\r\n                defines.EMISSIVEDIRECTUV = 0;\r\n                defines.SPECULARDIRECTUV = 0;\r\n                defines.LIGHTMAPDIRECTUV = 0;\r\n\r\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                    if (!this._diffuseTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        PrepareDefinesForMergedUV(this._diffuseTexture, defines, \"DIFFUSE\");\r\n                    }\r\n                } else {\r\n                    defines.DIFFUSE = false;\r\n                }\r\n\r\n                if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\r\n                    if (!this._ambientTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        PrepareDefinesForMergedUV(this._ambientTexture, defines, \"AMBIENT\");\r\n                    }\r\n                } else {\r\n                    defines.AMBIENT = false;\r\n                }\r\n\r\n                if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\r\n                    if (!this._opacityTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        PrepareDefinesForMergedUV(this._opacityTexture, defines, \"OPACITY\");\r\n                        defines.OPACITYRGB = this._opacityTexture.getAlphaFromRGB;\r\n                    }\r\n                } else {\r\n                    defines.OPACITY = false;\r\n                }\r\n                if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\r\n                    defines.ROUGHNESS = this._roughness > 0;\r\n                    defines.REFLECTIONOVERALPHA = this._useReflectionOverAlpha;\r\n                } else {\r\n                    defines.ROUGHNESS = false;\r\n                    defines.REFLECTIONOVERALPHA = false;\r\n                }\r\n                if (!PrepareDefinesForIBL(scene, this._reflectionTexture, defines)) {\r\n                    return false;\r\n                }\r\n\r\n                if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\r\n                    if (!this._emissiveTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        PrepareDefinesForMergedUV(this._emissiveTexture, defines, \"EMISSIVE\");\r\n                    }\r\n                } else {\r\n                    defines.EMISSIVE = false;\r\n                }\r\n\r\n                if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\r\n                    if (!this._lightmapTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        PrepareDefinesForMergedUV(this._lightmapTexture, defines, \"LIGHTMAP\");\r\n                        defines.USELIGHTMAPASSHADOWMAP = this._useLightmapAsShadowmap;\r\n                        defines.RGBDLIGHTMAP = this._lightmapTexture.isRGBD;\r\n                    }\r\n                } else {\r\n                    defines.LIGHTMAP = false;\r\n                }\r\n\r\n                if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\r\n                    if (!this._specularTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        PrepareDefinesForMergedUV(this._specularTexture, defines, \"SPECULAR\");\r\n                        defines.GLOSSINESS = this._useGlossinessFromSpecularMapAlpha;\r\n                    }\r\n                } else {\r\n                    defines.SPECULAR = false;\r\n                }\r\n\r\n                if (scene.getEngine().getCaps().standardDerivatives && this._bumpTexture && StandardMaterial.BumpTextureEnabled) {\r\n                    // Bump texture can not be not blocking.\r\n                    if (!this._bumpTexture.isReady()) {\r\n                        return false;\r\n                    } else {\r\n                        PrepareDefinesForMergedUV(this._bumpTexture, defines, \"BUMP\");\r\n\r\n                        defines.PARALLAX = this._useParallax;\r\n                        defines.PARALLAX_RHS = scene.useRightHandedSystem;\r\n                        defines.PARALLAXOCCLUSION = this._useParallaxOcclusion;\r\n                    }\r\n\r\n                    defines.OBJECTSPACE_NORMALMAP = this._useObjectSpaceNormalMap;\r\n                } else {\r\n                    defines.BUMP = false;\r\n                    defines.PARALLAX = false;\r\n                    defines.PARALLAX_RHS = false;\r\n                    defines.PARALLAXOCCLUSION = false;\r\n                }\r\n\r\n                if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\r\n                    if (!this._refractionTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    } else {\r\n                        defines._needUVs = true;\r\n                        defines.REFRACTION = true;\r\n\r\n                        defines.REFRACTIONMAP_3D = this._refractionTexture.isCube;\r\n                        defines.RGBDREFRACTION = this._refractionTexture.isRGBD;\r\n                        defines.USE_LOCAL_REFRACTIONMAP_CUBIC = (<any>this._refractionTexture).boundingBoxSize ? true : false;\r\n                    }\r\n                } else {\r\n                    defines.REFRACTION = false;\r\n                }\r\n\r\n                defines.TWOSIDEDLIGHTING = !this._backFaceCulling && this._twoSidedLighting;\r\n            } else {\r\n                defines.DIFFUSE = false;\r\n                defines.AMBIENT = false;\r\n                defines.OPACITY = false;\r\n                defines.REFLECTION = false;\r\n                defines.EMISSIVE = false;\r\n                defines.LIGHTMAP = false;\r\n                defines.BUMP = false;\r\n                defines.REFRACTION = false;\r\n            }\r\n\r\n            defines.ALPHAFROMDIFFUSE = this._shouldUseAlphaFromDiffuseTexture();\r\n\r\n            defines.EMISSIVEASILLUMINATION = this._useEmissiveAsIllumination;\r\n\r\n            defines.LINKEMISSIVEWITHDIFFUSE = this._linkEmissiveWithDiffuse;\r\n\r\n            defines.SPECULAROVERALPHA = this._useSpecularOverAlpha;\r\n\r\n            defines.PREMULTIPLYALPHA = this.alphaMode === Constants.ALPHA_PREMULTIPLIED || this.alphaMode === Constants.ALPHA_PREMULTIPLIED_PORTERDUFF;\r\n\r\n            defines.ALPHATEST_AFTERALLALPHACOMPUTATIONS = this.transparencyMode !== null;\r\n\r\n            defines.ALPHABLEND = this.transparencyMode === null || this.needAlphaBlendingForMesh(mesh); // check on null for backward compatibility\r\n        }\r\n\r\n        this._eventInfo.isReadyForSubMesh = true;\r\n        this._eventInfo.defines = defines;\r\n        this._eventInfo.subMesh = subMesh;\r\n        this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\r\n\r\n        if (!this._eventInfo.isReadyForSubMesh) {\r\n            return false;\r\n        }\r\n\r\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\r\n            if (!this._imageProcessingConfiguration.isReady()) {\r\n                return false;\r\n            }\r\n\r\n            this._imageProcessingConfiguration.prepareDefines(defines);\r\n\r\n            defines.IS_REFLECTION_LINEAR = this.reflectionTexture != null && !this.reflectionTexture.gammaSpace;\r\n            defines.IS_REFRACTION_LINEAR = this.refractionTexture != null && !this.refractionTexture.gammaSpace;\r\n        }\r\n\r\n        if (defines._areFresnelDirty) {\r\n            if (StandardMaterial.FresnelEnabled) {\r\n                // Fresnel\r\n                if (\r\n                    this._diffuseFresnelParameters ||\r\n                    this._opacityFresnelParameters ||\r\n                    this._emissiveFresnelParameters ||\r\n                    this._refractionFresnelParameters ||\r\n                    this._reflectionFresnelParameters\r\n                ) {\r\n                    defines.DIFFUSEFRESNEL = this._diffuseFresnelParameters && this._diffuseFresnelParameters.isEnabled;\r\n\r\n                    defines.OPACITYFRESNEL = this._opacityFresnelParameters && this._opacityFresnelParameters.isEnabled;\r\n\r\n                    defines.REFLECTIONFRESNEL = this._reflectionFresnelParameters && this._reflectionFresnelParameters.isEnabled;\r\n\r\n                    defines.REFLECTIONFRESNELFROMSPECULAR = this._useReflectionFresnelFromSpecular;\r\n\r\n                    defines.REFRACTIONFRESNEL = this._refractionFresnelParameters && this._refractionFresnelParameters.isEnabled;\r\n\r\n                    defines.EMISSIVEFRESNEL = this._emissiveFresnelParameters && this._emissiveFresnelParameters.isEnabled;\r\n\r\n                    defines._needNormals = true;\r\n                    defines.FRESNEL = true;\r\n                }\r\n            } else {\r\n                defines.FRESNEL = false;\r\n            }\r\n        }\r\n\r\n        // Check if lights are ready\r\n        if (defines[\"AREALIGHTUSED\"] || defines[\"CLUSTLIGHT_BATCH\"]) {\r\n            for (let index = 0; index < mesh.lightSources.length; index++) {\r\n                if (!mesh.lightSources[index]._isReady()) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Misc.\r\n        PrepareDefinesForMisc(\r\n            mesh,\r\n            scene,\r\n            this._useLogarithmicDepth,\r\n            this.pointsCloud,\r\n            this.fogEnabled,\r\n            this.needAlphaTestingForMesh(mesh),\r\n            defines,\r\n            this._applyDecalMapAfterDetailMap,\r\n            this._useVertexPulling,\r\n            subMesh.getRenderingMesh(),\r\n            this._setVertexOutputInvariant\r\n        );\r\n\r\n        // Values that need to be evaluated on every frame\r\n        PrepareDefinesForFrameBoundValues(scene, engine, this, defines, useInstances, null, subMesh.getRenderingMesh().hasThinInstances);\r\n\r\n        // External config\r\n        this._eventInfo.defines = defines;\r\n        this._eventInfo.mesh = mesh;\r\n        this._callbackPluginEventPrepareDefinesBeforeAttributes(this._eventInfo);\r\n\r\n        // Attribs\r\n        PrepareDefinesForAttributes(mesh, defines, true, true, true);\r\n\r\n        // External config\r\n        this._callbackPluginEventPrepareDefines(this._eventInfo);\r\n\r\n        // Get correct effect\r\n        let forceWasNotReadyPreviously = false;\r\n\r\n        if (defines.isDirty) {\r\n            const lightDisposed = defines._areLightsDisposed;\r\n            defines.markAsProcessed();\r\n\r\n            // Fallbacks\r\n            const fallbacks = new EffectFallbacks();\r\n            if (defines.REFLECTION) {\r\n                fallbacks.addFallback(0, \"REFLECTION\");\r\n            }\r\n\r\n            if (defines.SPECULAR) {\r\n                fallbacks.addFallback(0, \"SPECULAR\");\r\n            }\r\n\r\n            if (defines.BUMP) {\r\n                fallbacks.addFallback(0, \"BUMP\");\r\n            }\r\n\r\n            if (defines.PARALLAX) {\r\n                fallbacks.addFallback(1, \"PARALLAX\");\r\n            }\r\n\r\n            if (defines.PARALLAX_RHS) {\r\n                fallbacks.addFallback(1, \"PARALLAX_RHS\");\r\n            }\r\n\r\n            if (defines.PARALLAXOCCLUSION) {\r\n                fallbacks.addFallback(0, \"PARALLAXOCCLUSION\");\r\n            }\r\n\r\n            if (defines.SPECULAROVERALPHA) {\r\n                fallbacks.addFallback(0, \"SPECULAROVERALPHA\");\r\n            }\r\n\r\n            if (defines.FOG) {\r\n                fallbacks.addFallback(1, \"FOG\");\r\n            }\r\n\r\n            if (defines.POINTSIZE) {\r\n                fallbacks.addFallback(0, \"POINTSIZE\");\r\n            }\r\n\r\n            if (defines.LOGARITHMICDEPTH) {\r\n                fallbacks.addFallback(0, \"LOGARITHMICDEPTH\");\r\n            }\r\n\r\n            HandleFallbacksForShadows(defines, fallbacks, this._maxSimultaneousLights);\r\n\r\n            if (defines.SPECULARTERM) {\r\n                fallbacks.addFallback(0, \"SPECULARTERM\");\r\n            }\r\n\r\n            if (defines.DIFFUSEFRESNEL) {\r\n                fallbacks.addFallback(1, \"DIFFUSEFRESNEL\");\r\n            }\r\n\r\n            if (defines.OPACITYFRESNEL) {\r\n                fallbacks.addFallback(2, \"OPACITYFRESNEL\");\r\n            }\r\n\r\n            if (defines.REFLECTIONFRESNEL) {\r\n                fallbacks.addFallback(3, \"REFLECTIONFRESNEL\");\r\n            }\r\n\r\n            if (defines.EMISSIVEFRESNEL) {\r\n                fallbacks.addFallback(4, \"EMISSIVEFRESNEL\");\r\n            }\r\n\r\n            if (defines.FRESNEL) {\r\n                fallbacks.addFallback(4, \"FRESNEL\");\r\n            }\r\n\r\n            if (defines.MULTIVIEW) {\r\n                fallbacks.addFallback(0, \"MULTIVIEW\");\r\n            }\r\n\r\n            //Attributes\r\n            const attribs = [VertexBuffer.PositionKind];\r\n\r\n            if (defines.NORMAL) {\r\n                attribs.push(VertexBuffer.NormalKind);\r\n            }\r\n\r\n            if (defines.TANGENT) {\r\n                attribs.push(VertexBuffer.TangentKind);\r\n            }\r\n\r\n            for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\r\n                if (defines[\"UV\" + i]) {\r\n                    attribs.push(`uv${i === 1 ? \"\" : i}`);\r\n                }\r\n            }\r\n\r\n            if (defines.VERTEXCOLOR) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n\r\n            PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n            PrepareAttributesForInstances(attribs, defines);\r\n            PrepareAttributesForMorphTargets(attribs, mesh, defines);\r\n            PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\r\n\r\n            let shaderName = \"default\";\r\n\r\n            const uniforms = [\r\n                \"world\",\r\n                \"view\",\r\n                \"viewProjection\",\r\n                \"vEyePosition\",\r\n                \"vLightsType\",\r\n                \"vAmbientColor\",\r\n                \"vDiffuseColor\",\r\n                \"vSpecularColor\",\r\n                \"vEmissiveColor\",\r\n                \"visibility\",\r\n                \"vFogInfos\",\r\n                \"vFogColor\",\r\n                \"pointSize\",\r\n                \"vDiffuseInfos\",\r\n                \"vAmbientInfos\",\r\n                \"vOpacityInfos\",\r\n                \"vEmissiveInfos\",\r\n                \"vSpecularInfos\",\r\n                \"vBumpInfos\",\r\n                \"vLightmapInfos\",\r\n                \"vRefractionInfos\",\r\n                \"mBones\",\r\n                \"diffuseMatrix\",\r\n                \"ambientMatrix\",\r\n                \"opacityMatrix\",\r\n                \"emissiveMatrix\",\r\n                \"specularMatrix\",\r\n                \"bumpMatrix\",\r\n                \"normalMatrix\",\r\n                \"lightmapMatrix\",\r\n                \"refractionMatrix\",\r\n                \"diffuseLeftColor\",\r\n                \"diffuseRightColor\",\r\n                \"opacityParts\",\r\n                \"reflectionLeftColor\",\r\n                \"reflectionRightColor\",\r\n                \"emissiveLeftColor\",\r\n                \"emissiveRightColor\",\r\n                \"refractionLeftColor\",\r\n                \"refractionRightColor\",\r\n                \"vRefractionPosition\",\r\n                \"vRefractionSize\",\r\n                \"logarithmicDepthConstant\",\r\n                \"vTangentSpaceParams\",\r\n                \"alphaCutOff\",\r\n                \"boneTextureWidth\",\r\n                \"morphTargetTextureInfo\",\r\n                \"morphTargetTextureIndices\",\r\n                \"cameraInfo\",\r\n            ];\r\n\r\n            const samplers = [\r\n                \"diffuseSampler\",\r\n                \"ambientSampler\",\r\n                \"opacitySampler\",\r\n                \"reflectionCubeSampler\",\r\n                \"reflection2DSampler\",\r\n                \"emissiveSampler\",\r\n                \"specularSampler\",\r\n                \"bumpSampler\",\r\n                \"lightmapSampler\",\r\n                \"refractionCubeSampler\",\r\n                \"refraction2DSampler\",\r\n                \"boneSampler\",\r\n                \"morphTargets\",\r\n                \"oitDepthSampler\",\r\n                \"oitFrontColorSampler\",\r\n                \"areaLightsLTC1Sampler\",\r\n                \"areaLightsLTC2Sampler\",\r\n            ];\r\n\r\n            PrepareUniformsAndSamplersForIBL(uniforms, samplers, false);\r\n            const uniformBuffers = [\"Material\", \"Scene\", \"Mesh\"];\r\n\r\n            const indexParameters = { maxSimultaneousLights: this._maxSimultaneousLights, maxSimultaneousMorphTargets: defines.NUM_MORPH_INFLUENCERS };\r\n\r\n            this._eventInfo.fallbacks = fallbacks;\r\n            this._eventInfo.fallbackRank = 0;\r\n            this._eventInfo.defines = defines;\r\n            this._eventInfo.uniforms = uniforms;\r\n            this._eventInfo.attributes = attribs;\r\n            this._eventInfo.samplers = samplers;\r\n            this._eventInfo.uniformBuffersNames = uniformBuffers;\r\n            this._eventInfo.customCode = undefined;\r\n            this._eventInfo.mesh = mesh;\r\n            this._eventInfo.indexParameters = indexParameters;\r\n            this._callbackPluginEventGeneric(MaterialPluginEvent.PrepareEffect, this._eventInfo);\r\n\r\n            MaterialHelperGeometryRendering.AddUniformsAndSamplers(uniforms, samplers);\r\n\r\n            PrePassConfiguration.AddUniforms(uniforms);\r\n            PrePassConfiguration.AddSamplers(samplers);\r\n\r\n            if (ImageProcessingConfiguration) {\r\n                ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\r\n                ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\r\n            }\r\n\r\n            PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: defines,\r\n                maxSimultaneousLights: this._maxSimultaneousLights,\r\n            });\r\n\r\n            AddClipPlaneUniforms(uniforms);\r\n\r\n            const csnrOptions: ICustomShaderNameResolveOptions = {};\r\n\r\n            if (this.customShaderNameResolve) {\r\n                shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs, csnrOptions);\r\n            }\r\n\r\n            const join = defines.toString();\r\n\r\n            const previousEffect = subMesh.effect;\r\n            let effect = scene.getEngine().createEffect(\r\n                shaderName,\r\n                <IEffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters,\r\n                    processFinalCode: csnrOptions.processFinalCode,\r\n                    processCodeAfterIncludes: this._eventInfo.customCode,\r\n                    multiTarget: defines.PREPASS,\r\n                    shaderLanguage: this._shaderLanguage,\r\n                    extraInitializationsAsync: this._shadersLoaded\r\n                        ? undefined\r\n                        : async () => {\r\n                              if (this._shaderLanguage === ShaderLanguage.WGSL) {\r\n                                  await Promise.all([import(\"../ShadersWGSL/default.vertex\"), import(\"../ShadersWGSL/default.fragment\")]);\r\n                              } else {\r\n                                  await Promise.all([import(\"../Shaders/default.vertex\"), import(\"../Shaders/default.fragment\")]);\r\n                              }\r\n                              this._shadersLoaded = true;\r\n                          },\r\n                },\r\n                engine\r\n            );\r\n\r\n            this._eventInfo.customCode = undefined;\r\n\r\n            if (effect) {\r\n                if (this._onEffectCreatedObservable) {\r\n                    onCreatedEffectParameters.effect = effect;\r\n                    onCreatedEffectParameters.subMesh = subMesh;\r\n                    this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\r\n                }\r\n\r\n                // Use previous effect while new one is compiling\r\n                if (this.allowShaderHotSwapping && previousEffect && !effect.isReady()) {\r\n                    effect = previousEffect;\r\n                    defines.markAsUnprocessed();\r\n\r\n                    forceWasNotReadyPreviously = this.isFrozen;\r\n\r\n                    if (lightDisposed) {\r\n                        // re register in case it takes more than one frame.\r\n                        defines._areLightsDisposed = true;\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    scene.resetCachedMaterial();\r\n                    subMesh.setEffect(effect, defines, this._materialContext);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        drawWrapper._wasPreviouslyReady = forceWasNotReadyPreviously ? false : true;\r\n        drawWrapper._wasPreviouslyUsingInstances = useInstances;\r\n\r\n        this._checkScenePerformancePriority();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Builds the material UBO layouts.\r\n     * Used internally during the effect preparation.\r\n     */\r\n    public override buildUniformLayout(): void {\r\n        // Order is important !\r\n        const ubo = this._uniformBuffer;\r\n        ubo.addUniform(\"diffuseLeftColor\", 4);\r\n        ubo.addUniform(\"diffuseRightColor\", 4);\r\n        ubo.addUniform(\"opacityParts\", 4);\r\n        ubo.addUniform(\"reflectionLeftColor\", 4);\r\n        ubo.addUniform(\"reflectionRightColor\", 4);\r\n        ubo.addUniform(\"refractionLeftColor\", 4);\r\n        ubo.addUniform(\"refractionRightColor\", 4);\r\n        ubo.addUniform(\"emissiveLeftColor\", 4);\r\n        ubo.addUniform(\"emissiveRightColor\", 4);\r\n\r\n        ubo.addUniform(\"vDiffuseInfos\", 2);\r\n        ubo.addUniform(\"vAmbientInfos\", 2);\r\n        ubo.addUniform(\"vOpacityInfos\", 2);\r\n        ubo.addUniform(\"vEmissiveInfos\", 2);\r\n        ubo.addUniform(\"vLightmapInfos\", 2);\r\n        ubo.addUniform(\"vSpecularInfos\", 2);\r\n        ubo.addUniform(\"vBumpInfos\", 3);\r\n\r\n        ubo.addUniform(\"diffuseMatrix\", 16);\r\n        ubo.addUniform(\"ambientMatrix\", 16);\r\n        ubo.addUniform(\"opacityMatrix\", 16);\r\n        ubo.addUniform(\"emissiveMatrix\", 16);\r\n        ubo.addUniform(\"lightmapMatrix\", 16);\r\n        ubo.addUniform(\"specularMatrix\", 16);\r\n        ubo.addUniform(\"bumpMatrix\", 16);\r\n        ubo.addUniform(\"vTangentSpaceParams\", 2);\r\n        ubo.addUniform(\"pointSize\", 1);\r\n        ubo.addUniform(\"alphaCutOff\", 1);\r\n        ubo.addUniform(\"refractionMatrix\", 16);\r\n        ubo.addUniform(\"vRefractionInfos\", 4);\r\n        ubo.addUniform(\"vRefractionPosition\", 3);\r\n        ubo.addUniform(\"vRefractionSize\", 3);\r\n        ubo.addUniform(\"vSpecularColor\", 4);\r\n        ubo.addUniform(\"vEmissiveColor\", 3);\r\n        ubo.addUniform(\"vDiffuseColor\", 4);\r\n        ubo.addUniform(\"vAmbientColor\", 3);\r\n        ubo.addUniform(\"cameraInfo\", 4);\r\n\r\n        PrepareUniformLayoutForIBL(ubo, false, true);\r\n\r\n        super.buildUniformLayout();\r\n    }\r\n\r\n    /**\r\n     * Binds the submesh to this material by preparing the effect and shader to draw\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh containing the submesh\r\n     * @param subMesh defines the submesh to bind the material to\r\n     */\r\n    public override bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <StandardMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n        if (!effect) {\r\n            return;\r\n        }\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices Mesh.\r\n        mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\r\n        mesh.transferToEffect(world);\r\n\r\n        // Binding unconditionally\r\n        this._uniformBuffer.bindToEffect(effect, \"Material\");\r\n\r\n        this.prePassConfiguration.bindForSubMesh(this._activeEffect, scene, mesh, world, this.isFrozen);\r\n\r\n        MaterialHelperGeometryRendering.Bind(scene.getEngine().currentRenderPassId, this._activeEffect, mesh, world, this);\r\n\r\n        const camera = scene.activeCamera;\r\n        if (camera) {\r\n            this._uniformBuffer.updateFloat4(\"cameraInfo\", camera.minZ, camera.maxZ, 0, 0);\r\n        } else {\r\n            this._uniformBuffer.updateFloat4(\"cameraInfo\", 0, 0, 0, 0);\r\n        }\r\n\r\n        this._eventInfo.subMesh = subMesh;\r\n        this._callbackPluginEventHardBindForSubMesh(this._eventInfo);\r\n\r\n        // Normal Matrix\r\n        if (defines.OBJECTSPACE_NORMALMAP) {\r\n            world.toNormalMatrix(this._normalMatrix);\r\n            this.bindOnlyNormalMatrix(this._normalMatrix);\r\n        }\r\n\r\n        const mustRebind = this._mustRebind(scene, effect, subMesh, mesh.visibility);\r\n\r\n        // Bones\r\n        BindBonesParameters(mesh, effect);\r\n        const ubo = this._uniformBuffer;\r\n        if (mustRebind) {\r\n            this.bindViewProjection(effect);\r\n            if (!ubo.useUbo || !this.isFrozen || !ubo.isSync || subMesh._drawWrapper._forceRebindOnNextCall) {\r\n                if (StandardMaterial.FresnelEnabled && defines.FRESNEL) {\r\n                    // Fresnel\r\n                    if (this.diffuseFresnelParameters && this.diffuseFresnelParameters.isEnabled) {\r\n                        ubo.updateColor4(\"diffuseLeftColor\", this.diffuseFresnelParameters.leftColor, this.diffuseFresnelParameters.power);\r\n                        ubo.updateColor4(\"diffuseRightColor\", this.diffuseFresnelParameters.rightColor, this.diffuseFresnelParameters.bias);\r\n                    }\r\n\r\n                    if (this.opacityFresnelParameters && this.opacityFresnelParameters.isEnabled) {\r\n                        ubo.updateColor4(\r\n                            \"opacityParts\",\r\n                            new Color3(\r\n                                this.opacityFresnelParameters.leftColor.toLuminance(),\r\n                                this.opacityFresnelParameters.rightColor.toLuminance(),\r\n                                this.opacityFresnelParameters.bias\r\n                            ),\r\n                            this.opacityFresnelParameters.power\r\n                        );\r\n                    }\r\n\r\n                    if (this.reflectionFresnelParameters && this.reflectionFresnelParameters.isEnabled) {\r\n                        ubo.updateColor4(\"reflectionLeftColor\", this.reflectionFresnelParameters.leftColor, this.reflectionFresnelParameters.power);\r\n                        ubo.updateColor4(\"reflectionRightColor\", this.reflectionFresnelParameters.rightColor, this.reflectionFresnelParameters.bias);\r\n                    }\r\n\r\n                    if (this.refractionFresnelParameters && this.refractionFresnelParameters.isEnabled) {\r\n                        ubo.updateColor4(\"refractionLeftColor\", this.refractionFresnelParameters.leftColor, this.refractionFresnelParameters.power);\r\n                        ubo.updateColor4(\"refractionRightColor\", this.refractionFresnelParameters.rightColor, this.refractionFresnelParameters.bias);\r\n                    }\r\n\r\n                    if (this.emissiveFresnelParameters && this.emissiveFresnelParameters.isEnabled) {\r\n                        ubo.updateColor4(\"emissiveLeftColor\", this.emissiveFresnelParameters.leftColor, this.emissiveFresnelParameters.power);\r\n                        ubo.updateColor4(\"emissiveRightColor\", this.emissiveFresnelParameters.rightColor, this.emissiveFresnelParameters.bias);\r\n                    }\r\n                }\r\n\r\n                // Textures\r\n                if (scene.texturesEnabled) {\r\n                    if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                        ubo.updateFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\r\n                        BindTextureMatrix(this._diffuseTexture, ubo, \"diffuse\");\r\n                    }\r\n\r\n                    if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\r\n                        ubo.updateFloat2(\"vAmbientInfos\", this._ambientTexture.coordinatesIndex, this._ambientTexture.level);\r\n                        BindTextureMatrix(this._ambientTexture, ubo, \"ambient\");\r\n                    }\r\n\r\n                    if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\r\n                        ubo.updateFloat2(\"vOpacityInfos\", this._opacityTexture.coordinatesIndex, this._opacityTexture.level);\r\n                        BindTextureMatrix(this._opacityTexture, ubo, \"opacity\");\r\n                    }\r\n\r\n                    if (this._hasAlphaChannel()) {\r\n                        ubo.updateFloat(\"alphaCutOff\", this.alphaCutOff);\r\n                    }\r\n\r\n                    BindIBLParameters(scene, defines, ubo, Color3.White(), this._reflectionTexture, false, false, true);\r\n                    if (!this._reflectionTexture || !StandardMaterial.ReflectionTextureEnabled) {\r\n                        ubo.updateFloat2(\"vReflectionInfos\", 0.0, this.roughness);\r\n                    }\r\n\r\n                    if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\r\n                        ubo.updateFloat2(\"vEmissiveInfos\", this._emissiveTexture.coordinatesIndex, this._emissiveTexture.level);\r\n                        BindTextureMatrix(this._emissiveTexture, ubo, \"emissive\");\r\n                    }\r\n\r\n                    if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\r\n                        ubo.updateFloat2(\"vLightmapInfos\", this._lightmapTexture.coordinatesIndex, this._lightmapTexture.level);\r\n                        BindTextureMatrix(this._lightmapTexture, ubo, \"lightmap\");\r\n                    }\r\n\r\n                    if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\r\n                        ubo.updateFloat2(\"vSpecularInfos\", this._specularTexture.coordinatesIndex, this._specularTexture.level);\r\n                        BindTextureMatrix(this._specularTexture, ubo, \"specular\");\r\n                    }\r\n\r\n                    if (this._bumpTexture && scene.getEngine().getCaps().standardDerivatives && StandardMaterial.BumpTextureEnabled) {\r\n                        ubo.updateFloat3(\"vBumpInfos\", this._bumpTexture.coordinatesIndex, 1.0 / this._bumpTexture.level, this.parallaxScaleBias);\r\n                        BindTextureMatrix(this._bumpTexture, ubo, \"bump\");\r\n\r\n                        if (scene._mirroredCameraPosition) {\r\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? 1.0 : -1.0, this._invertNormalMapY ? 1.0 : -1.0);\r\n                        } else {\r\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? -1.0 : 1.0, this._invertNormalMapY ? -1.0 : 1.0);\r\n                        }\r\n                    }\r\n\r\n                    if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\r\n                        let depth = 1.0;\r\n                        if (!this._refractionTexture.isCube) {\r\n                            ubo.updateMatrix(\"refractionMatrix\", this._refractionTexture.getReflectionTextureMatrix());\r\n\r\n                            if ((<any>this._refractionTexture).depth) {\r\n                                depth = (<any>this._refractionTexture).depth;\r\n                            }\r\n                        }\r\n                        ubo.updateFloat4(\"vRefractionInfos\", this._refractionTexture.level, this.indexOfRefraction, depth, this.invertRefractionY ? -1 : 1);\r\n\r\n                        if ((<any>this._refractionTexture).boundingBoxSize) {\r\n                            const cubeTexture = <CubeTexture>this._refractionTexture;\r\n\r\n                            ubo.updateVector3(\"vRefractionPosition\", cubeTexture.boundingBoxPosition);\r\n                            ubo.updateVector3(\"vRefractionSize\", cubeTexture.boundingBoxSize);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Point size\r\n                if (this.pointsCloud) {\r\n                    ubo.updateFloat(\"pointSize\", this.pointSize);\r\n                }\r\n\r\n                ubo.updateColor4(\"vSpecularColor\", this.specularColor, this.specularPower);\r\n\r\n                ubo.updateColor3(\"vEmissiveColor\", StandardMaterial.EmissiveTextureEnabled ? this.emissiveColor : Color3.BlackReadOnly);\r\n                ubo.updateColor4(\"vDiffuseColor\", this.diffuseColor, this.alpha);\r\n\r\n                scene.ambientColor.multiplyToRef(this.ambientColor, this._globalAmbientColor);\r\n                ubo.updateColor3(\"vAmbientColor\", this._globalAmbientColor);\r\n            }\r\n\r\n            // Textures\r\n            if (scene.texturesEnabled) {\r\n                if (this._diffuseTexture && StandardMaterial.DiffuseTextureEnabled) {\r\n                    effect.setTexture(\"diffuseSampler\", this._diffuseTexture);\r\n                }\r\n\r\n                if (this._ambientTexture && StandardMaterial.AmbientTextureEnabled) {\r\n                    effect.setTexture(\"ambientSampler\", this._ambientTexture);\r\n                }\r\n\r\n                if (this._opacityTexture && StandardMaterial.OpacityTextureEnabled) {\r\n                    effect.setTexture(\"opacitySampler\", this._opacityTexture);\r\n                }\r\n\r\n                if (this._reflectionTexture && StandardMaterial.ReflectionTextureEnabled) {\r\n                    if (this._reflectionTexture.isCube) {\r\n                        effect.setTexture(\"reflectionCubeSampler\", this._reflectionTexture);\r\n                    } else {\r\n                        effect.setTexture(\"reflection2DSampler\", this._reflectionTexture);\r\n                    }\r\n                }\r\n\r\n                if (this._emissiveTexture && StandardMaterial.EmissiveTextureEnabled) {\r\n                    effect.setTexture(\"emissiveSampler\", this._emissiveTexture);\r\n                }\r\n\r\n                if (this._lightmapTexture && StandardMaterial.LightmapTextureEnabled) {\r\n                    effect.setTexture(\"lightmapSampler\", this._lightmapTexture);\r\n                }\r\n\r\n                if (this._specularTexture && StandardMaterial.SpecularTextureEnabled) {\r\n                    effect.setTexture(\"specularSampler\", this._specularTexture);\r\n                }\r\n\r\n                if (this._bumpTexture && scene.getEngine().getCaps().standardDerivatives && StandardMaterial.BumpTextureEnabled) {\r\n                    effect.setTexture(\"bumpSampler\", this._bumpTexture);\r\n                }\r\n\r\n                if (this._refractionTexture && StandardMaterial.RefractionTextureEnabled) {\r\n                    if (this._refractionTexture.isCube) {\r\n                        effect.setTexture(\"refractionCubeSampler\", this._refractionTexture);\r\n                    } else {\r\n                        effect.setTexture(\"refraction2DSampler\", this._refractionTexture);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // OIT with depth peeling\r\n            if (this.getScene().useOrderIndependentTransparency && this.needAlphaBlendingForMesh(mesh)) {\r\n                this.getScene().depthPeelingRenderer!.bind(effect);\r\n            }\r\n\r\n            this._eventInfo.subMesh = subMesh;\r\n            this._callbackPluginEventBindForSubMesh(this._eventInfo);\r\n\r\n            // Clip plane\r\n            BindClipPlane(effect, this, scene);\r\n\r\n            // Colors\r\n            this.bindEyePosition(effect);\r\n        } else if (scene.getEngine()._features.needToAlwaysBindUniformBuffers) {\r\n            this._needToBindSceneUbo = true;\r\n        }\r\n\r\n        if (mustRebind || !this.isFrozen) {\r\n            // Lights\r\n            if (scene.lightsEnabled && !this._disableLighting) {\r\n                BindLights(scene, mesh, effect, defines, this._maxSimultaneousLights);\r\n            }\r\n\r\n            // View\r\n            if (\r\n                (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) ||\r\n                this._reflectionTexture ||\r\n                this._refractionTexture ||\r\n                mesh.receiveShadows ||\r\n                defines.PREPASS ||\r\n                defines[\"CLUSTLIGHT_BATCH\"]\r\n            ) {\r\n                this.bindView(effect);\r\n            }\r\n\r\n            // Fog\r\n            BindFogParameters(scene, mesh, effect);\r\n\r\n            // Morph targets\r\n            if (defines.NUM_MORPH_INFLUENCERS) {\r\n                BindMorphTargetParameters(mesh, effect);\r\n            }\r\n\r\n            if (defines.BAKED_VERTEX_ANIMATION_TEXTURE) {\r\n                mesh.bakedVertexAnimationManager?.bind(effect, defines.INSTANCES);\r\n            }\r\n\r\n            // Log. depth\r\n            if (this.useLogarithmicDepth) {\r\n                BindLogDepth(defines, effect, scene);\r\n            }\r\n\r\n            // image processing\r\n            if (this._imageProcessingConfiguration && !this._imageProcessingConfiguration.applyByPostProcess) {\r\n                this._imageProcessingConfiguration.bind(this._activeEffect);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect, subMesh);\r\n        ubo.update();\r\n    }\r\n\r\n    /**\r\n     * Get the list of animatables in the material.\r\n     * @returns the list of animatables object used in the material\r\n     */\r\n    public override getAnimatables(): IAnimatable[] {\r\n        const results = super.getAnimatables();\r\n\r\n        if (this._diffuseTexture && this._diffuseTexture.animations && this._diffuseTexture.animations.length > 0) {\r\n            results.push(this._diffuseTexture);\r\n        }\r\n\r\n        if (this._ambientTexture && this._ambientTexture.animations && this._ambientTexture.animations.length > 0) {\r\n            results.push(this._ambientTexture);\r\n        }\r\n\r\n        if (this._opacityTexture && this._opacityTexture.animations && this._opacityTexture.animations.length > 0) {\r\n            results.push(this._opacityTexture);\r\n        }\r\n\r\n        if (this._reflectionTexture && this._reflectionTexture.animations && this._reflectionTexture.animations.length > 0) {\r\n            results.push(this._reflectionTexture);\r\n        }\r\n\r\n        if (this._emissiveTexture && this._emissiveTexture.animations && this._emissiveTexture.animations.length > 0) {\r\n            results.push(this._emissiveTexture);\r\n        }\r\n\r\n        if (this._specularTexture && this._specularTexture.animations && this._specularTexture.animations.length > 0) {\r\n            results.push(this._specularTexture);\r\n        }\r\n\r\n        if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\r\n            results.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._lightmapTexture && this._lightmapTexture.animations && this._lightmapTexture.animations.length > 0) {\r\n            results.push(this._lightmapTexture);\r\n        }\r\n\r\n        if (this._refractionTexture && this._refractionTexture.animations && this._refractionTexture.animations.length > 0) {\r\n            results.push(this._refractionTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Gets the active textures from the material\r\n     * @returns an array of textures\r\n     */\r\n    public override getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        if (this._diffuseTexture) {\r\n            activeTextures.push(this._diffuseTexture);\r\n        }\r\n\r\n        if (this._ambientTexture) {\r\n            activeTextures.push(this._ambientTexture);\r\n        }\r\n\r\n        if (this._opacityTexture) {\r\n            activeTextures.push(this._opacityTexture);\r\n        }\r\n\r\n        if (this._reflectionTexture) {\r\n            activeTextures.push(this._reflectionTexture);\r\n        }\r\n\r\n        if (this._emissiveTexture) {\r\n            activeTextures.push(this._emissiveTexture);\r\n        }\r\n\r\n        if (this._specularTexture) {\r\n            activeTextures.push(this._specularTexture);\r\n        }\r\n\r\n        if (this._bumpTexture) {\r\n            activeTextures.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._lightmapTexture) {\r\n            activeTextures.push(this._lightmapTexture);\r\n        }\r\n\r\n        if (this._refractionTexture) {\r\n            activeTextures.push(this._refractionTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material uses a texture\r\n     * @param texture defines the texture to check against the material\r\n     * @returns a boolean specifying if the material uses the texture\r\n     */\r\n    public override hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this._diffuseTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._ambientTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._opacityTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._reflectionTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._emissiveTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._specularTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._lightmapTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._refractionTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Disposes the material\r\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\r\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\r\n     */\r\n    public override dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            this._diffuseTexture?.dispose();\r\n            this._ambientTexture?.dispose();\r\n            this._opacityTexture?.dispose();\r\n            this._reflectionTexture?.dispose();\r\n            this._emissiveTexture?.dispose();\r\n            this._specularTexture?.dispose();\r\n            this._bumpTexture?.dispose();\r\n            this._lightmapTexture?.dispose();\r\n            this._refractionTexture?.dispose();\r\n        }\r\n\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect, forceDisposeTextures);\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the material, and gives it a new name\r\n     * @param name defines the new name for the duplicated material\r\n     * @param cloneTexturesOnlyOnce - if a texture is used in more than one channel (e.g diffuse and opacity), only clone it once and reuse it on the other channels. Default false.\r\n     * @param rootUrl defines the root URL to use to load textures\r\n     * @returns the cloned material\r\n     */\r\n    public override clone(name: string, cloneTexturesOnlyOnce: boolean = true, rootUrl = \"\"): StandardMaterial {\r\n        const result = SerializationHelper.Clone(() => new StandardMaterial(name, this.getScene()), this, { cloneTexturesOnlyOnce });\r\n\r\n        result.name = name;\r\n        result.id = name;\r\n\r\n        this.stencil.copyTo(result.stencil);\r\n\r\n        this._clonePlugins(result, rootUrl);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a standard material from parsed material data\r\n     * @param source defines the JSON representation of the material\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a new standard material\r\n     */\r\n    public static override Parse(source: any, scene: Scene, rootUrl: string): StandardMaterial {\r\n        const material = SerializationHelper.Parse(() => new StandardMaterial(source.name, scene), source, scene, rootUrl);\r\n\r\n        if (source.stencil) {\r\n            material.stencil.parse(source.stencil, scene, rootUrl);\r\n        }\r\n\r\n        Material._ParsePlugins(source, material, scene, rootUrl);\r\n\r\n        return material;\r\n    }\r\n\r\n    // Flags used to enable or disable a type of texture for all Standard Materials\r\n    /**\r\n     * Are diffuse textures enabled in the application.\r\n     */\r\n    public static get DiffuseTextureEnabled(): boolean {\r\n        return MaterialFlags.DiffuseTextureEnabled;\r\n    }\r\n    public static set DiffuseTextureEnabled(value: boolean) {\r\n        MaterialFlags.DiffuseTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are detail textures enabled in the application.\r\n     */\r\n    public static get DetailTextureEnabled(): boolean {\r\n        return MaterialFlags.DetailTextureEnabled;\r\n    }\r\n    public static set DetailTextureEnabled(value: boolean) {\r\n        MaterialFlags.DetailTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are ambient textures enabled in the application.\r\n     */\r\n    public static get AmbientTextureEnabled(): boolean {\r\n        return MaterialFlags.AmbientTextureEnabled;\r\n    }\r\n    public static set AmbientTextureEnabled(value: boolean) {\r\n        MaterialFlags.AmbientTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are opacity textures enabled in the application.\r\n     */\r\n    public static get OpacityTextureEnabled(): boolean {\r\n        return MaterialFlags.OpacityTextureEnabled;\r\n    }\r\n    public static set OpacityTextureEnabled(value: boolean) {\r\n        MaterialFlags.OpacityTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are reflection textures enabled in the application.\r\n     */\r\n    public static get ReflectionTextureEnabled(): boolean {\r\n        return MaterialFlags.ReflectionTextureEnabled;\r\n    }\r\n    public static set ReflectionTextureEnabled(value: boolean) {\r\n        MaterialFlags.ReflectionTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are emissive textures enabled in the application.\r\n     */\r\n    public static get EmissiveTextureEnabled(): boolean {\r\n        return MaterialFlags.EmissiveTextureEnabled;\r\n    }\r\n    public static set EmissiveTextureEnabled(value: boolean) {\r\n        MaterialFlags.EmissiveTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are specular textures enabled in the application.\r\n     */\r\n    public static get SpecularTextureEnabled(): boolean {\r\n        return MaterialFlags.SpecularTextureEnabled;\r\n    }\r\n    public static set SpecularTextureEnabled(value: boolean) {\r\n        MaterialFlags.SpecularTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are bump textures enabled in the application.\r\n     */\r\n    public static get BumpTextureEnabled(): boolean {\r\n        return MaterialFlags.BumpTextureEnabled;\r\n    }\r\n    public static set BumpTextureEnabled(value: boolean) {\r\n        MaterialFlags.BumpTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are lightmap textures enabled in the application.\r\n     */\r\n    public static get LightmapTextureEnabled(): boolean {\r\n        return MaterialFlags.LightmapTextureEnabled;\r\n    }\r\n    public static set LightmapTextureEnabled(value: boolean) {\r\n        MaterialFlags.LightmapTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are refraction textures enabled in the application.\r\n     */\r\n    public static get RefractionTextureEnabled(): boolean {\r\n        return MaterialFlags.RefractionTextureEnabled;\r\n    }\r\n    public static set RefractionTextureEnabled(value: boolean) {\r\n        MaterialFlags.RefractionTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are color grading textures enabled in the application.\r\n     */\r\n    public static get ColorGradingTextureEnabled(): boolean {\r\n        return MaterialFlags.ColorGradingTextureEnabled;\r\n    }\r\n    public static set ColorGradingTextureEnabled(value: boolean) {\r\n        MaterialFlags.ColorGradingTextureEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Are fresnels enabled in the application.\r\n     */\r\n    public static get FresnelEnabled(): boolean {\r\n        return MaterialFlags.FresnelEnabled;\r\n    }\r\n    public static set FresnelEnabled(value: boolean) {\r\n        MaterialFlags.FresnelEnabled = value;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.StandardMaterial\", StandardMaterial);\r\n\r\nScene.DefaultMaterialFactory = (scene: Scene) => {\r\n    return new StandardMaterial(\"default material\", scene);\r\n};\r\n", "import { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport { Matrix, Quaternion } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { Effect, IEffectCreationOptions, IShaderPath } from \"./effect\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { EffectFallbacks } from \"./effectFallbacks\";\r\nimport { WebRequest } from \"../Misc/webRequest\";\r\nimport type { ShaderLanguage } from \"./shaderLanguage\";\r\nimport type { UniformBuffer } from \"./uniformBuffer\";\r\nimport type { TextureSampler } from \"./Textures/textureSampler\";\r\nimport type { StorageBuffer } from \"../Buffers/storageBuffer\";\r\nimport { PushMaterial } from \"./pushMaterial\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { AddClipPlaneUniforms, BindClipPlane, PrepareStringDefinesForClipPlanes } from \"./clipPlaneMaterialHelper\";\r\nimport type { WebGPUEngine } from \"core/Engines/webgpuEngine\";\r\n\r\nimport type { ExternalTexture } from \"./Textures/externalTexture\";\r\nimport {\r\n    BindBonesParameters,\r\n    BindFogParameters,\r\n    BindLogDepth,\r\n    BindMorphTargetParameters,\r\n    BindSceneUniformBuffer,\r\n    PrepareAttributesForBakedVertexAnimation,\r\n    PrepareDefinesAndAttributesForMorphTargets,\r\n    PushAttributesForInstances,\r\n} from \"./materialHelper.functions\";\r\nimport type { IColor3Like, IColor4Like, IVector2Like, IVector3Like, IVector4Like } from \"core/Maths/math.like\";\r\n\r\nconst OnCreatedEffectParameters = { effect: null as unknown as Effect, subMesh: null as unknown as Nullable<SubMesh> };\r\n\r\n/**\r\n * Defines the options associated with the creation of a shader material.\r\n */\r\nexport interface IShaderMaterialOptions {\r\n    /**\r\n     * Does the material work in alpha blend mode\r\n     */\r\n    needAlphaBlending: boolean;\r\n\r\n    /**\r\n     * Does the material work in alpha test mode\r\n     */\r\n    needAlphaTesting: boolean;\r\n\r\n    /**\r\n     * The list of attribute names used in the shader\r\n     */\r\n    attributes: string[];\r\n\r\n    /**\r\n     * The list of uniform names used in the shader\r\n     */\r\n    uniforms: string[];\r\n\r\n    /**\r\n     * The list of UBO names used in the shader\r\n     */\r\n    uniformBuffers: string[];\r\n\r\n    /**\r\n     * The list of sampler (texture) names used in the shader\r\n     */\r\n    samplers: string[];\r\n\r\n    /**\r\n     * The list of external texture names used in the shader\r\n     */\r\n    externalTextures: string[];\r\n\r\n    /**\r\n     * The list of sampler object names used in the shader\r\n     */\r\n    samplerObjects: string[];\r\n\r\n    /**\r\n     * The list of storage buffer names used in the shader\r\n     */\r\n    storageBuffers: string[];\r\n\r\n    /**\r\n     * The list of defines used in the shader\r\n     */\r\n    defines: string[];\r\n\r\n    /**\r\n     * Defines if clip planes have to be turned on: true to turn them on, false to turn them off and null to turn them on/off depending on the scene configuration (scene.clipPlaneX)\r\n     */\r\n    useClipPlane: Nullable<boolean>;\r\n\r\n    /**\r\n     * The language the shader is written in (default: GLSL)\r\n     */\r\n    shaderLanguage?: ShaderLanguage;\r\n\r\n    /**\r\n     * Defines additional code to call to prepare the shader code\r\n     */\r\n    extraInitializationsAsync?: () => Promise<void>;\r\n}\r\n\r\n/**\r\n * The ShaderMaterial object has the necessary methods to pass data from your scene to the Vertex and Fragment Shaders and returns a material that can be applied to any mesh.\r\n *\r\n * This returned material effects how the mesh will look based on the code in the shaders.\r\n *\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/shaders/shaderMaterial\r\n */\r\nexport class ShaderMaterial extends PushMaterial {\r\n    private _shaderPath: IShaderPath | string;\r\n    private _options: IShaderMaterialOptions;\r\n    private _textures: { [name: string]: BaseTexture } = {};\r\n    private _textureArrays: { [name: string]: BaseTexture[] } = {};\r\n    private _externalTextures: { [name: string]: ExternalTexture } = {};\r\n    private _floats: { [name: string]: number } = {};\r\n    private _ints: { [name: string]: number } = {};\r\n    private _uints: { [name: string]: number } = {};\r\n    private _floatsArrays: { [name: string]: number[] } = {};\r\n    private _colors3: { [name: string]: IColor3Like } = {};\r\n    private _colors3Arrays: { [name: string]: number[] } = {};\r\n    private _colors4: { [name: string]: IColor4Like } = {};\r\n    private _colors4Arrays: { [name: string]: number[] } = {};\r\n    private _vectors2: { [name: string]: IVector2Like } = {};\r\n    private _vectors3: { [name: string]: IVector3Like } = {};\r\n    private _vectors4: { [name: string]: IVector4Like } = {};\r\n    private _quaternions: { [name: string]: Quaternion } = {};\r\n    private _quaternionsArrays: { [name: string]: number[] } = {};\r\n    private _matrices: { [name: string]: Matrix } = {};\r\n    private _matrixArrays: { [name: string]: Float32Array | Array<number> } = {};\r\n    private _matrices3x3: { [name: string]: Float32Array | Array<number> } = {};\r\n    private _matrices2x2: { [name: string]: Float32Array | Array<number> } = {};\r\n    private _vectors2Arrays: { [name: string]: number[] } = {};\r\n    private _vectors3Arrays: { [name: string]: number[] } = {};\r\n    private _vectors4Arrays: { [name: string]: number[] } = {};\r\n    private _uniformBuffers: { [name: string]: UniformBuffer } = {};\r\n    private _textureSamplers: { [name: string]: TextureSampler } = {};\r\n    private _storageBuffers: { [name: string]: StorageBuffer } = {};\r\n    private _cachedWorldViewMatrix = new Matrix();\r\n    private _cachedWorldViewProjectionMatrix = new Matrix();\r\n    private _multiview = false;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _materialHelperNeedsPreviousMatrices = false;\r\n\r\n    /** Define the Url to load snippets */\r\n    public static SnippetUrl = Constants.SnippetUrl;\r\n\r\n    /** Snippet ID if the material was created from the snippet server */\r\n    public snippetId: string;\r\n\r\n    /**\r\n     * Instantiate a new shader material.\r\n     * The ShaderMaterial object has the necessary methods to pass data from your scene to the Vertex and Fragment Shaders and returns a material that can be applied to any mesh.\r\n     * This returned material effects how the mesh will look based on the code in the shaders.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/shaders/shaderMaterial\r\n     * @param name Define the name of the material in the scene\r\n     * @param scene Define the scene the material belongs to\r\n     * @param shaderPath Defines  the route to the shader code.\r\n     * @param options Define the options used to create the shader\r\n     * @param storeEffectOnSubMeshes true to store effect on submeshes, false to store the effect directly in the material class.\r\n     */\r\n    constructor(name: string, scene: Scene, shaderPath: IShaderPath | string, options: Partial<IShaderMaterialOptions> = {}, storeEffectOnSubMeshes = true) {\r\n        super(name, scene, storeEffectOnSubMeshes);\r\n        this._shaderPath = shaderPath;\r\n\r\n        this._options = {\r\n            needAlphaBlending: false,\r\n            needAlphaTesting: false,\r\n            attributes: [\"position\", \"normal\", \"uv\"],\r\n            uniforms: [\"worldViewProjection\"],\r\n            uniformBuffers: [],\r\n            samplers: [],\r\n            externalTextures: [],\r\n            samplerObjects: [],\r\n            storageBuffers: [],\r\n            defines: [],\r\n            useClipPlane: false,\r\n            ...options,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the shader path used to define the shader code\r\n     * It can be modified to trigger a new compilation\r\n     */\r\n    public get shaderPath() {\r\n        return this._shaderPath;\r\n    }\r\n\r\n    /**\r\n     * Sets the shader path used to define the shader code\r\n     * It can be modified to trigger a new compilation\r\n     */\r\n    public set shaderPath(shaderPath: IShaderPath | string) {\r\n        this._shaderPath = shaderPath;\r\n    }\r\n\r\n    /**\r\n     * Gets the options used to compile the shader.\r\n     * They can be modified to trigger a new compilation\r\n     */\r\n    public get options(): IShaderMaterialOptions {\r\n        return this._options;\r\n    }\r\n\r\n    /**\r\n     * is multiview set to true?\r\n     */\r\n    public get isMultiview(): boolean {\r\n        return this._multiview;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name of the material e.g. \"ShaderMaterial\"\r\n     * Mainly use in serialization.\r\n     * @returns the class name\r\n     */\r\n    public override getClassName(): string {\r\n        return \"ShaderMaterial\";\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material will require alpha blending\r\n     * @returns a boolean specifying if alpha blending is needed\r\n     */\r\n    public override needAlphaBlending(): boolean {\r\n        return this.alpha < 1.0 || this._options.needAlphaBlending;\r\n    }\r\n\r\n    /**\r\n     * Specifies if this material should be rendered in alpha test mode\r\n     * @returns a boolean specifying if an alpha test is needed.\r\n     */\r\n    public override needAlphaTesting(): boolean {\r\n        return this._options.needAlphaTesting;\r\n    }\r\n\r\n    private _checkUniform(uniformName: string): void {\r\n        if (this._options.uniforms.indexOf(uniformName) === -1) {\r\n            this._options.uniforms.push(uniformName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set a texture in the shader.\r\n     * @param name Define the name of the uniform samplers as defined in the shader\r\n     * @param texture Define the texture to bind to this sampler\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setTexture(name: string, texture: BaseTexture): ShaderMaterial {\r\n        if (this._options.samplers.indexOf(name) === -1) {\r\n            this._options.samplers.push(name);\r\n        }\r\n        this._textures[name] = texture;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove a texture from the material.\r\n     * @param name Define the name of the texture to remove\r\n     */\r\n    public removeTexture(name: string): void {\r\n        delete this._textures[name];\r\n    }\r\n\r\n    /**\r\n     * Set a texture array in the shader.\r\n     * @param name Define the name of the uniform sampler array as defined in the shader\r\n     * @param textures Define the list of textures to bind to this sampler\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setTextureArray(name: string, textures: BaseTexture[]): ShaderMaterial {\r\n        if (this._options.samplers.indexOf(name) === -1) {\r\n            this._options.samplers.push(name);\r\n        }\r\n\r\n        this._checkUniform(name);\r\n\r\n        this._textureArrays[name] = textures;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set an internal texture in the shader.\r\n     * @param name Define the name of the uniform samplers as defined in the shader\r\n     * @param texture Define the texture to bind to this sampler\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setExternalTexture(name: string, texture: ExternalTexture): ShaderMaterial {\r\n        if (this._options.externalTextures.indexOf(name) === -1) {\r\n            this._options.externalTextures.push(name);\r\n        }\r\n        this._externalTextures[name] = texture;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a float in the shader.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setFloat(name: string, value: number): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._floats[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a int in the shader.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setInt(name: string, value: number): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._ints[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a unsigned int in the shader.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setUInt(name: string, value: number): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._uints[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set an array of floats in the shader.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setFloats(name: string, value: number[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._floatsArrays[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec3 in the shader from a Color3.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setColor3(name: string, value: IColor3Like): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._colors3[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec3 array in the shader from a IColor3Like array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setColor3Array(name: string, value: IColor3Like[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._colors3Arrays[name] = value.reduce((arr: number[], color) => {\r\n            arr.push(color.r, color.g, color.b);\r\n            return arr;\r\n        }, []);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 in the shader from a Color4.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setColor4(name: string, value: IColor4Like): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._colors4[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 array in the shader from a IColor4Like array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setColor4Array(name: string, value: IColor4Like[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._colors4Arrays[name] = value.reduce((arr: number[], color) => {\r\n            arr.push(color.r, color.g, color.b, color.a);\r\n            return arr;\r\n        }, []);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec2 in the shader from a Vector2.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setVector2(name: string, value: IVector2Like): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors2[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec3 in the shader from a Vector3.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setVector3(name: string, value: IVector3Like): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors3[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 in the shader from a Vector4.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setVector4(name: string, value: IVector4Like): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors4[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 in the shader from a Quaternion.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setQuaternion(name: string, value: Quaternion): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._quaternions[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 array in the shader from a Quaternion array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setQuaternionArray(name: string, value: Quaternion[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._quaternionsArrays[name] = value.reduce((arr, quaternion) => {\r\n            quaternion.toArray(arr, arr.length);\r\n            return arr;\r\n        }, []);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a mat4 in the shader from a Matrix.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setMatrix(name: string, value: Matrix): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._matrices[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a float32Array in the shader from a matrix array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setMatrices(name: string, value: Matrix[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n\r\n        const float32Array = new Float32Array(value.length * 16);\r\n\r\n        for (let index = 0; index < value.length; index++) {\r\n            const matrix = value[index];\r\n\r\n            matrix.copyToArray(float32Array, index * 16);\r\n        }\r\n\r\n        this._matrixArrays[name] = float32Array;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a mat3 in the shader from a Float32Array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setMatrix3x3(name: string, value: Float32Array | Array<number>): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._matrices3x3[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a mat2 in the shader from a Float32Array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setMatrix2x2(name: string, value: Float32Array | Array<number>): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._matrices2x2[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec2 array in the shader from a number array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setArray2(name: string, value: number[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors2Arrays[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec3 array in the shader from a number array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setArray3(name: string, value: number[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors3Arrays[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 array in the shader from a number array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setArray4(name: string, value: number[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors4Arrays[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a uniform buffer in the shader\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param buffer Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setUniformBuffer(name: string, buffer: UniformBuffer): ShaderMaterial {\r\n        if (this._options.uniformBuffers.indexOf(name) === -1) {\r\n            this._options.uniformBuffers.push(name);\r\n        }\r\n        this._uniformBuffers[name] = buffer;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a texture sampler in the shader\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param sampler Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setTextureSampler(name: string, sampler: TextureSampler): ShaderMaterial {\r\n        if (this._options.samplerObjects.indexOf(name) === -1) {\r\n            this._options.samplerObjects.push(name);\r\n        }\r\n        this._textureSamplers[name] = sampler;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a storage buffer in the shader\r\n     * @param name Define the name of the storage buffer as defined in the shader\r\n     * @param buffer Define the value to give to the uniform\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setStorageBuffer(name: string, buffer: StorageBuffer): ShaderMaterial {\r\n        if (this._options.storageBuffers.indexOf(name) === -1) {\r\n            this._options.storageBuffers.push(name);\r\n        }\r\n        this._storageBuffers[name] = buffer;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds, removes, or replaces the specified shader define and value.\r\n     * * setDefine(\"MY_DEFINE\", true); // enables a boolean define\r\n     * * setDefine(\"MY_DEFINE\", \"0.5\"); // adds \"#define MY_DEFINE 0.5\" to the shader (or sets and replaces the value of any existing define with that name)\r\n     * * setDefine(\"MY_DEFINE\", false); // disables and removes the define\r\n     * Note if the active defines do change, the shader will be recompiled and this can be expensive.\r\n     * @param define the define name e.g., \"OUTPUT_TO_SRGB\" or \"#define OUTPUT_TO_SRGB\". If the define was passed into the constructor already, the version used should match that, and in either case, it should not include any appended value.\r\n     * @param value either the value of the define (e.g. a numerical value) or for booleans, true if the define should be enabled or false if it should be disabled\r\n     * @returns the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setDefine(define: string, value: boolean | string): ShaderMaterial {\r\n        // First remove any existing define with this name.\r\n        const defineName = define.trimEnd() + \" \";\r\n        const existingDefineIdx = this.options.defines.findIndex((x) => x === define || x.startsWith(defineName));\r\n        if (existingDefineIdx >= 0) {\r\n            this.options.defines.splice(existingDefineIdx, 1);\r\n        }\r\n\r\n        // Then add the new define value. (If it's a boolean value and false, don't add it.)\r\n        if (typeof value !== \"boolean\" || value) {\r\n            this.options.defines.push(defineName + value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Specifies that the submesh is ready to be used\r\n     * @param mesh defines the mesh to check\r\n     * @param subMesh defines which submesh to check\r\n     * @param useInstances specifies that instances should be used\r\n     * @returns a boolean indicating that the submesh is ready or not\r\n     */\r\n    public override isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        return this.isReady(mesh, useInstances, subMesh);\r\n    }\r\n\r\n    /**\r\n     * Checks if the material is ready to render the requested mesh\r\n     * @param mesh Define the mesh to render\r\n     * @param useInstances Define whether or not the material is used with instances\r\n     * @param subMesh defines which submesh to render\r\n     * @returns true if ready, otherwise false\r\n     */\r\n    public override isReady(mesh?: AbstractMesh, useInstances?: boolean, subMesh?: SubMesh): boolean {\r\n        const storeEffectOnSubMeshes = subMesh && this._storeEffectOnSubMeshes;\r\n\r\n        if (this.isFrozen) {\r\n            const drawWrapper = storeEffectOnSubMeshes ? subMesh._drawWrapper : this._drawWrapper;\r\n            if (drawWrapper.effect && drawWrapper._wasPreviouslyReady && drawWrapper._wasPreviouslyUsingInstances === useInstances) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n\r\n        // Instances\r\n        const defines = [];\r\n        const attribs = [];\r\n        let fallbacks: Nullable<EffectFallbacks> = null;\r\n\r\n        let shaderName = this._shaderPath,\r\n            uniforms = this._options.uniforms,\r\n            uniformBuffers = this._options.uniformBuffers,\r\n            samplers = this._options.samplers;\r\n\r\n        // global multiview\r\n        if (engine.getCaps().multiview && scene.activeCamera && scene.activeCamera.outputRenderTarget && scene.activeCamera.outputRenderTarget.getViewCount() > 1) {\r\n            this._multiview = true;\r\n            defines.push(\"#define MULTIVIEW\");\r\n            if (uniforms.indexOf(\"viewProjection\") !== -1 && uniforms.indexOf(\"viewProjectionR\") === -1) {\r\n                uniforms.push(\"viewProjectionR\");\r\n            }\r\n        }\r\n\r\n        for (let index = 0; index < this._options.defines.length; index++) {\r\n            const defineToAdd = this._options.defines[index].indexOf(\"#define\") === 0 ? this._options.defines[index] : `#define ${this._options.defines[index]}`;\r\n            defines.push(defineToAdd);\r\n        }\r\n\r\n        for (let index = 0; index < this._options.attributes.length; index++) {\r\n            attribs.push(this._options.attributes[index]);\r\n        }\r\n\r\n        if (mesh && mesh.isVerticesDataPresent(VertexBuffer.ColorKind)) {\r\n            if (attribs.indexOf(VertexBuffer.ColorKind) === -1) {\r\n                attribs.push(VertexBuffer.ColorKind);\r\n            }\r\n            defines.push(\"#define VERTEXCOLOR\");\r\n        }\r\n\r\n        if (useInstances) {\r\n            defines.push(\"#define INSTANCES\");\r\n            PushAttributesForInstances(attribs, this._materialHelperNeedsPreviousMatrices);\r\n            if (mesh?.hasThinInstances) {\r\n                defines.push(\"#define THIN_INSTANCES\");\r\n                if (mesh && mesh.isVerticesDataPresent(VertexBuffer.ColorInstanceKind)) {\r\n                    attribs.push(VertexBuffer.ColorInstanceKind);\r\n                    defines.push(\"#define INSTANCESCOLOR\");\r\n                }\r\n            }\r\n        }\r\n\r\n        // Bones\r\n        if (mesh && mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\r\n            attribs.push(VertexBuffer.MatricesIndicesKind);\r\n            attribs.push(VertexBuffer.MatricesWeightsKind);\r\n            if (mesh.numBoneInfluencers > 4) {\r\n                attribs.push(VertexBuffer.MatricesIndicesExtraKind);\r\n                attribs.push(VertexBuffer.MatricesWeightsExtraKind);\r\n            }\r\n\r\n            const skeleton = mesh.skeleton;\r\n\r\n            defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\r\n            fallbacks = new EffectFallbacks();\r\n            fallbacks.addCPUSkinningFallback(0, mesh);\r\n\r\n            if (skeleton.isUsingTextureForMatrices) {\r\n                defines.push(\"#define BONETEXTURE\");\r\n\r\n                if (uniforms.indexOf(\"boneTextureWidth\") === -1) {\r\n                    uniforms.push(\"boneTextureWidth\");\r\n                }\r\n\r\n                if (this._options.samplers.indexOf(\"boneSampler\") === -1) {\r\n                    this._options.samplers.push(\"boneSampler\");\r\n                }\r\n            } else {\r\n                defines.push(\"#define BonesPerMesh \" + (skeleton.bones.length + 1));\r\n\r\n                if (uniforms.indexOf(\"mBones\") === -1) {\r\n                    uniforms.push(\"mBones\");\r\n                }\r\n            }\r\n        } else {\r\n            defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\r\n        }\r\n\r\n        // Morph\r\n        let numInfluencers = 0;\r\n        const manager = mesh ? (<Mesh>mesh).morphTargetManager : null;\r\n        if (manager) {\r\n            const uv = defines.indexOf(\"#define UV1\") !== -1;\r\n            const uv2 = defines.indexOf(\"#define UV2\") !== -1;\r\n            const tangent = defines.indexOf(\"#define TANGENT\") !== -1;\r\n            const normal = defines.indexOf(\"#define NORMAL\") !== -1;\r\n            const color = defines.indexOf(\"#define VERTEXCOLOR\") !== -1;\r\n            numInfluencers = PrepareDefinesAndAttributesForMorphTargets(\r\n                manager,\r\n                defines,\r\n                attribs,\r\n                mesh!,\r\n                true, // usePositionMorph\r\n                normal, // useNormalMorph\r\n                tangent, // useTangentMorph\r\n                uv, // useUVMorph\r\n                uv2, // useUV2Morph\r\n                color // useColorMorph\r\n            );\r\n            if (manager.isUsingTextureForTargets) {\r\n                if (uniforms.indexOf(\"morphTargetTextureIndices\") === -1) {\r\n                    uniforms.push(\"morphTargetTextureIndices\");\r\n                }\r\n\r\n                if (this._options.samplers.indexOf(\"morphTargets\") === -1) {\r\n                    this._options.samplers.push(\"morphTargets\");\r\n                }\r\n            }\r\n            if (numInfluencers > 0) {\r\n                uniforms = uniforms.slice();\r\n                uniforms.push(\"morphTargetInfluences\");\r\n                uniforms.push(\"morphTargetCount\");\r\n                uniforms.push(\"morphTargetTextureInfo\");\r\n                uniforms.push(\"morphTargetTextureIndices\");\r\n            }\r\n        } else {\r\n            defines.push(\"#define NUM_MORPH_INFLUENCERS 0\");\r\n        }\r\n\r\n        // Baked Vertex Animation\r\n        if (mesh) {\r\n            const bvaManager = (<AbstractMesh>mesh).bakedVertexAnimationManager;\r\n\r\n            if (bvaManager && bvaManager.isEnabled) {\r\n                defines.push(\"#define BAKED_VERTEX_ANIMATION_TEXTURE\");\r\n                if (uniforms.indexOf(\"bakedVertexAnimationSettings\") === -1) {\r\n                    uniforms.push(\"bakedVertexAnimationSettings\");\r\n                }\r\n                if (uniforms.indexOf(\"bakedVertexAnimationTextureSizeInverted\") === -1) {\r\n                    uniforms.push(\"bakedVertexAnimationTextureSizeInverted\");\r\n                }\r\n                if (uniforms.indexOf(\"bakedVertexAnimationTime\") === -1) {\r\n                    uniforms.push(\"bakedVertexAnimationTime\");\r\n                }\r\n\r\n                if (this._options.samplers.indexOf(\"bakedVertexAnimationTexture\") === -1) {\r\n                    this._options.samplers.push(\"bakedVertexAnimationTexture\");\r\n                }\r\n            }\r\n\r\n            PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\r\n        }\r\n\r\n        // Textures\r\n        for (const name in this._textures) {\r\n            if (!this._textures[name].isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // Alpha test\r\n        if (mesh && this.needAlphaTestingForMesh(mesh)) {\r\n            defines.push(\"#define ALPHATEST\");\r\n        }\r\n\r\n        // Clip planes\r\n        if (this._options.useClipPlane !== false) {\r\n            AddClipPlaneUniforms(uniforms);\r\n\r\n            PrepareStringDefinesForClipPlanes(this, scene, defines);\r\n        }\r\n\r\n        // Fog\r\n        if (scene.fogEnabled && mesh?.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) {\r\n            defines.push(\"#define FOG\");\r\n            if (uniforms.indexOf(\"view\") === -1) {\r\n                uniforms.push(\"view\");\r\n            }\r\n            if (uniforms.indexOf(\"vFogInfos\") === -1) {\r\n                uniforms.push(\"vFogInfos\");\r\n            }\r\n            if (uniforms.indexOf(\"vFogColor\") === -1) {\r\n                uniforms.push(\"vFogColor\");\r\n            }\r\n        }\r\n\r\n        // Misc\r\n        if (this._useLogarithmicDepth) {\r\n            defines.push(\"#define LOGARITHMICDEPTH\");\r\n            if (uniforms.indexOf(\"logarithmicDepthConstant\") === -1) {\r\n                uniforms.push(\"logarithmicDepthConstant\");\r\n            }\r\n        }\r\n\r\n        if (this.customShaderNameResolve) {\r\n            uniforms = uniforms.slice();\r\n            uniformBuffers = uniformBuffers.slice();\r\n            samplers = samplers.slice();\r\n            shaderName = this.customShaderNameResolve(this.name, uniforms, uniformBuffers, samplers, defines, attribs);\r\n        }\r\n\r\n        const renderingMesh = subMesh ? subMesh.getRenderingMesh() : mesh;\r\n        if (renderingMesh && this.useVertexPulling) {\r\n            defines.push(\"#define USE_VERTEX_PULLING\");\r\n\r\n            const indexBuffer = renderingMesh.geometry?.getIndexBuffer();\r\n            if (indexBuffer) {\r\n                defines.push(\"#define VERTEX_PULLING_USE_INDEX_BUFFER\");\r\n                if (indexBuffer.is32Bits) {\r\n                    defines.push(\"#define VERTEX_PULLING_INDEX_BUFFER_32BITS\");\r\n                }\r\n            }\r\n        }\r\n\r\n        const drawWrapper = storeEffectOnSubMeshes ? subMesh._getDrawWrapper(undefined, true) : this._drawWrapper;\r\n        const previousEffect = drawWrapper?.effect ?? null;\r\n        const previousDefines = drawWrapper?.defines ?? null;\r\n        const join = defines.join(\"\\n\");\r\n\r\n        let effect = previousEffect;\r\n        if (previousDefines !== join) {\r\n            effect = engine.createEffect(\r\n                shaderName,\r\n                <IEffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousMorphTargets: numInfluencers },\r\n                    shaderLanguage: this._options.shaderLanguage,\r\n                    extraInitializationsAsync: this._options.extraInitializationsAsync,\r\n                },\r\n                engine\r\n            );\r\n\r\n            if (storeEffectOnSubMeshes) {\r\n                subMesh.setEffect(effect, join, this._materialContext);\r\n            } else if (drawWrapper) {\r\n                drawWrapper.setEffect(effect, join);\r\n            }\r\n\r\n            if (this._onEffectCreatedObservable) {\r\n                OnCreatedEffectParameters.effect = effect;\r\n                OnCreatedEffectParameters.subMesh = subMesh ?? mesh?.subMeshes[0] ?? null;\r\n                this._onEffectCreatedObservable.notifyObservers(OnCreatedEffectParameters);\r\n            }\r\n        }\r\n\r\n        drawWrapper!._wasPreviouslyUsingInstances = !!useInstances;\r\n\r\n        if (!effect?.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        if (previousEffect !== effect) {\r\n            scene.resetCachedMaterial();\r\n        }\r\n\r\n        drawWrapper!._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Binds the world matrix to the material\r\n     * @param world defines the world transformation matrix\r\n     * @param effectOverride - If provided, use this effect instead of internal effect\r\n     */\r\n    public override bindOnlyWorldMatrix(world: Matrix, effectOverride?: Nullable<Effect>): void {\r\n        const effect = effectOverride ?? this.getEffect();\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        const uniforms = this._options.uniforms;\r\n        if (uniforms.indexOf(\"world\") !== -1) {\r\n            effect.setMatrix(\"world\", world);\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        if (uniforms.indexOf(\"worldView\") !== -1) {\r\n            world.multiplyToRef(scene.getViewMatrix(), this._cachedWorldViewMatrix);\r\n            effect.setMatrix(\"worldView\", this._cachedWorldViewMatrix);\r\n        }\r\n\r\n        if (uniforms.indexOf(\"worldViewProjection\") !== -1) {\r\n            world.multiplyToRef(scene.getTransformMatrix(), this._cachedWorldViewProjectionMatrix);\r\n            effect.setMatrix(\"worldViewProjection\", this._cachedWorldViewProjectionMatrix);\r\n        }\r\n\r\n        if (uniforms.indexOf(\"view\") !== -1) {\r\n            effect.setMatrix(\"view\", scene.getViewMatrix());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds the submesh to this material by preparing the effect and shader to draw\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh containing the submesh\r\n     * @param subMesh defines the submesh to bind the material to\r\n     */\r\n    public override bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        this.bind(world, mesh, subMesh._drawWrapperOverride?.effect, subMesh);\r\n    }\r\n\r\n    /**\r\n     * Binds the material to the mesh\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh to bind the material to\r\n     * @param effectOverride - If provided, use this effect instead of internal effect\r\n     * @param subMesh defines the submesh to bind the material to\r\n     */\r\n    public override bind(world: Matrix, mesh?: AbstractMesh, effectOverride?: Nullable<Effect>, subMesh?: SubMesh): void {\r\n        // Std values\r\n        const storeEffectOnSubMeshes = subMesh && this._storeEffectOnSubMeshes;\r\n        const effect = effectOverride ?? (storeEffectOnSubMeshes ? subMesh.effect : this.getEffect());\r\n\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        const scene = this.getScene();\r\n\r\n        this._activeEffect = effect;\r\n\r\n        this.bindOnlyWorldMatrix(world, effectOverride);\r\n\r\n        const uniformBuffers = this._options.uniformBuffers;\r\n\r\n        let useSceneUBO = false;\r\n\r\n        if (effect && uniformBuffers && uniformBuffers.length > 0 && scene.getEngine().supportsUniformBuffers) {\r\n            for (let i = 0; i < uniformBuffers.length; ++i) {\r\n                const bufferName = uniformBuffers[i];\r\n                switch (bufferName) {\r\n                    case \"Mesh\":\r\n                        if (mesh) {\r\n                            mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\r\n                            mesh.transferToEffect(world);\r\n                        }\r\n                        break;\r\n                    case \"Scene\":\r\n                        BindSceneUniformBuffer(effect, scene.getSceneUniformBuffer());\r\n                        scene.finalizeSceneUbo();\r\n                        useSceneUBO = true;\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const mustRebind = mesh && storeEffectOnSubMeshes ? this._mustRebind(scene, effect, subMesh, mesh.visibility) : scene.getCachedMaterial() !== this;\r\n\r\n        if (effect && mustRebind) {\r\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"view\") !== -1) {\r\n                effect.setMatrix(\"view\", scene.getViewMatrix());\r\n            }\r\n\r\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"projection\") !== -1) {\r\n                effect.setMatrix(\"projection\", scene.getProjectionMatrix());\r\n            }\r\n\r\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"viewProjection\") !== -1) {\r\n                effect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n                if (this._multiview) {\r\n                    effect.setMatrix(\"viewProjectionR\", scene._transformMatrixR);\r\n                }\r\n            }\r\n\r\n            if (scene.activeCamera && this._options.uniforms.indexOf(\"cameraPosition\") !== -1) {\r\n                effect.setVector3(\"cameraPosition\", scene.activeCamera.globalPosition);\r\n            }\r\n\r\n            // Bones\r\n            BindBonesParameters(mesh, effect);\r\n\r\n            // Clip plane\r\n            BindClipPlane(effect, this, scene);\r\n\r\n            // Misc\r\n            if (this._useLogarithmicDepth) {\r\n                BindLogDepth(storeEffectOnSubMeshes ? subMesh.materialDefines : effect.defines, effect, scene);\r\n            }\r\n\r\n            // Fog\r\n            if (mesh) {\r\n                BindFogParameters(scene, mesh, effect);\r\n            }\r\n\r\n            let name: string;\r\n            // Texture\r\n            for (name in this._textures) {\r\n                effect.setTexture(name, this._textures[name]);\r\n            }\r\n\r\n            // Texture arrays\r\n            for (name in this._textureArrays) {\r\n                effect.setTextureArray(name, this._textureArrays[name]);\r\n            }\r\n\r\n            // Int\r\n            for (name in this._ints) {\r\n                effect.setInt(name, this._ints[name]);\r\n            }\r\n\r\n            // UInt\r\n            for (name in this._uints) {\r\n                effect.setUInt(name, this._uints[name]);\r\n            }\r\n\r\n            // Float\r\n            for (name in this._floats) {\r\n                effect.setFloat(name, this._floats[name]);\r\n            }\r\n\r\n            // Floats\r\n            for (name in this._floatsArrays) {\r\n                effect.setArray(name, this._floatsArrays[name]);\r\n            }\r\n\r\n            // Color3\r\n            for (name in this._colors3) {\r\n                effect.setColor3(name, this._colors3[name]);\r\n            }\r\n\r\n            // Color3Array\r\n            for (name in this._colors3Arrays) {\r\n                effect.setArray3(name, this._colors3Arrays[name]);\r\n            }\r\n\r\n            // Color4\r\n            for (name in this._colors4) {\r\n                const color = this._colors4[name];\r\n                effect.setFloat4(name, color.r, color.g, color.b, color.a);\r\n            }\r\n\r\n            // Color4Array\r\n            for (name in this._colors4Arrays) {\r\n                effect.setArray4(name, this._colors4Arrays[name]);\r\n            }\r\n\r\n            // Vector2\r\n            for (name in this._vectors2) {\r\n                effect.setVector2(name, this._vectors2[name]);\r\n            }\r\n\r\n            // Vector3\r\n            for (name in this._vectors3) {\r\n                effect.setVector3(name, this._vectors3[name]);\r\n            }\r\n\r\n            // Vector4\r\n            for (name in this._vectors4) {\r\n                effect.setVector4(name, this._vectors4[name]);\r\n            }\r\n\r\n            // Quaternion\r\n            for (name in this._quaternions) {\r\n                effect.setQuaternion(name, this._quaternions[name]);\r\n            }\r\n\r\n            // Matrix\r\n            for (name in this._matrices) {\r\n                effect.setMatrix(name, this._matrices[name]);\r\n            }\r\n\r\n            // MatrixArray\r\n            for (name in this._matrixArrays) {\r\n                effect.setMatrices(name, this._matrixArrays[name]);\r\n            }\r\n\r\n            // Matrix 3x3\r\n            for (name in this._matrices3x3) {\r\n                effect.setMatrix3x3(name, this._matrices3x3[name]);\r\n            }\r\n\r\n            // Matrix 2x2\r\n            for (name in this._matrices2x2) {\r\n                effect.setMatrix2x2(name, this._matrices2x2[name]);\r\n            }\r\n\r\n            // Vector2Array\r\n            for (name in this._vectors2Arrays) {\r\n                effect.setArray2(name, this._vectors2Arrays[name]);\r\n            }\r\n\r\n            // Vector3Array\r\n            for (name in this._vectors3Arrays) {\r\n                effect.setArray3(name, this._vectors3Arrays[name]);\r\n            }\r\n\r\n            // Vector4Array\r\n            for (name in this._vectors4Arrays) {\r\n                effect.setArray4(name, this._vectors4Arrays[name]);\r\n            }\r\n\r\n            // QuaternionArray\r\n            for (name in this._quaternionsArrays) {\r\n                effect.setArray4(name, this._quaternionsArrays[name]);\r\n            }\r\n\r\n            // Uniform buffers\r\n            for (name in this._uniformBuffers) {\r\n                const buffer = this._uniformBuffers[name].getBuffer();\r\n                if (buffer) {\r\n                    effect.bindUniformBuffer(buffer, name);\r\n                }\r\n            }\r\n\r\n            const engineWebGPU = scene.getEngine() as WebGPUEngine;\r\n\r\n            // External texture\r\n            const setExternalTexture = engineWebGPU.setExternalTexture;\r\n            if (setExternalTexture) {\r\n                for (name in this._externalTextures) {\r\n                    setExternalTexture.call(engineWebGPU, name, this._externalTextures[name]);\r\n                }\r\n            }\r\n\r\n            // Samplers\r\n            const setTextureSampler = engineWebGPU.setTextureSampler;\r\n            if (setTextureSampler) {\r\n                for (name in this._textureSamplers) {\r\n                    setTextureSampler.call(engineWebGPU, name, this._textureSamplers[name]);\r\n                }\r\n            }\r\n\r\n            // Storage buffers\r\n            const setStorageBuffer = engineWebGPU.setStorageBuffer;\r\n            if (setStorageBuffer) {\r\n                for (name in this._storageBuffers) {\r\n                    setStorageBuffer.call(engineWebGPU, name, this._storageBuffers[name]);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (effect && mesh && (mustRebind || !this.isFrozen)) {\r\n            // Morph targets\r\n            BindMorphTargetParameters(mesh, effect);\r\n            if (mesh.morphTargetManager && mesh.morphTargetManager.isUsingTextureForTargets) {\r\n                mesh.morphTargetManager._bind(effect);\r\n            }\r\n\r\n            const bvaManager = (<AbstractMesh>mesh).bakedVertexAnimationManager;\r\n\r\n            if (bvaManager && bvaManager.isEnabled) {\r\n                const drawWrapper = storeEffectOnSubMeshes ? subMesh._drawWrapper : this._drawWrapper;\r\n                mesh.bakedVertexAnimationManager?.bind(effect, !!drawWrapper._wasPreviouslyUsingInstances);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, effect, subMesh);\r\n    }\r\n\r\n    /**\r\n     * Gets the active textures from the material\r\n     * @returns an array of textures\r\n     */\r\n    public override getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        for (const name in this._textures) {\r\n            activeTextures.push(this._textures[name]);\r\n        }\r\n\r\n        for (const name in this._textureArrays) {\r\n            const array = this._textureArrays[name];\r\n            for (let index = 0; index < array.length; index++) {\r\n                activeTextures.push(array[index]);\r\n            }\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material uses a texture\r\n     * @param texture defines the texture to check against the material\r\n     * @returns a boolean specifying if the material uses the texture\r\n     */\r\n    public override hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        for (const name in this._textures) {\r\n            if (this._textures[name] === texture) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        for (const name in this._textureArrays) {\r\n            const array = this._textureArrays[name];\r\n            for (let index = 0; index < array.length; index++) {\r\n                if (array[index] === texture) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the material, and gives it a new name\r\n     * @param name defines the new name for the duplicated material\r\n     * @returns the cloned material\r\n     */\r\n    public override clone(name: string): ShaderMaterial {\r\n        const result = SerializationHelper.Clone(() => new ShaderMaterial(name, this.getScene(), this._shaderPath, this._options, this._storeEffectOnSubMeshes), this);\r\n\r\n        result.name = name;\r\n        result.id = name;\r\n\r\n        // Shader code path\r\n        if (typeof result._shaderPath === \"object\") {\r\n            result._shaderPath = { ...result._shaderPath };\r\n        }\r\n\r\n        // Options\r\n        this._options = { ...this._options };\r\n\r\n        const keys = Object.keys(this._options) as Array<keyof IShaderMaterialOptions>;\r\n\r\n        for (const propName of keys) {\r\n            const propValue = this._options[propName];\r\n            if (Array.isArray(propValue)) {\r\n                (<string[]>this._options[propName]) = propValue.slice(0);\r\n            }\r\n        }\r\n\r\n        // Stencil\r\n        this.stencil.copyTo(result.stencil);\r\n\r\n        // Texture\r\n        for (const key in this._textures) {\r\n            result.setTexture(key, this._textures[key]);\r\n        }\r\n\r\n        // TextureArray\r\n        for (const key in this._textureArrays) {\r\n            result.setTextureArray(key, this._textureArrays[key]);\r\n        }\r\n\r\n        // External texture\r\n        for (const key in this._externalTextures) {\r\n            result.setExternalTexture(key, this._externalTextures[key]);\r\n        }\r\n\r\n        // Int\r\n        for (const key in this._ints) {\r\n            result.setInt(key, this._ints[key]);\r\n        }\r\n\r\n        // UInt\r\n        for (const key in this._uints) {\r\n            result.setUInt(key, this._uints[key]);\r\n        }\r\n\r\n        // Float\r\n        for (const key in this._floats) {\r\n            result.setFloat(key, this._floats[key]);\r\n        }\r\n\r\n        // Floats\r\n        for (const key in this._floatsArrays) {\r\n            result.setFloats(key, this._floatsArrays[key]);\r\n        }\r\n\r\n        // Color3\r\n        for (const key in this._colors3) {\r\n            result.setColor3(key, this._colors3[key]);\r\n        }\r\n\r\n        // Color3Array\r\n        for (const key in this._colors3Arrays) {\r\n            result._colors3Arrays[key] = this._colors3Arrays[key];\r\n        }\r\n\r\n        // Color4\r\n        for (const key in this._colors4) {\r\n            result.setColor4(key, this._colors4[key]);\r\n        }\r\n\r\n        // Color4Array\r\n        for (const key in this._colors4Arrays) {\r\n            result._colors4Arrays[key] = this._colors4Arrays[key];\r\n        }\r\n\r\n        // Vector2\r\n        for (const key in this._vectors2) {\r\n            result.setVector2(key, this._vectors2[key]);\r\n        }\r\n\r\n        // Vector3\r\n        for (const key in this._vectors3) {\r\n            result.setVector3(key, this._vectors3[key]);\r\n        }\r\n\r\n        // Vector4\r\n        for (const key in this._vectors4) {\r\n            result.setVector4(key, this._vectors4[key]);\r\n        }\r\n\r\n        // Quaternion\r\n        for (const key in this._quaternions) {\r\n            result.setQuaternion(key, this._quaternions[key]);\r\n        }\r\n\r\n        // QuaternionArray\r\n        for (const key in this._quaternionsArrays) {\r\n            result._quaternionsArrays[key] = this._quaternionsArrays[key];\r\n        }\r\n\r\n        // Matrix\r\n        for (const key in this._matrices) {\r\n            result.setMatrix(key, this._matrices[key]);\r\n        }\r\n\r\n        // MatrixArray\r\n        for (const key in this._matrixArrays) {\r\n            result._matrixArrays[key] = this._matrixArrays[key].slice();\r\n        }\r\n\r\n        // Matrix 3x3\r\n        for (const key in this._matrices3x3) {\r\n            result.setMatrix3x3(key, this._matrices3x3[key]);\r\n        }\r\n\r\n        // Matrix 2x2\r\n        for (const key in this._matrices2x2) {\r\n            result.setMatrix2x2(key, this._matrices2x2[key]);\r\n        }\r\n\r\n        // Vector2Array\r\n        for (const key in this._vectors2Arrays) {\r\n            result.setArray2(key, this._vectors2Arrays[key]);\r\n        }\r\n\r\n        // Vector3Array\r\n        for (const key in this._vectors3Arrays) {\r\n            result.setArray3(key, this._vectors3Arrays[key]);\r\n        }\r\n\r\n        // Vector4Array\r\n        for (const key in this._vectors4Arrays) {\r\n            result.setArray4(key, this._vectors4Arrays[key]);\r\n        }\r\n\r\n        // Uniform buffers\r\n        for (const key in this._uniformBuffers) {\r\n            result.setUniformBuffer(key, this._uniformBuffers[key]);\r\n        }\r\n\r\n        // Samplers\r\n        for (const key in this._textureSamplers) {\r\n            result.setTextureSampler(key, this._textureSamplers[key]);\r\n        }\r\n\r\n        // Storag buffers\r\n        for (const key in this._storageBuffers) {\r\n            result.setStorageBuffer(key, this._storageBuffers[key]);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Disposes the material\r\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\r\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\r\n     * @param notBoundToMesh specifies if the material that is being disposed is known to be not bound to any mesh\r\n     */\r\n    public override dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean, notBoundToMesh?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            let name: string;\r\n            for (name in this._textures) {\r\n                this._textures[name].dispose();\r\n            }\r\n\r\n            for (name in this._textureArrays) {\r\n                const array = this._textureArrays[name];\r\n                for (let index = 0; index < array.length; index++) {\r\n                    array[index].dispose();\r\n                }\r\n            }\r\n        }\r\n\r\n        this._textures = {};\r\n        super.dispose(forceDisposeEffect, forceDisposeTextures, notBoundToMesh);\r\n    }\r\n\r\n    /**\r\n     * Serializes this material in a JSON representation\r\n     * @returns the serialized material object\r\n     */\r\n    public override serialize(): any {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.ShaderMaterial\";\r\n        serializationObject.uniqueId = this.uniqueId;\r\n\r\n        serializationObject.options = this._options;\r\n        serializationObject.shaderPath = this._shaderPath;\r\n        serializationObject.storeEffectOnSubMeshes = this._storeEffectOnSubMeshes;\r\n\r\n        let name: string;\r\n\r\n        // Stencil\r\n        serializationObject.stencil = this.stencil.serialize();\r\n\r\n        // Texture\r\n        serializationObject.textures = {};\r\n        for (name in this._textures) {\r\n            serializationObject.textures[name] = this._textures[name].serialize();\r\n        }\r\n\r\n        // Texture arrays\r\n        serializationObject.textureArrays = {};\r\n        for (name in this._textureArrays) {\r\n            serializationObject.textureArrays[name] = [];\r\n            const array = this._textureArrays[name];\r\n            for (let index = 0; index < array.length; index++) {\r\n                serializationObject.textureArrays[name].push(array[index].serialize());\r\n            }\r\n        }\r\n\r\n        // Int\r\n        serializationObject.ints = {};\r\n        for (name in this._ints) {\r\n            serializationObject.ints[name] = this._ints[name];\r\n        }\r\n\r\n        // UInt\r\n        serializationObject.uints = {};\r\n        for (name in this._uints) {\r\n            serializationObject.uints[name] = this._uints[name];\r\n        }\r\n\r\n        // Float\r\n        serializationObject.floats = {};\r\n        for (name in this._floats) {\r\n            serializationObject.floats[name] = this._floats[name];\r\n        }\r\n\r\n        // Floats\r\n        serializationObject.floatsArrays = {};\r\n        for (name in this._floatsArrays) {\r\n            serializationObject.floatsArrays[name] = this._floatsArrays[name];\r\n        }\r\n\r\n        // Color3\r\n        serializationObject.colors3 = {};\r\n        for (name in this._colors3) {\r\n            const color3 = this._colors3[name];\r\n            serializationObject.colors3[name] = [color3.r, color3.g, color3.b];\r\n        }\r\n\r\n        // Color3 array\r\n        serializationObject.colors3Arrays = {};\r\n        for (name in this._colors3Arrays) {\r\n            serializationObject.colors3Arrays[name] = this._colors3Arrays[name];\r\n        }\r\n\r\n        // Color4\r\n        serializationObject.colors4 = {};\r\n        for (name in this._colors4) {\r\n            const color4 = this._colors4[name];\r\n            serializationObject.colors4[name] = [color4.r, color4.g, color4.b, color4.a];\r\n        }\r\n\r\n        // Color4 array\r\n        serializationObject.colors4Arrays = {};\r\n        for (name in this._colors4Arrays) {\r\n            serializationObject.colors4Arrays[name] = this._colors4Arrays[name];\r\n        }\r\n\r\n        // Vector2\r\n        serializationObject.vectors2 = {};\r\n        for (name in this._vectors2) {\r\n            const v2 = this._vectors2[name];\r\n            serializationObject.vectors2[name] = [v2.x, v2.y];\r\n        }\r\n\r\n        // Vector3\r\n        serializationObject.vectors3 = {};\r\n        for (name in this._vectors3) {\r\n            const v3 = this._vectors3[name];\r\n            serializationObject.vectors3[name] = [v3.x, v3.y, v3.z];\r\n        }\r\n\r\n        // Vector4\r\n        serializationObject.vectors4 = {};\r\n        for (name in this._vectors4) {\r\n            const v4 = this._vectors4[name];\r\n            serializationObject.vectors4[name] = [v4.x, v4.y, v4.z, v4.w];\r\n        }\r\n\r\n        // Quaternion\r\n        serializationObject.quaternions = {};\r\n        for (name in this._quaternions) {\r\n            serializationObject.quaternions[name] = this._quaternions[name].asArray();\r\n        }\r\n\r\n        // Matrix\r\n        serializationObject.matrices = {};\r\n        for (name in this._matrices) {\r\n            serializationObject.matrices[name] = this._matrices[name].asArray();\r\n        }\r\n\r\n        // MatrixArray\r\n        serializationObject.matrixArray = {};\r\n        for (name in this._matrixArrays) {\r\n            serializationObject.matrixArray[name] = this._matrixArrays[name];\r\n        }\r\n\r\n        // Matrix 3x3\r\n        serializationObject.matrices3x3 = {};\r\n        for (name in this._matrices3x3) {\r\n            serializationObject.matrices3x3[name] = this._matrices3x3[name];\r\n        }\r\n\r\n        // Matrix 2x2\r\n        serializationObject.matrices2x2 = {};\r\n        for (name in this._matrices2x2) {\r\n            serializationObject.matrices2x2[name] = this._matrices2x2[name];\r\n        }\r\n\r\n        // Vector2Array\r\n        serializationObject.vectors2Arrays = {};\r\n        for (name in this._vectors2Arrays) {\r\n            serializationObject.vectors2Arrays[name] = this._vectors2Arrays[name];\r\n        }\r\n\r\n        // Vector3Array\r\n        serializationObject.vectors3Arrays = {};\r\n        for (name in this._vectors3Arrays) {\r\n            serializationObject.vectors3Arrays[name] = this._vectors3Arrays[name];\r\n        }\r\n\r\n        // Vector4Array\r\n        serializationObject.vectors4Arrays = {};\r\n        for (name in this._vectors4Arrays) {\r\n            serializationObject.vectors4Arrays[name] = this._vectors4Arrays[name];\r\n        }\r\n\r\n        // QuaternionArray\r\n        serializationObject.quaternionsArrays = {};\r\n        for (name in this._quaternionsArrays) {\r\n            serializationObject.quaternionsArrays[name] = this._quaternionsArrays[name];\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a shader material from parsed shader material data\r\n     * @param source defines the JSON representation of the material\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a new material\r\n     */\r\n    public static override Parse(source: any, scene: Scene, rootUrl: string): ShaderMaterial {\r\n        const material = SerializationHelper.Parse(\r\n            () => new ShaderMaterial(source.name, scene, source.shaderPath, source.options, source.storeEffectOnSubMeshes),\r\n            source,\r\n            scene,\r\n            rootUrl\r\n        );\r\n\r\n        let name: string;\r\n\r\n        // Stencil\r\n        if (source.stencil) {\r\n            material.stencil.parse(source.stencil, scene, rootUrl);\r\n        }\r\n\r\n        // Texture\r\n        for (name in source.textures) {\r\n            material.setTexture(name, <BaseTexture>Texture.Parse(source.textures[name], scene, rootUrl));\r\n        }\r\n\r\n        // Texture arrays\r\n        for (name in source.textureArrays) {\r\n            const array = source.textureArrays[name];\r\n            const textureArray: BaseTexture[] = [];\r\n\r\n            for (let index = 0; index < array.length; index++) {\r\n                textureArray.push(<BaseTexture>Texture.Parse(array[index], scene, rootUrl));\r\n            }\r\n            material.setTextureArray(name, textureArray);\r\n        }\r\n\r\n        // Int\r\n        for (name in source.ints) {\r\n            material.setInt(name, source.ints[name]);\r\n        }\r\n\r\n        // UInt\r\n        for (name in source.uints) {\r\n            material.setUInt(name, source.uints[name]);\r\n        }\r\n\r\n        // Float\r\n        for (name in source.floats) {\r\n            material.setFloat(name, source.floats[name]);\r\n        }\r\n\r\n        // Floats\r\n        for (name in source.floatsArrays) {\r\n            material.setFloats(name, source.floatsArrays[name]);\r\n        }\r\n\r\n        // Color3\r\n        for (name in source.colors3) {\r\n            const color = source.colors3[name];\r\n            material.setColor3(name, { r: color[0], g: color[1], b: color[2] });\r\n        }\r\n\r\n        // Color3 arrays\r\n        for (name in source.colors3Arrays) {\r\n            const colors: IColor3Like[] = source.colors3Arrays[name]\r\n                .reduce((arr: Array<Array<number>>, num: number, i: number) => {\r\n                    if (i % 3 === 0) {\r\n                        arr.push([num]);\r\n                    } else {\r\n                        arr[arr.length - 1].push(num);\r\n                    }\r\n                    return arr;\r\n                }, [])\r\n                .map((color: ArrayLike<number>) => ({ r: color[0], g: color[1], b: color[2] }));\r\n            material.setColor3Array(name, colors);\r\n        }\r\n\r\n        // Color4\r\n        for (name in source.colors4) {\r\n            const color = source.colors4[name];\r\n            material.setColor4(name, { r: color[0], g: color[1], b: color[2], a: color[3] });\r\n        }\r\n\r\n        // Color4 arrays\r\n        for (name in source.colors4Arrays) {\r\n            const colors: IColor4Like[] = source.colors4Arrays[name]\r\n                .reduce((arr: Array<Array<number>>, num: number, i: number) => {\r\n                    if (i % 4 === 0) {\r\n                        arr.push([num]);\r\n                    } else {\r\n                        arr[arr.length - 1].push(num);\r\n                    }\r\n                    return arr;\r\n                }, [])\r\n                .map((color: ArrayLike<number>) => ({ r: color[0], g: color[1], b: color[2], a: color[3] }));\r\n            material.setColor4Array(name, colors);\r\n        }\r\n\r\n        // Vector2\r\n        for (name in source.vectors2) {\r\n            const vector = source.vectors2[name];\r\n            material.setVector2(name, { x: vector[0], y: vector[1] });\r\n        }\r\n\r\n        // Vector3\r\n        for (name in source.vectors3) {\r\n            const vector = source.vectors3[name];\r\n            material.setVector3(name, { x: vector[0], y: vector[1], z: vector[2] });\r\n        }\r\n\r\n        // Vector4\r\n        for (name in source.vectors4) {\r\n            const vector = source.vectors4[name];\r\n            material.setVector4(name, { x: vector[0], y: vector[1], z: vector[2], w: vector[3] });\r\n        }\r\n\r\n        // Quaternion\r\n        for (name in source.quaternions) {\r\n            material.setQuaternion(name, Quaternion.FromArray(source.quaternions[name]));\r\n        }\r\n\r\n        // Matrix\r\n        for (name in source.matrices) {\r\n            material.setMatrix(name, Matrix.FromArray(source.matrices[name]));\r\n        }\r\n\r\n        // MatrixArray\r\n        for (name in source.matrixArray) {\r\n            material._matrixArrays[name] = new Float32Array(source.matrixArray[name]);\r\n        }\r\n\r\n        // Matrix 3x3\r\n        for (name in source.matrices3x3) {\r\n            material.setMatrix3x3(name, source.matrices3x3[name]);\r\n        }\r\n\r\n        // Matrix 2x2\r\n        for (name in source.matrices2x2) {\r\n            material.setMatrix2x2(name, source.matrices2x2[name]);\r\n        }\r\n\r\n        // Vector2Array\r\n        for (name in source.vectors2Arrays) {\r\n            material.setArray2(name, source.vectors2Arrays[name]);\r\n        }\r\n\r\n        // Vector3Array\r\n        for (name in source.vectors3Arrays) {\r\n            material.setArray3(name, source.vectors3Arrays[name]);\r\n        }\r\n\r\n        // Vector4Array\r\n        for (name in source.vectors4Arrays) {\r\n            material.setArray4(name, source.vectors4Arrays[name]);\r\n        }\r\n\r\n        // QuaternionArray\r\n        for (name in source.quaternionsArrays) {\r\n            material.setArray4(name, source.quaternionsArrays[name]);\r\n        }\r\n\r\n        return material;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ShaderMaterial from a snippet saved in a remote file\r\n     * @param name defines the name of the ShaderMaterial to create (can be null or empty to use the one from the json data)\r\n     * @param url defines the url to load from\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a promise that will resolve to the new ShaderMaterial\r\n     */\r\n    public static async ParseFromFileAsync(name: Nullable<string>, url: string, scene: Scene, rootUrl = \"\"): Promise<ShaderMaterial> {\r\n        return await new Promise((resolve, reject) => {\r\n            const request = new WebRequest();\r\n            request.addEventListener(\"readystatechange\", () => {\r\n                if (request.readyState == 4) {\r\n                    if (request.status == 200) {\r\n                        const serializationObject = JSON.parse(request.responseText);\r\n                        const output = this.Parse(serializationObject, scene || EngineStore.LastCreatedScene, rootUrl);\r\n\r\n                        if (name) {\r\n                            output.name = name;\r\n                        }\r\n\r\n                        resolve(output);\r\n                    } else {\r\n                        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\r\n                        reject(\"Unable to load the ShaderMaterial\");\r\n                    }\r\n                }\r\n            });\r\n\r\n            request.open(\"GET\", url);\r\n            request.send();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a ShaderMaterial from a snippet saved by the Inspector\r\n     * @param snippetId defines the snippet to load\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a promise that will resolve to the new ShaderMaterial\r\n     */\r\n    public static async ParseFromSnippetAsync(snippetId: string, scene: Scene, rootUrl = \"\"): Promise<ShaderMaterial> {\r\n        return await new Promise((resolve, reject) => {\r\n            const request = new WebRequest();\r\n            request.addEventListener(\"readystatechange\", () => {\r\n                if (request.readyState == 4) {\r\n                    if (request.status == 200) {\r\n                        const snippet = JSON.parse(JSON.parse(request.responseText).jsonPayload);\r\n                        const serializationObject = JSON.parse(snippet.shaderMaterial);\r\n                        const output = this.Parse(serializationObject, scene || EngineStore.LastCreatedScene, rootUrl);\r\n\r\n                        output.snippetId = snippetId;\r\n\r\n                        resolve(output);\r\n                    } else {\r\n                        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\r\n                        reject(\"Unable to load the snippet \" + snippetId);\r\n                    }\r\n                }\r\n            });\r\n\r\n            request.open(\"GET\", this.SnippetUrl + \"/\" + snippetId.replace(/#/g, \"/\"));\r\n            request.send();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a ShaderMaterial from a snippet saved by the Inspector\r\n     * @deprecated Please use ParseFromSnippetAsync instead\r\n     * @param snippetId defines the snippet to load\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a promise that will resolve to the new ShaderMaterial\r\n     */\r\n    public static CreateFromSnippetAsync = ShaderMaterial.ParseFromSnippetAsync;\r\n}\r\n\r\nRegisterClass(\"BABYLON.ShaderMaterial\", ShaderMaterial);\r\n", "import { serializeAsColor3, serializeAsVector3 } from \"../Misc/decorators\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { Node } from \"../node\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Light } from \"./light\";\r\nimport type { IShadowGenerator } from \"./Shadows/shadowGenerator\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\nNode.AddNodeConstructor(\"Light_Type_3\", (name, scene) => {\r\n    return () => new HemisphericLight(name, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * The HemisphericLight simulates the ambient environment light,\r\n * so the passed direction is the light reflection direction, not the incoming direction.\r\n */\r\nexport class HemisphericLight extends Light {\r\n    /**\r\n     * The groundColor is the light in the opposite direction to the one specified during creation.\r\n     * You can think of the diffuse and specular light as coming from the centre of the object in the given direction and the groundColor light in the opposite direction.\r\n     */\r\n    @serializeAsColor3()\r\n    public groundColor = new Color3(0.0, 0.0, 0.0);\r\n\r\n    /**\r\n     * The light reflection direction, not the incoming direction.\r\n     */\r\n    @serializeAsVector3()\r\n    public direction: Vector3;\r\n\r\n    /**\r\n     * Creates a HemisphericLight object in the scene according to the passed direction (Vector3).\r\n     * The HemisphericLight simulates the ambient environment light, so the passed direction is the light reflection direction, not the incoming direction.\r\n     * The HemisphericLight can't cast shadows.\r\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n     * @param name The friendly name of the light\r\n     * @param direction The direction of the light reflection\r\n     * @param scene The scene the light belongs to\r\n     */\r\n    constructor(name: string, direction: Vector3, scene?: Scene) {\r\n        super(name, scene);\r\n        this.direction = direction || Vector3.Up();\r\n    }\r\n\r\n    protected _buildUniformLayout(): void {\r\n        this._uniformBuffer.addUniform(\"vLightData\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightGround\", 3);\r\n        this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\r\n        this._uniformBuffer.addUniform(\"depthValues\", 2);\r\n        this._uniformBuffer.create();\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"HemisphericLight\".\r\n     * @returns The class name\r\n     */\r\n    public override getClassName(): string {\r\n        return \"HemisphericLight\";\r\n    }\r\n\r\n    /**\r\n     * Sets the HemisphericLight direction towards the passed target (Vector3).\r\n     * Returns the updated direction.\r\n     * @param target The target the direction should point to\r\n     * @returns The computed direction\r\n     */\r\n    public setDirectionToTarget(target: Vector3): Vector3 {\r\n        this.direction = Vector3.Normalize(target.subtract(Vector3.Zero()));\r\n        return this.direction;\r\n    }\r\n\r\n    /**\r\n     * Returns the shadow generator associated to the light.\r\n     * @returns Always null for hemispheric lights because it does not support shadows.\r\n     */\r\n    public override getShadowGenerator(): Nullable<IShadowGenerator> {\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Sets the passed Effect object with the HemisphericLight normalized direction and color and the passed name (string).\r\n     * @param _effect The effect to update\r\n     * @param lightIndex The index of the light in the effect to update\r\n     * @returns The hemispheric light\r\n     */\r\n    public transferToEffect(_effect: Effect, lightIndex: string): HemisphericLight {\r\n        const normalizeDirection = Vector3.Normalize(this.direction);\r\n        this._uniformBuffer.updateFloat4(\"vLightData\", normalizeDirection.x, normalizeDirection.y, normalizeDirection.z, 0.0, lightIndex);\r\n        this._uniformBuffer.updateColor3(\"vLightGround\", this.groundColor.scale(this.intensity), lightIndex);\r\n        return this;\r\n    }\r\n\r\n    public transferToNodeMaterialEffect(effect: Effect, lightDataUniformName: string) {\r\n        const normalizeDirection = Vector3.Normalize(this.direction);\r\n        effect.setFloat3(lightDataUniformName, normalizeDirection.x, normalizeDirection.y, normalizeDirection.z);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Computes the world matrix of the node\r\n     * @returns the world matrix\r\n     */\r\n    public override computeWorldMatrix(): Matrix {\r\n        if (!this._worldMatrix) {\r\n            this._worldMatrix = Matrix.Identity();\r\n        }\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    /**\r\n     * Returns the integer 3.\r\n     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public override getTypeID(): number {\r\n        return Light.LIGHTTYPEID_HEMISPHERICLIGHT;\r\n    }\r\n\r\n    /**\r\n     * Prepares the list of defines specific to the light type.\r\n     * @param defines the list of defines\r\n     * @param lightIndex defines the index of the light for the effect\r\n     */\r\n    public prepareLightSpecificDefines(defines: any, lightIndex: number): void {\r\n        defines[\"HEMILIGHT\" + lightIndex] = true;\r\n    }\r\n}\r\n\r\n// Register Class Name\r\nRegisterClass(\"BABYLON.HemisphericLight\", HemisphericLight);\r\n", "import { serialize } from \"../Misc/decorators\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport { Node } from \"../node\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Light } from \"./light\";\r\nimport { ShadowLight } from \"./shadowLight\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\nNode.AddNodeConstructor(\"Light_Type_0\", (name, scene) => {\r\n    return () => new PointLight(name, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * A point light is a light defined by an unique point in world space.\r\n * The light is emitted in every direction from this point.\r\n * A good example of a point light is a standard light bulb.\r\n * Documentation: https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n */\r\nexport class PointLight extends ShadowLight {\r\n    private _shadowAngle = Math.PI / 2;\r\n    /**\r\n     * Getter: In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     * This specifies what angle the shadow will use to be created.\r\n     *\r\n     * It default to 90 degrees to work nicely with the cube texture generation for point lights shadow maps.\r\n     */\r\n    @serialize()\r\n    public get shadowAngle(): number {\r\n        return this._shadowAngle;\r\n    }\r\n    /**\r\n     * Setter: In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     * This specifies what angle the shadow will use to be created.\r\n     *\r\n     * It default to 90 degrees to work nicely with the cube texture generation for point lights shadow maps.\r\n     */\r\n    public set shadowAngle(value: number) {\r\n        this._shadowAngle = value;\r\n        this.forceProjectionMatrixCompute();\r\n    }\r\n\r\n    /**\r\n     * Gets the direction if it has been set.\r\n     * In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     */\r\n    public override get direction(): Vector3 {\r\n        return this._direction;\r\n    }\r\n\r\n    /**\r\n     * In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     */\r\n    public override set direction(value: Vector3) {\r\n        const previousNeedCube = this.needCube();\r\n        this._direction = value;\r\n        if (this.needCube() !== previousNeedCube && this._shadowGenerators) {\r\n            const iterator = this._shadowGenerators.values();\r\n            for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n                const shadowGenerator = key.value;\r\n                shadowGenerator.recreateShadowMap();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a PointLight object from the passed name and position (Vector3) and adds it in the scene.\r\n     * A PointLight emits the light in every direction.\r\n     * It can cast shadows.\r\n     * If the scene camera is already defined and you want to set your PointLight at the camera position, just set it :\r\n     * ```javascript\r\n     * var pointLight = new PointLight(\"pl\", camera.position, scene);\r\n     * ```\r\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n     * @param name The light friendly name\r\n     * @param position The position of the point light in the scene\r\n     * @param scene The scene the lights belongs to\r\n     */\r\n    constructor(name: string, position: Vector3, scene?: Scene) {\r\n        super(name, scene);\r\n        this.position = position;\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"PointLight\"\r\n     * @returns the class name\r\n     */\r\n    public override getClassName(): string {\r\n        return \"PointLight\";\r\n    }\r\n\r\n    /**\r\n     * Returns the integer 0.\r\n     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public override getTypeID(): number {\r\n        return Light.LIGHTTYPEID_POINTLIGHT;\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not the shadowmap should be a cube texture.\r\n     * @returns true if the shadowmap needs to be a cube texture.\r\n     */\r\n    public override needCube(): boolean {\r\n        return !this.direction;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 aligned with the PointLight cube system according to the passed cube face index (integer).\r\n     * @param faceIndex The index of the face we are computed the direction to generate shadow\r\n     * @returns The set direction in 2d mode otherwise the direction to the cubemap face if needCube() is true\r\n     */\r\n    public override getShadowDirection(faceIndex?: number): Vector3 {\r\n        if (this.direction) {\r\n            return super.getShadowDirection(faceIndex);\r\n        } else {\r\n            switch (faceIndex) {\r\n                case 0:\r\n                    return new Vector3(1.0, 0.0, 0.0);\r\n                case 1:\r\n                    return new Vector3(-1.0, 0.0, 0.0);\r\n                case 2:\r\n                    return new Vector3(0.0, -1.0, 0.0);\r\n                case 3:\r\n                    return new Vector3(0.0, 1.0, 0.0);\r\n                case 4:\r\n                    return new Vector3(0.0, 0.0, 1.0);\r\n                case 5:\r\n                    return new Vector3(0.0, 0.0, -1.0);\r\n            }\r\n        }\r\n\r\n        return Vector3.Zero();\r\n    }\r\n\r\n    /**\r\n     * Sets the passed matrix \"matrix\" as a left-handed perspective projection matrix with the following settings :\r\n     * - fov = PI / 2\r\n     * - aspect ratio : 1.0\r\n     * - z-near and far equal to the active camera minZ and maxZ.\r\n     * Returns the PointLight.\r\n     * @param matrix\r\n     * @param viewMatrix\r\n     * @param renderList\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _setDefaultShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): void {\r\n        const activeCamera = this.getScene().activeCamera;\r\n\r\n        if (!activeCamera) {\r\n            return;\r\n        }\r\n\r\n        const minZ = this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ;\r\n        const maxZ = this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ;\r\n\r\n        const useReverseDepthBuffer = this.getScene().getEngine().useReverseDepthBuffer;\r\n\r\n        Matrix.PerspectiveFovLHToRef(\r\n            this.shadowAngle,\r\n            1.0,\r\n            useReverseDepthBuffer ? maxZ : minZ,\r\n            useReverseDepthBuffer ? minZ : maxZ,\r\n            matrix,\r\n            true,\r\n            this._scene.getEngine().isNDCHalfZRange,\r\n            undefined,\r\n            useReverseDepthBuffer\r\n        );\r\n    }\r\n\r\n    protected _buildUniformLayout(): void {\r\n        this._uniformBuffer.addUniform(\"vLightData\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightFalloff\", 4);\r\n        this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\r\n        this._uniformBuffer.addUniform(\"depthValues\", 2);\r\n        this._uniformBuffer.create();\r\n    }\r\n\r\n    /**\r\n     * Sets the passed Effect \"effect\" with the PointLight transformed position (or position, if none) and passed name (string).\r\n     * @param effect The effect to update\r\n     * @param lightIndex The index of the light in the effect to update\r\n     * @returns The point light\r\n     */\r\n    public transferToEffect(effect: Effect, lightIndex: string): PointLight {\r\n        if (this.computeTransformedInformation()) {\r\n            this._uniformBuffer.updateFloat4(\r\n                \"vLightData\",\r\n                this.transformedPosition.x - this._scene.floatingOriginOffset.x,\r\n                this.transformedPosition.y - this._scene.floatingOriginOffset.y,\r\n                this.transformedPosition.z - this._scene.floatingOriginOffset.z,\r\n                0.0,\r\n                lightIndex\r\n            );\r\n        } else {\r\n            this._uniformBuffer.updateFloat4(\r\n                \"vLightData\",\r\n                this.position.x - this._scene.floatingOriginOffset.x,\r\n                this.position.y - this._scene.floatingOriginOffset.y,\r\n                this.position.z - this._scene.floatingOriginOffset.z,\r\n                0,\r\n                lightIndex\r\n            );\r\n        }\r\n\r\n        this._uniformBuffer.updateFloat4(\"vLightFalloff\", this.range, this._inverseSquaredRange, 0, 0, lightIndex);\r\n        return this;\r\n    }\r\n\r\n    public transferToNodeMaterialEffect(effect: Effect, lightDataUniformName: string) {\r\n        if (this.computeTransformedInformation()) {\r\n            effect.setFloat3(\r\n                lightDataUniformName,\r\n                this.transformedPosition.x - this._scene.floatingOriginOffset.x,\r\n                this.transformedPosition.y - this._scene.floatingOriginOffset.y,\r\n                this.transformedPosition.z - this._scene.floatingOriginOffset.z\r\n            );\r\n        } else {\r\n            effect.setFloat3(\r\n                lightDataUniformName,\r\n                this.position.x - this._scene.floatingOriginOffset.x,\r\n                this.position.y - this._scene.floatingOriginOffset.y,\r\n                this.position.z - this._scene.floatingOriginOffset.z\r\n            );\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Prepares the list of defines specific to the light type.\r\n     * @param defines the list of defines\r\n     * @param lightIndex defines the index of the light for the effect\r\n     */\r\n    public prepareLightSpecificDefines(defines: any, lightIndex: number): void {\r\n        defines[\"POINTLIGHT\" + lightIndex] = true;\r\n    }\r\n}\r\n\r\n// Register Class Name\r\nRegisterClass(\"BABYLON.PointLight\", PointLight);\r\n", "import type { IGLTFTechniqueParameter, IGLTFAccessor, IGLTFRuntime, IGLTFBufferView } from \"./glTFLoaderInterfaces\";\r\nimport { EParameterType, ETextureWrapMode, ETextureFilterType, EComponentType } from \"./glTFLoaderInterfaces\";\r\n\r\nimport type { Nullable } from \"core/types\";\r\nimport { Vector2, Vector3, Vector4, Matrix } from \"core/Maths/math.vector\";\r\nimport { Color4 } from \"core/Maths/math.color\";\r\nimport { Effect } from \"core/Materials/effect\";\r\nimport { ShaderMaterial } from \"core/Materials/shaderMaterial\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport type { Node } from \"core/node\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\n/**\r\n * Utils functions for GLTF\r\n * @internal\r\n * @deprecated\r\n */\r\nexport class GLTFUtils {\r\n    /**\r\n     * Sets the given \"parameter\" matrix\r\n     * @param scene the Scene object\r\n     * @param source the source node where to pick the matrix\r\n     * @param parameter the GLTF technique parameter\r\n     * @param uniformName the name of the shader's uniform\r\n     * @param shaderMaterial the shader material\r\n     */\r\n    public static SetMatrix(scene: Scene, source: Node, parameter: IGLTFTechniqueParameter, uniformName: string, shaderMaterial: ShaderMaterial | Effect): void {\r\n        let mat: Nullable<Matrix> = null;\r\n\r\n        if (parameter.semantic === \"MODEL\") {\r\n            mat = source.getWorldMatrix();\r\n        } else if (parameter.semantic === \"PROJECTION\") {\r\n            mat = scene.getProjectionMatrix();\r\n        } else if (parameter.semantic === \"VIEW\") {\r\n            mat = scene.getViewMatrix();\r\n        } else if (parameter.semantic === \"MODELVIEWINVERSETRANSPOSE\") {\r\n            mat = Matrix.Transpose(source.getWorldMatrix().multiply(scene.getViewMatrix()).invert());\r\n        } else if (parameter.semantic === \"MODELVIEW\") {\r\n            mat = source.getWorldMatrix().multiply(scene.getViewMatrix());\r\n        } else if (parameter.semantic === \"MODELVIEWPROJECTION\") {\r\n            mat = source.getWorldMatrix().multiply(scene.getTransformMatrix());\r\n        } else if (parameter.semantic === \"MODELINVERSE\") {\r\n            mat = source.getWorldMatrix().invert();\r\n        } else if (parameter.semantic === \"VIEWINVERSE\") {\r\n            mat = scene.getViewMatrix().invert();\r\n        } else if (parameter.semantic === \"PROJECTIONINVERSE\") {\r\n            mat = scene.getProjectionMatrix().invert();\r\n        } else if (parameter.semantic === \"MODELVIEWINVERSE\") {\r\n            mat = source.getWorldMatrix().multiply(scene.getViewMatrix()).invert();\r\n        } else if (parameter.semantic === \"MODELVIEWPROJECTIONINVERSE\") {\r\n            mat = source.getWorldMatrix().multiply(scene.getTransformMatrix()).invert();\r\n        } else if (parameter.semantic === \"MODELINVERSETRANSPOSE\") {\r\n            mat = Matrix.Transpose(source.getWorldMatrix().invert());\r\n        }\r\n\r\n        if (mat) {\r\n            switch (parameter.type) {\r\n                case EParameterType.FLOAT_MAT2:\r\n                    shaderMaterial.setMatrix2x2(uniformName, Matrix.GetAsMatrix2x2(mat));\r\n                    break;\r\n                case EParameterType.FLOAT_MAT3:\r\n                    shaderMaterial.setMatrix3x3(uniformName, Matrix.GetAsMatrix3x3(mat));\r\n                    break;\r\n                case EParameterType.FLOAT_MAT4:\r\n                    shaderMaterial.setMatrix(uniformName, mat);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the given \"parameter\" matrix\r\n     * @param shaderMaterial the shader material\r\n     * @param uniform the name of the shader's uniform\r\n     * @param value the value of the uniform\r\n     * @param type the uniform's type (EParameterType FLOAT, VEC2, VEC3 or VEC4)\r\n     * @returns true if set, else false\r\n     */\r\n    public static SetUniform(shaderMaterial: ShaderMaterial | Effect, uniform: string, value: any, type: number): boolean {\r\n        switch (type) {\r\n            case EParameterType.FLOAT:\r\n                shaderMaterial.setFloat(uniform, value);\r\n                return true;\r\n            case EParameterType.FLOAT_VEC2:\r\n                shaderMaterial.setVector2(uniform, Vector2.FromArray(value));\r\n                return true;\r\n            case EParameterType.FLOAT_VEC3:\r\n                shaderMaterial.setVector3(uniform, Vector3.FromArray(value));\r\n                return true;\r\n            case EParameterType.FLOAT_VEC4:\r\n                shaderMaterial.setVector4(uniform, Vector4.FromArray(value));\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the wrap mode of the texture\r\n     * @param mode the mode value\r\n     * @returns the wrap mode (TEXTURE_WRAP_ADDRESSMODE, MIRROR_ADDRESSMODE or CLAMP_ADDRESSMODE)\r\n     */\r\n    public static GetWrapMode(mode: number): number {\r\n        switch (mode) {\r\n            case ETextureWrapMode.CLAMP_TO_EDGE:\r\n                return Texture.CLAMP_ADDRESSMODE;\r\n            case ETextureWrapMode.MIRRORED_REPEAT:\r\n                return Texture.MIRROR_ADDRESSMODE;\r\n            case ETextureWrapMode.REPEAT:\r\n                return Texture.WRAP_ADDRESSMODE;\r\n            default:\r\n                return Texture.WRAP_ADDRESSMODE;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the byte stride giving an accessor\r\n     * @param accessor the GLTF accessor objet\r\n     * @returns the byte stride\r\n     */\r\n    public static GetByteStrideFromType(accessor: IGLTFAccessor): number {\r\n        // Needs this function since \"byteStride\" isn't requiered in glTF format\r\n        const type = accessor.type;\r\n\r\n        switch (type) {\r\n            case \"VEC2\":\r\n                return 2;\r\n            case \"VEC3\":\r\n                return 3;\r\n            case \"VEC4\":\r\n                return 4;\r\n            case \"MAT2\":\r\n                return 4;\r\n            case \"MAT3\":\r\n                return 9;\r\n            case \"MAT4\":\r\n                return 16;\r\n            default:\r\n                return 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the texture filter mode giving a mode value\r\n     * @param mode the filter mode value\r\n     * @returns the filter mode (TODO - needs to be a type?)\r\n     */\r\n    public static GetTextureFilterMode(mode: number): number {\r\n        switch (mode) {\r\n            case ETextureFilterType.LINEAR:\r\n            case ETextureFilterType.LINEAR_MIPMAP_NEAREST:\r\n            case ETextureFilterType.LINEAR_MIPMAP_LINEAR:\r\n                return Texture.TRILINEAR_SAMPLINGMODE;\r\n            case ETextureFilterType.NEAREST:\r\n            case ETextureFilterType.NEAREST_MIPMAP_NEAREST:\r\n                return Texture.NEAREST_SAMPLINGMODE;\r\n            default:\r\n                return Texture.BILINEAR_SAMPLINGMODE;\r\n        }\r\n    }\r\n\r\n    public static GetBufferFromBufferView(\r\n        gltfRuntime: IGLTFRuntime,\r\n        bufferView: IGLTFBufferView,\r\n        byteOffset: number,\r\n        byteLength: number,\r\n        componentType: EComponentType\r\n    ): ArrayBufferView {\r\n        byteOffset = bufferView.byteOffset + byteOffset;\r\n\r\n        const loadedBufferView = gltfRuntime.loadedBufferViews[bufferView.buffer];\r\n        if (byteOffset + byteLength > loadedBufferView.byteLength) {\r\n            throw new Error(\"Buffer access is out of range\");\r\n        }\r\n\r\n        const buffer = loadedBufferView.buffer;\r\n        byteOffset += loadedBufferView.byteOffset;\r\n\r\n        switch (componentType) {\r\n            case EComponentType.BYTE:\r\n                return new Int8Array(buffer, byteOffset, byteLength);\r\n            case EComponentType.UNSIGNED_BYTE:\r\n                return new Uint8Array(buffer, byteOffset, byteLength);\r\n            case EComponentType.SHORT:\r\n                return new Int16Array(buffer, byteOffset, byteLength);\r\n            case EComponentType.UNSIGNED_SHORT:\r\n                return new Uint16Array(buffer, byteOffset, byteLength);\r\n            default:\r\n                return new Float32Array(buffer, byteOffset, byteLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a buffer from its accessor\r\n     * @param gltfRuntime the GLTF runtime\r\n     * @param accessor the GLTF accessor\r\n     * @returns an array buffer view\r\n     */\r\n    public static GetBufferFromAccessor(gltfRuntime: IGLTFRuntime, accessor: IGLTFAccessor): any {\r\n        const bufferView: IGLTFBufferView = gltfRuntime.bufferViews[accessor.bufferView];\r\n        const byteLength = accessor.count * GLTFUtils.GetByteStrideFromType(accessor);\r\n        return GLTFUtils.GetBufferFromBufferView(gltfRuntime, bufferView, accessor.byteOffset, byteLength, accessor.componentType);\r\n    }\r\n\r\n    /**\r\n     * Decodes a buffer view into a string\r\n     * @param view the buffer view\r\n     * @returns a string\r\n     */\r\n    public static DecodeBufferToText(view: ArrayBufferView): string {\r\n        let result = \"\";\r\n        const length = view.byteLength;\r\n\r\n        for (let i = 0; i < length; ++i) {\r\n            result += String.fromCharCode((<any>view)[i]);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns the default material of gltf. Related to\r\n     * https://github.com/KhronosGroup/glTF/tree/master/specification/1.0#appendix-a-default-material\r\n     * @param scene the Babylon.js scene\r\n     * @returns the default Babylon material\r\n     */\r\n    public static GetDefaultMaterial(scene: Scene): ShaderMaterial {\r\n        if (!GLTFUtils._DefaultMaterial) {\r\n            Effect.ShadersStore[\"GLTFDefaultMaterialVertexShader\"] = [\r\n                \"precision highp float;\",\r\n                \"\",\r\n                \"uniform mat4 worldView;\",\r\n                \"uniform mat4 projection;\",\r\n                \"\",\r\n                \"attribute vec3 position;\",\r\n                \"\",\r\n                \"void main(void)\",\r\n                \"{\",\r\n                \"    gl_Position = projection * worldView * vec4(position, 1.0);\",\r\n                \"}\",\r\n            ].join(\"\\n\");\r\n\r\n            Effect.ShadersStore[\"GLTFDefaultMaterialPixelShader\"] = [\r\n                \"precision highp float;\",\r\n                \"\",\r\n                \"uniform vec4 u_emission;\",\r\n                \"\",\r\n                \"void main(void)\",\r\n                \"{\",\r\n                \"    gl_FragColor = u_emission;\",\r\n                \"}\",\r\n            ].join(\"\\n\");\r\n\r\n            const shaderPath = {\r\n                vertex: \"GLTFDefaultMaterial\",\r\n                fragment: \"GLTFDefaultMaterial\",\r\n            };\r\n\r\n            const options = {\r\n                attributes: [\"position\"],\r\n                uniforms: [\"worldView\", \"projection\", \"u_emission\"],\r\n                samplers: new Array<string>(),\r\n                needAlphaBlending: false,\r\n            };\r\n\r\n            GLTFUtils._DefaultMaterial = new ShaderMaterial(\"GLTFDefaultMaterial\", scene, shaderPath, options);\r\n            GLTFUtils._DefaultMaterial.setColor4(\"u_emission\", new Color4(0.5, 0.5, 0.5, 1.0));\r\n        }\r\n\r\n        return GLTFUtils._DefaultMaterial;\r\n    }\r\n\r\n    // The GLTF default material\r\n    private static _DefaultMaterial: Nullable<ShaderMaterial> = null;\r\n}\r\n", "/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport type {\r\n    IGLTFRuntime,\r\n    IGLTFTechniqueParameter,\r\n    IGLTFAnimation,\r\n    IGLTFAnimationSampler,\r\n    IGLTFNode,\r\n    IGLTFSkins,\r\n    INodeToRoot,\r\n    IJointNode,\r\n    IGLTFMesh,\r\n    IGLTFAccessor,\r\n    IGLTFLight,\r\n    IGLTFAmbienLight,\r\n    IGLTFDirectionalLight,\r\n    IGLTFPointLight,\r\n    IGLTFSpotLight,\r\n    IGLTFCamera,\r\n    IGLTFCameraPerspective,\r\n    IGLTFScene,\r\n    IGLTFTechnique,\r\n    IGLTFMaterial,\r\n    IGLTFProgram,\r\n    IGLTFBuffer,\r\n    IGLTFTexture,\r\n    IGLTFImage,\r\n    IGLTFSampler,\r\n    IGLTFShader,\r\n    IGLTFTechniqueStates,\r\n} from \"./glTFLoaderInterfaces\";\r\nimport { EParameterType, ETextureFilterType, ECullingType, EBlendingFunction, EShaderType } from \"./glTFLoaderInterfaces\";\r\n\r\nimport type { FloatArray, Nullable } from \"core/types\";\r\nimport { Quaternion, Vector3, Matrix } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { Camera } from \"core/Cameras/camera\";\r\nimport { FreeCamera } from \"core/Cameras/freeCamera\";\r\nimport { Animation } from \"core/Animations/animation\";\r\nimport { Bone } from \"core/Bones/bone\";\r\nimport { Skeleton } from \"core/Bones/skeleton\";\r\nimport { Effect } from \"core/Materials/effect\";\r\nimport { Material } from \"core/Materials/material\";\r\nimport { MultiMaterial } from \"core/Materials/multiMaterial\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport { ShaderMaterial } from \"core/Materials/shaderMaterial\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport type { Node } from \"core/node\";\r\nimport { VertexData } from \"core/Meshes/mesh.vertexData\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport { Geometry } from \"core/Meshes/geometry\";\r\nimport { SubMesh } from \"core/Meshes/subMesh\";\r\nimport { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { HemisphericLight } from \"core/Lights/hemisphericLight\";\r\nimport { DirectionalLight } from \"core/Lights/directionalLight\";\r\nimport { PointLight } from \"core/Lights/pointLight\";\r\nimport { SpotLight } from \"core/Lights/spotLight\";\r\nimport type { ISceneLoaderAsyncResult, ISceneLoaderProgressEvent } from \"core/Loading/sceneLoader\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\nimport { GLTFUtils } from \"./glTFLoaderUtils\";\r\nimport type { IGLTFLoader, IGLTFLoaderData } from \"../glTFFileLoader\";\r\nimport { GLTFFileLoader } from \"../glTFFileLoader\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport type { AssetContainer } from \"core/assetContainer\";\r\n\r\n/**\r\n * Tokenizer. Used for shaders compatibility\r\n * Automatically map world, view, projection, worldViewProjection, attributes and so on\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nenum ETokenType {\r\n    IDENTIFIER = 1,\r\n\r\n    UNKNOWN = 2,\r\n    END_OF_INPUT = 3,\r\n}\r\n\r\nclass Tokenizer {\r\n    private _toParse: string;\r\n    private _pos: number = 0;\r\n    private _maxPos: number;\r\n\r\n    public currentToken: ETokenType = ETokenType.UNKNOWN;\r\n    public currentIdentifier: string = \"\";\r\n    public currentString: string = \"\";\r\n    public isLetterOrDigitPattern: RegExp = /^[a-zA-Z0-9]+$/;\r\n\r\n    constructor(toParse: string) {\r\n        this._toParse = toParse;\r\n        this._maxPos = toParse.length;\r\n    }\r\n\r\n    public getNextToken(): ETokenType {\r\n        if (this.isEnd()) {\r\n            return ETokenType.END_OF_INPUT;\r\n        }\r\n\r\n        this.currentString = this.read();\r\n        this.currentToken = ETokenType.UNKNOWN;\r\n\r\n        if (this.currentString === \"_\" || this.isLetterOrDigitPattern.test(this.currentString)) {\r\n            this.currentToken = ETokenType.IDENTIFIER;\r\n            this.currentIdentifier = this.currentString;\r\n            while (!this.isEnd() && (this.isLetterOrDigitPattern.test((this.currentString = this.peek())) || this.currentString === \"_\")) {\r\n                this.currentIdentifier += this.currentString;\r\n                this.forward();\r\n            }\r\n        }\r\n\r\n        return this.currentToken;\r\n    }\r\n\r\n    public peek(): string {\r\n        return this._toParse[this._pos];\r\n    }\r\n\r\n    public read(): string {\r\n        return this._toParse[this._pos++];\r\n    }\r\n\r\n    public forward(): void {\r\n        this._pos++;\r\n    }\r\n\r\n    public isEnd(): boolean {\r\n        return this._pos >= this._maxPos;\r\n    }\r\n}\r\n\r\n/**\r\n * Values\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nconst glTFTransforms = [\"MODEL\", \"VIEW\", \"PROJECTION\", \"MODELVIEW\", \"MODELVIEWPROJECTION\", \"JOINTMATRIX\"];\r\nconst BabylonTransforms = [\"world\", \"view\", \"projection\", \"worldView\", \"worldViewProjection\", \"mBones\"];\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nconst glTFAnimationPaths = [\"translation\", \"rotation\", \"scale\"];\r\nconst BabylonAnimationPaths = [\"position\", \"rotationQuaternion\", \"scaling\"];\r\n\r\n/**\r\n * Parse\r\n * @param parsedBuffers\r\n * @param gltfRuntime\r\n */\r\nconst ParseBuffers = (parsedBuffers: any, gltfRuntime: IGLTFRuntime) => {\r\n    for (const buf in parsedBuffers) {\r\n        const parsedBuffer = parsedBuffers[buf];\r\n        gltfRuntime.buffers[buf] = parsedBuffer;\r\n        gltfRuntime.buffersCount++;\r\n    }\r\n};\r\n\r\nconst ParseShaders = (parsedShaders: any, gltfRuntime: IGLTFRuntime) => {\r\n    for (const sha in parsedShaders) {\r\n        const parsedShader = parsedShaders[sha];\r\n        gltfRuntime.shaders[sha] = parsedShader;\r\n        gltfRuntime.shaderscount++;\r\n    }\r\n};\r\n\r\nconst ParseObject = (parsedObjects: any, runtimeProperty: string, gltfRuntime: IGLTFRuntime) => {\r\n    for (const object in parsedObjects) {\r\n        const parsedObject = parsedObjects[object];\r\n        (<any>gltfRuntime)[runtimeProperty][object] = parsedObject;\r\n    }\r\n};\r\n\r\n/**\r\n * Utils\r\n * @param buffer\r\n */\r\nconst NormalizeUVs = (buffer: any) => {\r\n    if (!buffer) {\r\n        return;\r\n    }\r\n\r\n    for (let i = 0; i < buffer.length / 2; i++) {\r\n        buffer[i * 2 + 1] = 1.0 - buffer[i * 2 + 1];\r\n    }\r\n};\r\n\r\nconst GetAttribute = (attributeParameter: IGLTFTechniqueParameter): Nullable<string> => {\r\n    if (attributeParameter.semantic === \"NORMAL\") {\r\n        return \"normal\";\r\n    } else if (attributeParameter.semantic === \"POSITION\") {\r\n        return \"position\";\r\n    } else if (attributeParameter.semantic === \"JOINT\") {\r\n        return \"matricesIndices\";\r\n    } else if (attributeParameter.semantic === \"WEIGHT\") {\r\n        return \"matricesWeights\";\r\n    } else if (attributeParameter.semantic === \"COLOR\") {\r\n        return \"color\";\r\n    } else if (attributeParameter.semantic && attributeParameter.semantic.indexOf(\"TEXCOORD_\") !== -1) {\r\n        const channel = Number(attributeParameter.semantic.split(\"_\")[1]);\r\n        return \"uv\" + (channel === 0 ? \"\" : channel + 1);\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Loads and creates animations\r\n * @param gltfRuntime\r\n */\r\nconst LoadAnimations = (gltfRuntime: IGLTFRuntime) => {\r\n    for (const anim in gltfRuntime.animations) {\r\n        const animation: IGLTFAnimation = gltfRuntime.animations[anim];\r\n\r\n        if (!animation.channels || !animation.samplers) {\r\n            continue;\r\n        }\r\n\r\n        let lastAnimation: Nullable<Animation> = null;\r\n\r\n        for (let i = 0; i < animation.channels.length; i++) {\r\n            // Get parameters and load buffers\r\n            const channel = animation.channels[i];\r\n            const sampler: IGLTFAnimationSampler = animation.samplers[channel.sampler];\r\n\r\n            if (!sampler) {\r\n                continue;\r\n            }\r\n\r\n            let inputData: Nullable<string> = null;\r\n            let outputData: Nullable<string> = null;\r\n\r\n            if (animation.parameters) {\r\n                inputData = animation.parameters[sampler.input];\r\n                outputData = animation.parameters[sampler.output];\r\n            } else {\r\n                inputData = sampler.input;\r\n                outputData = sampler.output;\r\n            }\r\n\r\n            const bufferInput = GLTFUtils.GetBufferFromAccessor(gltfRuntime, gltfRuntime.accessors[inputData]);\r\n            const bufferOutput = GLTFUtils.GetBufferFromAccessor(gltfRuntime, gltfRuntime.accessors[outputData]);\r\n\r\n            const targetId = channel.target.id;\r\n            let targetNode: any = gltfRuntime.scene.getNodeById(targetId);\r\n\r\n            if (targetNode === null) {\r\n                targetNode = gltfRuntime.scene.getNodeByName(targetId);\r\n            }\r\n\r\n            if (targetNode === null) {\r\n                Tools.Warn(\"Creating animation named \" + anim + \". But cannot find node named \" + targetId + \" to attach to\");\r\n                continue;\r\n            }\r\n\r\n            const isBone = targetNode instanceof Bone;\r\n\r\n            // Get target path (position, rotation or scaling)\r\n            let targetPath = channel.target.path;\r\n            const targetPathIndex = glTFAnimationPaths.indexOf(targetPath);\r\n\r\n            if (targetPathIndex !== -1) {\r\n                targetPath = BabylonAnimationPaths[targetPathIndex];\r\n            }\r\n\r\n            // Determine animation type\r\n            let animationType = Animation.ANIMATIONTYPE_MATRIX;\r\n\r\n            if (!isBone) {\r\n                if (targetPath === \"rotationQuaternion\") {\r\n                    animationType = Animation.ANIMATIONTYPE_QUATERNION;\r\n                    targetNode.rotationQuaternion = new Quaternion();\r\n                } else {\r\n                    animationType = Animation.ANIMATIONTYPE_VECTOR3;\r\n                }\r\n            }\r\n\r\n            // Create animation and key frames\r\n            let babylonAnimation: Nullable<Animation> = null;\r\n            const keys = [];\r\n            let arrayOffset = 0;\r\n            let modifyKey = false;\r\n\r\n            if (isBone && lastAnimation && lastAnimation.getKeys().length === bufferInput.length) {\r\n                babylonAnimation = lastAnimation;\r\n                modifyKey = true;\r\n            }\r\n\r\n            if (!modifyKey) {\r\n                gltfRuntime.scene._blockEntityCollection = !!gltfRuntime.assetContainer;\r\n                babylonAnimation = new Animation(anim, isBone ? \"_matrix\" : targetPath, 1, animationType, Animation.ANIMATIONLOOPMODE_CYCLE);\r\n                gltfRuntime.scene._blockEntityCollection = false;\r\n            }\r\n\r\n            // For each frame\r\n            for (let j = 0; j < bufferInput.length; j++) {\r\n                let value: any = null;\r\n\r\n                if (targetPath === \"rotationQuaternion\") {\r\n                    // VEC4\r\n                    value = Quaternion.FromArray([bufferOutput[arrayOffset], bufferOutput[arrayOffset + 1], bufferOutput[arrayOffset + 2], bufferOutput[arrayOffset + 3]]);\r\n                    arrayOffset += 4;\r\n                } else {\r\n                    // Position and scaling are VEC3\r\n                    value = Vector3.FromArray([bufferOutput[arrayOffset], bufferOutput[arrayOffset + 1], bufferOutput[arrayOffset + 2]]);\r\n                    arrayOffset += 3;\r\n                }\r\n\r\n                if (isBone) {\r\n                    const bone = <Bone>targetNode;\r\n                    let translation = Vector3.Zero();\r\n                    let rotationQuaternion = new Quaternion();\r\n                    let scaling = Vector3.Zero();\r\n\r\n                    // Warning on decompose\r\n                    let mat = bone.getBaseMatrix();\r\n\r\n                    if (modifyKey && lastAnimation) {\r\n                        mat = lastAnimation.getKeys()[j].value;\r\n                    }\r\n\r\n                    mat.decompose(scaling, rotationQuaternion, translation);\r\n\r\n                    if (targetPath === \"position\") {\r\n                        translation = value;\r\n                    } else if (targetPath === \"rotationQuaternion\") {\r\n                        rotationQuaternion = value;\r\n                    } else {\r\n                        scaling = value;\r\n                    }\r\n\r\n                    value = Matrix.Compose(scaling, rotationQuaternion, translation);\r\n                }\r\n\r\n                if (!modifyKey) {\r\n                    keys.push({\r\n                        frame: bufferInput[j],\r\n                        value: value,\r\n                    });\r\n                } else if (lastAnimation) {\r\n                    lastAnimation.getKeys()[j].value = value;\r\n                }\r\n            }\r\n\r\n            // Finish\r\n            if (!modifyKey && babylonAnimation) {\r\n                babylonAnimation.setKeys(keys);\r\n                targetNode.animations.push(babylonAnimation);\r\n            }\r\n\r\n            lastAnimation = babylonAnimation;\r\n\r\n            gltfRuntime.scene.stopAnimation(targetNode);\r\n            gltfRuntime.scene.beginAnimation(targetNode, 0, bufferInput[bufferInput.length - 1], true, 1.0);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * @returns the bones transformation matrix\r\n * @param node\r\n */\r\nconst ConfigureBoneTransformation = (node: IGLTFNode): Matrix => {\r\n    let mat: Nullable<Matrix> = null;\r\n\r\n    if (node.translation || node.rotation || node.scale) {\r\n        const scale = Vector3.FromArray(node.scale || [1, 1, 1]);\r\n        const rotation = Quaternion.FromArray(node.rotation || [0, 0, 0, 1]);\r\n        const position = Vector3.FromArray(node.translation || [0, 0, 0]);\r\n\r\n        mat = Matrix.Compose(scale, rotation, position);\r\n    } else {\r\n        mat = Matrix.FromArray(node.matrix);\r\n    }\r\n\r\n    return mat;\r\n};\r\n\r\n/**\r\n * Returns the parent bone\r\n * @param gltfRuntime\r\n * @param skins\r\n * @param jointName\r\n * @param newSkeleton\r\n * @returns the parent bone\r\n */\r\nconst GetParentBone = (gltfRuntime: IGLTFRuntime, skins: IGLTFSkins, jointName: string, newSkeleton: Skeleton): Nullable<Bone> => {\r\n    // Try to find\r\n    for (let i = 0; i < newSkeleton.bones.length; i++) {\r\n        if (newSkeleton.bones[i].name === jointName) {\r\n            return newSkeleton.bones[i];\r\n        }\r\n    }\r\n\r\n    // Not found, search in gltf nodes\r\n    const nodes = gltfRuntime.nodes;\r\n    for (const nde in nodes) {\r\n        const node: IGLTFNode = nodes[nde];\r\n\r\n        if (!node.jointName) {\r\n            continue;\r\n        }\r\n\r\n        const children = node.children;\r\n        for (let i = 0; i < children.length; i++) {\r\n            const child: IGLTFNode = gltfRuntime.nodes[children[i]];\r\n            if (!child.jointName) {\r\n                continue;\r\n            }\r\n\r\n            if (child.jointName === jointName) {\r\n                const mat = ConfigureBoneTransformation(node);\r\n                const bone = new Bone(node.name || \"\", newSkeleton, GetParentBone(gltfRuntime, skins, node.jointName, newSkeleton), mat);\r\n                bone.id = nde;\r\n                return bone;\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Returns the appropriate root node\r\n * @param nodesToRoot\r\n * @param id\r\n * @returns the root node\r\n */\r\nconst GetNodeToRoot = (nodesToRoot: INodeToRoot[], id: string): Nullable<Bone> => {\r\n    for (let i = 0; i < nodesToRoot.length; i++) {\r\n        const nodeToRoot = nodesToRoot[i];\r\n\r\n        for (let j = 0; j < nodeToRoot.node.children.length; j++) {\r\n            const child = nodeToRoot.node.children[j];\r\n            if (child === id) {\r\n                return nodeToRoot.bone;\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Returns the node with the joint name\r\n * @param gltfRuntime\r\n * @param jointName\r\n * @returns the node with the joint name\r\n */\r\nconst GetJointNode = (gltfRuntime: IGLTFRuntime, jointName: string): Nullable<IJointNode> => {\r\n    const nodes = gltfRuntime.nodes;\r\n    let node: IGLTFNode = nodes[jointName];\r\n    if (node) {\r\n        return {\r\n            node: node,\r\n            id: jointName,\r\n        };\r\n    }\r\n\r\n    for (const nde in nodes) {\r\n        node = nodes[nde];\r\n        if (node.jointName === jointName) {\r\n            return {\r\n                node: node,\r\n                id: nde,\r\n            };\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Checks if a nodes is in joints\r\n * @param skins\r\n * @param id\r\n * @returns true if the node is in joints, else false\r\n */\r\nconst NodeIsInJoints = (skins: IGLTFSkins, id: string): boolean => {\r\n    for (let i = 0; i < skins.jointNames.length; i++) {\r\n        if (skins.jointNames[i] === id) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\n/**\r\n * Fills the nodes to root for bones and builds hierarchy\r\n * @param gltfRuntime\r\n * @param newSkeleton\r\n * @param skins\r\n * @param nodesToRoot\r\n */\r\nconst GetNodesToRoot = (gltfRuntime: IGLTFRuntime, newSkeleton: Skeleton, skins: IGLTFSkins, nodesToRoot: INodeToRoot[]) => {\r\n    // Creates nodes for root\r\n    for (const nde in gltfRuntime.nodes) {\r\n        const node: IGLTFNode = gltfRuntime.nodes[nde];\r\n        const id = nde;\r\n\r\n        if (!node.jointName || NodeIsInJoints(skins, node.jointName)) {\r\n            continue;\r\n        }\r\n\r\n        // Create node to root bone\r\n        const mat = ConfigureBoneTransformation(node);\r\n        const bone = new Bone(node.name || \"\", newSkeleton, null, mat);\r\n        bone.id = id;\r\n        nodesToRoot.push({ bone: bone, node: node, id: id });\r\n    }\r\n\r\n    // Parenting\r\n    for (let i = 0; i < nodesToRoot.length; i++) {\r\n        const nodeToRoot = nodesToRoot[i];\r\n        const children = nodeToRoot.node.children;\r\n\r\n        for (let j = 0; j < children.length; j++) {\r\n            let child: Nullable<INodeToRoot> = null;\r\n\r\n            for (let k = 0; k < nodesToRoot.length; k++) {\r\n                if (nodesToRoot[k].id === children[j]) {\r\n                    child = nodesToRoot[k];\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (child) {\r\n                (<any>child.bone)._parent = nodeToRoot.bone;\r\n                nodeToRoot.bone.children.push(child.bone);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Imports a skeleton\r\n * @param gltfRuntime\r\n * @param skins\r\n * @param mesh\r\n * @param newSkeleton\r\n * @returns the bone name\r\n */\r\nconst ImportSkeleton = (gltfRuntime: IGLTFRuntime, skins: IGLTFSkins, mesh: Mesh, newSkeleton: Skeleton | undefined): Skeleton => {\r\n    if (!newSkeleton) {\r\n        newSkeleton = new Skeleton(skins.name || \"\", \"\", gltfRuntime.scene);\r\n    }\r\n\r\n    if (!skins.babylonSkeleton) {\r\n        return newSkeleton;\r\n    }\r\n\r\n    // Find the root bones\r\n    const nodesToRoot: INodeToRoot[] = [];\r\n    const nodesToRootToAdd: Bone[] = [];\r\n\r\n    GetNodesToRoot(gltfRuntime, newSkeleton, skins, nodesToRoot);\r\n    newSkeleton.bones = [];\r\n\r\n    // Joints\r\n    for (let i = 0; i < skins.jointNames.length; i++) {\r\n        const jointNode = GetJointNode(gltfRuntime, skins.jointNames[i]);\r\n\r\n        if (!jointNode) {\r\n            continue;\r\n        }\r\n\r\n        const node = jointNode.node;\r\n\r\n        if (!node) {\r\n            Tools.Warn(\"Joint named \" + skins.jointNames[i] + \" does not exist\");\r\n            continue;\r\n        }\r\n\r\n        const id = jointNode.id;\r\n\r\n        // Optimize, if the bone already exists...\r\n        const existingBone = gltfRuntime.scene.getBoneById(id);\r\n        if (existingBone) {\r\n            newSkeleton.bones.push(existingBone);\r\n            continue;\r\n        }\r\n\r\n        // Search for parent bone\r\n        let foundBone = false;\r\n        let parentBone: Nullable<Bone> = null;\r\n\r\n        for (let j = 0; j < i; j++) {\r\n            const jointNode = GetJointNode(gltfRuntime, skins.jointNames[j]);\r\n\r\n            if (!jointNode) {\r\n                continue;\r\n            }\r\n\r\n            const joint: IGLTFNode = jointNode.node;\r\n\r\n            if (!joint) {\r\n                Tools.Warn(\"Joint named \" + skins.jointNames[j] + \" does not exist when looking for parent\");\r\n                continue;\r\n            }\r\n\r\n            const children = joint.children;\r\n            if (!children) {\r\n                continue;\r\n            }\r\n            foundBone = false;\r\n\r\n            for (let k = 0; k < children.length; k++) {\r\n                if (children[k] === id) {\r\n                    parentBone = GetParentBone(gltfRuntime, skins, skins.jointNames[j], newSkeleton);\r\n                    foundBone = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (foundBone) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Create bone\r\n        const mat = ConfigureBoneTransformation(node);\r\n\r\n        if (!parentBone && nodesToRoot.length > 0) {\r\n            parentBone = GetNodeToRoot(nodesToRoot, id);\r\n\r\n            if (parentBone) {\r\n                if (nodesToRootToAdd.indexOf(parentBone) === -1) {\r\n                    nodesToRootToAdd.push(parentBone);\r\n                }\r\n            }\r\n        }\r\n\r\n        const bone = new Bone(node.jointName || \"\", newSkeleton, parentBone, mat);\r\n        bone.id = id;\r\n    }\r\n\r\n    // Polish\r\n    const bones = newSkeleton.bones;\r\n    newSkeleton.bones = [];\r\n\r\n    for (let i = 0; i < skins.jointNames.length; i++) {\r\n        const jointNode = GetJointNode(gltfRuntime, skins.jointNames[i]);\r\n\r\n        if (!jointNode) {\r\n            continue;\r\n        }\r\n\r\n        for (let j = 0; j < bones.length; j++) {\r\n            if (bones[j].id === jointNode.id) {\r\n                newSkeleton.bones.push(bones[j]);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    newSkeleton.prepare();\r\n\r\n    // Finish\r\n    for (let i = 0; i < nodesToRootToAdd.length; i++) {\r\n        newSkeleton.bones.push(nodesToRootToAdd[i]);\r\n    }\r\n\r\n    return newSkeleton;\r\n};\r\n\r\n/**\r\n * Imports a mesh and its geometries\r\n * @param gltfRuntime\r\n * @param node\r\n * @param meshes\r\n * @param id\r\n * @param newMesh\r\n * @returns the new mesh\r\n */\r\nconst ImportMesh = (gltfRuntime: IGLTFRuntime, node: IGLTFNode, meshes: string[], id: string, newMesh: Mesh): Mesh => {\r\n    if (!newMesh) {\r\n        gltfRuntime.scene._blockEntityCollection = !!gltfRuntime.assetContainer;\r\n        newMesh = new Mesh(node.name || \"\", gltfRuntime.scene);\r\n        newMesh._parentContainer = gltfRuntime.assetContainer;\r\n        gltfRuntime.scene._blockEntityCollection = false;\r\n        newMesh.id = id;\r\n    }\r\n\r\n    if (!node.babylonNode) {\r\n        return newMesh;\r\n    }\r\n\r\n    const subMaterials: Material[] = [];\r\n\r\n    let vertexData: Nullable<VertexData> = null;\r\n    const verticesStarts: number[] = [];\r\n    const verticesCounts: number[] = [];\r\n    const indexStarts: number[] = [];\r\n    const indexCounts: number[] = [];\r\n\r\n    for (let meshIndex = 0; meshIndex < meshes.length; meshIndex++) {\r\n        const meshId = meshes[meshIndex];\r\n        const mesh: IGLTFMesh = gltfRuntime.meshes[meshId];\r\n\r\n        if (!mesh) {\r\n            continue;\r\n        }\r\n\r\n        // Positions, normals and UVs\r\n        for (let i = 0; i < mesh.primitives.length; i++) {\r\n            // Temporary vertex data\r\n            const tempVertexData = new VertexData();\r\n\r\n            const primitive = mesh.primitives[i];\r\n            if (primitive.mode !== 4) {\r\n                // continue;\r\n            }\r\n\r\n            const attributes = primitive.attributes;\r\n            let accessor: Nullable<IGLTFAccessor> = null;\r\n            let buffer: any = null;\r\n\r\n            // Set positions, normal and uvs\r\n            for (const semantic in attributes) {\r\n                // Link accessor and buffer view\r\n                accessor = gltfRuntime.accessors[attributes[semantic]];\r\n                buffer = GLTFUtils.GetBufferFromAccessor(gltfRuntime, accessor);\r\n\r\n                if (semantic === \"NORMAL\") {\r\n                    tempVertexData.normals = new Float32Array(buffer.length);\r\n                    (<Float32Array>tempVertexData.normals).set(buffer);\r\n                } else if (semantic === \"POSITION\") {\r\n                    if (GLTFFileLoader.HomogeneousCoordinates) {\r\n                        tempVertexData.positions = new Float32Array(buffer.length - buffer.length / 4);\r\n\r\n                        for (let j = 0; j < buffer.length; j += 4) {\r\n                            tempVertexData.positions[j] = buffer[j];\r\n                            tempVertexData.positions[j + 1] = buffer[j + 1];\r\n                            tempVertexData.positions[j + 2] = buffer[j + 2];\r\n                        }\r\n                    } else {\r\n                        tempVertexData.positions = new Float32Array(buffer.length);\r\n                        (<Float32Array>tempVertexData.positions).set(buffer);\r\n                    }\r\n\r\n                    verticesCounts.push(tempVertexData.positions.length);\r\n                } else if (semantic.indexOf(\"TEXCOORD_\") !== -1) {\r\n                    const channel = Number(semantic.split(\"_\")[1]);\r\n                    const uvKind = VertexBuffer.UVKind + (channel === 0 ? \"\" : channel + 1);\r\n                    const uvs = new Float32Array(buffer.length);\r\n                    (<Float32Array>uvs).set(buffer);\r\n                    NormalizeUVs(uvs);\r\n                    tempVertexData.set(uvs, uvKind);\r\n                } else if (semantic === \"JOINT\") {\r\n                    tempVertexData.matricesIndices = new Float32Array(buffer.length);\r\n                    (<Float32Array>tempVertexData.matricesIndices).set(buffer);\r\n                } else if (semantic === \"WEIGHT\") {\r\n                    tempVertexData.matricesWeights = new Float32Array(buffer.length);\r\n                    (<Float32Array>tempVertexData.matricesWeights).set(buffer);\r\n                } else if (semantic === \"COLOR\") {\r\n                    tempVertexData.colors = new Float32Array(buffer.length);\r\n                    (<Float32Array>tempVertexData.colors).set(buffer);\r\n                }\r\n            }\r\n\r\n            // Indices\r\n            accessor = gltfRuntime.accessors[primitive.indices];\r\n            if (accessor) {\r\n                buffer = GLTFUtils.GetBufferFromAccessor(gltfRuntime, accessor);\r\n\r\n                tempVertexData.indices = new Int32Array(buffer.length);\r\n                tempVertexData.indices.set(buffer);\r\n                indexCounts.push(tempVertexData.indices.length);\r\n            } else {\r\n                // Set indices on the fly\r\n                const indices: number[] = [];\r\n                for (let j = 0; j < (<FloatArray>tempVertexData.positions).length / 3; j++) {\r\n                    indices.push(j);\r\n                }\r\n\r\n                tempVertexData.indices = new Int32Array(indices);\r\n                indexCounts.push(tempVertexData.indices.length);\r\n            }\r\n\r\n            if (!vertexData) {\r\n                vertexData = tempVertexData;\r\n            } else {\r\n                vertexData.merge(tempVertexData);\r\n            }\r\n\r\n            // Sub material\r\n            const material = gltfRuntime.scene.getMaterialById(primitive.material);\r\n\r\n            subMaterials.push(material === null ? GLTFUtils.GetDefaultMaterial(gltfRuntime.scene) : material);\r\n\r\n            // Update vertices start and index start\r\n            verticesStarts.push(verticesStarts.length === 0 ? 0 : verticesStarts[verticesStarts.length - 1] + verticesCounts[verticesCounts.length - 2]);\r\n            indexStarts.push(indexStarts.length === 0 ? 0 : indexStarts[indexStarts.length - 1] + indexCounts[indexCounts.length - 2]);\r\n        }\r\n    }\r\n    let material: StandardMaterial | MultiMaterial;\r\n    gltfRuntime.scene._blockEntityCollection = !!gltfRuntime.assetContainer;\r\n    if (subMaterials.length > 1) {\r\n        material = new MultiMaterial(\"multimat\" + id, gltfRuntime.scene);\r\n        material.subMaterials = subMaterials;\r\n    } else {\r\n        material = new StandardMaterial(\"multimat\" + id, gltfRuntime.scene);\r\n    }\r\n\r\n    if (subMaterials.length === 1) {\r\n        material = subMaterials[0] as StandardMaterial;\r\n    }\r\n\r\n    material._parentContainer = gltfRuntime.assetContainer;\r\n\r\n    if (!newMesh.material) {\r\n        newMesh.material = material;\r\n    }\r\n\r\n    // Apply geometry\r\n    new Geometry(id, gltfRuntime.scene, vertexData!, false, newMesh);\r\n    newMesh.computeWorldMatrix(true);\r\n\r\n    gltfRuntime.scene._blockEntityCollection = false;\r\n\r\n    // Apply submeshes\r\n    newMesh.subMeshes = [];\r\n    let index = 0;\r\n    for (let meshIndex = 0; meshIndex < meshes.length; meshIndex++) {\r\n        const meshId = meshes[meshIndex];\r\n        const mesh: IGLTFMesh = gltfRuntime.meshes[meshId];\r\n\r\n        if (!mesh) {\r\n            continue;\r\n        }\r\n\r\n        for (let i = 0; i < mesh.primitives.length; i++) {\r\n            if (mesh.primitives[i].mode !== 4) {\r\n                //continue;\r\n            }\r\n\r\n            SubMesh.AddToMesh(index, verticesStarts[index], verticesCounts[index], indexStarts[index], indexCounts[index], newMesh, newMesh, true);\r\n            index++;\r\n        }\r\n    }\r\n\r\n    // Finish\r\n    return newMesh;\r\n};\r\n\r\n/**\r\n * Configure node transformation from position, rotation and scaling\r\n * @param newNode\r\n * @param position\r\n * @param rotation\r\n * @param scaling\r\n */\r\nconst ConfigureNode = (newNode: any, position: Vector3, rotation: Quaternion, scaling: Vector3) => {\r\n    if (newNode.position) {\r\n        newNode.position = position;\r\n    }\r\n\r\n    if (newNode.rotationQuaternion || newNode.rotation) {\r\n        newNode.rotationQuaternion = rotation;\r\n    }\r\n\r\n    if (newNode.scaling) {\r\n        newNode.scaling = scaling;\r\n    }\r\n};\r\n\r\n/**\r\n * Configures node from transformation matrix\r\n * @param newNode\r\n * @param node\r\n */\r\nconst ConfigureNodeFromMatrix = (newNode: Mesh, node: IGLTFNode) => {\r\n    if (node.matrix) {\r\n        const position = new Vector3(0, 0, 0);\r\n        const rotation = new Quaternion();\r\n        const scaling = new Vector3(0, 0, 0);\r\n        const mat = Matrix.FromArray(node.matrix);\r\n        mat.decompose(scaling, rotation, position);\r\n\r\n        ConfigureNode(newNode, position, rotation, scaling);\r\n    } else if (node.translation && node.rotation && node.scale) {\r\n        ConfigureNode(newNode, Vector3.FromArray(node.translation), Quaternion.FromArray(node.rotation), Vector3.FromArray(node.scale));\r\n    }\r\n\r\n    newNode.computeWorldMatrix(true);\r\n};\r\n\r\n/**\r\n * Imports a node\r\n * @param gltfRuntime\r\n * @param node\r\n * @param id\r\n * @returns the newly imported node\r\n */\r\nconst ImportNode = (gltfRuntime: IGLTFRuntime, node: IGLTFNode, id: string): Nullable<Node> => {\r\n    let lastNode: Nullable<Node> = null;\r\n\r\n    if (gltfRuntime.importOnlyMeshes && (node.skin || node.meshes)) {\r\n        if (gltfRuntime.importMeshesNames && gltfRuntime.importMeshesNames.length > 0 && gltfRuntime.importMeshesNames.indexOf(node.name || \"\") === -1) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Meshes\r\n    if (node.skin) {\r\n        if (node.meshes) {\r\n            const skin: IGLTFSkins = gltfRuntime.skins[node.skin];\r\n\r\n            const newMesh = ImportMesh(gltfRuntime, node, node.meshes, id, <Mesh>node.babylonNode);\r\n            newMesh.skeleton = gltfRuntime.scene.getLastSkeletonById(node.skin);\r\n\r\n            if (newMesh.skeleton === null) {\r\n                newMesh.skeleton = ImportSkeleton(gltfRuntime, skin, newMesh, skin.babylonSkeleton);\r\n\r\n                if (!skin.babylonSkeleton) {\r\n                    skin.babylonSkeleton = newMesh.skeleton;\r\n                }\r\n            }\r\n\r\n            lastNode = newMesh;\r\n        }\r\n    } else if (node.meshes) {\r\n        /**\r\n         * Improve meshes property\r\n         */\r\n        const newMesh = ImportMesh(gltfRuntime, node, node.mesh ? [node.mesh] : node.meshes, id, <Mesh>node.babylonNode);\r\n        lastNode = newMesh;\r\n    }\r\n    // Lights\r\n    else if (node.light && !node.babylonNode && !gltfRuntime.importOnlyMeshes) {\r\n        const light: IGLTFLight = gltfRuntime.lights[node.light];\r\n\r\n        if (light) {\r\n            if (light.type === \"ambient\") {\r\n                const ambienLight: IGLTFAmbienLight = (<any>light)[light.type];\r\n                const hemiLight = new HemisphericLight(node.light, Vector3.Zero(), gltfRuntime.scene);\r\n                hemiLight.name = node.name || \"\";\r\n\r\n                if (ambienLight.color) {\r\n                    hemiLight.diffuse = Color3.FromArray(ambienLight.color);\r\n                }\r\n\r\n                lastNode = hemiLight;\r\n            } else if (light.type === \"directional\") {\r\n                const directionalLight: IGLTFDirectionalLight = (<any>light)[light.type];\r\n                const dirLight = new DirectionalLight(node.light, Vector3.Zero(), gltfRuntime.scene);\r\n                dirLight.name = node.name || \"\";\r\n\r\n                if (directionalLight.color) {\r\n                    dirLight.diffuse = Color3.FromArray(directionalLight.color);\r\n                }\r\n\r\n                lastNode = dirLight;\r\n            } else if (light.type === \"point\") {\r\n                const pointLight: IGLTFPointLight = (<any>light)[light.type];\r\n                const ptLight = new PointLight(node.light, Vector3.Zero(), gltfRuntime.scene);\r\n                ptLight.name = node.name || \"\";\r\n\r\n                if (pointLight.color) {\r\n                    ptLight.diffuse = Color3.FromArray(pointLight.color);\r\n                }\r\n\r\n                lastNode = ptLight;\r\n            } else if (light.type === \"spot\") {\r\n                const spotLight: IGLTFSpotLight = (<any>light)[light.type];\r\n                const spLight = new SpotLight(node.light, Vector3.Zero(), Vector3.Zero(), 0, 0, gltfRuntime.scene);\r\n                spLight.name = node.name || \"\";\r\n\r\n                if (spotLight.color) {\r\n                    spLight.diffuse = Color3.FromArray(spotLight.color);\r\n                }\r\n\r\n                if (spotLight.fallOfAngle) {\r\n                    spLight.angle = spotLight.fallOfAngle;\r\n                }\r\n\r\n                if (spotLight.fallOffExponent) {\r\n                    spLight.exponent = spotLight.fallOffExponent;\r\n                }\r\n\r\n                lastNode = spLight;\r\n            }\r\n        }\r\n    }\r\n    // Cameras\r\n    else if (node.camera && !node.babylonNode && !gltfRuntime.importOnlyMeshes) {\r\n        const camera: IGLTFCamera = gltfRuntime.cameras[node.camera];\r\n\r\n        if (camera) {\r\n            gltfRuntime.scene._blockEntityCollection = !!gltfRuntime.assetContainer;\r\n            if (camera.type === \"orthographic\") {\r\n                const orthoCamera = new FreeCamera(node.camera, Vector3.Zero(), gltfRuntime.scene, false);\r\n\r\n                orthoCamera.name = node.name || \"\";\r\n                orthoCamera.mode = Camera.ORTHOGRAPHIC_CAMERA;\r\n                orthoCamera.attachControl();\r\n\r\n                lastNode = orthoCamera;\r\n\r\n                orthoCamera._parentContainer = gltfRuntime.assetContainer;\r\n            } else if (camera.type === \"perspective\") {\r\n                const perspectiveCamera: IGLTFCameraPerspective = (<any>camera)[camera.type];\r\n                const persCamera = new FreeCamera(node.camera, Vector3.Zero(), gltfRuntime.scene, false);\r\n\r\n                persCamera.name = node.name || \"\";\r\n                persCamera.attachControl();\r\n\r\n                if (!perspectiveCamera.aspectRatio) {\r\n                    perspectiveCamera.aspectRatio = gltfRuntime.scene.getEngine().getRenderWidth() / gltfRuntime.scene.getEngine().getRenderHeight();\r\n                }\r\n\r\n                if (perspectiveCamera.znear && perspectiveCamera.zfar) {\r\n                    persCamera.maxZ = perspectiveCamera.zfar;\r\n                    persCamera.minZ = perspectiveCamera.znear;\r\n                }\r\n\r\n                lastNode = persCamera;\r\n                persCamera._parentContainer = gltfRuntime.assetContainer;\r\n            }\r\n\r\n            gltfRuntime.scene._blockEntityCollection = false;\r\n        }\r\n    }\r\n\r\n    // Empty node\r\n    if (!node.jointName) {\r\n        if (node.babylonNode) {\r\n            return node.babylonNode;\r\n        } else if (lastNode === null) {\r\n            gltfRuntime.scene._blockEntityCollection = !!gltfRuntime.assetContainer;\r\n            const dummy = new Mesh(node.name || \"\", gltfRuntime.scene);\r\n            dummy._parentContainer = gltfRuntime.assetContainer;\r\n            gltfRuntime.scene._blockEntityCollection = false;\r\n            node.babylonNode = dummy;\r\n            lastNode = dummy;\r\n        }\r\n    }\r\n\r\n    if (lastNode !== null) {\r\n        if (node.matrix && lastNode instanceof Mesh) {\r\n            ConfigureNodeFromMatrix(lastNode, node);\r\n        } else {\r\n            const translation = node.translation || [0, 0, 0];\r\n            const rotation = node.rotation || [0, 0, 0, 1];\r\n            const scale = node.scale || [1, 1, 1];\r\n            ConfigureNode(lastNode, Vector3.FromArray(translation), Quaternion.FromArray(rotation), Vector3.FromArray(scale));\r\n        }\r\n\r\n        lastNode.updateCache(true);\r\n        node.babylonNode = lastNode;\r\n    }\r\n\r\n    return lastNode;\r\n};\r\n\r\n/**\r\n * Traverses nodes and creates them\r\n * @param gltfRuntime\r\n * @param id\r\n * @param parent\r\n * @param meshIncluded\r\n */\r\nconst TraverseNodes = (gltfRuntime: IGLTFRuntime, id: string, parent: Nullable<Node>, meshIncluded: boolean = false) => {\r\n    const node: IGLTFNode = gltfRuntime.nodes[id];\r\n    let newNode: Nullable<Node> = null;\r\n\r\n    if (gltfRuntime.importOnlyMeshes && !meshIncluded && gltfRuntime.importMeshesNames) {\r\n        if (gltfRuntime.importMeshesNames.indexOf(node.name || \"\") !== -1 || gltfRuntime.importMeshesNames.length === 0) {\r\n            meshIncluded = true;\r\n        } else {\r\n            meshIncluded = false;\r\n        }\r\n    } else {\r\n        meshIncluded = true;\r\n    }\r\n\r\n    if (!node.jointName && meshIncluded) {\r\n        newNode = ImportNode(gltfRuntime, node, id);\r\n\r\n        if (newNode !== null) {\r\n            newNode.id = id;\r\n            newNode.parent = parent;\r\n        }\r\n    }\r\n\r\n    if (node.children) {\r\n        for (let i = 0; i < node.children.length; i++) {\r\n            TraverseNodes(gltfRuntime, node.children[i], newNode, meshIncluded);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * do stuff after buffers, shaders are loaded (e.g. hook up materials, load animations, etc.)\r\n * @param gltfRuntime\r\n */\r\nconst PostLoad = (gltfRuntime: IGLTFRuntime) => {\r\n    // Nodes\r\n    let currentScene: IGLTFScene = <IGLTFScene>gltfRuntime.currentScene;\r\n\r\n    if (currentScene) {\r\n        for (let i = 0; i < currentScene.nodes.length; i++) {\r\n            TraverseNodes(gltfRuntime, currentScene.nodes[i], null);\r\n        }\r\n    } else {\r\n        for (const thing in gltfRuntime.scenes) {\r\n            currentScene = gltfRuntime.scenes[thing];\r\n\r\n            for (let i = 0; i < currentScene.nodes.length; i++) {\r\n                TraverseNodes(gltfRuntime, currentScene.nodes[i], null);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Set animations\r\n    LoadAnimations(gltfRuntime);\r\n\r\n    for (let i = 0; i < gltfRuntime.scene.skeletons.length; i++) {\r\n        const skeleton = gltfRuntime.scene.skeletons[i];\r\n        gltfRuntime.scene.beginAnimation(skeleton, 0, Number.MAX_VALUE, true, 1.0);\r\n    }\r\n};\r\n\r\n/**\r\n * onBind shaderrs callback to set uniforms and matrices\r\n * @param mesh\r\n * @param gltfRuntime\r\n * @param unTreatedUniforms\r\n * @param shaderMaterial\r\n * @param technique\r\n * @param material\r\n * @param onSuccess\r\n */\r\nconst OnBindShaderMaterial = (\r\n    mesh: AbstractMesh,\r\n    gltfRuntime: IGLTFRuntime,\r\n    unTreatedUniforms: { [key: string]: IGLTFTechniqueParameter },\r\n    shaderMaterial: ShaderMaterial,\r\n    technique: IGLTFTechnique,\r\n    material: IGLTFMaterial,\r\n    onSuccess: (shaderMaterial: ShaderMaterial) => void\r\n) => {\r\n    const materialValues = material.values || technique.parameters;\r\n\r\n    for (const unif in unTreatedUniforms) {\r\n        const uniform: IGLTFTechniqueParameter = unTreatedUniforms[unif];\r\n        const type = uniform.type;\r\n\r\n        if (type === EParameterType.FLOAT_MAT2 || type === EParameterType.FLOAT_MAT3 || type === EParameterType.FLOAT_MAT4) {\r\n            if (uniform.semantic && !uniform.source && !uniform.node) {\r\n                GLTFUtils.SetMatrix(gltfRuntime.scene, mesh, uniform, unif, shaderMaterial.getEffect());\r\n            } else if (uniform.semantic && (uniform.source || uniform.node)) {\r\n                let source = gltfRuntime.scene.getNodeByName(uniform.source || uniform.node || \"\");\r\n                if (source === null) {\r\n                    source = gltfRuntime.scene.getNodeById(uniform.source || uniform.node || \"\");\r\n                }\r\n                if (source === null) {\r\n                    continue;\r\n                }\r\n\r\n                GLTFUtils.SetMatrix(gltfRuntime.scene, source, uniform, unif, shaderMaterial.getEffect());\r\n            }\r\n        } else {\r\n            const value = (<any>materialValues)[technique.uniforms[unif]];\r\n            if (!value) {\r\n                continue;\r\n            }\r\n\r\n            if (type === EParameterType.SAMPLER_2D) {\r\n                const texture = gltfRuntime.textures[material.values ? value : uniform.value].babylonTexture;\r\n\r\n                if (texture === null || texture === undefined) {\r\n                    continue;\r\n                }\r\n\r\n                shaderMaterial.getEffect().setTexture(unif, texture);\r\n            } else {\r\n                GLTFUtils.SetUniform(shaderMaterial.getEffect(), unif, value, type);\r\n            }\r\n        }\r\n    }\r\n\r\n    onSuccess(shaderMaterial);\r\n};\r\n\r\n/**\r\n * Prepare uniforms to send the only one time\r\n * Loads the appropriate textures\r\n * @param gltfRuntime\r\n * @param shaderMaterial\r\n * @param technique\r\n * @param material\r\n */\r\nconst PrepareShaderMaterialUniforms = (\r\n    gltfRuntime: IGLTFRuntime,\r\n    shaderMaterial: ShaderMaterial,\r\n    technique: IGLTFTechnique,\r\n    material: IGLTFMaterial,\r\n    unTreatedUniforms: { [key: string]: IGLTFTechniqueParameter }\r\n) => {\r\n    const materialValues = material.values || technique.parameters;\r\n    const techniqueUniforms = technique.uniforms;\r\n\r\n    /**\r\n     * Prepare values here (not matrices)\r\n     */\r\n    for (const unif in unTreatedUniforms) {\r\n        const uniform: IGLTFTechniqueParameter = unTreatedUniforms[unif];\r\n        const type = uniform.type;\r\n        let value = (<any>materialValues)[techniqueUniforms[unif]];\r\n\r\n        if (value === undefined) {\r\n            // In case the value is the same for all materials\r\n            value = <any>uniform.value;\r\n        }\r\n\r\n        if (!value) {\r\n            continue;\r\n        }\r\n\r\n        const onLoadTexture = (uniformName: Nullable<string>) => {\r\n            return (texture: Texture) => {\r\n                if (uniform.value && uniformName) {\r\n                    // Static uniform\r\n                    shaderMaterial.setTexture(uniformName, texture);\r\n                    delete unTreatedUniforms[uniformName];\r\n                }\r\n            };\r\n        };\r\n\r\n        // Texture (sampler2D)\r\n        if (type === EParameterType.SAMPLER_2D) {\r\n            GLTFLoaderExtension.LoadTextureAsync(gltfRuntime, material.values ? value : uniform.value, onLoadTexture(unif), () => onLoadTexture(null));\r\n        }\r\n        // Others\r\n        else {\r\n            if (uniform.value && GLTFUtils.SetUniform(shaderMaterial, unif, material.values ? value : uniform.value, type)) {\r\n                // Static uniform\r\n                delete unTreatedUniforms[unif];\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Shader compilation failed\r\n * @param program\r\n * @param shaderMaterial\r\n * @param onError\r\n * @returns callback when shader is compiled\r\n */\r\nconst OnShaderCompileError = (program: IGLTFProgram, shaderMaterial: ShaderMaterial, onError: (message: string) => void) => {\r\n    return (effect: Effect, error: string) => {\r\n        shaderMaterial.dispose(true);\r\n        onError(\"Cannot compile program named \" + program.name + \". Error: \" + error + \". Default material will be applied\");\r\n    };\r\n};\r\n\r\n/**\r\n * Shader compilation success\r\n * @param gltfRuntime\r\n * @param shaderMaterial\r\n * @param technique\r\n * @param material\r\n * @param unTreatedUniforms\r\n * @param onSuccess\r\n * @returns callback when shader is compiled\r\n */\r\nconst OnShaderCompileSuccess = (\r\n    gltfRuntime: IGLTFRuntime,\r\n    shaderMaterial: ShaderMaterial,\r\n    technique: IGLTFTechnique,\r\n    material: IGLTFMaterial,\r\n    unTreatedUniforms: { [key: string]: IGLTFTechniqueParameter },\r\n    onSuccess: (shaderMaterial: ShaderMaterial) => void\r\n) => {\r\n    return (_: Effect) => {\r\n        PrepareShaderMaterialUniforms(gltfRuntime, shaderMaterial, technique, material, unTreatedUniforms);\r\n\r\n        shaderMaterial.onBind = (mesh: AbstractMesh) => {\r\n            OnBindShaderMaterial(mesh, gltfRuntime, unTreatedUniforms, shaderMaterial, technique, material, onSuccess);\r\n        };\r\n    };\r\n};\r\n\r\n/**\r\n * Returns the appropriate uniform if already handled by babylon\r\n * @param tokenizer\r\n * @param technique\r\n * @param unTreatedUniforms\r\n * @returns the name of the uniform handled by babylon\r\n */\r\nconst ParseShaderUniforms = (tokenizer: Tokenizer, technique: IGLTFTechnique, unTreatedUniforms: { [key: string]: IGLTFTechniqueParameter }): string => {\r\n    for (const unif in technique.uniforms) {\r\n        const uniform = technique.uniforms[unif];\r\n        const uniformParameter: IGLTFTechniqueParameter = technique.parameters[uniform];\r\n\r\n        if (tokenizer.currentIdentifier === unif) {\r\n            if (uniformParameter.semantic && !uniformParameter.source && !uniformParameter.node) {\r\n                const transformIndex = glTFTransforms.indexOf(uniformParameter.semantic);\r\n\r\n                if (transformIndex !== -1) {\r\n                    delete unTreatedUniforms[unif];\r\n                    return BabylonTransforms[transformIndex];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return tokenizer.currentIdentifier;\r\n};\r\n\r\n/**\r\n * All shaders loaded. Create materials one by one\r\n * @param gltfRuntime\r\n */\r\nconst ImportMaterials = (gltfRuntime: IGLTFRuntime) => {\r\n    // Create materials\r\n    for (const mat in gltfRuntime.materials) {\r\n        GLTFLoaderExtension.LoadMaterialAsync(\r\n            gltfRuntime,\r\n            mat,\r\n            () => {},\r\n            () => {}\r\n        );\r\n    }\r\n};\r\n\r\n/**\r\n * Implementation of the base glTF spec\r\n * @internal\r\n */\r\nexport class GLTFLoaderBase {\r\n    public static CreateRuntime(parsedData: any, scene: Scene, rootUrl: string): IGLTFRuntime {\r\n        const gltfRuntime: IGLTFRuntime = {\r\n            extensions: {},\r\n            accessors: {},\r\n            buffers: {},\r\n            bufferViews: {},\r\n            meshes: {},\r\n            lights: {},\r\n            cameras: {},\r\n            nodes: {},\r\n            images: {},\r\n            textures: {},\r\n            shaders: {},\r\n            programs: {},\r\n            samplers: {},\r\n            techniques: {},\r\n            materials: {},\r\n            animations: {},\r\n            skins: {},\r\n            extensionsUsed: [],\r\n\r\n            scenes: {},\r\n\r\n            buffersCount: 0,\r\n            shaderscount: 0,\r\n\r\n            scene: scene,\r\n            rootUrl: rootUrl,\r\n\r\n            loadedBufferCount: 0,\r\n            loadedBufferViews: {},\r\n\r\n            loadedShaderCount: 0,\r\n\r\n            importOnlyMeshes: false,\r\n\r\n            dummyNodes: [],\r\n\r\n            assetContainer: null,\r\n        };\r\n\r\n        // Parse\r\n        if (parsedData.extensions) {\r\n            ParseObject(parsedData.extensions, \"extensions\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.extensionsUsed) {\r\n            ParseObject(parsedData.extensionsUsed, \"extensionsUsed\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.buffers) {\r\n            ParseBuffers(parsedData.buffers, gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.bufferViews) {\r\n            ParseObject(parsedData.bufferViews, \"bufferViews\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.accessors) {\r\n            ParseObject(parsedData.accessors, \"accessors\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.meshes) {\r\n            ParseObject(parsedData.meshes, \"meshes\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.lights) {\r\n            ParseObject(parsedData.lights, \"lights\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.cameras) {\r\n            ParseObject(parsedData.cameras, \"cameras\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.nodes) {\r\n            ParseObject(parsedData.nodes, \"nodes\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.images) {\r\n            ParseObject(parsedData.images, \"images\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.textures) {\r\n            ParseObject(parsedData.textures, \"textures\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.shaders) {\r\n            ParseShaders(parsedData.shaders, gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.programs) {\r\n            ParseObject(parsedData.programs, \"programs\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.samplers) {\r\n            ParseObject(parsedData.samplers, \"samplers\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.techniques) {\r\n            ParseObject(parsedData.techniques, \"techniques\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.materials) {\r\n            ParseObject(parsedData.materials, \"materials\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.animations) {\r\n            ParseObject(parsedData.animations, \"animations\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.skins) {\r\n            ParseObject(parsedData.skins, \"skins\", gltfRuntime);\r\n        }\r\n\r\n        if (parsedData.scenes) {\r\n            gltfRuntime.scenes = parsedData.scenes;\r\n        }\r\n\r\n        if (parsedData.scene && parsedData.scenes) {\r\n            gltfRuntime.currentScene = parsedData.scenes[parsedData.scene];\r\n        }\r\n\r\n        return gltfRuntime;\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public static LoadBufferAsync(\r\n        gltfRuntime: IGLTFRuntime,\r\n        id: string,\r\n        onSuccess: (buffer: ArrayBufferView) => void,\r\n        onError: (message: string) => void,\r\n        onProgress?: () => void\r\n    ): void {\r\n        const buffer: IGLTFBuffer = gltfRuntime.buffers[id];\r\n\r\n        if (Tools.IsBase64(buffer.uri)) {\r\n            setTimeout(() => onSuccess(new Uint8Array(Tools.DecodeBase64(buffer.uri))));\r\n        } else {\r\n            Tools.LoadFile(\r\n                gltfRuntime.rootUrl + buffer.uri,\r\n                (data) => onSuccess(new Uint8Array(data as ArrayBuffer)),\r\n                onProgress,\r\n                undefined,\r\n                true,\r\n                (request) => {\r\n                    if (request) {\r\n                        onError(request.status + \" \" + request.statusText);\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public static LoadTextureBufferAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (buffer: Nullable<ArrayBufferView>) => void, onError: (message: string) => void): void {\r\n        const texture: IGLTFTexture = gltfRuntime.textures[id];\r\n\r\n        if (!texture || !texture.source) {\r\n            onError(\"\");\r\n            return;\r\n        }\r\n\r\n        if (texture.babylonTexture) {\r\n            onSuccess(null);\r\n            return;\r\n        }\r\n\r\n        const source: IGLTFImage = gltfRuntime.images[texture.source];\r\n\r\n        if (Tools.IsBase64(source.uri)) {\r\n            setTimeout(() => onSuccess(new Uint8Array(Tools.DecodeBase64(source.uri))));\r\n        } else {\r\n            Tools.LoadFile(\r\n                gltfRuntime.rootUrl + source.uri,\r\n                (data) => onSuccess(new Uint8Array(data as ArrayBuffer)),\r\n                undefined,\r\n                undefined,\r\n                true,\r\n                (request) => {\r\n                    if (request) {\r\n                        onError(request.status + \" \" + request.statusText);\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public static CreateTextureAsync(gltfRuntime: IGLTFRuntime, id: string, buffer: Nullable<ArrayBufferView>, onSuccess: (texture: Texture) => void): void {\r\n        const texture: IGLTFTexture = gltfRuntime.textures[id];\r\n\r\n        if (texture.babylonTexture) {\r\n            onSuccess(texture.babylonTexture);\r\n            return;\r\n        }\r\n\r\n        const sampler: IGLTFSampler = gltfRuntime.samplers[texture.sampler];\r\n\r\n        const createMipMaps =\r\n            sampler.minFilter === ETextureFilterType.NEAREST_MIPMAP_NEAREST ||\r\n            sampler.minFilter === ETextureFilterType.NEAREST_MIPMAP_LINEAR ||\r\n            sampler.minFilter === ETextureFilterType.LINEAR_MIPMAP_NEAREST ||\r\n            sampler.minFilter === ETextureFilterType.LINEAR_MIPMAP_LINEAR;\r\n\r\n        const samplingMode = Texture.BILINEAR_SAMPLINGMODE;\r\n\r\n        const blob = buffer == null ? new Blob() : new Blob([buffer]);\r\n        const blobURL = URL.createObjectURL(blob);\r\n        const revokeBlobURL = () => URL.revokeObjectURL(blobURL);\r\n        const newTexture = new Texture(blobURL, gltfRuntime.scene, !createMipMaps, true, samplingMode, revokeBlobURL, revokeBlobURL);\r\n        if (sampler.wrapS !== undefined) {\r\n            newTexture.wrapU = GLTFUtils.GetWrapMode(sampler.wrapS);\r\n        }\r\n        if (sampler.wrapT !== undefined) {\r\n            newTexture.wrapV = GLTFUtils.GetWrapMode(sampler.wrapT);\r\n        }\r\n        newTexture.name = id;\r\n\r\n        texture.babylonTexture = newTexture;\r\n        onSuccess(newTexture);\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public static LoadShaderStringAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (shaderString: string | ArrayBuffer) => void, onError?: (message: string) => void): void {\r\n        const shader: IGLTFShader = gltfRuntime.shaders[id];\r\n\r\n        if (Tools.IsBase64(shader.uri)) {\r\n            const shaderString = atob(shader.uri.split(\",\")[1]);\r\n            if (onSuccess) {\r\n                onSuccess(shaderString);\r\n            }\r\n        } else {\r\n            Tools.LoadFile(gltfRuntime.rootUrl + shader.uri, onSuccess, undefined, undefined, false, (request) => {\r\n                if (request && onError) {\r\n                    onError(request.status + \" \" + request.statusText);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public static LoadMaterialAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (material: Material) => void, onError: (message: string) => void): void {\r\n        const material: IGLTFMaterial = gltfRuntime.materials[id];\r\n        if (!material.technique) {\r\n            if (onError) {\r\n                onError(\"No technique found.\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        const technique: IGLTFTechnique = gltfRuntime.techniques[material.technique];\r\n        if (!technique) {\r\n            gltfRuntime.scene._blockEntityCollection = !!gltfRuntime.assetContainer;\r\n            const defaultMaterial = new StandardMaterial(id, gltfRuntime.scene);\r\n            defaultMaterial._parentContainer = gltfRuntime.assetContainer;\r\n            gltfRuntime.scene._blockEntityCollection = false;\r\n            defaultMaterial.diffuseColor = new Color3(0.5, 0.5, 0.5);\r\n            defaultMaterial.sideOrientation = Material.CounterClockWiseSideOrientation;\r\n            onSuccess(defaultMaterial);\r\n            return;\r\n        }\r\n\r\n        const program: IGLTFProgram = gltfRuntime.programs[technique.program];\r\n        const states: IGLTFTechniqueStates = technique.states;\r\n\r\n        const vertexShader: string = Effect.ShadersStore[program.vertexShader + \"VertexShader\"];\r\n        const pixelShader: string = Effect.ShadersStore[program.fragmentShader + \"PixelShader\"];\r\n        let newVertexShader = \"\";\r\n        let newPixelShader = \"\";\r\n\r\n        const vertexTokenizer = new Tokenizer(vertexShader);\r\n        const pixelTokenizer = new Tokenizer(pixelShader);\r\n\r\n        const unTreatedUniforms: { [key: string]: IGLTFTechniqueParameter } = {};\r\n        const uniforms: string[] = [];\r\n        const attributes: string[] = [];\r\n        const samplers: string[] = [];\r\n\r\n        // Fill uniform, sampler2D and attributes\r\n        for (const unif in technique.uniforms) {\r\n            const uniform = technique.uniforms[unif];\r\n            const uniformParameter: IGLTFTechniqueParameter = technique.parameters[uniform];\r\n\r\n            unTreatedUniforms[unif] = uniformParameter;\r\n\r\n            if (uniformParameter.semantic && !uniformParameter.node && !uniformParameter.source) {\r\n                const transformIndex = glTFTransforms.indexOf(uniformParameter.semantic);\r\n                if (transformIndex !== -1) {\r\n                    uniforms.push(BabylonTransforms[transformIndex]);\r\n                    delete unTreatedUniforms[unif];\r\n                } else {\r\n                    uniforms.push(unif);\r\n                }\r\n            } else if (uniformParameter.type === EParameterType.SAMPLER_2D) {\r\n                samplers.push(unif);\r\n            } else {\r\n                uniforms.push(unif);\r\n            }\r\n        }\r\n\r\n        for (const attr in technique.attributes) {\r\n            const attribute = technique.attributes[attr];\r\n            const attributeParameter: IGLTFTechniqueParameter = technique.parameters[attribute];\r\n\r\n            if (attributeParameter.semantic) {\r\n                const name = GetAttribute(attributeParameter);\r\n                if (name) {\r\n                    attributes.push(name);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Configure vertex shader\r\n        while (!vertexTokenizer.isEnd() && vertexTokenizer.getNextToken()) {\r\n            const tokenType = vertexTokenizer.currentToken;\r\n\r\n            if (tokenType !== ETokenType.IDENTIFIER) {\r\n                newVertexShader += vertexTokenizer.currentString;\r\n                continue;\r\n            }\r\n\r\n            let foundAttribute = false;\r\n\r\n            for (const attr in technique.attributes) {\r\n                const attribute = technique.attributes[attr];\r\n                const attributeParameter: IGLTFTechniqueParameter = technique.parameters[attribute];\r\n\r\n                if (vertexTokenizer.currentIdentifier === attr && attributeParameter.semantic) {\r\n                    newVertexShader += GetAttribute(attributeParameter);\r\n                    foundAttribute = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (foundAttribute) {\r\n                continue;\r\n            }\r\n\r\n            newVertexShader += ParseShaderUniforms(vertexTokenizer, technique, unTreatedUniforms);\r\n        }\r\n\r\n        // Configure pixel shader\r\n        while (!pixelTokenizer.isEnd() && pixelTokenizer.getNextToken()) {\r\n            const tokenType = pixelTokenizer.currentToken;\r\n\r\n            if (tokenType !== ETokenType.IDENTIFIER) {\r\n                newPixelShader += pixelTokenizer.currentString;\r\n                continue;\r\n            }\r\n\r\n            newPixelShader += ParseShaderUniforms(pixelTokenizer, technique, unTreatedUniforms);\r\n        }\r\n\r\n        // Create shader material\r\n        const shaderPath = {\r\n            vertex: program.vertexShader + id,\r\n            fragment: program.fragmentShader + id,\r\n        };\r\n\r\n        const options = {\r\n            attributes: attributes,\r\n            uniforms: uniforms,\r\n            samplers: samplers,\r\n            needAlphaBlending: states && states.enable && states.enable.indexOf(3042) !== -1,\r\n        };\r\n\r\n        Effect.ShadersStore[program.vertexShader + id + \"VertexShader\"] = newVertexShader;\r\n        Effect.ShadersStore[program.fragmentShader + id + \"PixelShader\"] = newPixelShader;\r\n\r\n        const shaderMaterial = new ShaderMaterial(id, gltfRuntime.scene, shaderPath, options);\r\n        shaderMaterial.onError = OnShaderCompileError(program, shaderMaterial, onError);\r\n        shaderMaterial.onCompiled = OnShaderCompileSuccess(gltfRuntime, shaderMaterial, technique, material, unTreatedUniforms, onSuccess);\r\n        shaderMaterial.sideOrientation = Material.CounterClockWiseSideOrientation;\r\n\r\n        if (states && states.functions) {\r\n            const functions = states.functions;\r\n            if (functions.cullFace && functions.cullFace[0] !== ECullingType.BACK) {\r\n                shaderMaterial.backFaceCulling = false;\r\n            }\r\n\r\n            const blendFunc = functions.blendFuncSeparate;\r\n            if (blendFunc) {\r\n                if (\r\n                    blendFunc[0] === EBlendingFunction.SRC_ALPHA &&\r\n                    blendFunc[1] === EBlendingFunction.ONE_MINUS_SRC_ALPHA &&\r\n                    blendFunc[2] === EBlendingFunction.ONE &&\r\n                    blendFunc[3] === EBlendingFunction.ONE\r\n                ) {\r\n                    shaderMaterial.alphaMode = Constants.ALPHA_COMBINE;\r\n                } else if (\r\n                    blendFunc[0] === EBlendingFunction.ONE &&\r\n                    blendFunc[1] === EBlendingFunction.ONE &&\r\n                    blendFunc[2] === EBlendingFunction.ZERO &&\r\n                    blendFunc[3] === EBlendingFunction.ONE\r\n                ) {\r\n                    shaderMaterial.alphaMode = Constants.ALPHA_ONEONE;\r\n                } else if (\r\n                    blendFunc[0] === EBlendingFunction.SRC_ALPHA &&\r\n                    blendFunc[1] === EBlendingFunction.ONE &&\r\n                    blendFunc[2] === EBlendingFunction.ZERO &&\r\n                    blendFunc[3] === EBlendingFunction.ONE\r\n                ) {\r\n                    shaderMaterial.alphaMode = Constants.ALPHA_ADD;\r\n                } else if (\r\n                    blendFunc[0] === EBlendingFunction.ZERO &&\r\n                    blendFunc[1] === EBlendingFunction.ONE_MINUS_SRC_COLOR &&\r\n                    blendFunc[2] === EBlendingFunction.ONE &&\r\n                    blendFunc[3] === EBlendingFunction.ONE\r\n                ) {\r\n                    shaderMaterial.alphaMode = Constants.ALPHA_SUBTRACT;\r\n                } else if (\r\n                    blendFunc[0] === EBlendingFunction.DST_COLOR &&\r\n                    blendFunc[1] === EBlendingFunction.ZERO &&\r\n                    blendFunc[2] === EBlendingFunction.ONE &&\r\n                    blendFunc[3] === EBlendingFunction.ONE\r\n                ) {\r\n                    shaderMaterial.alphaMode = Constants.ALPHA_MULTIPLY;\r\n                } else if (\r\n                    blendFunc[0] === EBlendingFunction.SRC_ALPHA &&\r\n                    blendFunc[1] === EBlendingFunction.ONE_MINUS_SRC_COLOR &&\r\n                    blendFunc[2] === EBlendingFunction.ONE &&\r\n                    blendFunc[3] === EBlendingFunction.ONE\r\n                ) {\r\n                    shaderMaterial.alphaMode = Constants.ALPHA_MAXIMIZED;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * glTF V1 Loader\r\n * @internal\r\n * @deprecated\r\n */\r\nexport class GLTFLoader implements IGLTFLoader {\r\n    public static Extensions: { [name: string]: GLTFLoaderExtension } = {};\r\n\r\n    public static RegisterExtension(extension: GLTFLoaderExtension): void {\r\n        if (GLTFLoader.Extensions[extension.name]) {\r\n            Tools.Error('Tool with the same name \"' + extension.name + '\" already exists');\r\n            return;\r\n        }\r\n\r\n        GLTFLoader.Extensions[extension.name] = extension;\r\n    }\r\n\r\n    public dispose(): void {\r\n        // do nothing\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _importMeshAsync(\r\n        meshesNames: any,\r\n        scene: Scene,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        assetContainer: Nullable<AssetContainer>,\r\n        onSuccess: (meshes: AbstractMesh[], skeletons: Skeleton[]) => void,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        onError?: (message: string) => void\r\n    ): boolean {\r\n        scene.useRightHandedSystem = true;\r\n\r\n        GLTFLoaderExtension.LoadRuntimeAsync(\r\n            scene,\r\n            data,\r\n            rootUrl,\r\n            (gltfRuntime) => {\r\n                gltfRuntime.assetContainer = assetContainer;\r\n                gltfRuntime.importOnlyMeshes = true;\r\n\r\n                if (meshesNames === \"\") {\r\n                    gltfRuntime.importMeshesNames = [];\r\n                } else if (typeof meshesNames === \"string\") {\r\n                    gltfRuntime.importMeshesNames = [meshesNames];\r\n                } else if (meshesNames && !(meshesNames instanceof Array)) {\r\n                    gltfRuntime.importMeshesNames = [meshesNames];\r\n                } else {\r\n                    gltfRuntime.importMeshesNames = [];\r\n                    Tools.Warn(\"Argument meshesNames must be of type string or string[]\");\r\n                }\r\n\r\n                // Create nodes\r\n                this._createNodes(gltfRuntime);\r\n\r\n                const meshes: AbstractMesh[] = [];\r\n                const skeletons: Skeleton[] = [];\r\n\r\n                // Fill arrays of meshes and skeletons\r\n                for (const nde in gltfRuntime.nodes) {\r\n                    const node: IGLTFNode = gltfRuntime.nodes[nde];\r\n\r\n                    if (node.babylonNode instanceof AbstractMesh) {\r\n                        meshes.push(node.babylonNode);\r\n                    }\r\n                }\r\n\r\n                for (const skl in gltfRuntime.skins) {\r\n                    const skin: IGLTFSkins = gltfRuntime.skins[skl];\r\n\r\n                    if (skin.babylonSkeleton instanceof Skeleton) {\r\n                        skeletons.push(skin.babylonSkeleton);\r\n                    }\r\n                }\r\n\r\n                // Load buffers, shaders, materials, etc.\r\n                this._loadBuffersAsync(gltfRuntime, () => {\r\n                    this._loadShadersAsync(gltfRuntime, () => {\r\n                        ImportMaterials(gltfRuntime);\r\n                        PostLoad(gltfRuntime);\r\n\r\n                        if (!GLTFFileLoader.IncrementalLoading && onSuccess) {\r\n                            onSuccess(meshes, skeletons);\r\n                        }\r\n                    });\r\n                });\r\n\r\n                if (GLTFFileLoader.IncrementalLoading && onSuccess) {\r\n                    onSuccess(meshes, skeletons);\r\n                }\r\n            },\r\n            onError\r\n        );\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Imports one or more meshes from a loaded gltf file and adds them to the scene\r\n     * @param meshesNames a string or array of strings of the mesh names that should be loaded from the file\r\n     * @param scene the scene the meshes should be added to\r\n     * @param assetContainer defines the asset container to use (can be null)\r\n     * @param data gltf data containing information of the meshes in a loaded file\r\n     * @param rootUrl root url to load from\r\n     * @param onProgress event that fires when loading progress has occured\r\n     * @returns a promise containg the loaded meshes, particles, skeletons and animations\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    public importMeshAsync(\r\n        meshesNames: any,\r\n        scene: Scene,\r\n        assetContainer: Nullable<AssetContainer>,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void\r\n    ): Promise<ISceneLoaderAsyncResult> {\r\n        return new Promise((resolve, reject) => {\r\n            this._importMeshAsync(\r\n                meshesNames,\r\n                scene,\r\n                data,\r\n                rootUrl,\r\n                assetContainer,\r\n                (meshes, skeletons) => {\r\n                    resolve({\r\n                        meshes: meshes,\r\n                        particleSystems: [],\r\n                        skeletons: skeletons,\r\n                        animationGroups: [],\r\n                        lights: [],\r\n                        transformNodes: [],\r\n                        geometries: [],\r\n                        spriteManagers: [],\r\n                    });\r\n                },\r\n                onProgress,\r\n                (message) => {\r\n                    reject(new Error(message));\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _loadAsync(\r\n        scene: Scene,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        onSuccess: () => void,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        onError?: (message: string) => void\r\n    ): void {\r\n        scene.useRightHandedSystem = true;\r\n\r\n        GLTFLoaderExtension.LoadRuntimeAsync(\r\n            scene,\r\n            data,\r\n            rootUrl,\r\n            (gltfRuntime) => {\r\n                // Load runtime extensios\r\n                GLTFLoaderExtension.LoadRuntimeExtensionsAsync(\r\n                    gltfRuntime,\r\n                    () => {\r\n                        // Create nodes\r\n                        this._createNodes(gltfRuntime);\r\n\r\n                        // Load buffers, shaders, materials, etc.\r\n                        this._loadBuffersAsync(gltfRuntime, () => {\r\n                            this._loadShadersAsync(gltfRuntime, () => {\r\n                                ImportMaterials(gltfRuntime);\r\n                                PostLoad(gltfRuntime);\r\n\r\n                                if (!GLTFFileLoader.IncrementalLoading) {\r\n                                    onSuccess();\r\n                                }\r\n                            });\r\n                        });\r\n\r\n                        if (GLTFFileLoader.IncrementalLoading) {\r\n                            onSuccess();\r\n                        }\r\n                    },\r\n                    onError\r\n                );\r\n            },\r\n            onError\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Imports all objects from a loaded gltf file and adds them to the scene\r\n     * @param scene the scene the objects should be added to\r\n     * @param data gltf data containing information of the meshes in a loaded file\r\n     * @param rootUrl root url to load from\r\n     * @param onProgress event that fires when loading progress has occured\r\n     * @returns a promise which completes when objects have been loaded to the scene\r\n     */\r\n    public async loadAsync(scene: Scene, data: IGLTFLoaderData, rootUrl: string, onProgress?: (event: ISceneLoaderProgressEvent) => void): Promise<void> {\r\n        return await new Promise((resolve, reject) => {\r\n            this._loadAsync(\r\n                scene,\r\n                data,\r\n                rootUrl,\r\n                () => {\r\n                    resolve();\r\n                },\r\n                onProgress,\r\n                (message) => {\r\n                    reject(new Error(message));\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _loadShadersAsync(gltfRuntime: IGLTFRuntime, onload: () => void): void {\r\n        let hasShaders = false;\r\n\r\n        const processShader = (sha: string, shader: IGLTFShader) => {\r\n            GLTFLoaderExtension.LoadShaderStringAsync(\r\n                gltfRuntime,\r\n                sha,\r\n                (shaderString) => {\r\n                    if (shaderString instanceof ArrayBuffer) {\r\n                        return;\r\n                    }\r\n\r\n                    gltfRuntime.loadedShaderCount++;\r\n\r\n                    if (shaderString) {\r\n                        Effect.ShadersStore[sha + (shader.type === EShaderType.VERTEX ? \"VertexShader\" : \"PixelShader\")] = shaderString;\r\n                    }\r\n\r\n                    if (gltfRuntime.loadedShaderCount === gltfRuntime.shaderscount) {\r\n                        onload();\r\n                    }\r\n                },\r\n                () => {\r\n                    Tools.Error(\"Error when loading shader program named \" + sha + \" located at \" + shader.uri);\r\n                }\r\n            );\r\n        };\r\n\r\n        for (const sha in gltfRuntime.shaders) {\r\n            hasShaders = true;\r\n\r\n            const shader: IGLTFShader = gltfRuntime.shaders[sha];\r\n            if (shader) {\r\n                processShader.bind(this, sha, shader)();\r\n            } else {\r\n                Tools.Error(\"No shader named: \" + sha);\r\n            }\r\n        }\r\n\r\n        if (!hasShaders) {\r\n            onload();\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _loadBuffersAsync(gltfRuntime: IGLTFRuntime, onLoad: () => void): void {\r\n        let hasBuffers = false;\r\n\r\n        const processBuffer = (buf: string, buffer: IGLTFBuffer) => {\r\n            GLTFLoaderExtension.LoadBufferAsync(\r\n                gltfRuntime,\r\n                buf,\r\n                (bufferView) => {\r\n                    gltfRuntime.loadedBufferCount++;\r\n\r\n                    if (bufferView) {\r\n                        if (bufferView.byteLength != gltfRuntime.buffers[buf].byteLength) {\r\n                            Tools.Error(\"Buffer named \" + buf + \" is length \" + bufferView.byteLength + \". Expected: \" + buffer.byteLength); // Improve error message\r\n                        }\r\n\r\n                        gltfRuntime.loadedBufferViews[buf] = bufferView;\r\n                    }\r\n\r\n                    if (gltfRuntime.loadedBufferCount === gltfRuntime.buffersCount) {\r\n                        onLoad();\r\n                    }\r\n                },\r\n                () => {\r\n                    Tools.Error(\"Error when loading buffer named \" + buf + \" located at \" + buffer.uri);\r\n                }\r\n            );\r\n        };\r\n\r\n        for (const buf in gltfRuntime.buffers) {\r\n            hasBuffers = true;\r\n\r\n            const buffer: IGLTFBuffer = gltfRuntime.buffers[buf];\r\n            if (buffer) {\r\n                processBuffer.bind(this, buf, buffer)();\r\n            } else {\r\n                Tools.Error(\"No buffer named: \" + buf);\r\n            }\r\n        }\r\n\r\n        if (!hasBuffers) {\r\n            onLoad();\r\n        }\r\n    }\r\n\r\n    private _createNodes(gltfRuntime: IGLTFRuntime): void {\r\n        let currentScene = <IGLTFScene>gltfRuntime.currentScene;\r\n\r\n        if (currentScene) {\r\n            // Only one scene even if multiple scenes are defined\r\n            for (let i = 0; i < currentScene.nodes.length; i++) {\r\n                TraverseNodes(gltfRuntime, currentScene.nodes[i], null);\r\n            }\r\n        } else {\r\n            // Load all scenes\r\n            for (const thing in gltfRuntime.scenes) {\r\n                currentScene = gltfRuntime.scenes[thing];\r\n\r\n                for (let i = 0; i < currentScene.nodes.length; i++) {\r\n                    TraverseNodes(gltfRuntime, currentScene.nodes[i], null);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport abstract class GLTFLoaderExtension {\r\n    private _name: string;\r\n\r\n    public constructor(name: string) {\r\n        this._name = name;\r\n    }\r\n\r\n    public get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    /**\r\n     * Defines an override for loading the runtime\r\n     * Return true to stop further extensions from loading the runtime\r\n     * @param scene\r\n     * @param data\r\n     * @param rootUrl\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @returns true to stop further extensions from loading the runtime\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadRuntimeAsync(scene: Scene, data: IGLTFLoaderData, rootUrl: string, onSuccess?: (gltfRuntime: IGLTFRuntime) => void, onError?: (message: string) => void): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Defines an onverride for creating gltf runtime\r\n     * Return true to stop further extensions from creating the runtime\r\n     * @param gltfRuntime\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @returns true to stop further extensions from creating the runtime\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadRuntimeExtensionsAsync(gltfRuntime: IGLTFRuntime, onSuccess: () => void, onError?: (message: string) => void): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Defines an override for loading buffers\r\n     * Return true to stop further extensions from loading this buffer\r\n     * @param gltfRuntime\r\n     * @param id\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @param onProgress\r\n     * @returns true to stop further extensions from loading this buffer\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadBufferAsync(\r\n        gltfRuntime: IGLTFRuntime,\r\n        id: string,\r\n        onSuccess: (buffer: ArrayBufferView) => void,\r\n        onError: (message: string) => void,\r\n        onProgress?: () => void\r\n    ): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Defines an override for loading texture buffers\r\n     * Return true to stop further extensions from loading this texture data\r\n     * @param gltfRuntime\r\n     * @param id\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @returns true to stop further extensions from loading this texture data\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadTextureBufferAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (buffer: ArrayBufferView) => void, onError: (message: string) => void): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Defines an override for creating textures\r\n     * Return true to stop further extensions from loading this texture\r\n     * @param gltfRuntime\r\n     * @param id\r\n     * @param buffer\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @returns true to stop further extensions from loading this texture\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public createTextureAsync(gltfRuntime: IGLTFRuntime, id: string, buffer: ArrayBufferView, onSuccess: (texture: Texture) => void, onError: (message: string) => void): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Defines an override for loading shader strings\r\n     * Return true to stop further extensions from loading this shader data\r\n     * @param gltfRuntime\r\n     * @param id\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @returns true to stop further extensions from loading this shader data\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadShaderStringAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (shaderString: string) => void, onError: (message: string) => void): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Defines an override for loading materials\r\n     * Return true to stop further extensions from loading this material\r\n     * @param gltfRuntime\r\n     * @param id\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @returns true to stop further extensions from loading this material\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadMaterialAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (material: Material) => void, onError: (message: string) => void): boolean {\r\n        return false;\r\n    }\r\n\r\n    // ---------\r\n    // Utilities\r\n    // ---------\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public static LoadRuntimeAsync(\r\n        scene: Scene,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        onSuccess?: (gltfRuntime: IGLTFRuntime) => void,\r\n        onError?: (message: string) => void\r\n    ): void {\r\n        GLTFLoaderExtension._ApplyExtensions(\r\n            (loaderExtension) => {\r\n                return loaderExtension.loadRuntimeAsync(scene, data, rootUrl, onSuccess, onError);\r\n            },\r\n            () => {\r\n                setTimeout(() => {\r\n                    if (!onSuccess) {\r\n                        return;\r\n                    }\r\n                    onSuccess(GLTFLoaderBase.CreateRuntime(data.json, scene, rootUrl));\r\n                });\r\n            }\r\n        );\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public static LoadRuntimeExtensionsAsync(gltfRuntime: IGLTFRuntime, onSuccess: () => void, onError?: (message: string) => void): void {\r\n        GLTFLoaderExtension._ApplyExtensions(\r\n            (loaderExtension) => {\r\n                return loaderExtension.loadRuntimeExtensionsAsync(gltfRuntime, onSuccess, onError);\r\n            },\r\n            () => {\r\n                setTimeout(() => {\r\n                    onSuccess();\r\n                });\r\n            }\r\n        );\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public static LoadBufferAsync(\r\n        gltfRuntime: IGLTFRuntime,\r\n        id: string,\r\n        onSuccess: (bufferView: ArrayBufferView) => void,\r\n        onError: (message: string) => void,\r\n        onProgress?: () => void\r\n    ): void {\r\n        GLTFLoaderExtension._ApplyExtensions(\r\n            (loaderExtension) => {\r\n                return loaderExtension.loadBufferAsync(gltfRuntime, id, onSuccess, onError, onProgress);\r\n            },\r\n            () => {\r\n                GLTFLoaderBase.LoadBufferAsync(gltfRuntime, id, onSuccess, onError, onProgress);\r\n            }\r\n        );\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public static LoadTextureAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (texture: Texture) => void, onError: (message: string) => void): void {\r\n        GLTFLoaderExtension._LoadTextureBufferAsync(\r\n            gltfRuntime,\r\n            id,\r\n            (buffer) => {\r\n                if (buffer) {\r\n                    GLTFLoaderExtension._CreateTextureAsync(gltfRuntime, id, buffer, onSuccess, onError);\r\n                }\r\n            },\r\n            onError\r\n        );\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public static LoadShaderStringAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (shaderData: string | ArrayBuffer) => void, onError: (message: string) => void): void {\r\n        GLTFLoaderExtension._ApplyExtensions(\r\n            (loaderExtension) => {\r\n                return loaderExtension.loadShaderStringAsync(gltfRuntime, id, onSuccess, onError);\r\n            },\r\n            () => {\r\n                GLTFLoaderBase.LoadShaderStringAsync(gltfRuntime, id, onSuccess, onError);\r\n            }\r\n        );\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public static LoadMaterialAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (material: Material) => void, onError: (message: string) => void): void {\r\n        GLTFLoaderExtension._ApplyExtensions(\r\n            (loaderExtension) => {\r\n                return loaderExtension.loadMaterialAsync(gltfRuntime, id, onSuccess, onError);\r\n            },\r\n            () => {\r\n                GLTFLoaderBase.LoadMaterialAsync(gltfRuntime, id, onSuccess, onError);\r\n            }\r\n        );\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private static _LoadTextureBufferAsync(\r\n        gltfRuntime: IGLTFRuntime,\r\n        id: string,\r\n        onSuccess: (buffer: Nullable<ArrayBufferView>) => void,\r\n        onError: (message: string) => void\r\n    ): void {\r\n        GLTFLoaderExtension._ApplyExtensions(\r\n            (loaderExtension) => {\r\n                return loaderExtension.loadTextureBufferAsync(gltfRuntime, id, onSuccess, onError);\r\n            },\r\n            () => {\r\n                GLTFLoaderBase.LoadTextureBufferAsync(gltfRuntime, id, onSuccess, onError);\r\n            }\r\n        );\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private static _CreateTextureAsync(\r\n        gltfRuntime: IGLTFRuntime,\r\n        id: string,\r\n        buffer: ArrayBufferView,\r\n        onSuccess: (texture: Texture) => void,\r\n        onError: (message: string) => void\r\n    ): void {\r\n        GLTFLoaderExtension._ApplyExtensions(\r\n            (loaderExtension) => {\r\n                return loaderExtension.createTextureAsync(gltfRuntime, id, buffer, onSuccess, onError);\r\n            },\r\n            () => {\r\n                GLTFLoaderBase.CreateTextureAsync(gltfRuntime, id, buffer, onSuccess);\r\n            }\r\n        );\r\n    }\r\n\r\n    private static _ApplyExtensions(func: (loaderExtension: GLTFLoaderExtension) => boolean, defaultFunc: () => void): void {\r\n        for (const extensionName in GLTFLoader.Extensions) {\r\n            const loaderExtension = GLTFLoader.Extensions[extensionName];\r\n            if (func(loaderExtension)) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        defaultFunc();\r\n    }\r\n}\r\n\r\nGLTFFileLoader._CreateGLTF1Loader = () => new GLTFLoader();\r\n", "import { GLTFLoaderExtension, GLTFLoader, GLTFLoaderBase } from \"./glTFLoader\";\r\nimport { GLTFUtils } from \"./glTFLoaderUtils\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { IGLTFLoaderData } from \"../glTFFileLoader\";\r\nimport type { IGLTFRuntime, IGLTFTexture, IGLTFImage, IGLTFBufferView, IGLTFShader } from \"./glTFLoaderInterfaces\";\r\nimport { EComponentType } from \"./glTFLoaderInterfaces\";\r\n\r\nimport type { IDataBuffer } from \"core/Misc/dataReader\";\r\n\r\nconst BinaryExtensionBufferName = \"binary_glTF\";\r\n\r\ninterface IGLTFBinaryExtensionShader {\r\n    bufferView: string;\r\n}\r\n\r\ninterface IGLTFBinaryExtensionImage {\r\n    bufferView: string;\r\n    mimeType: string;\r\n    height: number;\r\n    width: number;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @deprecated\r\n */\r\nexport class GLTFBinaryExtension extends GLTFLoaderExtension {\r\n    private _bin: IDataBuffer;\r\n\r\n    public constructor() {\r\n        super(\"KHR_binary_glTF\");\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public override loadRuntimeAsync(scene: Scene, data: IGLTFLoaderData, rootUrl: string, onSuccess: (gltfRuntime: IGLTFRuntime) => void): boolean {\r\n        const extensionsUsed = (<any>data.json).extensionsUsed;\r\n        if (!extensionsUsed || extensionsUsed.indexOf(this.name) === -1 || !data.bin) {\r\n            return false;\r\n        }\r\n\r\n        this._bin = data.bin;\r\n        onSuccess(GLTFLoaderBase.CreateRuntime(data.json, scene, rootUrl));\r\n        return true;\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public override loadBufferAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (buffer: ArrayBufferView) => void, onError: (message: string) => void): boolean {\r\n        if (gltfRuntime.extensionsUsed.indexOf(this.name) === -1) {\r\n            return false;\r\n        }\r\n\r\n        if (id !== BinaryExtensionBufferName) {\r\n            return false;\r\n        }\r\n\r\n        // eslint-disable-next-line github/no-then\r\n        this._bin.readAsync(0, this._bin.byteLength).then(onSuccess, (error) => onError(error.message));\r\n        return true;\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public override loadTextureBufferAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (buffer: ArrayBufferView) => void): boolean {\r\n        const texture: IGLTFTexture = gltfRuntime.textures[id];\r\n        const source: IGLTFImage = gltfRuntime.images[texture.source];\r\n        if (!source.extensions || !(this.name in source.extensions)) {\r\n            return false;\r\n        }\r\n\r\n        const sourceExt: IGLTFBinaryExtensionImage = source.extensions[this.name];\r\n        const bufferView: IGLTFBufferView = gltfRuntime.bufferViews[sourceExt.bufferView];\r\n        const buffer = GLTFUtils.GetBufferFromBufferView(gltfRuntime, bufferView, 0, bufferView.byteLength, EComponentType.UNSIGNED_BYTE);\r\n        onSuccess(buffer);\r\n        return true;\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public override loadShaderStringAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (shaderString: string) => void): boolean {\r\n        const shader: IGLTFShader = gltfRuntime.shaders[id];\r\n        if (!shader.extensions || !(this.name in shader.extensions)) {\r\n            return false;\r\n        }\r\n\r\n        const binaryExtensionShader: IGLTFBinaryExtensionShader = shader.extensions[this.name];\r\n        const bufferView: IGLTFBufferView = gltfRuntime.bufferViews[binaryExtensionShader.bufferView];\r\n        const shaderBytes = GLTFUtils.GetBufferFromBufferView(gltfRuntime, bufferView, 0, bufferView.byteLength, EComponentType.UNSIGNED_BYTE);\r\n\r\n        setTimeout(() => {\r\n            const shaderString = GLTFUtils.DecodeBufferToText(shaderBytes);\r\n            onSuccess(shaderString);\r\n        });\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(new GLTFBinaryExtension());\r\n", "import { GLTFLoaderExtension, GLTFLoaderBase, GLTFLoader } from \"./glTFLoader\";\r\n\r\nimport type { IGLTFRuntime, IGLTFMaterial } from \"./glTFLoaderInterfaces\";\r\n\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { Material } from \"core/Materials/material\";\r\nimport { StandardMaterial } from \"core/Materials/standardMaterial\";\r\nimport { HemisphericLight } from \"core/Lights/hemisphericLight\";\r\nimport { DirectionalLight } from \"core/Lights/directionalLight\";\r\nimport { PointLight } from \"core/Lights/pointLight\";\r\nimport { SpotLight } from \"core/Lights/spotLight\";\r\n\r\ninterface IGLTFMaterialsCommonExtensionValues {\r\n    ambient?: number[] | string;\r\n    diffuse?: number[] | string;\r\n    emission?: number[] | string;\r\n    specular?: number[] | string;\r\n    shininess?: number;\r\n    transparency?: number;\r\n}\r\n\r\ninterface IGLTFMaterialsCommonExtension {\r\n    technique: string;\r\n    transparent?: number;\r\n    doubleSided?: boolean;\r\n    values: IGLTFMaterialsCommonExtensionValues;\r\n}\r\n\r\ninterface IGLTFRuntimeCommonExtension {\r\n    lights: { [key: string]: IGLTFLightCommonExtension };\r\n}\r\n\r\ninterface IGLTFLightCommonExtension {\r\n    name: string;\r\n    type: string;\r\n\r\n    ambient?: IGLTFAmbientLightCommonExtension;\r\n    point?: IGLTFPointLightCommonExtension;\r\n    directional?: IGLTFDirectionalLightCommonExtension;\r\n    spot?: IGLTFSpotLightCommonExtension;\r\n}\r\n\r\ninterface IGLTFPointLightCommonExtension {\r\n    color: number[];\r\n    constantAttenuation: number;\r\n    linearAttenuation: number;\r\n    quadraticAttenuation: number;\r\n}\r\n\r\ninterface IGLTFAmbientLightCommonExtension {\r\n    color: number[];\r\n}\r\n\r\ninterface IGLTFDirectionalLightCommonExtension {\r\n    color: number[];\r\n}\r\n\r\ninterface IGLTFSpotLightCommonExtension {\r\n    color: number[];\r\n    constantAttenuation: number;\r\n    fallOffAngle: number;\r\n    fallOffExponent: number;\r\n    linearAttenuation: number;\r\n    quadraticAttenuation: number;\r\n}\r\n\r\n/**\r\n * @internal\r\n * @deprecated\r\n */\r\nexport class GLTFMaterialsCommonExtension extends GLTFLoaderExtension {\r\n    constructor() {\r\n        super(\"KHR_materials_common\");\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public override loadRuntimeExtensionsAsync(gltfRuntime: IGLTFRuntime): boolean {\r\n        if (!gltfRuntime.extensions) {\r\n            return false;\r\n        }\r\n\r\n        const extension: IGLTFRuntimeCommonExtension = gltfRuntime.extensions[this.name];\r\n        if (!extension) {\r\n            return false;\r\n        }\r\n\r\n        // Create lights\r\n        const lights = extension.lights;\r\n        if (lights) {\r\n            for (const thing in lights) {\r\n                const light: IGLTFLightCommonExtension = lights[thing];\r\n\r\n                switch (light.type) {\r\n                    case \"ambient\": {\r\n                        const ambientLight = new HemisphericLight(light.name, new Vector3(0, 1, 0), gltfRuntime.scene);\r\n                        const ambient = light.ambient;\r\n                        if (ambient) {\r\n                            ambientLight.diffuse = Color3.FromArray(ambient.color || [1, 1, 1]);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"point\": {\r\n                        const pointLight = new PointLight(light.name, new Vector3(10, 10, 10), gltfRuntime.scene);\r\n                        const point = light.point;\r\n                        if (point) {\r\n                            pointLight.diffuse = Color3.FromArray(point.color || [1, 1, 1]);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"directional\": {\r\n                        const dirLight = new DirectionalLight(light.name, new Vector3(0, -1, 0), gltfRuntime.scene);\r\n                        const directional = light.directional;\r\n                        if (directional) {\r\n                            dirLight.diffuse = Color3.FromArray(directional.color || [1, 1, 1]);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"spot\": {\r\n                        const spot = light.spot;\r\n                        if (spot) {\r\n                            const spotLight = new SpotLight(\r\n                                light.name,\r\n                                new Vector3(0, 10, 0),\r\n                                new Vector3(0, -1, 0),\r\n                                spot.fallOffAngle || Math.PI,\r\n                                spot.fallOffExponent || 0.0,\r\n                                gltfRuntime.scene\r\n                            );\r\n                            spotLight.diffuse = Color3.FromArray(spot.color || [1, 1, 1]);\r\n                        }\r\n                        break;\r\n                    }\r\n                    default:\r\n                        Tools.Warn('GLTF Material Common extension: light type \"' + light.type + \"” not supported\");\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public override loadMaterialAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (material: Material) => void, onError: (message: string) => void): boolean {\r\n        const material: IGLTFMaterial = gltfRuntime.materials[id];\r\n        if (!material || !material.extensions) {\r\n            return false;\r\n        }\r\n\r\n        const extension: IGLTFMaterialsCommonExtension = material.extensions[this.name];\r\n        if (!extension) {\r\n            return false;\r\n        }\r\n\r\n        const standardMaterial = new StandardMaterial(id, gltfRuntime.scene);\r\n        standardMaterial.sideOrientation = Material.CounterClockWiseSideOrientation;\r\n\r\n        if (extension.technique === \"CONSTANT\") {\r\n            standardMaterial.disableLighting = true;\r\n        }\r\n\r\n        standardMaterial.backFaceCulling = extension.doubleSided === undefined ? false : !extension.doubleSided;\r\n        standardMaterial.alpha = extension.values.transparency === undefined ? 1.0 : extension.values.transparency;\r\n        standardMaterial.specularPower = extension.values.shininess === undefined ? 0.0 : extension.values.shininess;\r\n\r\n        // Ambient\r\n        if (typeof extension.values.ambient === \"string\") {\r\n            this._loadTexture(gltfRuntime, extension.values.ambient, standardMaterial, \"ambientTexture\", onError);\r\n        } else {\r\n            standardMaterial.ambientColor = Color3.FromArray(extension.values.ambient || [0, 0, 0]);\r\n        }\r\n\r\n        // Diffuse\r\n        if (typeof extension.values.diffuse === \"string\") {\r\n            this._loadTexture(gltfRuntime, extension.values.diffuse, standardMaterial, \"diffuseTexture\", onError);\r\n        } else {\r\n            standardMaterial.diffuseColor = Color3.FromArray(extension.values.diffuse || [0, 0, 0]);\r\n        }\r\n\r\n        // Emission\r\n        if (typeof extension.values.emission === \"string\") {\r\n            this._loadTexture(gltfRuntime, extension.values.emission, standardMaterial, \"emissiveTexture\", onError);\r\n        } else {\r\n            standardMaterial.emissiveColor = Color3.FromArray(extension.values.emission || [0, 0, 0]);\r\n        }\r\n\r\n        // Specular\r\n        if (typeof extension.values.specular === \"string\") {\r\n            this._loadTexture(gltfRuntime, extension.values.specular, standardMaterial, \"specularTexture\", onError);\r\n        } else {\r\n            standardMaterial.specularColor = Color3.FromArray(extension.values.specular || [0, 0, 0]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private _loadTexture(gltfRuntime: IGLTFRuntime, id: string, material: StandardMaterial, propertyPath: string, onError: (message: string) => void): void {\r\n        // Create buffer from texture url\r\n        GLTFLoaderBase.LoadTextureBufferAsync(\r\n            gltfRuntime,\r\n            id,\r\n            (buffer) => {\r\n                // Create texture from buffer\r\n                GLTFLoaderBase.CreateTextureAsync(gltfRuntime, id, buffer, (texture) => ((<any>material)[propertyPath] = texture));\r\n            },\r\n            onError\r\n        );\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(new GLTFMaterialsCommonExtension());\r\n", "/* eslint-disable @typescript-eslint/no-restricted-imports */\r\nexport * from \"./glTFLoader\";\r\nexport * from \"./glTFLoaderExtension\";\r\nexport * from \"./glTFLoaderExtensionRegistry\";\r\nexport * from \"./glTFLoaderInterfaces\";\r\nexport * from \"./glTFLoaderAnimation\";\r\nexport * from \"./openPbrMaterialLoadingAdapter\";\r\nexport * from \"./pbrMaterialLoadingAdapter\";\r\nexport * from \"./Extensions/index\";\r\n", "/**\r\n * Wrapper class for promise with external resolve and reject.\r\n */\r\nexport class Deferred<T> {\r\n    /**\r\n     * The promise associated with this deferred object.\r\n     */\r\n    public readonly promise: Promise<T>;\r\n\r\n    private _resolve: (value: T | PromiseLike<T>) => void;\r\n    private _reject: (reason?: any) => void;\r\n\r\n    /**\r\n     * The resolve method of the promise associated with this deferred object.\r\n     */\r\n    public get resolve() {\r\n        return this._resolve;\r\n    }\r\n\r\n    /**\r\n     * The reject method of the promise associated with this deferred object.\r\n     */\r\n    public get reject() {\r\n        return this._reject;\r\n    }\r\n\r\n    /**\r\n     * Constructor for this deferred object.\r\n     */\r\n    constructor() {\r\n        this.promise = new Promise((resolve: (value: T | PromiseLike<T>) => void, reject) => {\r\n            this._resolve = resolve;\r\n            this._reject = reject;\r\n        });\r\n    }\r\n}\r\n", "import type { IAnimatable } from \"../Animations/animatable.interface\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable, FloatArray } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { AnimationPropertiesOverride } from \"../Animations/animationPropertiesOverride\";\r\nimport { serialize } from \"../Misc/decorators\";\r\nimport { SerializationHelper } from \"../Misc/decorators.serialization\";\r\nimport { GetClass } from \"../Misc/typeStore\";\r\n\r\nimport type { Animation } from \"../Animations/animation\";\r\n\r\n/**\r\n * Defines a target to use with MorphTargetManager\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/morphTargets\r\n */\r\nexport class MorphTarget implements IAnimatable {\r\n    /**\r\n     * Gets or sets the list of animations\r\n     */\r\n    public animations: Animation[] = [];\r\n\r\n    private _scene: Nullable<Scene>;\r\n    private _positions: Nullable<FloatArray> = null;\r\n    private _normals: Nullable<FloatArray> = null;\r\n    private _tangents: Nullable<FloatArray> = null;\r\n    private _uvs: Nullable<FloatArray> = null;\r\n    private _uv2s: Nullable<FloatArray> = null;\r\n    private _colors: Nullable<FloatArray> = null;\r\n    private _influence: number;\r\n    private _uniqueId = 0;\r\n\r\n    /**\r\n     * Observable raised when the influence changes\r\n     */\r\n    public onInfluenceChanged = new Observable<boolean>();\r\n\r\n    /** @internal */\r\n    public _onDataLayoutChanged = new Observable<void>();\r\n\r\n    /**\r\n     * Gets or sets the influence of this target (ie. its weight in the overall morphing)\r\n     */\r\n    public get influence(): number {\r\n        return this._influence;\r\n    }\r\n\r\n    public set influence(influence: number) {\r\n        if (this._influence === influence) {\r\n            return;\r\n        }\r\n\r\n        const previous = this._influence;\r\n        this._influence = influence;\r\n\r\n        if (this.onInfluenceChanged.hasObservers()) {\r\n            this.onInfluenceChanged.notifyObservers(previous === 0 || influence === 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the id of the morph Target\r\n     */\r\n    @serialize()\r\n    public id: string;\r\n\r\n    private _animationPropertiesOverride: Nullable<AnimationPropertiesOverride> = null;\r\n\r\n    /**\r\n     * Gets or sets the animation properties override\r\n     */\r\n    public get animationPropertiesOverride(): Nullable<AnimationPropertiesOverride> {\r\n        if (!this._animationPropertiesOverride && this._scene) {\r\n            return this._scene.animationPropertiesOverride;\r\n        }\r\n        return this._animationPropertiesOverride;\r\n    }\r\n\r\n    public set animationPropertiesOverride(value: Nullable<AnimationPropertiesOverride>) {\r\n        this._animationPropertiesOverride = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new MorphTarget\r\n     * @param name defines the name of the target\r\n     * @param influence defines the influence to use\r\n     * @param scene defines the scene the morphtarget belongs to\r\n     */\r\n    public constructor(\r\n        /** defines the name of the target */\r\n        public name: string,\r\n        influence = 0,\r\n        scene: Nullable<Scene> = null\r\n    ) {\r\n        this.id = name;\r\n        this._scene = scene || EngineStore.LastCreatedScene;\r\n        this.influence = influence;\r\n\r\n        if (this._scene) {\r\n            this._uniqueId = this._scene.getUniqueId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the unique ID of this manager\r\n     */\r\n    public get uniqueId(): number {\r\n        return this._uniqueId;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean defining if the target contains position data\r\n     */\r\n    public get hasPositions(): boolean {\r\n        return !!this._positions;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean defining if the target contains normal data\r\n     */\r\n    public get hasNormals(): boolean {\r\n        return !!this._normals;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean defining if the target contains tangent data\r\n     */\r\n    public get hasTangents(): boolean {\r\n        return !!this._tangents;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean defining if the target contains texture coordinates data\r\n     */\r\n    public get hasUVs(): boolean {\r\n        return !!this._uvs;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean defining if the target contains texture coordinates 2 data\r\n     */\r\n    public get hasUV2s(): boolean {\r\n        return !!this._uv2s;\r\n    }\r\n\r\n    public get hasColors(): boolean {\r\n        return !!this._colors;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of vertices stored in this target\r\n     */\r\n    public get vertexCount(): number {\r\n        return this._positions\r\n            ? this._positions.length / 3\r\n            : this._normals\r\n              ? this._normals.length / 3\r\n              : this._tangents\r\n                ? this._tangents.length / 3\r\n                : this._uvs\r\n                  ? this._uvs.length / 2\r\n                  : this._uv2s\r\n                    ? this._uv2s.length / 2\r\n                    : this._colors\r\n                      ? this._colors.length / 4\r\n                      : 0;\r\n    }\r\n\r\n    /**\r\n     * Affects position data to this target\r\n     * @param data defines the position data to use\r\n     */\r\n    public setPositions(data: Nullable<FloatArray>) {\r\n        const hadPositions = this.hasPositions;\r\n\r\n        this._positions = data;\r\n\r\n        if (hadPositions !== this.hasPositions) {\r\n            this._onDataLayoutChanged.notifyObservers(undefined);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the position data stored in this target\r\n     * @returns a FloatArray containing the position data (or null if not present)\r\n     */\r\n    public getPositions(): Nullable<FloatArray> {\r\n        return this._positions;\r\n    }\r\n\r\n    /**\r\n     * Affects normal data to this target\r\n     * @param data defines the normal data to use\r\n     */\r\n    public setNormals(data: Nullable<FloatArray>) {\r\n        const hadNormals = this.hasNormals;\r\n\r\n        this._normals = data;\r\n\r\n        if (hadNormals !== this.hasNormals) {\r\n            this._onDataLayoutChanged.notifyObservers(undefined);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the normal data stored in this target\r\n     * @returns a FloatArray containing the normal data (or null if not present)\r\n     */\r\n    public getNormals(): Nullable<FloatArray> {\r\n        return this._normals;\r\n    }\r\n\r\n    /**\r\n     * Affects tangent data to this target\r\n     * @param data defines the tangent data to use\r\n     */\r\n    public setTangents(data: Nullable<FloatArray>) {\r\n        const hadTangents = this.hasTangents;\r\n\r\n        this._tangents = data;\r\n\r\n        if (hadTangents !== this.hasTangents) {\r\n            this._onDataLayoutChanged.notifyObservers(undefined);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the tangent data stored in this target\r\n     * @returns a FloatArray containing the tangent data (or null if not present)\r\n     */\r\n    public getTangents(): Nullable<FloatArray> {\r\n        return this._tangents;\r\n    }\r\n\r\n    /**\r\n     * Affects texture coordinates data to this target\r\n     * @param data defines the texture coordinates data to use\r\n     */\r\n    public setUVs(data: Nullable<FloatArray>) {\r\n        const hadUVs = this.hasUVs;\r\n\r\n        this._uvs = data;\r\n\r\n        if (hadUVs !== this.hasUVs) {\r\n            this._onDataLayoutChanged.notifyObservers(undefined);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the texture coordinates data stored in this target\r\n     * @returns a FloatArray containing the texture coordinates data (or null if not present)\r\n     */\r\n    public getUVs(): Nullable<FloatArray> {\r\n        return this._uvs;\r\n    }\r\n\r\n    /**\r\n     * Affects texture coordinates 2 data to this target\r\n     * @param data defines the texture coordinates 2 data to use\r\n     */\r\n    public setUV2s(data: Nullable<FloatArray>) {\r\n        const hadUV2s = this.hasUV2s;\r\n\r\n        this._uv2s = data;\r\n\r\n        if (hadUV2s !== this.hasUV2s) {\r\n            this._onDataLayoutChanged.notifyObservers(undefined);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the texture coordinates 2 data stored in this target\r\n     * @returns a FloatArray containing the texture coordinates 2 data (or null if not present)\r\n     */\r\n    public getUV2s(): Nullable<FloatArray> {\r\n        return this._uv2s;\r\n    }\r\n\r\n    /**\r\n     * Affects color data to this target\r\n     * @param data defines the color data to use\r\n     */\r\n    public setColors(data: Nullable<FloatArray>) {\r\n        const hadColors = this.hasColors;\r\n\r\n        this._colors = data;\r\n\r\n        if (hadColors !== this.hasColors) {\r\n            this._onDataLayoutChanged.notifyObservers(undefined);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the color data stored in this target\r\n     * @returns a FloatArray containing the color data (or null if not present)\r\n     */\r\n    public getColors(): Nullable<FloatArray> {\r\n        return this._colors;\r\n    }\r\n\r\n    /**\r\n     * Clone the current target\r\n     * @returns a new MorphTarget\r\n     */\r\n    public clone(): MorphTarget {\r\n        const newOne = SerializationHelper.Clone(() => new MorphTarget(this.name, this.influence, this._scene), this);\r\n\r\n        newOne._positions = this._positions;\r\n        newOne._normals = this._normals;\r\n        newOne._tangents = this._tangents;\r\n        newOne._uvs = this._uvs;\r\n        newOne._uv2s = this._uv2s;\r\n        newOne._colors = this._colors;\r\n\r\n        return newOne;\r\n    }\r\n\r\n    /**\r\n     * Serializes the current target into a Serialization object\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.name = this.name;\r\n        serializationObject.influence = this.influence;\r\n\r\n        serializationObject.positions = Array.prototype.slice.call(this.getPositions());\r\n        if (this.id != null) {\r\n            serializationObject.id = this.id;\r\n        }\r\n        if (this.hasNormals) {\r\n            serializationObject.normals = Array.prototype.slice.call(this.getNormals());\r\n        }\r\n        if (this.hasTangents) {\r\n            serializationObject.tangents = Array.prototype.slice.call(this.getTangents());\r\n        }\r\n        if (this.hasUVs) {\r\n            serializationObject.uvs = Array.prototype.slice.call(this.getUVs());\r\n        }\r\n        if (this.hasUV2s) {\r\n            serializationObject.uv2s = Array.prototype.slice.call(this.getUV2s());\r\n        }\r\n        if (this.hasColors) {\r\n            serializationObject.colors = Array.prototype.slice.call(this.getColors());\r\n        }\r\n\r\n        // Animations\r\n        SerializationHelper.AppendSerializedAnimations(this, serializationObject);\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"MorphTarget\"\r\n     * @returns \"MorphTarget\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"MorphTarget\";\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new target from serialized data\r\n     * @param serializationObject defines the serialized data to use\r\n     * @param scene defines the hosting scene\r\n     * @returns a new MorphTarget\r\n     */\r\n    public static Parse(serializationObject: any, scene?: Scene): MorphTarget {\r\n        const result = new MorphTarget(serializationObject.name, serializationObject.influence);\r\n\r\n        result.setPositions(serializationObject.positions);\r\n\r\n        if (serializationObject.id != null) {\r\n            result.id = serializationObject.id;\r\n        }\r\n        if (serializationObject.normals) {\r\n            result.setNormals(serializationObject.normals);\r\n        }\r\n        if (serializationObject.tangents) {\r\n            result.setTangents(serializationObject.tangents);\r\n        }\r\n        if (serializationObject.uvs) {\r\n            result.setUVs(serializationObject.uvs);\r\n        }\r\n        if (serializationObject.uv2s) {\r\n            result.setUV2s(serializationObject.uv2s);\r\n        }\r\n        if (serializationObject.colors) {\r\n            result.setColors(serializationObject.colors);\r\n        }\r\n\r\n        // Animations\r\n        if (serializationObject.animations) {\r\n            for (let animationIndex = 0; animationIndex < serializationObject.animations.length; animationIndex++) {\r\n                const parsedAnimation = serializationObject.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    result.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n\r\n            if (serializationObject.autoAnimate && scene) {\r\n                scene.beginAnimation(\r\n                    result,\r\n                    serializationObject.autoAnimateFrom,\r\n                    serializationObject.autoAnimateTo,\r\n                    serializationObject.autoAnimateLoop,\r\n                    serializationObject.autoAnimateSpeed || 1.0\r\n                );\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a MorphTarget from mesh data\r\n     * @param mesh defines the source mesh\r\n     * @param name defines the name to use for the new target\r\n     * @param influence defines the influence to attach to the target\r\n     * @returns a new MorphTarget\r\n     */\r\n    public static FromMesh(mesh: AbstractMesh, name?: string, influence?: number): MorphTarget {\r\n        if (!name) {\r\n            name = mesh.name;\r\n        }\r\n\r\n        const result = new MorphTarget(name, influence, mesh.getScene());\r\n\r\n        result.setPositions(<FloatArray>mesh.getVerticesData(VertexBuffer.PositionKind));\r\n\r\n        if (mesh.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n            result.setNormals(<FloatArray>mesh.getVerticesData(VertexBuffer.NormalKind));\r\n        }\r\n        if (mesh.isVerticesDataPresent(VertexBuffer.TangentKind)) {\r\n            result.setTangents(<FloatArray>mesh.getVerticesData(VertexBuffer.TangentKind));\r\n        }\r\n        if (mesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n            result.setUVs(<FloatArray>mesh.getVerticesData(VertexBuffer.UVKind));\r\n        }\r\n        if (mesh.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\r\n            result.setUV2s(<FloatArray>mesh.getVerticesData(VertexBuffer.UV2Kind));\r\n        }\r\n        if (mesh.isVerticesDataPresent(VertexBuffer.ColorKind)) {\r\n            result.setColors(<FloatArray>mesh.getVerticesData(VertexBuffer.ColorKind));\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n", "import { Texture } from \"./texture\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\nimport type { Scene } from \"../../scene\";\r\n\r\n/**\r\n * Class used to store 2D array textures containing user data\r\n */\r\nexport class RawTexture2DArray extends Texture {\r\n    private _depth: number;\r\n\r\n    /**\r\n     * Gets the number of layers of the texture\r\n     */\r\n    public get depth() {\r\n        return this._depth;\r\n    }\r\n\r\n    /**\r\n     * Create a new RawTexture2DArray\r\n     * @param data defines the data of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param depth defines the number of layers of the texture\r\n     * @param format defines the texture format to use\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mip levels should be generated (true by default)\r\n     * @param invertY defines if texture must be stored with Y axis inverted\r\n     * @param samplingMode defines the sampling mode to use (Texture.TRILINEAR_SAMPLINGMODE by default)\r\n     * @param textureType defines the texture Type (Engine.TEXTURETYPE_UNSIGNED_BYTE, Engine.TEXTURETYPE_FLOAT...)\r\n     * @param creationFlags specific flags to use when creating the texture (Constants.TEXTURE_CREATIONFLAG_STORAGE for storage textures, for eg)\r\n     */\r\n    constructor(\r\n        data: Nullable<ArrayBufferView>,\r\n        width: number,\r\n        height: number,\r\n        depth: number,\r\n        /** Gets or sets the texture format to use */\r\n        public format: number,\r\n        scene: Scene,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Texture.TRILINEAR_SAMPLINGMODE,\r\n        textureType = Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n        creationFlags?: number\r\n    ) {\r\n        super(null, scene, !generateMipMaps, invertY);\r\n\r\n        this._texture = scene.getEngine().createRawTexture2DArray(data, width, height, depth, format, generateMipMaps, invertY, samplingMode, null, textureType, creationFlags);\r\n\r\n        this._depth = depth;\r\n        this.is2DArray = true;\r\n    }\r\n\r\n    /**\r\n     * Update the texture with new data\r\n     * @param data defines the data to store in the texture\r\n     */\r\n    public update(data: ArrayBufferView): void {\r\n        if (!this._texture) {\r\n            return;\r\n        }\r\n        this._getEngine()!.updateRawTexture2DArray(this._texture, data, this._texture.format, this._texture.invertY, null, this._texture.type);\r\n    }\r\n\r\n    /**\r\n     * Creates a RGBA texture from some data.\r\n     * @param data Define the texture data\r\n     * @param width Define the width of the texture\r\n     * @param height Define the height of the texture\r\n     * @param depth defines the number of layers of the texture\r\n     * @param scene defines the scene the texture will belong to\r\n     * @param generateMipMaps Define whether or not to create mip maps for the texture\r\n     * @param invertY define if the data should be flipped on Y when uploaded to the GPU\r\n     * @param samplingMode define the texture sampling mode (Texture.xxx_SAMPLINGMODE)\r\n     * @param type define the format of the data (int, float... Engine.TEXTURETYPE_xxx)\r\n     * @returns the RGBA texture\r\n     */\r\n    public static CreateRGBATexture(\r\n        data: ArrayBufferView,\r\n        width: number,\r\n        height: number,\r\n        depth: number,\r\n        scene: Scene,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        type: number = Constants.TEXTURETYPE_UNSIGNED_BYTE\r\n    ): RawTexture2DArray {\r\n        return new RawTexture2DArray(data, width, height, depth, Constants.TEXTUREFORMAT_RGBA, scene, generateMipMaps, invertY, samplingMode, type);\r\n    }\r\n}\r\n", "import type { Observer } from \"../Misc/observable\";\r\nimport { SmartArray } from \"../Misc/smartArray\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { IDisposable, Scene } from \"../scene\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport { MorphTarget } from \"./morphTarget\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { RawTexture2DArray } from \"../Materials/Textures/rawTexture2DArray\";\r\nimport type { IAssetContainer } from \"core/IAssetContainer\";\r\n/**\r\n * This class is used to deform meshes using morphing between different targets\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/morphTargets\r\n */\r\nexport class MorphTargetManager implements IDisposable {\r\n    /** Enable storing morph target data into textures when set to true (true by default) */\r\n    public static EnableTextureStorage = true;\r\n\r\n    /** Maximum number of active morph targets supported in the \"vertex attribute\" mode (i.e., not the \"texture\" mode) */\r\n    public static MaxActiveMorphTargetsInVertexAttributeMode = 8;\r\n\r\n    /**\r\n     * When used in texture mode, if greather than 0, this will override the the morph manager numMaxInfluencers value.\r\n     */\r\n    public static ConstantTargetCountForTextureMode = 0;\r\n\r\n    private _targets = new Array<MorphTarget>();\r\n    private _targetInfluenceChangedObservers = new Array<Nullable<Observer<boolean>>>();\r\n    private _targetDataLayoutChangedObservers = new Array<Nullable<Observer<void>>>();\r\n    private _activeTargets = new SmartArray<MorphTarget>(16);\r\n    private _scene: Nullable<Scene>;\r\n    private _influences: Float32Array;\r\n    private _supportsPositions = false;\r\n    private _supportsNormals = false;\r\n    private _supportsTangents = false;\r\n    private _supportsUVs = false;\r\n    private _supportsUV2s = false;\r\n    private _supportsColors = false;\r\n    private _vertexCount = 0;\r\n    private _uniqueId = 0;\r\n    private _tempInfluences = new Array<number>();\r\n    private _canUseTextureForTargets = false;\r\n    private _blockCounter = 0;\r\n    private _mustSynchronize = true;\r\n    private _forceUpdateWhenUnfrozen = false;\r\n\r\n    /** @internal */\r\n    public _textureVertexStride = 0;\r\n\r\n    /** @internal */\r\n    public _textureWidth = 0;\r\n\r\n    /** @internal */\r\n    public _textureHeight = 1;\r\n\r\n    /** @internal */\r\n    public _morphTargetTextureIndices: Float32Array;\r\n\r\n    /** @internal */\r\n    public _parentContainer: Nullable<IAssetContainer> = null;\r\n\r\n    /** @internal */\r\n    public _targetStoreTexture: Nullable<RawTexture2DArray>;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if influencers must be optimized (eg. recompiling the shader if less influencers are used)\r\n     */\r\n    public optimizeInfluencers = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if positions must be morphed\r\n     */\r\n    public enablePositionMorphing = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if normals must be morphed\r\n     */\r\n    public enableNormalMorphing = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if tangents must be morphed\r\n     */\r\n    public enableTangentMorphing = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if UV must be morphed\r\n     */\r\n    public enableUVMorphing = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if UV2 must be morphed\r\n     */\r\n    public enableUV2Morphing = true;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if colors must be morphed\r\n     */\r\n    public enableColorMorphing = true;\r\n\r\n    /**\r\n     * Sets a boolean indicating that adding new target or updating an existing target will not update the underlying data buffers\r\n     */\r\n    public set areUpdatesFrozen(block: boolean) {\r\n        if (block) {\r\n            this._blockCounter++;\r\n        } else {\r\n            this._blockCounter--;\r\n            if (this._blockCounter <= 0) {\r\n                this._blockCounter = 0;\r\n\r\n                this._syncActiveTargets(this._forceUpdateWhenUnfrozen);\r\n                this._forceUpdateWhenUnfrozen = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    public get areUpdatesFrozen() {\r\n        return this._blockCounter > 0;\r\n    }\r\n\r\n    /**\r\n     * Creates a new MorphTargetManager\r\n     * @param scene defines the current scene\r\n     */\r\n    public constructor(scene: Nullable<Scene> = null) {\r\n        if (!scene) {\r\n            scene = EngineStore.LastCreatedScene;\r\n        }\r\n\r\n        this._scene = scene;\r\n\r\n        if (this._scene) {\r\n            this._scene.addMorphTargetManager(this);\r\n\r\n            this._uniqueId = this._scene.getUniqueId();\r\n\r\n            const engineCaps = this._scene.getEngine().getCaps();\r\n            this._canUseTextureForTargets =\r\n                engineCaps.canUseGLVertexID && engineCaps.textureFloat && engineCaps.maxVertexTextureImageUnits > 0 && engineCaps.texture2DArrayMaxLayerCount > 1;\r\n        }\r\n    }\r\n\r\n    private _numMaxInfluencers = 0;\r\n\r\n    /**\r\n     * Gets or sets the maximum number of influencers (targets) (default value: 0).\r\n     * Setting a value for this property can lead to a smoother experience, as only one shader will be compiled, which will use this value as the maximum number of influencers.\r\n     * If you leave the value at 0 (default), a new shader will be compiled every time the number of active influencers changes. This can cause problems, as compiling a shader takes time.\r\n     * If you assign a non-zero value to this property, you need to ensure that this value is greater than the maximum number of (active) influencers you'll need for this morph manager.\r\n     * Otherwise, the number of active influencers will be truncated at the value you set for this property, which can lead to unexpected results.\r\n     * Note that this property has no effect if \"useTextureToStoreTargets\" is false.\r\n     * Note as well that if MorphTargetManager.ConstantTargetCountForTextureMode is greater than 0, this property will be ignored and the constant value will be used instead.\r\n     */\r\n    public get numMaxInfluencers(): number {\r\n        if (MorphTargetManager.ConstantTargetCountForTextureMode > 0 && this.isUsingTextureForTargets) {\r\n            return MorphTargetManager.ConstantTargetCountForTextureMode;\r\n        }\r\n        return this._numMaxInfluencers;\r\n    }\r\n\r\n    public set numMaxInfluencers(value: number) {\r\n        if (this._numMaxInfluencers === value) {\r\n            return;\r\n        }\r\n\r\n        this._numMaxInfluencers = value;\r\n        this._mustSynchronize = true;\r\n        this._syncActiveTargets();\r\n    }\r\n\r\n    /**\r\n     * Gets the unique ID of this manager\r\n     */\r\n    public get uniqueId(): number {\r\n        return this._uniqueId;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of vertices handled by this manager\r\n     */\r\n    public get vertexCount(): number {\r\n        return this._vertexCount;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this manager supports morphing of positions\r\n     */\r\n    public get supportsPositions(): boolean {\r\n        return this._supportsPositions && this.enablePositionMorphing;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this manager supports morphing of normals\r\n     */\r\n    public get supportsNormals(): boolean {\r\n        return this._supportsNormals && this.enableNormalMorphing;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this manager supports morphing of tangents\r\n     */\r\n    public get supportsTangents(): boolean {\r\n        return this._supportsTangents && this.enableTangentMorphing;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this manager supports morphing of texture coordinates\r\n     */\r\n    public get supportsUVs(): boolean {\r\n        return this._supportsUVs && this.enableUVMorphing;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this manager supports morphing of texture coordinates 2\r\n     */\r\n    public get supportsUV2s(): boolean {\r\n        return this._supportsUV2s && this.enableUV2Morphing;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this manager supports morphing of colors\r\n     */\r\n    public get supportsColors(): boolean {\r\n        return this._supportsColors && this.enableColorMorphing;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this manager has data for morphing positions\r\n     */\r\n    public get hasPositions(): boolean {\r\n        return this._supportsPositions;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this manager has data for morphing normals\r\n     */\r\n    public get hasNormals(): boolean {\r\n        return this._supportsNormals;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this manager has data for morphing tangents\r\n     */\r\n    public get hasTangents(): boolean {\r\n        return this._supportsTangents;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this manager has data for morphing texture coordinates\r\n     */\r\n    public get hasUVs(): boolean {\r\n        return this._supportsUVs;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this manager has data for morphing texture coordinates 2\r\n     */\r\n    public get hasUV2s(): boolean {\r\n        return this._supportsUV2s;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if this manager has data for morphing colors\r\n     */\r\n    public get hasColors(): boolean {\r\n        return this._supportsColors;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of targets stored in this manager\r\n     */\r\n    public get numTargets(): number {\r\n        return this._targets.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of influencers (ie. the number of targets with influences > 0)\r\n     */\r\n    public get numInfluencers(): number {\r\n        return this._activeTargets.length;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of influences (one per target)\r\n     */\r\n    public get influences(): Float32Array {\r\n        return this._influences;\r\n    }\r\n\r\n    private _useTextureToStoreTargets = true;\r\n    /**\r\n     * Gets or sets a boolean indicating that targets should be stored as a texture instead of using vertex attributes (default is true).\r\n     * Please note that this option is not available if the hardware does not support it\r\n     */\r\n    public get useTextureToStoreTargets(): boolean {\r\n        return this._useTextureToStoreTargets;\r\n    }\r\n\r\n    public set useTextureToStoreTargets(value: boolean) {\r\n        if (this._useTextureToStoreTargets === value) {\r\n            return;\r\n        }\r\n        this._useTextureToStoreTargets = value;\r\n        this._mustSynchronize = true;\r\n        this._syncActiveTargets();\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the targets are stored into a texture (instead of as attributes)\r\n     */\r\n    public get isUsingTextureForTargets() {\r\n        return (\r\n            MorphTargetManager.EnableTextureStorage &&\r\n            this.useTextureToStoreTargets &&\r\n            this._canUseTextureForTargets &&\r\n            !this._scene?.getEngine().getCaps().disableMorphTargetTexture\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the MorphTargetManager\r\n     */\r\n    public metadata: any = null;\r\n\r\n    /**\r\n     * Gets the active target at specified index. An active target is a target with an influence > 0\r\n     * @param index defines the index to check\r\n     * @returns the requested target\r\n     */\r\n    public getActiveTarget(index: number): MorphTarget {\r\n        return this._activeTargets.data[index];\r\n    }\r\n\r\n    /**\r\n     * Gets the target at specified index\r\n     * @param index defines the index to check\r\n     * @returns the requested target\r\n     */\r\n    public getTarget(index: number): MorphTarget {\r\n        return this._targets[index];\r\n    }\r\n\r\n    /**\r\n     * Gets the first target with the specified name\r\n     * @param name defines the name to check\r\n     * @returns the requested target\r\n     */\r\n    public getTargetByName(name: string): Nullable<MorphTarget> {\r\n        for (const target of this._targets) {\r\n            if (target.name === name) {\r\n                return target;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Add a new target to this manager\r\n     * @param target defines the target to add\r\n     */\r\n    public addTarget(target: MorphTarget): void {\r\n        this._targets.push(target);\r\n        this._targetInfluenceChangedObservers.push(\r\n            target.onInfluenceChanged.add((needUpdate) => {\r\n                if (this.areUpdatesFrozen && needUpdate) {\r\n                    this._forceUpdateWhenUnfrozen = true;\r\n                }\r\n                this._syncActiveTargets(needUpdate);\r\n            })\r\n        );\r\n        this._targetDataLayoutChangedObservers.push(\r\n            target._onDataLayoutChanged.add(() => {\r\n                this._mustSynchronize = true;\r\n                this._syncActiveTargets();\r\n            })\r\n        );\r\n        this._mustSynchronize = true;\r\n        this._syncActiveTargets();\r\n    }\r\n\r\n    /**\r\n     * Removes a target from the manager\r\n     * @param target defines the target to remove\r\n     */\r\n    public removeTarget(target: MorphTarget): void {\r\n        const index = this._targets.indexOf(target);\r\n        if (index >= 0) {\r\n            this._targets.splice(index, 1);\r\n\r\n            target.onInfluenceChanged.remove(this._targetInfluenceChangedObservers.splice(index, 1)[0]);\r\n            target._onDataLayoutChanged.remove(this._targetDataLayoutChangedObservers.splice(index, 1)[0]);\r\n            this._mustSynchronize = true;\r\n            this._syncActiveTargets();\r\n        }\r\n\r\n        if (this._scene) {\r\n            this._scene.stopAnimation(target);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _bind(effect: Effect) {\r\n        effect.setFloat3(\"morphTargetTextureInfo\", this._textureVertexStride, this._textureWidth, this._textureHeight);\r\n        effect.setFloatArray(\"morphTargetTextureIndices\", this._morphTargetTextureIndices);\r\n        effect.setTexture(\"morphTargets\", this._targetStoreTexture);\r\n        effect.setFloat(\"morphTargetCount\", this.numInfluencers);\r\n    }\r\n\r\n    /**\r\n     * Clone the current manager\r\n     * @returns a new MorphTargetManager\r\n     */\r\n    public clone(): MorphTargetManager {\r\n        const copy = new MorphTargetManager(this._scene);\r\n        copy.areUpdatesFrozen = true;\r\n\r\n        for (const target of this._targets) {\r\n            copy.addTarget(target.clone());\r\n        }\r\n        copy.areUpdatesFrozen = false;\r\n\r\n        copy.enablePositionMorphing = this.enablePositionMorphing;\r\n        copy.enableNormalMorphing = this.enableNormalMorphing;\r\n        copy.enableTangentMorphing = this.enableTangentMorphing;\r\n        copy.enableUVMorphing = this.enableUVMorphing;\r\n        copy.enableUV2Morphing = this.enableUV2Morphing;\r\n        copy.enableColorMorphing = this.enableColorMorphing;\r\n        copy.metadata = this.metadata;\r\n\r\n        return copy;\r\n    }\r\n\r\n    /**\r\n     * Serializes the current manager into a Serialization object\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.id = this.uniqueId;\r\n\r\n        serializationObject.targets = [];\r\n        for (const target of this._targets) {\r\n            serializationObject.targets.push(target.serialize());\r\n        }\r\n\r\n        if (this.metadata) {\r\n            serializationObject.metadata = this.metadata;\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    private _syncActiveTargets(needUpdate = false): void {\r\n        if (this.areUpdatesFrozen) {\r\n            return;\r\n        }\r\n\r\n        const wasUsingTextureForTargets = !!this._targetStoreTexture;\r\n        const isUsingTextureForTargets = this.isUsingTextureForTargets;\r\n\r\n        if (this._mustSynchronize || wasUsingTextureForTargets !== isUsingTextureForTargets) {\r\n            this._mustSynchronize = false;\r\n            this.synchronize();\r\n        }\r\n\r\n        let influenceCount = 0;\r\n        this._activeTargets.reset();\r\n\r\n        if (!this._morphTargetTextureIndices || this._morphTargetTextureIndices.length !== this._targets.length) {\r\n            this._morphTargetTextureIndices = new Float32Array(this._targets.length);\r\n        }\r\n\r\n        let targetIndex = -1;\r\n        for (const target of this._targets) {\r\n            targetIndex++;\r\n            if (target.influence === 0 && this.optimizeInfluencers) {\r\n                continue;\r\n            }\r\n\r\n            if (this._activeTargets.length >= MorphTargetManager.MaxActiveMorphTargetsInVertexAttributeMode && !this.isUsingTextureForTargets) {\r\n                break;\r\n            }\r\n\r\n            this._activeTargets.push(target);\r\n            this._morphTargetTextureIndices[influenceCount] = targetIndex;\r\n            this._tempInfluences[influenceCount++] = target.influence;\r\n        }\r\n\r\n        if (this._morphTargetTextureIndices.length !== influenceCount) {\r\n            this._morphTargetTextureIndices = this._morphTargetTextureIndices.slice(0, influenceCount);\r\n        }\r\n\r\n        if (!this._influences || this._influences.length !== influenceCount) {\r\n            this._influences = new Float32Array(influenceCount);\r\n        }\r\n\r\n        for (let index = 0; index < influenceCount; index++) {\r\n            this._influences[index] = this._tempInfluences[index];\r\n        }\r\n\r\n        if (needUpdate && this._scene) {\r\n            for (const mesh of this._scene.meshes) {\r\n                if ((<any>mesh).morphTargetManager === this) {\r\n                    if (isUsingTextureForTargets) {\r\n                        mesh._markSubMeshesAsAttributesDirty();\r\n                    } else {\r\n                        (<Mesh>mesh)._syncGeometryWithMorphTargetManager();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Synchronize the targets with all the meshes using this morph target manager\r\n     */\r\n    public synchronize(): void {\r\n        if (!this._scene || this.areUpdatesFrozen) {\r\n            return;\r\n        }\r\n\r\n        const engine = this._scene.getEngine();\r\n\r\n        this._supportsPositions = true;\r\n        this._supportsNormals = true;\r\n        this._supportsTangents = true;\r\n        this._supportsUVs = true;\r\n        this._supportsUV2s = true;\r\n        this._supportsColors = true;\r\n        this._vertexCount = 0;\r\n\r\n        this._targetStoreTexture?.dispose();\r\n        this._targetStoreTexture = null;\r\n\r\n        if (this.isUsingTextureForTargets && this._targets.length > engine.getCaps().texture2DArrayMaxLayerCount) {\r\n            this.useTextureToStoreTargets = false;\r\n        }\r\n\r\n        for (const target of this._targets) {\r\n            this._supportsPositions = this._supportsPositions && target.hasPositions;\r\n            this._supportsNormals = this._supportsNormals && target.hasNormals;\r\n            this._supportsTangents = this._supportsTangents && target.hasTangents;\r\n            this._supportsUVs = this._supportsUVs && target.hasUVs;\r\n            this._supportsUV2s = this._supportsUV2s && target.hasUV2s;\r\n            this._supportsColors = this._supportsColors && target.hasColors;\r\n\r\n            const vertexCount = target.vertexCount;\r\n            if (this._vertexCount === 0) {\r\n                this._vertexCount = vertexCount;\r\n            } else if (this._vertexCount !== vertexCount) {\r\n                Logger.Error(\r\n                    `Incompatible target. Targets must all have the same vertices count. Current vertex count: ${this._vertexCount}, vertex count for target \"${target.name}\": ${vertexCount}`\r\n                );\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this.isUsingTextureForTargets) {\r\n            this._textureVertexStride = 0;\r\n\r\n            this._supportsPositions && this._textureVertexStride++;\r\n            this._supportsNormals && this._textureVertexStride++;\r\n            this._supportsTangents && this._textureVertexStride++;\r\n            this._supportsUVs && this._textureVertexStride++;\r\n            this._supportsUV2s && this._textureVertexStride++;\r\n            this._supportsColors && this._textureVertexStride++;\r\n\r\n            this._textureWidth = this._vertexCount * this._textureVertexStride || 1;\r\n            this._textureHeight = 1;\r\n\r\n            const maxTextureSize = engine.getCaps().maxTextureSize;\r\n            if (this._textureWidth > maxTextureSize) {\r\n                this._textureHeight = Math.ceil(this._textureWidth / maxTextureSize);\r\n                this._textureWidth = maxTextureSize;\r\n            }\r\n\r\n            const targetCount = this._targets.length;\r\n            const data = new Float32Array(targetCount * this._textureWidth * this._textureHeight * 4);\r\n\r\n            let offset = 0;\r\n            for (let index = 0; index < targetCount; index++) {\r\n                const target = this._targets[index];\r\n\r\n                const positions = target.getPositions();\r\n                const normals = target.getNormals();\r\n                const uvs = target.getUVs();\r\n                const tangents = target.getTangents();\r\n                const uv2s = target.getUV2s();\r\n                const colors = target.getColors();\r\n\r\n                offset = index * this._textureWidth * this._textureHeight * 4;\r\n                for (let vertex = 0; vertex < this._vertexCount; vertex++) {\r\n                    if (this._supportsPositions && positions) {\r\n                        data[offset] = positions[vertex * 3];\r\n                        data[offset + 1] = positions[vertex * 3 + 1];\r\n                        data[offset + 2] = positions[vertex * 3 + 2];\r\n                        offset += 4;\r\n                    }\r\n\r\n                    if (this._supportsNormals && normals) {\r\n                        data[offset] = normals[vertex * 3];\r\n                        data[offset + 1] = normals[vertex * 3 + 1];\r\n                        data[offset + 2] = normals[vertex * 3 + 2];\r\n                        offset += 4;\r\n                    }\r\n\r\n                    if (this._supportsUVs && uvs) {\r\n                        data[offset] = uvs[vertex * 2];\r\n                        data[offset + 1] = uvs[vertex * 2 + 1];\r\n                        offset += 4;\r\n                    }\r\n\r\n                    if (this._supportsTangents && tangents) {\r\n                        data[offset] = tangents[vertex * 3];\r\n                        data[offset + 1] = tangents[vertex * 3 + 1];\r\n                        data[offset + 2] = tangents[vertex * 3 + 2];\r\n                        offset += 4;\r\n                    }\r\n\r\n                    if (this._supportsUV2s && uv2s) {\r\n                        data[offset] = uv2s[vertex * 2];\r\n                        data[offset + 1] = uv2s[vertex * 2 + 1];\r\n                        offset += 4;\r\n                    }\r\n\r\n                    if (this._supportsColors && colors) {\r\n                        data[offset] = colors[vertex * 4];\r\n                        data[offset + 1] = colors[vertex * 4 + 1];\r\n                        data[offset + 2] = colors[vertex * 4 + 2];\r\n                        data[offset + 3] = colors[vertex * 4 + 3];\r\n                        offset += 4;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this._targetStoreTexture = RawTexture2DArray.CreateRGBATexture(\r\n                data,\r\n                this._textureWidth,\r\n                this._textureHeight,\r\n                targetCount,\r\n                this._scene,\r\n                false,\r\n                false,\r\n                Constants.TEXTURE_NEAREST_SAMPLINGMODE,\r\n                Constants.TEXTURETYPE_FLOAT\r\n            );\r\n            this._targetStoreTexture.name = `Morph texture_${this.uniqueId}`;\r\n        }\r\n\r\n        // Flag meshes as dirty to resync with the active targets\r\n        for (const mesh of this._scene.meshes) {\r\n            if ((<any>mesh).morphTargetManager === this) {\r\n                (<Mesh>mesh)._syncGeometryWithMorphTargetManager();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose() {\r\n        if (this._targetStoreTexture) {\r\n            this._targetStoreTexture.dispose();\r\n        }\r\n\r\n        this._targetStoreTexture = null;\r\n        this.metadata = null;\r\n\r\n        // Remove from scene\r\n        if (this._scene) {\r\n            this._scene.removeMorphTargetManager(this);\r\n\r\n            if (this._parentContainer) {\r\n                const index = this._parentContainer.morphTargetManagers.indexOf(this);\r\n                if (index > -1) {\r\n                    this._parentContainer.morphTargetManagers.splice(index, 1);\r\n                }\r\n                this._parentContainer = null;\r\n            }\r\n\r\n            for (const morph of this._targets) {\r\n                this._scene.stopAnimation(morph);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new MorphTargetManager from serialized data\r\n     * @param serializationObject defines the serialized data\r\n     * @param scene defines the hosting scene\r\n     * @returns the new MorphTargetManager\r\n     */\r\n    public static Parse(serializationObject: any, scene: Scene): MorphTargetManager {\r\n        const result = new MorphTargetManager(scene);\r\n\r\n        for (const targetData of serializationObject.targets) {\r\n            result.addTarget(MorphTarget.Parse(targetData, scene));\r\n        }\r\n\r\n        if (serializationObject.metadata) {\r\n            result.metadata = serializationObject.metadata;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n", "import type { GLTFLoader } from \"./glTFLoader\";\r\nimport type { IGLTFLoaderExtension } from \"./glTFLoaderExtension\";\r\n\r\nimport { Logger } from \"core/Misc/logger\";\r\n\r\ninterface IRegisteredGLTFExtension {\r\n    isGLTFExtension: boolean;\r\n    factory: GLTFExtensionFactory;\r\n}\r\n\r\nexport type GLTFExtensionFactory = (loader: GLTFLoader) => IGLTFLoaderExtension | Promise<IGLTFLoaderExtension>;\r\n\r\nconst RegisteredGLTFExtensions = new Map<string, IRegisteredGLTFExtension>();\r\n\r\n/**\r\n * All currently registered glTF 2.0 loader extensions.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport const registeredGLTFExtensions: ReadonlyMap<string, Readonly<IRegisteredGLTFExtension>> = RegisteredGLTFExtensions;\r\n\r\n/**\r\n * Registers a loader extension.\r\n * @param name The name of the loader extension.\r\n * @param isGLTFExtension If the loader extension is a glTF extension, then it will only be used for glTF files that use the corresponding glTF extension. Otherwise, it will be used for all loaded glTF files.\r\n * @param factory The factory function that creates the loader extension.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function registerGLTFExtension(name: string, isGLTFExtension: boolean, factory: GLTFExtensionFactory): void {\r\n    if (unregisterGLTFExtension(name)) {\r\n        Logger.Warn(`Extension with the name '${name}' already exists`);\r\n    }\r\n\r\n    RegisteredGLTFExtensions.set(name, {\r\n        isGLTFExtension,\r\n        factory,\r\n    });\r\n}\r\n\r\n/**\r\n * Unregisters a loader extension.\r\n * @param name The name of the loader extension.\r\n * @returns A boolean indicating whether the extension has been unregistered\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function unregisterGLTFExtension(name: string): boolean {\r\n    return RegisteredGLTFExtensions.delete(name);\r\n}\r\n", "// https://stackoverflow.com/a/48218209\r\n/**\r\n * Merges a series of objects into a single object, deeply.\r\n * @param objects The objects to merge (objects later in the list take precedence).\r\n * @returns The merged object.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function deepMerge<T extends object>(...objects: T[]): T {\r\n    const isRecord = (obj: unknown): obj is Record<string, unknown> => !!obj && typeof obj === \"object\";\r\n\r\n    return objects.reduce<Record<string, unknown>>((prev, obj) => {\r\n        const keys = Object.keys(obj);\r\n        for (const key of keys) {\r\n            const pVal = prev[key];\r\n            const oVal = (obj as Record<string, unknown>)[key];\r\n\r\n            if (Array.isArray(pVal) && Array.isArray(oVal)) {\r\n                prev[key] = pVal.concat(...oVal);\r\n            } else if (isRecord(pVal) && isRecord(oVal)) {\r\n                prev[key] = deepMerge(pVal, oVal);\r\n            } else {\r\n                prev[key] = oVal;\r\n            }\r\n        }\r\n\r\n        return prev;\r\n    }, {}) as T;\r\n}\r\n", "/**\r\n * A class that lazily initializes a value given a factory function.\r\n */\r\nexport class Lazy<T> {\r\n    private _factory: (() => T) | undefined;\r\n    private _value: T | undefined;\r\n\r\n    /**\r\n     * Creates a new instance of the Lazy class.\r\n     * @param factory A function that creates the value.\r\n     */\r\n    constructor(factory: () => T) {\r\n        this._factory = factory;\r\n    }\r\n\r\n    /**\r\n     * Gets the lazily initialized value.\r\n     */\r\n    public get value(): T {\r\n        // If the factory function is still defined, it means we haven't called it yet.\r\n        if (this._factory) {\r\n            this._value = this._factory();\r\n            // Set the factory function to undefined to allow it to be garbage collected.\r\n            this._factory = undefined;\r\n        }\r\n        return this._value as T;\r\n    }\r\n}\r\n", "/* eslint-disable @typescript-eslint/promise-function-async */\r\n/* eslint-disable no-restricted-syntax */\r\n/* eslint-disable github/no-then */\r\nimport type { IndicesArray, Nullable, TypedArray, TypedArrayConstructor } from \"core/types\";\r\nimport { Deferred } from \"core/Misc/deferred\";\r\nimport { Quaternion, Vector3, Matrix, TmpVectors } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { Camera } from \"core/Cameras/camera\";\r\nimport { FreeCamera } from \"core/Cameras/freeCamera\";\r\nimport type { Animation } from \"core/Animations/animation\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { IAnimationKey } from \"core/Animations/animationKey\";\r\nimport { AnimationKeyInterpolation } from \"core/Animations/animationKey\";\r\nimport type { AnimationGroup } from \"core/Animations/animationGroup\";\r\nimport { Bone } from \"core/Bones/bone\";\r\nimport { Skeleton } from \"core/Bones/skeleton\";\r\nimport { Material } from \"core/Materials/material\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { ITextureCreationOptions } from \"core/Materials/Textures/texture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Buffer, VertexBuffer } from \"core/Buffers/buffer\";\r\nimport { Geometry } from \"core/Meshes/geometry\";\r\nimport { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport { MorphTarget } from \"core/Morph/morphTarget\";\r\nimport { MorphTargetManager } from \"core/Morph/morphTargetManager\";\r\nimport type { ISceneLoaderAsyncResult, ISceneLoaderProgressEvent } from \"core/Loading/sceneLoader\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { IProperty } from \"babylonjs-gltf2interface\";\r\nimport {\r\n    AnimationChannelTargetPath,\r\n    AnimationSamplerInterpolation,\r\n    AccessorType,\r\n    CameraType,\r\n    AccessorComponentType,\r\n    MaterialAlphaMode,\r\n    TextureMinFilter,\r\n    TextureWrapMode,\r\n    TextureMagFilter,\r\n    MeshPrimitiveMode,\r\n} from \"babylonjs-gltf2interface\";\r\nimport type {\r\n    IGLTF,\r\n    ISampler,\r\n    INode,\r\n    IScene,\r\n    IMesh,\r\n    IAccessor,\r\n    ISkin,\r\n    ICamera,\r\n    IAnimation,\r\n    IBuffer,\r\n    IBufferView,\r\n    IMaterialPbrMetallicRoughness,\r\n    IMaterial,\r\n    ITextureInfo,\r\n    ITexture,\r\n    IImage,\r\n    IMeshPrimitive,\r\n    IArrayItem,\r\n    _ISamplerData,\r\n    IAnimationChannel,\r\n    IAnimationSampler,\r\n    _IAnimationSamplerData,\r\n} from \"./glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"./glTFLoaderExtension\";\r\nimport type { IGLTFLoader, IGLTFLoaderData } from \"../glTFFileLoader\";\r\nimport { GLTFFileLoader, GLTFLoaderState, GLTFLoaderCoordinateSystemMode, GLTFLoaderAnimationStartMode } from \"../glTFFileLoader\";\r\nimport type { IDataBuffer } from \"core/Misc/dataReader\";\r\nimport { DecodeBase64UrlToBinary, GetMimeType, IsBase64DataUrl, LoadFileError } from \"core/Misc/fileTools\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport type { Light } from \"core/Lights/light\";\r\nimport { BoundingInfo } from \"core/Culling/boundingInfo\";\r\nimport type { AssetContainer } from \"core/assetContainer\";\r\nimport type { AnimationPropertyInfo } from \"./glTFLoaderAnimation\";\r\nimport type { IObjectInfo } from \"core/ObjectModel/objectModelInterfaces\";\r\nimport { registeredGLTFExtensions, registerGLTFExtension, unregisterGLTFExtension } from \"./glTFLoaderExtensionRegistry\";\r\nimport type { GLTFExtensionFactory } from \"./glTFLoaderExtensionRegistry\";\r\nimport type { IInterpolationPropertyInfo } from \"core/FlowGraph/typeDefinitions\";\r\nimport { GetMappingForKey } from \"./Extensions/objectModelMapping\";\r\nimport { deepMerge } from \"core/Misc/deepMerger\";\r\nimport { GetTypedArrayConstructor } from \"core/Buffers/bufferUtils\";\r\nimport { Lazy } from \"core/Misc/lazy\";\r\nimport type { IMaterialLoadingAdapter } from \"./materialLoadingAdapter\";\r\n\r\n// Caching these dynamic imports gives a surprising perf boost (compared to importing them directly each time).\r\nconst LazyAnimationGroupModulePromise = new Lazy(() => import(\"core/Animations/animationGroup\"));\r\nconst LazyLoaderAnimationModulePromise = new Lazy(() => import(\"./glTFLoaderAnimation\"));\r\n\r\nexport { GLTFFileLoader };\r\n\r\ninterface ILoaderProperty extends IProperty {\r\n    _activeLoaderExtensionFunctions: {\r\n        [id: string]: boolean;\r\n    };\r\n}\r\n\r\ninterface IWithMetadata {\r\n    metadata: any;\r\n    _internalMetadata: any;\r\n}\r\n\r\n/**\r\n * Helper class for working with arrays when loading the glTF asset\r\n */\r\nexport class ArrayItem {\r\n    /**\r\n     * Gets an item from the given array.\r\n     * @param context The context when loading the asset\r\n     * @param array The array to get the item from\r\n     * @param index The index to the array\r\n     * @returns The array item\r\n     */\r\n    public static Get<T>(context: string, array: ArrayLike<T> | undefined, index: number | undefined): T {\r\n        if (!array || index == undefined || !array[index]) {\r\n            throw new Error(`${context}: Failed to find index (${index})`);\r\n        }\r\n\r\n        return array[index];\r\n    }\r\n\r\n    /**\r\n     * Gets an item from the given array or returns null if not available.\r\n     * @param array The array to get the item from\r\n     * @param index The index to the array\r\n     * @returns The array item or null\r\n     */\r\n    public static TryGet<T>(array: ArrayLike<T> | undefined, index: number | undefined): Nullable<T> {\r\n        if (!array || index == undefined || !array[index]) {\r\n            return null;\r\n        }\r\n\r\n        return array[index];\r\n    }\r\n\r\n    /**\r\n     * Assign an `index` field to each item of the given array.\r\n     * @param array The array of items\r\n     */\r\n    public static Assign(array?: IArrayItem[]): void {\r\n        if (array) {\r\n            for (let index = 0; index < array.length; index++) {\r\n                array[index].index = index;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport interface IAnimationTargetInfo {\r\n    /** @internal */\r\n    target: unknown;\r\n\r\n    /** @internal */\r\n    properties: Array<AnimationPropertyInfo>;\r\n}\r\n\r\n/** @internal */\r\nexport function LoadBoundingInfoFromPositionAccessor(accessor: IAccessor): Nullable<BoundingInfo> {\r\n    if (accessor.min && accessor.max) {\r\n        const minArray = accessor.min as [number, number, number];\r\n        const maxArray = accessor.max as [number, number, number];\r\n        const minVector = TmpVectors.Vector3[0].copyFromFloats(minArray[0], minArray[1], minArray[2]);\r\n        const maxVector = TmpVectors.Vector3[1].copyFromFloats(maxArray[0], maxArray[1], maxArray[2]);\r\n        if (accessor.normalized && accessor.componentType !== AccessorComponentType.FLOAT) {\r\n            let divider = 1;\r\n            switch (accessor.componentType) {\r\n                case AccessorComponentType.BYTE:\r\n                    divider = 127.0;\r\n                    break;\r\n                case AccessorComponentType.UNSIGNED_BYTE:\r\n                    divider = 255.0;\r\n                    break;\r\n                case AccessorComponentType.SHORT:\r\n                    divider = 32767.0;\r\n                    break;\r\n                case AccessorComponentType.UNSIGNED_SHORT:\r\n                    divider = 65535.0;\r\n                    break;\r\n            }\r\n            const oneOverDivider = 1 / divider;\r\n            minVector.scaleInPlace(oneOverDivider);\r\n            maxVector.scaleInPlace(oneOverDivider);\r\n        }\r\n        return new BoundingInfo(minVector, maxVector);\r\n    }\r\n    return null;\r\n}\r\n\r\ntype PBRMaterialImplementation = {\r\n    materialClass: typeof Material;\r\n    adapterClass: new (material: Material) => IMaterialLoadingAdapter;\r\n};\r\n\r\n/**\r\n * The glTF 2.0 loader\r\n */\r\nexport class GLTFLoader implements IGLTFLoader {\r\n    /** @internal */\r\n    public readonly _completePromises = new Array<Promise<unknown>>();\r\n\r\n    /** @internal */\r\n    public _assetContainer: Nullable<AssetContainer> = null;\r\n\r\n    /** Storage */\r\n    public _babylonLights: Light[] = [];\r\n\r\n    /** @internal */\r\n    public _disableInstancedMesh = 0;\r\n\r\n    /** @internal */\r\n    public _allMaterialsDirtyRequired = false;\r\n\r\n    /** @internal */\r\n    public _skipStartAnimationStep = false;\r\n\r\n    private readonly _parent: GLTFFileLoader;\r\n    private readonly _extensions = new Array<IGLTFLoaderExtension>();\r\n    private _disposed = false;\r\n    private _rootUrl: Nullable<string> = null;\r\n    private _fileName: Nullable<string> = null;\r\n    private _uniqueRootUrl: Nullable<string> = null;\r\n    private _gltf: IGLTF;\r\n    private _bin: Nullable<IDataBuffer> = null;\r\n    private _babylonScene: Scene;\r\n    private _rootBabylonMesh: Nullable<TransformNode> = null;\r\n    private _defaultBabylonMaterialData: { [drawMode: number]: Material } = {};\r\n    private readonly _postSceneLoadActions = new Array<() => void>();\r\n    private readonly _materialAdapterCache = new WeakMap<Material, IMaterialLoadingAdapter>();\r\n\r\n    /** @internal */\r\n    public _pbrMaterialImpl: Nullable<Readonly<PBRMaterialImplementation>> | false = null;\r\n\r\n    /**\r\n     * The default glTF sampler.\r\n     */\r\n    public static readonly DefaultSampler: ISampler = { index: -1 };\r\n\r\n    /**\r\n     * Registers a loader extension.\r\n     * @param name The name of the loader extension.\r\n     * @param factory The factory function that creates the loader extension.\r\n     * @deprecated Please use registerGLTFExtension instead.\r\n     */\r\n    public static RegisterExtension(name: string, factory: GLTFExtensionFactory): void {\r\n        registerGLTFExtension(name, false, factory);\r\n    }\r\n\r\n    /**\r\n     * Unregisters a loader extension.\r\n     * @param name The name of the loader extension.\r\n     * @returns A boolean indicating whether the extension has been unregistered\r\n     * @deprecated Please use unregisterGLTFExtension instead.\r\n     */\r\n    public static UnregisterExtension(name: string): boolean {\r\n        return unregisterGLTFExtension(name);\r\n    }\r\n\r\n    /**\r\n     * The object that represents the glTF JSON.\r\n     */\r\n    public get gltf(): IGLTF {\r\n        if (!this._gltf) {\r\n            throw new Error(\"glTF JSON is not available\");\r\n        }\r\n\r\n        return this._gltf;\r\n    }\r\n\r\n    /**\r\n     * The BIN chunk of a binary glTF.\r\n     */\r\n    public get bin(): Nullable<IDataBuffer> {\r\n        return this._bin;\r\n    }\r\n\r\n    /**\r\n     * The parent file loader.\r\n     */\r\n    public get parent(): GLTFFileLoader {\r\n        return this._parent;\r\n    }\r\n\r\n    /**\r\n     * The Babylon scene when loading the asset.\r\n     */\r\n    public get babylonScene(): Scene {\r\n        if (!this._babylonScene) {\r\n            throw new Error(\"Scene is not available\");\r\n        }\r\n\r\n        return this._babylonScene;\r\n    }\r\n\r\n    /**\r\n     * The root Babylon node when loading the asset.\r\n     */\r\n    public get rootBabylonMesh(): Nullable<TransformNode> {\r\n        return this._rootBabylonMesh;\r\n    }\r\n\r\n    /**\r\n     * The root url when loading the asset.\r\n     */\r\n    public get rootUrl(): Nullable<string> {\r\n        return this._rootUrl;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(parent: GLTFFileLoader) {\r\n        this._parent = parent;\r\n    }\r\n\r\n    /**\r\n     * Creates or gets a cached material loading adapter with dynamic imports\r\n     * @param material The material to adapt\r\n     * @returns Promise that resolves to the appropriate adapter\r\n     * @internal\r\n     */\r\n    public _getOrCreateMaterialAdapter(material: Material): IMaterialLoadingAdapter {\r\n        let adapter = this._materialAdapterCache.get(material);\r\n        if (!adapter) {\r\n            if (this._pbrMaterialImpl) {\r\n                adapter = new this._pbrMaterialImpl.adapterClass(material);\r\n            } else {\r\n                throw new Error(`Appropriate material adapter class not found`);\r\n            }\r\n            this._materialAdapterCache.set(material, adapter);\r\n        }\r\n        return adapter;\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose(): void {\r\n        if (this._disposed) {\r\n            return;\r\n        }\r\n\r\n        this._disposed = true;\r\n\r\n        this._completePromises.length = 0;\r\n\r\n        this._extensions.forEach((extension) => extension.dispose && extension.dispose());\r\n        this._extensions.length = 0;\r\n\r\n        (this._gltf as Nullable<IGLTF>) = null; // TODO\r\n        this._bin = null;\r\n        (this._babylonScene as Nullable<Scene>) = null; // TODO\r\n        this._rootBabylonMesh = null;\r\n        this._defaultBabylonMaterialData = {};\r\n        this._postSceneLoadActions.length = 0;\r\n\r\n        this._parent.dispose();\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public async importMeshAsync(\r\n        meshesNames: string | readonly string[] | null | undefined,\r\n        scene: Scene,\r\n        container: Nullable<AssetContainer>,\r\n        data: IGLTFLoaderData,\r\n        rootUrl: string,\r\n        onProgress?: (event: ISceneLoaderProgressEvent) => void,\r\n        fileName = \"\"\r\n    ): Promise<ISceneLoaderAsyncResult> {\r\n        // eslint-disable-next-line github/no-then\r\n        return await Promise.resolve().then(async () => {\r\n            this._babylonScene = scene;\r\n            this._assetContainer = container;\r\n            this._loadData(data);\r\n\r\n            let nodes: Nullable<Array<number>> = null;\r\n\r\n            if (meshesNames) {\r\n                const nodeMap: { [name: string]: number } = {};\r\n                if (this._gltf.nodes) {\r\n                    for (const node of this._gltf.nodes) {\r\n                        if (node.name) {\r\n                            nodeMap[node.name] = node.index;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                const names = meshesNames instanceof Array ? meshesNames : [meshesNames];\r\n                nodes = names.map((name) => {\r\n                    const node = nodeMap[name];\r\n                    if (node === undefined) {\r\n                        throw new Error(`Failed to find node '${name}'`);\r\n                    }\r\n\r\n                    return node;\r\n                });\r\n            }\r\n\r\n            return await this._loadAsync(rootUrl, fileName, nodes, () => {\r\n                return {\r\n                    meshes: this._getMeshes(),\r\n                    particleSystems: [],\r\n                    skeletons: this._getSkeletons(),\r\n                    animationGroups: this._getAnimationGroups(),\r\n                    lights: this._babylonLights,\r\n                    transformNodes: this._getTransformNodes(),\r\n                    geometries: this._getGeometries(),\r\n                    spriteManagers: [],\r\n                };\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public async loadAsync(scene: Scene, data: IGLTFLoaderData, rootUrl: string, onProgress?: (event: ISceneLoaderProgressEvent) => void, fileName = \"\"): Promise<void> {\r\n        this._babylonScene = scene;\r\n        this._loadData(data);\r\n        return await this._loadAsync(rootUrl, fileName, null, () => undefined);\r\n    }\r\n\r\n    private async _loadAsync<T>(rootUrl: string, fileName: string, nodes: Nullable<Array<number>>, resultFunc: () => T): Promise<T> {\r\n        return await Promise.resolve()\r\n            .then(async () => {\r\n                this._rootUrl = rootUrl;\r\n                this._uniqueRootUrl = !rootUrl.startsWith(\"file:\") && fileName ? rootUrl : `${rootUrl}${Date.now()}/`;\r\n                this._fileName = fileName;\r\n                this._allMaterialsDirtyRequired = false;\r\n\r\n                await this._loadExtensionsAsync();\r\n\r\n                // NOTE: Explicitly check _pbrMaterialImpl for null as a value of false means don't use PBR materials at all.\r\n                if (!this.parent.skipMaterials && this._pbrMaterialImpl == null) {\r\n                    if (this.parent.useOpenPBR) {\r\n                        this._pbrMaterialImpl = {\r\n                            materialClass: (await import(\"core/Materials/PBR/openPbrMaterial\")).OpenPBRMaterial,\r\n                            adapterClass: (await import(\"./openPbrMaterialLoadingAdapter\")).OpenPBRMaterialLoadingAdapter,\r\n                        };\r\n                    } else {\r\n                        this._pbrMaterialImpl = {\r\n                            materialClass: (await import(\"core/Materials/PBR/pbrMaterial\")).PBRMaterial,\r\n                            adapterClass: (await import(\"./pbrMaterialLoadingAdapter\")).PBRMaterialLoadingAdapter,\r\n                        };\r\n                    }\r\n                }\r\n\r\n                const loadingToReadyCounterName = `${GLTFLoaderState[GLTFLoaderState.LOADING]} => ${GLTFLoaderState[GLTFLoaderState.READY]}`;\r\n                const loadingToCompleteCounterName = `${GLTFLoaderState[GLTFLoaderState.LOADING]} => ${GLTFLoaderState[GLTFLoaderState.COMPLETE]}`;\r\n\r\n                this._parent._startPerformanceCounter(loadingToReadyCounterName);\r\n                this._parent._startPerformanceCounter(loadingToCompleteCounterName);\r\n\r\n                this._parent._setState(GLTFLoaderState.LOADING);\r\n                this._extensionsOnLoading();\r\n\r\n                const promises = new Array<Promise<unknown>>();\r\n\r\n                // Block the marking of materials dirty until the scene is loaded.\r\n                const oldBlockMaterialDirtyMechanism = this._babylonScene.blockMaterialDirtyMechanism;\r\n                this._babylonScene.blockMaterialDirtyMechanism = true;\r\n\r\n                if (!this.parent.loadOnlyMaterials) {\r\n                    if (nodes) {\r\n                        promises.push(this.loadSceneAsync(\"/nodes\", { nodes: nodes, index: -1 }));\r\n                    } else if (this._gltf.scene != undefined || (this._gltf.scenes && this._gltf.scenes[0])) {\r\n                        const scene = ArrayItem.Get(`/scene`, this._gltf.scenes, this._gltf.scene || 0);\r\n                        promises.push(this.loadSceneAsync(`/scenes/${scene.index}`, scene));\r\n                    }\r\n                }\r\n\r\n                if (!this.parent.skipMaterials && this.parent.loadAllMaterials && this._gltf.materials) {\r\n                    for (let m = 0; m < this._gltf.materials.length; ++m) {\r\n                        const material = this._gltf.materials[m];\r\n                        const context = \"/materials/\" + m;\r\n                        const babylonDrawMode = Material.TriangleFillMode;\r\n\r\n                        promises.push(this._loadMaterialAsync(context, material, null, babylonDrawMode, () => {}));\r\n                    }\r\n                }\r\n\r\n                // Restore the blocking of material dirty.\r\n                if (this._allMaterialsDirtyRequired) {\r\n                    // This can happen if we add a light for instance as it will impact the whole scene.\r\n                    // This automatically resets everything if needed.\r\n                    this._babylonScene.blockMaterialDirtyMechanism = oldBlockMaterialDirtyMechanism;\r\n                } else {\r\n                    // By default a newly created material is dirty so there is no need to flag the full scene as dirty.\r\n                    // For perf reasons, we then bypass blockMaterialDirtyMechanism as this would \"dirty\" the entire scene.\r\n                    this._babylonScene._forceBlockMaterialDirtyMechanism(oldBlockMaterialDirtyMechanism);\r\n                }\r\n\r\n                if (this._parent.compileMaterials) {\r\n                    promises.push(this._compileMaterialsAsync());\r\n                }\r\n\r\n                if (this._parent.compileShadowGenerators) {\r\n                    promises.push(this._compileShadowGeneratorsAsync());\r\n                }\r\n\r\n                const resultPromise = Promise.all(promises).then(() => {\r\n                    if (this._rootBabylonMesh && this._rootBabylonMesh !== this._parent.customRootNode) {\r\n                        this._rootBabylonMesh.setEnabled(true);\r\n                    }\r\n\r\n                    // Making sure we enable enough lights to have all lights together\r\n                    for (const material of this._babylonScene.materials) {\r\n                        const mat = material as any;\r\n\r\n                        if (mat.maxSimultaneousLights !== undefined) {\r\n                            mat.maxSimultaneousLights = Math.max(mat.maxSimultaneousLights, this._babylonScene.lights.length);\r\n                        }\r\n                    }\r\n\r\n                    this._extensionsOnReady();\r\n                    this._parent._setState(GLTFLoaderState.READY);\r\n                    if (!this._skipStartAnimationStep) {\r\n                        this._startAnimations();\r\n                    }\r\n\r\n                    return resultFunc();\r\n                });\r\n\r\n                return await resultPromise.then((result) => {\r\n                    this._parent._endPerformanceCounter(loadingToReadyCounterName);\r\n\r\n                    Tools.SetImmediate(() => {\r\n                        if (!this._disposed) {\r\n                            Promise.all(this._completePromises).then(\r\n                                () => {\r\n                                    this._parent._endPerformanceCounter(loadingToCompleteCounterName);\r\n\r\n                                    this._parent._setState(GLTFLoaderState.COMPLETE);\r\n\r\n                                    this._parent.onCompleteObservable.notifyObservers(undefined);\r\n                                    this._parent.onCompleteObservable.clear();\r\n\r\n                                    this.dispose();\r\n                                },\r\n                                (error) => {\r\n                                    this._parent.onErrorObservable.notifyObservers(error);\r\n                                    this._parent.onErrorObservable.clear();\r\n\r\n                                    this.dispose();\r\n                                }\r\n                            );\r\n                        }\r\n                    });\r\n\r\n                    return result;\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                if (!this._disposed) {\r\n                    this._parent.onErrorObservable.notifyObservers(error);\r\n                    this._parent.onErrorObservable.clear();\r\n\r\n                    this.dispose();\r\n                }\r\n\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    private _loadData(data: IGLTFLoaderData): void {\r\n        this._gltf = data.json as IGLTF;\r\n        this._setupData();\r\n\r\n        if (data.bin) {\r\n            const buffers = this._gltf.buffers;\r\n            if (buffers && buffers[0] && !buffers[0].uri) {\r\n                const binaryBuffer = buffers[0];\r\n                if (binaryBuffer.byteLength < data.bin.byteLength - 3 || binaryBuffer.byteLength > data.bin.byteLength) {\r\n                    Logger.Warn(`Binary buffer length (${binaryBuffer.byteLength}) from JSON does not match chunk length (${data.bin.byteLength})`);\r\n                }\r\n\r\n                this._bin = data.bin;\r\n            } else {\r\n                Logger.Warn(\"Unexpected BIN chunk\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private _setupData(): void {\r\n        ArrayItem.Assign(this._gltf.accessors);\r\n        ArrayItem.Assign(this._gltf.animations);\r\n        ArrayItem.Assign(this._gltf.buffers);\r\n        ArrayItem.Assign(this._gltf.bufferViews);\r\n        ArrayItem.Assign(this._gltf.cameras);\r\n        ArrayItem.Assign(this._gltf.images);\r\n        ArrayItem.Assign(this._gltf.materials);\r\n        ArrayItem.Assign(this._gltf.meshes);\r\n        ArrayItem.Assign(this._gltf.nodes);\r\n        ArrayItem.Assign(this._gltf.samplers);\r\n        ArrayItem.Assign(this._gltf.scenes);\r\n        ArrayItem.Assign(this._gltf.skins);\r\n        ArrayItem.Assign(this._gltf.textures);\r\n\r\n        if (this._gltf.nodes) {\r\n            const nodeParents: { [index: number]: number } = {};\r\n            for (const node of this._gltf.nodes) {\r\n                if (node.children) {\r\n                    for (const index of node.children) {\r\n                        nodeParents[index] = node.index;\r\n                    }\r\n                }\r\n            }\r\n\r\n            const rootNode = this._createRootNode();\r\n            for (const node of this._gltf.nodes) {\r\n                const parentIndex = nodeParents[node.index];\r\n                node.parent = parentIndex === undefined ? rootNode : this._gltf.nodes[parentIndex];\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _loadExtensionsAsync() {\r\n        const extensionPromises: Promise<IGLTFLoaderExtension>[] = [];\r\n\r\n        registeredGLTFExtensions.forEach((registeredExtension, name) => {\r\n            // Don't load explicitly disabled extensions.\r\n            if (this.parent.extensionOptions[name]?.enabled === false) {\r\n                // But warn if the disabled extension is used by the model.\r\n                if (registeredExtension.isGLTFExtension && this.isExtensionUsed(name)) {\r\n                    Logger.Warn(`Extension ${name} is used but has been explicitly disabled.`);\r\n                }\r\n            }\r\n            // Load loader extensions that are not a glTF extension, as well as extensions that are glTF extensions and are used by the model.\r\n            else if (!registeredExtension.isGLTFExtension || this.isExtensionUsed(name)) {\r\n                extensionPromises.push(\r\n                    (async () => {\r\n                        const extension = await registeredExtension.factory(this);\r\n                        if (extension.name !== name) {\r\n                            Logger.Warn(`The name of the glTF loader extension instance does not match the registered name: ${extension.name} !== ${name}`);\r\n                        }\r\n\r\n                        this._parent.onExtensionLoadedObservable.notifyObservers(extension);\r\n                        return extension;\r\n                    })()\r\n                );\r\n            }\r\n        });\r\n\r\n        this._extensions.push(...(await Promise.all(extensionPromises)));\r\n\r\n        this._extensions.sort((a, b) => (a.order || Number.MAX_VALUE) - (b.order || Number.MAX_VALUE));\r\n        this._parent.onExtensionLoadedObservable.clear();\r\n\r\n        if (this._gltf.extensionsRequired) {\r\n            for (const name of this._gltf.extensionsRequired) {\r\n                const available = this._extensions.some((extension) => extension.name === name && extension.enabled);\r\n                if (!available) {\r\n                    if (this.parent.extensionOptions[name]?.enabled === false) {\r\n                        throw new Error(`Required extension ${name} is disabled`);\r\n                    }\r\n                    throw new Error(`Required extension ${name} is not available`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _createRootNode(): INode {\r\n        if (this._parent.customRootNode !== undefined) {\r\n            this._rootBabylonMesh = this._parent.customRootNode;\r\n            return {\r\n                // eslint-disable-next-line @typescript-eslint/naming-convention\r\n                _babylonTransformNode: this._rootBabylonMesh === null ? undefined : this._rootBabylonMesh,\r\n                index: -1,\r\n            };\r\n        }\r\n        this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n        const rootMesh = new Mesh(\"__root__\", this._babylonScene);\r\n        this._rootBabylonMesh = rootMesh;\r\n        this._rootBabylonMesh._parentContainer = this._assetContainer;\r\n        this._babylonScene._blockEntityCollection = false;\r\n        this._rootBabylonMesh.setEnabled(false);\r\n\r\n        const rootNode: INode = {\r\n            // eslint-disable-next-line @typescript-eslint/naming-convention\r\n            _babylonTransformNode: this._rootBabylonMesh,\r\n            index: -1,\r\n        };\r\n\r\n        switch (this._parent.coordinateSystemMode) {\r\n            case GLTFLoaderCoordinateSystemMode.AUTO: {\r\n                if (!this._babylonScene.useRightHandedSystem) {\r\n                    rootNode.rotation = [0, 1, 0, 0];\r\n                    rootNode.scale = [1, 1, -1];\r\n                    GLTFLoader._LoadTransform(rootNode, this._rootBabylonMesh);\r\n                }\r\n                break;\r\n            }\r\n            case GLTFLoaderCoordinateSystemMode.FORCE_RIGHT_HANDED: {\r\n                this._babylonScene.useRightHandedSystem = true;\r\n                break;\r\n            }\r\n            default: {\r\n                throw new Error(`Invalid coordinate system mode (${this._parent.coordinateSystemMode})`);\r\n            }\r\n        }\r\n\r\n        this._parent.onMeshLoadedObservable.notifyObservers(rootMesh);\r\n        return rootNode;\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF scene.\r\n     * @param context The context when loading the asset\r\n     * @param scene The glTF scene property\r\n     * @returns A promise that resolves when the load is complete\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax, @typescript-eslint/promise-function-async\r\n    public loadSceneAsync(context: string, scene: IScene): Promise<void> {\r\n        const extensionPromise = this._extensionsLoadSceneAsync(context, scene);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        this.logOpen(`${context} ${scene.name || \"\"}`);\r\n\r\n        if (scene.nodes) {\r\n            for (const index of scene.nodes) {\r\n                const node = ArrayItem.Get(`${context}/nodes/${index}`, this._gltf.nodes, index);\r\n                promises.push(\r\n                    this.loadNodeAsync(`/nodes/${node.index}`, node, (babylonMesh) => {\r\n                        babylonMesh.parent = this._rootBabylonMesh;\r\n                    })\r\n                );\r\n            }\r\n        }\r\n\r\n        for (const action of this._postSceneLoadActions) {\r\n            action();\r\n        }\r\n\r\n        promises.push(this._loadAnimationsAsync());\r\n\r\n        this.logClose();\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n\r\n    private _forEachPrimitive(node: INode, callback: (babylonMesh: AbstractMesh) => void): void {\r\n        if (node._primitiveBabylonMeshes) {\r\n            for (const babylonMesh of node._primitiveBabylonMeshes) {\r\n                callback(babylonMesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _getGeometries(): Geometry[] {\r\n        const geometries: Geometry[] = [];\r\n\r\n        const nodes = this._gltf.nodes;\r\n        if (nodes) {\r\n            for (const node of nodes) {\r\n                this._forEachPrimitive(node, (babylonMesh) => {\r\n                    const geometry = (babylonMesh as Mesh).geometry;\r\n                    if (geometry && geometries.indexOf(geometry) === -1) {\r\n                        geometries.push(geometry);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        return geometries;\r\n    }\r\n\r\n    private _getMeshes(): AbstractMesh[] {\r\n        const meshes: AbstractMesh[] = [];\r\n\r\n        // Root mesh is always first, if available.\r\n        if (this._rootBabylonMesh instanceof AbstractMesh) {\r\n            meshes.push(this._rootBabylonMesh);\r\n        }\r\n\r\n        const nodes = this._gltf.nodes;\r\n        if (nodes) {\r\n            for (const node of nodes) {\r\n                this._forEachPrimitive(node, (babylonMesh) => {\r\n                    meshes.push(babylonMesh);\r\n                });\r\n            }\r\n        }\r\n\r\n        return meshes;\r\n    }\r\n\r\n    private _getTransformNodes(): TransformNode[] {\r\n        const transformNodes: TransformNode[] = [];\r\n\r\n        const nodes = this._gltf.nodes;\r\n        if (nodes) {\r\n            for (const node of nodes) {\r\n                if (node._babylonTransformNode && node._babylonTransformNode.getClassName() === \"TransformNode\") {\r\n                    transformNodes.push(node._babylonTransformNode);\r\n                }\r\n                if (node._babylonTransformNodeForSkin) {\r\n                    transformNodes.push(node._babylonTransformNodeForSkin);\r\n                }\r\n            }\r\n        }\r\n\r\n        return transformNodes;\r\n    }\r\n\r\n    private _getSkeletons(): Skeleton[] {\r\n        const skeletons: Skeleton[] = [];\r\n\r\n        const skins = this._gltf.skins;\r\n        if (skins) {\r\n            for (const skin of skins) {\r\n                if (skin._data) {\r\n                    skeletons.push(skin._data.babylonSkeleton);\r\n                }\r\n            }\r\n        }\r\n\r\n        return skeletons;\r\n    }\r\n\r\n    private _getAnimationGroups(): AnimationGroup[] {\r\n        const animationGroups: AnimationGroup[] = [];\r\n\r\n        const animations = this._gltf.animations;\r\n        if (animations) {\r\n            for (const animation of animations) {\r\n                if (animation._babylonAnimationGroup) {\r\n                    animationGroups.push(animation._babylonAnimationGroup);\r\n                }\r\n            }\r\n        }\r\n\r\n        return animationGroups;\r\n    }\r\n\r\n    private _startAnimations(): void {\r\n        switch (this._parent.animationStartMode) {\r\n            case GLTFLoaderAnimationStartMode.NONE: {\r\n                // do nothing\r\n                break;\r\n            }\r\n            case GLTFLoaderAnimationStartMode.FIRST: {\r\n                const babylonAnimationGroups = this._getAnimationGroups();\r\n                if (babylonAnimationGroups.length !== 0) {\r\n                    babylonAnimationGroups[0].start(true);\r\n                }\r\n                break;\r\n            }\r\n            case GLTFLoaderAnimationStartMode.ALL: {\r\n                const babylonAnimationGroups = this._getAnimationGroups();\r\n                for (const babylonAnimationGroup of babylonAnimationGroups) {\r\n                    babylonAnimationGroup.start(true);\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                Logger.Error(`Invalid animation start mode (${this._parent.animationStartMode})`);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF node.\r\n     * @param context The context when loading the asset\r\n     * @param node The glTF node property\r\n     * @param assign A function called synchronously after parsing the glTF properties\r\n     * @returns A promise that resolves with the loaded Babylon mesh when the load is complete\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    public loadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void = () => {}): Promise<TransformNode> {\r\n        const extensionPromise = this._extensionsLoadNodeAsync(context, node, assign);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        if (node._babylonTransformNode) {\r\n            throw new Error(`${context}: Invalid recursive node hierarchy`);\r\n        }\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        this.logOpen(`${context} ${node.name || \"\"}`);\r\n\r\n        const loadNode = (babylonTransformNode: TransformNode) => {\r\n            GLTFLoader.AddPointerMetadata(babylonTransformNode, context);\r\n            GLTFLoader._LoadTransform(node, babylonTransformNode);\r\n\r\n            if (node.camera != undefined) {\r\n                const camera = ArrayItem.Get(`${context}/camera`, this._gltf.cameras, node.camera);\r\n                promises.push(\r\n                    this.loadCameraAsync(`/cameras/${camera.index}`, camera, (babylonCamera) => {\r\n                        babylonCamera.parent = babylonTransformNode;\r\n                        if (!this._babylonScene.useRightHandedSystem) {\r\n                            babylonTransformNode.scaling.x = -1; // Cancelling root node scaling for handedness so the view matrix does not end up flipped.\r\n                        }\r\n                    })\r\n                );\r\n            }\r\n\r\n            if (node.children) {\r\n                for (const index of node.children) {\r\n                    const childNode = ArrayItem.Get(`${context}/children/${index}`, this._gltf.nodes, index);\r\n                    promises.push(\r\n                        this.loadNodeAsync(`/nodes/${childNode.index}`, childNode, (childBabylonMesh) => {\r\n                            childBabylonMesh.parent = babylonTransformNode;\r\n                        })\r\n                    );\r\n                }\r\n            }\r\n\r\n            assign(babylonTransformNode);\r\n        };\r\n\r\n        const hasMesh = node.mesh != undefined;\r\n        const hasSkin = this._parent.loadSkins && node.skin != undefined;\r\n\r\n        if (!hasMesh || hasSkin) {\r\n            const nodeName = node.name || `node${node.index}`;\r\n            this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n            const transformNode = new TransformNode(nodeName, this._babylonScene);\r\n            transformNode._parentContainer = this._assetContainer;\r\n            this._babylonScene._blockEntityCollection = false;\r\n            if (node.mesh == undefined) {\r\n                node._babylonTransformNode = transformNode;\r\n            } else {\r\n                node._babylonTransformNodeForSkin = transformNode;\r\n            }\r\n            loadNode(transformNode);\r\n        }\r\n\r\n        if (hasMesh) {\r\n            if (hasSkin) {\r\n                // See https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins (second implementation note)\r\n                // This code path will place the skinned mesh as a sibling of the skeleton root node without loading the\r\n                // transform, which effectively ignores the transform of the skinned mesh, as per spec.\r\n\r\n                const mesh = ArrayItem.Get(`${context}/mesh`, this._gltf.meshes, node.mesh);\r\n                promises.push(\r\n                    this._loadMeshAsync(`/meshes/${mesh.index}`, node, mesh, (babylonTransformNode) => {\r\n                        const babylonTransformNodeForSkin = node._babylonTransformNodeForSkin!;\r\n\r\n                        // Merge the metadata from the skin node to the skinned mesh in case a loader extension added metadata.\r\n                        babylonTransformNode.metadata = deepMerge(babylonTransformNodeForSkin.metadata, babylonTransformNode.metadata || {});\r\n\r\n                        const skin = ArrayItem.Get(`${context}/skin`, this._gltf.skins, node.skin);\r\n                        promises.push(\r\n                            this._loadSkinAsync(`/skins/${skin.index}`, node, skin, (babylonSkeleton) => {\r\n                                this._forEachPrimitive(node, (babylonMesh) => {\r\n                                    babylonMesh.skeleton = babylonSkeleton;\r\n                                });\r\n\r\n                                // Wait until all the nodes are parented before parenting the skinned mesh.\r\n                                this._postSceneLoadActions.push(() => {\r\n                                    if (skin.skeleton != undefined) {\r\n                                        // Place the skinned mesh node as a sibling of the skeleton root node.\r\n                                        // Handle special case when the parent of the skeleton root is the skinned mesh.\r\n                                        const parentNode = ArrayItem.Get(`/skins/${skin.index}/skeleton`, this._gltf.nodes, skin.skeleton).parent!;\r\n                                        if (node.index === parentNode.index) {\r\n                                            babylonTransformNode.parent = babylonTransformNodeForSkin.parent;\r\n                                        } else {\r\n                                            babylonTransformNode.parent = parentNode._babylonTransformNode!;\r\n                                        }\r\n                                    } else {\r\n                                        babylonTransformNode.parent = this._rootBabylonMesh;\r\n                                    }\r\n\r\n                                    this._parent.onSkinLoadedObservable.notifyObservers({ node: babylonTransformNodeForSkin, skinnedNode: babylonTransformNode });\r\n                                });\r\n                            })\r\n                        );\r\n                    })\r\n                );\r\n            } else {\r\n                const mesh = ArrayItem.Get(`${context}/mesh`, this._gltf.meshes, node.mesh);\r\n                promises.push(this._loadMeshAsync(`/meshes/${mesh.index}`, node, mesh, loadNode));\r\n            }\r\n        }\r\n\r\n        this.logClose();\r\n\r\n        return Promise.all(promises).then(() => {\r\n            this._forEachPrimitive(node, (babylonMesh) => {\r\n                const asMesh = babylonMesh as Mesh;\r\n                if (!asMesh.isAnInstance && asMesh.geometry && asMesh.geometry.useBoundingInfoFromGeometry) {\r\n                    // simply apply the world matrices to the bounding info - the extends are already ok\r\n                    babylonMesh._updateBoundingInfo();\r\n                } else {\r\n                    babylonMesh.refreshBoundingInfo(true, true);\r\n                }\r\n            });\r\n\r\n            return node._babylonTransformNode!;\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadMeshAsync(context: string, node: INode, mesh: IMesh, assign: (babylonTransformNode: TransformNode) => void): Promise<TransformNode> {\r\n        const primitives = mesh.primitives;\r\n        if (!primitives || !primitives.length) {\r\n            throw new Error(`${context}: Primitives are missing`);\r\n        }\r\n\r\n        if (primitives[0].index == undefined) {\r\n            ArrayItem.Assign(primitives);\r\n        }\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        this.logOpen(`${context} ${mesh.name || \"\"}`);\r\n\r\n        const name = node.name || `node${node.index}`;\r\n\r\n        if (primitives.length === 1) {\r\n            const primitive = mesh.primitives[0];\r\n            promises.push(\r\n                this._loadMeshPrimitiveAsync(`${context}/primitives/${primitive.index}`, name, node, mesh, primitive, (babylonMesh) => {\r\n                    node._babylonTransformNode = babylonMesh;\r\n                    node._primitiveBabylonMeshes = [babylonMesh];\r\n                })\r\n            );\r\n        } else {\r\n            this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n            node._babylonTransformNode = new TransformNode(name, this._babylonScene);\r\n            node._babylonTransformNode._parentContainer = this._assetContainer;\r\n            this._babylonScene._blockEntityCollection = false;\r\n            node._primitiveBabylonMeshes = [];\r\n            for (const primitive of primitives) {\r\n                promises.push(\r\n                    this._loadMeshPrimitiveAsync(`${context}/primitives/${primitive.index}`, `${name}_primitive${primitive.index}`, node, mesh, primitive, (babylonMesh) => {\r\n                        babylonMesh.parent = node._babylonTransformNode!;\r\n                        node._primitiveBabylonMeshes!.push(babylonMesh);\r\n                    })\r\n                );\r\n            }\r\n        }\r\n\r\n        assign(node._babylonTransformNode!);\r\n\r\n        this.logClose();\r\n\r\n        return Promise.all(promises).then(() => {\r\n            return node._babylonTransformNode!;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal Define this method to modify the default behavior when loading data for mesh primitives.\r\n     * @param context The context when loading the asset\r\n     * @param name The mesh name when loading the asset\r\n     * @param node The glTF node when loading the asset\r\n     * @param mesh The glTF mesh when loading the asset\r\n     * @param primitive The glTF mesh primitive property\r\n     * @param assign A function called synchronously after parsing the glTF properties\r\n     * @returns A promise that resolves with the loaded mesh when the load is complete or null if not handled\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    public _loadMeshPrimitiveAsync(\r\n        context: string,\r\n        name: string,\r\n        node: INode,\r\n        mesh: IMesh,\r\n        primitive: IMeshPrimitive,\r\n        assign: (babylonMesh: AbstractMesh) => void\r\n    ): Promise<AbstractMesh> {\r\n        const extensionPromise = this._extensionsLoadMeshPrimitiveAsync(context, name, node, mesh, primitive, assign);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        this.logOpen(`${context}`);\r\n\r\n        const shouldInstance = this._disableInstancedMesh === 0 && this._parent.createInstances && node.skin == undefined && !mesh.primitives[0].targets;\r\n\r\n        let babylonAbstractMesh: AbstractMesh;\r\n        let promise: Promise<unknown>;\r\n\r\n        if (shouldInstance && primitive._instanceData) {\r\n            this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n            babylonAbstractMesh = primitive._instanceData.babylonSourceMesh.createInstance(name);\r\n            babylonAbstractMesh._parentContainer = this._assetContainer;\r\n            this._babylonScene._blockEntityCollection = false;\r\n            promise = primitive._instanceData.promise;\r\n        } else {\r\n            const promises = new Array<Promise<unknown>>();\r\n\r\n            this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n            const babylonMesh = new Mesh(name, this._babylonScene);\r\n            babylonMesh._parentContainer = this._assetContainer;\r\n            this._babylonScene._blockEntityCollection = false;\r\n            babylonMesh.sideOrientation = this._babylonScene.useRightHandedSystem ? Material.CounterClockWiseSideOrientation : Material.ClockWiseSideOrientation;\r\n\r\n            this._createMorphTargets(context, node, mesh, primitive, babylonMesh);\r\n            promises.push(\r\n                this._loadVertexDataAsync(context, primitive, babylonMesh).then(async (babylonGeometry) => {\r\n                    return await this._loadMorphTargetsAsync(context, primitive, babylonMesh, babylonGeometry).then(() => {\r\n                        if (this._disposed) {\r\n                            return;\r\n                        }\r\n\r\n                        this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n                        babylonGeometry.applyToMesh(babylonMesh);\r\n                        babylonGeometry._parentContainer = this._assetContainer;\r\n                        this._babylonScene._blockEntityCollection = false;\r\n                    });\r\n                })\r\n            );\r\n\r\n            if (!this.parent.skipMaterials) {\r\n                const babylonDrawMode = GLTFLoader._GetDrawMode(context, primitive.mode);\r\n                if (primitive.material == undefined) {\r\n                    let babylonMaterial = this._defaultBabylonMaterialData[babylonDrawMode];\r\n                    if (!babylonMaterial) {\r\n                        babylonMaterial = this._createDefaultMaterial(\"__GLTFLoader._default\", babylonDrawMode);\r\n                        this._parent.onMaterialLoadedObservable.notifyObservers(babylonMaterial);\r\n                        this._defaultBabylonMaterialData[babylonDrawMode] = babylonMaterial;\r\n                    }\r\n                    babylonMesh.material = babylonMaterial;\r\n                } else {\r\n                    const material = ArrayItem.Get(`${context}/material`, this._gltf.materials, primitive.material);\r\n                    promises.push(\r\n                        this._loadMaterialAsync(`/materials/${material.index}`, material, babylonMesh, babylonDrawMode, (babylonMaterial) => {\r\n                            babylonMesh.material = babylonMaterial;\r\n                        })\r\n                    );\r\n                }\r\n            }\r\n\r\n            promise = Promise.all(promises);\r\n\r\n            if (shouldInstance) {\r\n                primitive._instanceData = {\r\n                    babylonSourceMesh: babylonMesh,\r\n                    promise: promise,\r\n                };\r\n            }\r\n\r\n            babylonAbstractMesh = babylonMesh;\r\n        }\r\n\r\n        GLTFLoader.AddPointerMetadata(babylonAbstractMesh, context);\r\n        this._parent.onMeshLoadedObservable.notifyObservers(babylonAbstractMesh);\r\n        assign(babylonAbstractMesh);\r\n\r\n        this.logClose();\r\n\r\n        return promise.then(() => {\r\n            return babylonAbstractMesh;\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadVertexDataAsync(context: string, primitive: IMeshPrimitive, babylonMesh: Mesh): Promise<Geometry> {\r\n        const extensionPromise = this._extensionsLoadVertexDataAsync(context, primitive, babylonMesh);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        const attributes = primitive.attributes;\r\n        if (!attributes) {\r\n            throw new Error(`${context}: Attributes are missing`);\r\n        }\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        const babylonGeometry = new Geometry(babylonMesh.name, this._babylonScene);\r\n\r\n        if (primitive.indices == undefined) {\r\n            babylonMesh.isUnIndexed = true;\r\n        } else {\r\n            const accessor = ArrayItem.Get(`${context}/indices`, this._gltf.accessors, primitive.indices);\r\n            promises.push(\r\n                this._loadIndicesAccessorAsync(`/accessors/${accessor.index}`, accessor).then((data) => {\r\n                    babylonGeometry.setIndices(data);\r\n                })\r\n            );\r\n        }\r\n\r\n        const loadAttribute = (name: string, kind: string, callback?: (accessor: IAccessor) => void) => {\r\n            if (attributes[name] == undefined) {\r\n                return;\r\n            }\r\n\r\n            babylonMesh._delayInfo = babylonMesh._delayInfo || [];\r\n            if (babylonMesh._delayInfo.indexOf(kind) === -1) {\r\n                babylonMesh._delayInfo.push(kind);\r\n            }\r\n\r\n            const accessor = ArrayItem.Get(`${context}/attributes/${name}`, this._gltf.accessors, attributes[name]);\r\n            promises.push(\r\n                this._loadVertexAccessorAsync(`/accessors/${accessor.index}`, accessor, kind).then((babylonVertexBuffer) => {\r\n                    if (babylonVertexBuffer.getKind() === VertexBuffer.PositionKind && !this.parent.alwaysComputeBoundingBox && !babylonMesh.skeleton) {\r\n                        const babylonBoundingInfo = LoadBoundingInfoFromPositionAccessor(accessor);\r\n                        if (babylonBoundingInfo) {\r\n                            babylonGeometry._boundingInfo = babylonBoundingInfo;\r\n                            babylonGeometry.useBoundingInfoFromGeometry = true;\r\n                        }\r\n                    }\r\n                    babylonGeometry.setVerticesBuffer(babylonVertexBuffer, accessor.count);\r\n                })\r\n            );\r\n\r\n            if (kind == VertexBuffer.MatricesIndicesExtraKind) {\r\n                babylonMesh.numBoneInfluencers = 8;\r\n            }\r\n\r\n            if (callback) {\r\n                callback(accessor);\r\n            }\r\n        };\r\n\r\n        loadAttribute(\"POSITION\", VertexBuffer.PositionKind);\r\n        loadAttribute(\"NORMAL\", VertexBuffer.NormalKind);\r\n        loadAttribute(\"TANGENT\", VertexBuffer.TangentKind);\r\n        loadAttribute(\"TEXCOORD_0\", VertexBuffer.UVKind);\r\n        loadAttribute(\"TEXCOORD_1\", VertexBuffer.UV2Kind);\r\n        loadAttribute(\"TEXCOORD_2\", VertexBuffer.UV3Kind);\r\n        loadAttribute(\"TEXCOORD_3\", VertexBuffer.UV4Kind);\r\n        loadAttribute(\"TEXCOORD_4\", VertexBuffer.UV5Kind);\r\n        loadAttribute(\"TEXCOORD_5\", VertexBuffer.UV6Kind);\r\n        loadAttribute(\"JOINTS_0\", VertexBuffer.MatricesIndicesKind);\r\n        loadAttribute(\"WEIGHTS_0\", VertexBuffer.MatricesWeightsKind);\r\n        loadAttribute(\"JOINTS_1\", VertexBuffer.MatricesIndicesExtraKind);\r\n        loadAttribute(\"WEIGHTS_1\", VertexBuffer.MatricesWeightsExtraKind);\r\n        loadAttribute(\"COLOR_0\", VertexBuffer.ColorKind, (accessor) => {\r\n            if (accessor.type === AccessorType.VEC4) {\r\n                babylonMesh.hasVertexAlpha = true;\r\n            }\r\n        });\r\n\r\n        return Promise.all(promises).then(() => {\r\n            return babylonGeometry;\r\n        });\r\n    }\r\n\r\n    private _createMorphTargets(context: string, node: INode, mesh: IMesh, primitive: IMeshPrimitive, babylonMesh: Mesh): void {\r\n        if (!primitive.targets || !this._parent.loadMorphTargets) {\r\n            return;\r\n        }\r\n\r\n        if (node._numMorphTargets == undefined) {\r\n            node._numMorphTargets = primitive.targets.length;\r\n        } else if (primitive.targets.length !== node._numMorphTargets) {\r\n            throw new Error(`${context}: Primitives do not have the same number of targets`);\r\n        }\r\n\r\n        const targetNames = mesh.extras ? mesh.extras.targetNames : null;\r\n\r\n        this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n        babylonMesh.morphTargetManager = new MorphTargetManager(this._babylonScene);\r\n        babylonMesh.morphTargetManager._parentContainer = this._assetContainer;\r\n        this._babylonScene._blockEntityCollection = false;\r\n\r\n        babylonMesh.morphTargetManager.areUpdatesFrozen = true;\r\n\r\n        for (let index = 0; index < primitive.targets.length; index++) {\r\n            const weight = node.weights ? node.weights[index] : mesh.weights ? mesh.weights[index] : 0;\r\n            const name = targetNames ? targetNames[index] : `morphTarget${index}`;\r\n            babylonMesh.morphTargetManager.addTarget(new MorphTarget(name, weight, babylonMesh.getScene()));\r\n            // TODO: tell the target whether it has positions, normals, tangents\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadMorphTargetsAsync(context: string, primitive: IMeshPrimitive, babylonMesh: Mesh, babylonGeometry: Geometry): Promise<void> {\r\n        if (!primitive.targets || !this._parent.loadMorphTargets) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        const morphTargetManager = babylonMesh.morphTargetManager!;\r\n        for (let index = 0; index < morphTargetManager.numTargets; index++) {\r\n            const babylonMorphTarget = morphTargetManager.getTarget(index);\r\n            promises.push(this._loadMorphTargetVertexDataAsync(`${context}/targets/${index}`, babylonGeometry, primitive.targets[index], babylonMorphTarget));\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {\r\n            morphTargetManager.areUpdatesFrozen = false;\r\n        });\r\n    }\r\n\r\n    private async _loadMorphTargetVertexDataAsync(\r\n        context: string,\r\n        babylonGeometry: Geometry,\r\n        attributes: { [name: string]: number },\r\n        babylonMorphTarget: MorphTarget\r\n    ): Promise<void> {\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        const loadAttribute = (attribute: string, kind: string, setData: (babylonVertexBuffer: VertexBuffer, data: Float32Array) => void) => {\r\n            if (attributes[attribute] == undefined) {\r\n                return;\r\n            }\r\n\r\n            const babylonVertexBuffer = babylonGeometry.getVertexBuffer(kind);\r\n            if (!babylonVertexBuffer) {\r\n                return;\r\n            }\r\n\r\n            const accessor = ArrayItem.Get(`${context}/${attribute}`, this._gltf.accessors, attributes[attribute]);\r\n            promises.push(\r\n                this._loadFloatAccessorAsync(`/accessors/${accessor.index}`, accessor).then((data) => {\r\n                    setData(babylonVertexBuffer, data);\r\n                })\r\n            );\r\n        };\r\n\r\n        loadAttribute(\"POSITION\", VertexBuffer.PositionKind, (babylonVertexBuffer, data) => {\r\n            const positions = new Float32Array(data.length);\r\n            babylonVertexBuffer.forEach(data.length, (value, index) => {\r\n                positions[index] = data[index] + value;\r\n            });\r\n\r\n            babylonMorphTarget.setPositions(positions);\r\n        });\r\n\r\n        loadAttribute(\"NORMAL\", VertexBuffer.NormalKind, (babylonVertexBuffer, data) => {\r\n            const normals = new Float32Array(data.length);\r\n            babylonVertexBuffer.forEach(normals.length, (value, index) => {\r\n                normals[index] = data[index] + value;\r\n            });\r\n\r\n            babylonMorphTarget.setNormals(normals);\r\n        });\r\n\r\n        loadAttribute(\"TANGENT\", VertexBuffer.TangentKind, (babylonVertexBuffer, data) => {\r\n            const tangents = new Float32Array((data.length / 3) * 4);\r\n            let dataIndex = 0;\r\n            babylonVertexBuffer.forEach((data.length / 3) * 4, (value, index) => {\r\n                // Tangent data for morph targets is stored as xyz delta.\r\n                // The vertexData.tangent is stored as xyzw.\r\n                // So we need to skip every fourth vertexData.tangent.\r\n                if ((index + 1) % 4 !== 0) {\r\n                    tangents[dataIndex] = data[dataIndex] + value;\r\n                    dataIndex++;\r\n                }\r\n            });\r\n            babylonMorphTarget.setTangents(tangents);\r\n        });\r\n\r\n        loadAttribute(\"TEXCOORD_0\", VertexBuffer.UVKind, (babylonVertexBuffer, data) => {\r\n            const uvs = new Float32Array(data.length);\r\n            babylonVertexBuffer.forEach(data.length, (value, index) => {\r\n                uvs[index] = data[index] + value;\r\n            });\r\n\r\n            babylonMorphTarget.setUVs(uvs);\r\n        });\r\n\r\n        loadAttribute(\"TEXCOORD_1\", VertexBuffer.UV2Kind, (babylonVertexBuffer, data) => {\r\n            const uvs = new Float32Array(data.length);\r\n            babylonVertexBuffer.forEach(data.length, (value, index) => {\r\n                uvs[index] = data[index] + value;\r\n            });\r\n\r\n            babylonMorphTarget.setUV2s(uvs);\r\n        });\r\n\r\n        loadAttribute(\"COLOR_0\", VertexBuffer.ColorKind, (babylonVertexBuffer, data) => {\r\n            let colors = null;\r\n            const componentSize = babylonVertexBuffer.getSize();\r\n            if (componentSize === 3) {\r\n                colors = new Float32Array((data.length / 3) * 4);\r\n                babylonVertexBuffer.forEach(data.length, (value, index) => {\r\n                    const pixid = Math.floor(index / 3);\r\n                    const channel = index % 3;\r\n                    colors[4 * pixid + channel] = data[3 * pixid + channel] + value;\r\n                });\r\n                for (let i = 0; i < data.length / 3; ++i) {\r\n                    colors[4 * i + 3] = 1;\r\n                }\r\n            } else if (componentSize === 4) {\r\n                colors = new Float32Array(data.length);\r\n                babylonVertexBuffer.forEach(data.length, (value, index) => {\r\n                    colors[index] = data[index] + value;\r\n                });\r\n            } else {\r\n                throw new Error(`${context}: Invalid number of components (${componentSize}) for COLOR_0 attribute`);\r\n            }\r\n            babylonMorphTarget.setColors(colors);\r\n        });\r\n\r\n        return await Promise.all(promises).then(() => {});\r\n    }\r\n\r\n    private static _LoadTransform(node: INode, babylonNode: TransformNode): void {\r\n        // Ignore the TRS of skinned nodes.\r\n        // See https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins (second implementation note)\r\n        if (node.skin != undefined) {\r\n            return;\r\n        }\r\n\r\n        let position = Vector3.Zero();\r\n        let rotation = Quaternion.Identity();\r\n        let scaling = Vector3.One();\r\n\r\n        if (node.matrix) {\r\n            const matrix = Matrix.FromArray(node.matrix);\r\n            matrix.decompose(scaling, rotation, position);\r\n        } else {\r\n            if (node.translation) {\r\n                position = Vector3.FromArray(node.translation);\r\n            }\r\n            if (node.rotation) {\r\n                rotation = Quaternion.FromArray(node.rotation);\r\n            }\r\n            if (node.scale) {\r\n                scaling = Vector3.FromArray(node.scale);\r\n            }\r\n        }\r\n\r\n        babylonNode.position = position;\r\n        babylonNode.rotationQuaternion = rotation;\r\n        babylonNode.scaling = scaling;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadSkinAsync(context: string, node: INode, skin: ISkin, assign: (babylonSkeleton: Skeleton) => void): Promise<void> {\r\n        if (!this._parent.loadSkins) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const extensionPromise = this._extensionsLoadSkinAsync(context, node, skin);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        if (skin._data) {\r\n            assign(skin._data.babylonSkeleton);\r\n            return skin._data.promise;\r\n        }\r\n\r\n        const skeletonId = `skeleton${skin.index}`;\r\n        this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n        const babylonSkeleton = new Skeleton(skin.name || skeletonId, skeletonId, this._babylonScene);\r\n        babylonSkeleton._parentContainer = this._assetContainer;\r\n        this._babylonScene._blockEntityCollection = false;\r\n\r\n        this._loadBones(context, skin, babylonSkeleton);\r\n        const promise = this._loadSkinInverseBindMatricesDataAsync(context, skin).then((inverseBindMatricesData) => {\r\n            this._updateBoneMatrices(babylonSkeleton, inverseBindMatricesData);\r\n        });\r\n\r\n        skin._data = {\r\n            babylonSkeleton: babylonSkeleton,\r\n            promise: promise,\r\n        };\r\n\r\n        assign(babylonSkeleton);\r\n\r\n        return promise;\r\n    }\r\n\r\n    private _loadBones(context: string, skin: ISkin, babylonSkeleton: Skeleton): void {\r\n        if (skin.skeleton == undefined || this._parent.alwaysComputeSkeletonRootNode) {\r\n            const rootNode = this._findSkeletonRootNode(`${context}/joints`, skin.joints);\r\n            if (rootNode) {\r\n                if (skin.skeleton === undefined) {\r\n                    skin.skeleton = rootNode.index;\r\n                } else {\r\n                    const isParent = (a: INode, b: INode): boolean => {\r\n                        for (; b.parent; b = b.parent) {\r\n                            if (b.parent === a) {\r\n                                return true;\r\n                            }\r\n                        }\r\n\r\n                        return false;\r\n                    };\r\n\r\n                    const skeletonNode = ArrayItem.Get(`${context}/skeleton`, this._gltf.nodes, skin.skeleton);\r\n                    if (skeletonNode !== rootNode && !isParent(skeletonNode, rootNode)) {\r\n                        Logger.Warn(`${context}/skeleton: Overriding with nearest common ancestor as skeleton node is not a common root`);\r\n                        skin.skeleton = rootNode.index;\r\n                    }\r\n                }\r\n            } else {\r\n                Logger.Warn(`${context}: Failed to find common root`);\r\n            }\r\n        }\r\n\r\n        const babylonBones: { [index: number]: Bone } = {};\r\n        for (const index of skin.joints) {\r\n            const node = ArrayItem.Get(`${context}/joints/${index}`, this._gltf.nodes, index);\r\n            this._loadBone(node, skin, babylonSkeleton, babylonBones);\r\n        }\r\n    }\r\n\r\n    private _findSkeletonRootNode(context: string, joints: Array<number>): Nullable<INode> {\r\n        if (joints.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const paths: { [joint: number]: Array<INode> } = {};\r\n        for (const index of joints) {\r\n            const path: INode[] = [];\r\n            let node = ArrayItem.Get(`${context}/${index}`, this._gltf.nodes, index);\r\n            while (node.index !== -1) {\r\n                path.unshift(node);\r\n                node = node.parent!;\r\n            }\r\n            paths[index] = path;\r\n        }\r\n\r\n        let rootNode: Nullable<INode> = null;\r\n        for (let i = 0; ; ++i) {\r\n            let path = paths[joints[0]];\r\n            if (i >= path.length) {\r\n                return rootNode;\r\n            }\r\n\r\n            const node = path[i];\r\n            for (let j = 1; j < joints.length; ++j) {\r\n                path = paths[joints[j]];\r\n                if (i >= path.length || node !== path[i]) {\r\n                    return rootNode;\r\n                }\r\n            }\r\n\r\n            rootNode = node;\r\n        }\r\n    }\r\n\r\n    private _loadBone(node: INode, skin: ISkin, babylonSkeleton: Skeleton, babylonBones: { [index: number]: Bone }): Bone {\r\n        node._isJoint = true;\r\n\r\n        let babylonBone = babylonBones[node.index];\r\n        if (babylonBone) {\r\n            return babylonBone;\r\n        }\r\n\r\n        let parentBabylonBone: Nullable<Bone> = null;\r\n        if (node.index !== skin.skeleton) {\r\n            if (node.parent && node.parent.index !== -1) {\r\n                parentBabylonBone = this._loadBone(node.parent, skin, babylonSkeleton, babylonBones);\r\n            } else if (skin.skeleton !== undefined) {\r\n                Logger.Warn(`/skins/${skin.index}/skeleton: Skeleton node is not a common root`);\r\n            }\r\n        }\r\n\r\n        const boneIndex = skin.joints.indexOf(node.index);\r\n        babylonBone = new Bone(node.name || `joint${node.index}`, babylonSkeleton, parentBabylonBone, this._getNodeMatrix(node), null, null, boneIndex);\r\n        babylonBones[node.index] = babylonBone;\r\n\r\n        // Wait until the scene is loaded to ensure the transform nodes are loaded.\r\n        this._postSceneLoadActions.push(() => {\r\n            // Link the Babylon bone with the corresponding Babylon transform node.\r\n            // A glTF joint is a pointer to a glTF node in the glTF node hierarchy similar to Unity3D.\r\n            babylonBone.linkTransformNode(node._babylonTransformNode!);\r\n        });\r\n\r\n        return babylonBone;\r\n    }\r\n\r\n    private _loadSkinInverseBindMatricesDataAsync(context: string, skin: ISkin): Promise<Nullable<Float32Array>> {\r\n        if (skin.inverseBindMatrices == undefined) {\r\n            return Promise.resolve(null);\r\n        }\r\n\r\n        const accessor = ArrayItem.Get(`${context}/inverseBindMatrices`, this._gltf.accessors, skin.inverseBindMatrices);\r\n        return this._loadFloatAccessorAsync(`/accessors/${accessor.index}`, accessor);\r\n    }\r\n\r\n    private _updateBoneMatrices(babylonSkeleton: Skeleton, inverseBindMatricesData: Nullable<Float32Array>): void {\r\n        for (const babylonBone of babylonSkeleton.bones) {\r\n            const baseMatrix = Matrix.Identity();\r\n            const boneIndex = babylonBone._index!;\r\n            if (inverseBindMatricesData && boneIndex !== -1) {\r\n                Matrix.FromArrayToRef(inverseBindMatricesData, boneIndex * 16, baseMatrix);\r\n                baseMatrix.invertToRef(baseMatrix);\r\n            }\r\n\r\n            const babylonParentBone = babylonBone.getParent();\r\n            if (babylonParentBone) {\r\n                baseMatrix.multiplyToRef(babylonParentBone.getAbsoluteInverseBindMatrix(), baseMatrix);\r\n            }\r\n\r\n            babylonBone.updateMatrix(baseMatrix, false, false);\r\n            babylonBone._updateAbsoluteBindMatrices(undefined, false);\r\n        }\r\n    }\r\n\r\n    private _getNodeMatrix(node: INode): Matrix {\r\n        return node.matrix\r\n            ? Matrix.FromArray(node.matrix)\r\n            : Matrix.Compose(\r\n                  node.scale ? Vector3.FromArray(node.scale) : Vector3.One(),\r\n                  node.rotation ? Quaternion.FromArray(node.rotation) : Quaternion.Identity(),\r\n                  node.translation ? Vector3.FromArray(node.translation) : Vector3.Zero()\r\n              );\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF camera.\r\n     * @param context The context when loading the asset\r\n     * @param camera The glTF camera property\r\n     * @param assign A function called synchronously after parsing the glTF properties\r\n     * @returns A promise that resolves with the loaded Babylon camera when the load is complete\r\n     */\r\n    public loadCameraAsync(context: string, camera: ICamera, assign: (babylonCamera: Camera) => void = () => {}): Promise<Camera> {\r\n        const extensionPromise = this._extensionsLoadCameraAsync(context, camera, assign);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        this.logOpen(`${context} ${camera.name || \"\"}`);\r\n\r\n        this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n        const babylonCamera = new FreeCamera(camera.name || `camera${camera.index}`, Vector3.Zero(), this._babylonScene, false);\r\n        babylonCamera._parentContainer = this._assetContainer;\r\n        this._babylonScene._blockEntityCollection = false;\r\n        camera._babylonCamera = babylonCamera;\r\n\r\n        // glTF cameras look towards the local -Z axis.\r\n        babylonCamera.setTarget(new Vector3(0, 0, -1));\r\n\r\n        switch (camera.type) {\r\n            case CameraType.PERSPECTIVE: {\r\n                const perspective = camera.perspective;\r\n                if (!perspective) {\r\n                    throw new Error(`${context}: Camera perspective properties are missing`);\r\n                }\r\n\r\n                babylonCamera.fov = perspective.yfov;\r\n                babylonCamera.minZ = perspective.znear;\r\n                babylonCamera.maxZ = perspective.zfar || 0;\r\n                break;\r\n            }\r\n            case CameraType.ORTHOGRAPHIC: {\r\n                if (!camera.orthographic) {\r\n                    throw new Error(`${context}: Camera orthographic properties are missing`);\r\n                }\r\n\r\n                babylonCamera.mode = Camera.ORTHOGRAPHIC_CAMERA;\r\n                babylonCamera.orthoLeft = -camera.orthographic.xmag;\r\n                babylonCamera.orthoRight = camera.orthographic.xmag;\r\n                babylonCamera.orthoBottom = -camera.orthographic.ymag;\r\n                babylonCamera.orthoTop = camera.orthographic.ymag;\r\n                babylonCamera.minZ = camera.orthographic.znear;\r\n                babylonCamera.maxZ = camera.orthographic.zfar;\r\n                break;\r\n            }\r\n            default: {\r\n                throw new Error(`${context}: Invalid camera type (${camera.type})`);\r\n            }\r\n        }\r\n\r\n        GLTFLoader.AddPointerMetadata(babylonCamera, context);\r\n        this._parent.onCameraLoadedObservable.notifyObservers(babylonCamera);\r\n        assign(babylonCamera);\r\n\r\n        this.logClose();\r\n\r\n        return Promise.all(promises).then(() => {\r\n            return babylonCamera;\r\n        });\r\n    }\r\n\r\n    private _loadAnimationsAsync(): Promise<void> {\r\n        this._parent._startPerformanceCounter(\"Load animations\");\r\n\r\n        const animations = this._gltf.animations;\r\n        if (!animations) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const promises = new Array<Promise<void>>();\r\n\r\n        for (let index = 0; index < animations.length; index++) {\r\n            const animation = animations[index];\r\n            promises.push(\r\n                this.loadAnimationAsync(`/animations/${animation.index}`, animation).then((animationGroup) => {\r\n                    // Delete the animation group if it ended up not having any animations in it.\r\n                    if (animationGroup.targetedAnimations.length === 0) {\r\n                        animationGroup.dispose();\r\n                    }\r\n                })\r\n            );\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {\r\n            this._parent._endPerformanceCounter(\"Load animations\");\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF animation.\r\n     * @param context The context when loading the asset\r\n     * @param animation The glTF animation property\r\n     * @returns A promise that resolves with the loaded Babylon animation group when the load is complete\r\n     */\r\n    public loadAnimationAsync(context: string, animation: IAnimation): Promise<AnimationGroup> {\r\n        this._parent._startPerformanceCounter(\"Load animation\");\r\n\r\n        const promise = this._extensionsLoadAnimationAsync(context, animation);\r\n        if (promise) {\r\n            return promise;\r\n        }\r\n\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        return LazyAnimationGroupModulePromise.value.then(({ AnimationGroup }) => {\r\n            this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n            const babylonAnimationGroup = new AnimationGroup(animation.name || `animation${animation.index}`, this._babylonScene);\r\n            babylonAnimationGroup._parentContainer = this._assetContainer;\r\n            this._babylonScene._blockEntityCollection = false;\r\n            animation._babylonAnimationGroup = babylonAnimationGroup;\r\n\r\n            const promises = new Array<Promise<unknown>>();\r\n\r\n            ArrayItem.Assign(animation.channels);\r\n            ArrayItem.Assign(animation.samplers);\r\n\r\n            for (const channel of animation.channels) {\r\n                promises.push(\r\n                    this._loadAnimationChannelAsync(`${context}/channels/${channel.index}`, context, animation, channel, (babylonTarget, babylonAnimation) => {\r\n                        babylonTarget.animations = babylonTarget.animations || [];\r\n                        babylonTarget.animations.push(babylonAnimation);\r\n                        babylonAnimationGroup.addTargetedAnimation(babylonAnimation, babylonTarget);\r\n                    })\r\n                );\r\n            }\r\n\r\n            this._parent._endPerformanceCounter(\"Load animation\");\r\n\r\n            return Promise.all(promises).then(() => {\r\n                babylonAnimationGroup.normalize(0);\r\n                return babylonAnimationGroup;\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Loads a glTF animation channel.\r\n     * @param context The context when loading the asset\r\n     * @param animationContext The context of the animation when loading the asset\r\n     * @param animation The glTF animation property\r\n     * @param channel The glTF animation channel property\r\n     * @param onLoad Called for each animation loaded\r\n     * @returns A void promise that resolves when the load is complete\r\n     */\r\n    public _loadAnimationChannelAsync(\r\n        context: string,\r\n        animationContext: string,\r\n        animation: IAnimation,\r\n        channel: IAnimationChannel,\r\n        onLoad: (babylonAnimatable: IAnimatable, babylonAnimation: Animation) => void\r\n    ): Promise<void> {\r\n        const promise = this._extensionsLoadAnimationChannelAsync(context, animationContext, animation, channel, onLoad);\r\n        if (promise) {\r\n            return promise;\r\n        }\r\n\r\n        if (channel.target.node == undefined) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const targetNode = ArrayItem.Get(`${context}/target/node`, this._gltf.nodes, channel.target.node);\r\n        const channelTargetPath = channel.target.path;\r\n        const pathIsWeights = channelTargetPath === AnimationChannelTargetPath.WEIGHTS;\r\n\r\n        // Ignore animations that have no animation targets.\r\n        if ((pathIsWeights && !targetNode._numMorphTargets) || (!pathIsWeights && !targetNode._babylonTransformNode)) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        // Don't load node animations if disabled.\r\n        if (!this._parent.loadNodeAnimations && !pathIsWeights && !targetNode._isJoint) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        // async-load the animation sampler to provide the interpolation of the channelTargetPath\r\n        return LazyLoaderAnimationModulePromise.value.then(() => {\r\n            let properties: IInterpolationPropertyInfo[];\r\n            switch (channelTargetPath) {\r\n                case AnimationChannelTargetPath.TRANSLATION: {\r\n                    properties = GetMappingForKey(\"/nodes/{}/translation\")?.interpolation!;\r\n                    break;\r\n                }\r\n                case AnimationChannelTargetPath.ROTATION: {\r\n                    properties = GetMappingForKey(\"/nodes/{}/rotation\")?.interpolation!;\r\n                    break;\r\n                }\r\n                case AnimationChannelTargetPath.SCALE: {\r\n                    properties = GetMappingForKey(\"/nodes/{}/scale\")?.interpolation!;\r\n                    break;\r\n                }\r\n                case AnimationChannelTargetPath.WEIGHTS: {\r\n                    properties = GetMappingForKey(\"/nodes/{}/weights\")?.interpolation!;\r\n                    break;\r\n                }\r\n                default: {\r\n                    throw new Error(`${context}/target/path: Invalid value (${channel.target.path})`);\r\n                }\r\n            }\r\n            // stay safe\r\n            if (!properties) {\r\n                throw new Error(`${context}/target/path: Could not find interpolation properties for target path (${channel.target.path})`);\r\n            }\r\n\r\n            const targetInfo: IObjectInfo<IInterpolationPropertyInfo[]> = {\r\n                object: targetNode,\r\n                info: properties,\r\n            };\r\n\r\n            return this._loadAnimationChannelFromTargetInfoAsync(context, animationContext, animation, channel, targetInfo, onLoad);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Loads a glTF animation channel.\r\n     * @param context The context when loading the asset\r\n     * @param animationContext The context of the animation when loading the asset\r\n     * @param animation The glTF animation property\r\n     * @param channel The glTF animation channel property\r\n     * @param targetInfo The glTF target and properties\r\n     * @param onLoad Called for each animation loaded\r\n     * @returns A void promise that resolves when the load is complete\r\n     */\r\n    public _loadAnimationChannelFromTargetInfoAsync(\r\n        context: string,\r\n        animationContext: string,\r\n        animation: IAnimation,\r\n        channel: IAnimationChannel,\r\n        targetInfo: IObjectInfo<IInterpolationPropertyInfo[]>,\r\n        onLoad: (babylonAnimatable: IAnimatable, babylonAnimation: Animation) => void\r\n    ): Promise<void> {\r\n        const fps = this.parent.targetFps;\r\n        const invfps = 1 / fps;\r\n\r\n        const sampler = ArrayItem.Get(`${context}/sampler`, animation.samplers, channel.sampler);\r\n        return this._loadAnimationSamplerAsync(`${animationContext}/samplers/${channel.sampler}`, sampler).then((data) => {\r\n            let numAnimations = 0;\r\n\r\n            const target = targetInfo.object;\r\n            const propertyInfos = targetInfo.info;\r\n            // Extract the corresponding values from the read value.\r\n            // GLTF values may be dispatched to several Babylon properties.\r\n            // For example, baseColorFactor [`r`, `g`, `b`, `a`] is dispatched to\r\n            // - albedoColor as Color3(`r`, `g`, `b`)\r\n            // - alpha as `a`\r\n            for (const propertyInfo of propertyInfos) {\r\n                const stride = propertyInfo.getStride(target);\r\n                const input = data.input;\r\n                const output = data.output;\r\n                const keys = new Array<IAnimationKey>(input.length);\r\n                let outputOffset = 0;\r\n\r\n                switch (data.interpolation) {\r\n                    case AnimationSamplerInterpolation.STEP: {\r\n                        for (let index = 0; index < input.length; index++) {\r\n                            const value = propertyInfo.getValue(target, output, outputOffset, 1);\r\n                            outputOffset += stride;\r\n\r\n                            keys[index] = {\r\n                                frame: input[index] * fps,\r\n                                value: value,\r\n                                interpolation: AnimationKeyInterpolation.STEP,\r\n                            };\r\n                        }\r\n                        break;\r\n                    }\r\n                    case AnimationSamplerInterpolation.CUBICSPLINE: {\r\n                        for (let index = 0; index < input.length; index++) {\r\n                            const inTangent = propertyInfo.getValue(target, output, outputOffset, invfps);\r\n                            outputOffset += stride;\r\n                            const value = propertyInfo.getValue(target, output, outputOffset, 1);\r\n                            outputOffset += stride;\r\n                            const outTangent = propertyInfo.getValue(target, output, outputOffset, invfps);\r\n                            outputOffset += stride;\r\n\r\n                            keys[index] = {\r\n                                frame: input[index] * fps,\r\n                                inTangent: inTangent,\r\n                                value: value,\r\n                                outTangent: outTangent,\r\n                            };\r\n                        }\r\n                        break;\r\n                    }\r\n                    case AnimationSamplerInterpolation.LINEAR: {\r\n                        for (let index = 0; index < input.length; index++) {\r\n                            const value = propertyInfo.getValue(target, output, outputOffset, 1);\r\n                            outputOffset += stride;\r\n\r\n                            keys[index] = {\r\n                                frame: input[index] * fps,\r\n                                value: value,\r\n                            };\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (outputOffset > 0) {\r\n                    const name = `${animation.name || `animation${animation.index}`}_channel${channel.index}_${numAnimations}`;\r\n                    const babylonAnimations = propertyInfo.buildAnimations(target, name, fps, keys);\r\n                    for (const babylonAnimation of babylonAnimations) {\r\n                        numAnimations++;\r\n                        onLoad(babylonAnimation.babylonAnimatable, babylonAnimation.babylonAnimation);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private _loadAnimationSamplerAsync(context: string, sampler: IAnimationSampler): Promise<_IAnimationSamplerData> {\r\n        if (sampler._data) {\r\n            return sampler._data;\r\n        }\r\n\r\n        const interpolation = sampler.interpolation || AnimationSamplerInterpolation.LINEAR;\r\n        switch (interpolation) {\r\n            case AnimationSamplerInterpolation.STEP:\r\n            case AnimationSamplerInterpolation.LINEAR:\r\n            case AnimationSamplerInterpolation.CUBICSPLINE: {\r\n                break;\r\n            }\r\n            default: {\r\n                throw new Error(`${context}/interpolation: Invalid value (${sampler.interpolation})`);\r\n            }\r\n        }\r\n\r\n        const inputAccessor = ArrayItem.Get(`${context}/input`, this._gltf.accessors, sampler.input);\r\n        const outputAccessor = ArrayItem.Get(`${context}/output`, this._gltf.accessors, sampler.output);\r\n        sampler._data = Promise.all([\r\n            this._loadFloatAccessorAsync(`/accessors/${inputAccessor.index}`, inputAccessor),\r\n            this._loadFloatAccessorAsync(`/accessors/${outputAccessor.index}`, outputAccessor),\r\n        ]).then(([inputData, outputData]) => {\r\n            return {\r\n                input: inputData,\r\n                interpolation: interpolation,\r\n                output: outputData,\r\n            };\r\n        });\r\n\r\n        return sampler._data;\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF buffer.\r\n     * @param context The context when loading the asset\r\n     * @param buffer The glTF buffer property\r\n     * @param byteOffset The byte offset to use\r\n     * @param byteLength The byte length to use\r\n     * @returns A promise that resolves with the loaded data when the load is complete\r\n     */\r\n    public loadBufferAsync(context: string, buffer: IBuffer, byteOffset: number, byteLength: number): Promise<ArrayBufferView> {\r\n        const extensionPromise = this._extensionsLoadBufferAsync(context, buffer, byteOffset, byteLength);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        if (!buffer._data) {\r\n            if (buffer.uri) {\r\n                buffer._data = this.loadUriAsync(`${context}/uri`, buffer, buffer.uri);\r\n            } else {\r\n                if (!this._bin) {\r\n                    throw new Error(`${context}: Uri is missing or the binary glTF is missing its binary chunk`);\r\n                }\r\n\r\n                buffer._data = this._bin.readAsync(0, buffer.byteLength);\r\n            }\r\n        }\r\n\r\n        return buffer._data.then((data) => {\r\n            try {\r\n                return new Uint8Array(data.buffer, data.byteOffset + byteOffset, byteLength);\r\n            } catch (e) {\r\n                throw new Error(`${context}: ${e.message}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF buffer view.\r\n     * @param context The context when loading the asset\r\n     * @param bufferView The glTF buffer view property\r\n     * @returns A promise that resolves with the loaded data when the load is complete\r\n     */\r\n    public loadBufferViewAsync(context: string, bufferView: IBufferView): Promise<ArrayBufferView> {\r\n        const extensionPromise = this._extensionsLoadBufferViewAsync(context, bufferView);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        if (bufferView._data) {\r\n            return bufferView._data;\r\n        }\r\n\r\n        const buffer = ArrayItem.Get(`${context}/buffer`, this._gltf.buffers, bufferView.buffer);\r\n        bufferView._data = this.loadBufferAsync(`/buffers/${buffer.index}`, buffer, bufferView.byteOffset || 0, bufferView.byteLength);\r\n\r\n        return bufferView._data;\r\n    }\r\n\r\n    private _loadAccessorAsync(context: string, accessor: IAccessor, constructor: TypedArrayConstructor): Promise<ArrayBufferView> {\r\n        if (accessor._data) {\r\n            return accessor._data;\r\n        }\r\n\r\n        const numComponents = GLTFLoader._GetNumComponents(context, accessor.type);\r\n        const byteStride = numComponents * VertexBuffer.GetTypeByteLength(accessor.componentType);\r\n        const length = numComponents * accessor.count;\r\n\r\n        if (accessor.bufferView == undefined) {\r\n            accessor._data = Promise.resolve(new constructor(length));\r\n        } else {\r\n            const bufferView = ArrayItem.Get(`${context}/bufferView`, this._gltf.bufferViews, accessor.bufferView);\r\n            accessor._data = this.loadBufferViewAsync(`/bufferViews/${bufferView.index}`, bufferView).then((data) => {\r\n                if (accessor.componentType === AccessorComponentType.FLOAT && !accessor.normalized && (!bufferView.byteStride || bufferView.byteStride === byteStride)) {\r\n                    return GLTFLoader._GetTypedArray(context, accessor.componentType, data, accessor.byteOffset, length);\r\n                } else {\r\n                    const typedArray = new constructor(length);\r\n                    VertexBuffer.ForEach(\r\n                        data,\r\n                        accessor.byteOffset || 0,\r\n                        bufferView.byteStride || byteStride,\r\n                        numComponents,\r\n                        accessor.componentType,\r\n                        typedArray.length,\r\n                        accessor.normalized || false,\r\n                        (value, index) => {\r\n                            typedArray[index] = value;\r\n                        }\r\n                    );\r\n                    return typedArray;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (accessor.sparse) {\r\n            const sparse = accessor.sparse;\r\n            accessor._data = accessor._data.then((data) => {\r\n                const typedArray = data as TypedArray;\r\n                const indicesBufferView = ArrayItem.Get(`${context}/sparse/indices/bufferView`, this._gltf.bufferViews, sparse.indices.bufferView);\r\n                const valuesBufferView = ArrayItem.Get(`${context}/sparse/values/bufferView`, this._gltf.bufferViews, sparse.values.bufferView);\r\n                return Promise.all([\r\n                    this.loadBufferViewAsync(`/bufferViews/${indicesBufferView.index}`, indicesBufferView),\r\n                    this.loadBufferViewAsync(`/bufferViews/${valuesBufferView.index}`, valuesBufferView),\r\n                ]).then(([indicesData, valuesData]) => {\r\n                    const indices = GLTFLoader._GetTypedArray(\r\n                        `${context}/sparse/indices`,\r\n                        sparse.indices.componentType,\r\n                        indicesData,\r\n                        sparse.indices.byteOffset,\r\n                        sparse.count\r\n                    ) as IndicesArray;\r\n\r\n                    const sparseLength = numComponents * sparse.count;\r\n                    let values: TypedArray;\r\n\r\n                    if (accessor.componentType === AccessorComponentType.FLOAT && !accessor.normalized) {\r\n                        values = GLTFLoader._GetTypedArray(`${context}/sparse/values`, accessor.componentType, valuesData, sparse.values.byteOffset, sparseLength);\r\n                    } else {\r\n                        const sparseData = GLTFLoader._GetTypedArray(`${context}/sparse/values`, accessor.componentType, valuesData, sparse.values.byteOffset, sparseLength);\r\n                        values = new constructor(sparseLength);\r\n                        VertexBuffer.ForEach(sparseData, 0, byteStride, numComponents, accessor.componentType, values.length, accessor.normalized || false, (value, index) => {\r\n                            values[index] = value;\r\n                        });\r\n                    }\r\n\r\n                    let valuesIndex = 0;\r\n                    for (let indicesIndex = 0; indicesIndex < indices.length; indicesIndex++) {\r\n                        let dataIndex = indices[indicesIndex] * numComponents;\r\n                        for (let componentIndex = 0; componentIndex < numComponents; componentIndex++) {\r\n                            typedArray[dataIndex++] = values[valuesIndex++];\r\n                        }\r\n                    }\r\n\r\n                    return typedArray;\r\n                });\r\n            });\r\n        }\r\n\r\n        return accessor._data;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadFloatAccessorAsync(context: string, accessor: IAccessor): Promise<Float32Array> {\r\n        return this._loadAccessorAsync(context, accessor, Float32Array) as Promise<Float32Array>;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadIndicesAccessorAsync(context: string, accessor: IAccessor): Promise<IndicesArray> {\r\n        if (accessor.type !== AccessorType.SCALAR) {\r\n            throw new Error(`${context}/type: Invalid value ${accessor.type}`);\r\n        }\r\n\r\n        if (\r\n            accessor.componentType !== AccessorComponentType.UNSIGNED_BYTE &&\r\n            accessor.componentType !== AccessorComponentType.UNSIGNED_SHORT &&\r\n            accessor.componentType !== AccessorComponentType.UNSIGNED_INT\r\n        ) {\r\n            throw new Error(`${context}/componentType: Invalid value ${accessor.componentType}`);\r\n        }\r\n\r\n        if (accessor._data) {\r\n            return accessor._data as Promise<IndicesArray>;\r\n        }\r\n\r\n        if (accessor.sparse) {\r\n            const constructor = GLTFLoader._GetTypedArrayConstructor(`${context}/componentType`, accessor.componentType);\r\n            accessor._data = this._loadAccessorAsync(context, accessor, constructor);\r\n        } else {\r\n            const bufferView = ArrayItem.Get(`${context}/bufferView`, this._gltf.bufferViews, accessor.bufferView);\r\n            accessor._data = this.loadBufferViewAsync(`/bufferViews/${bufferView.index}`, bufferView).then((data) => {\r\n                return GLTFLoader._GetTypedArray(context, accessor.componentType, data, accessor.byteOffset, accessor.count);\r\n            });\r\n        }\r\n\r\n        return accessor._data as Promise<IndicesArray>;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadVertexBufferViewAsync(bufferView: IBufferView): Promise<Buffer> {\r\n        if (bufferView._babylonBuffer) {\r\n            return bufferView._babylonBuffer;\r\n        }\r\n\r\n        const engine = this._babylonScene.getEngine();\r\n        bufferView._babylonBuffer = this.loadBufferViewAsync(`/bufferViews/${bufferView.index}`, bufferView).then((data) => {\r\n            return new Buffer(engine, data, false);\r\n        });\r\n\r\n        return bufferView._babylonBuffer;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadVertexAccessorAsync(context: string, accessor: IAccessor, kind: string): Promise<VertexBuffer> {\r\n        if (accessor._babylonVertexBuffer?.[kind]) {\r\n            return accessor._babylonVertexBuffer[kind];\r\n        }\r\n\r\n        if (!accessor._babylonVertexBuffer) {\r\n            accessor._babylonVertexBuffer = {};\r\n        }\r\n\r\n        const engine = this._babylonScene.getEngine();\r\n\r\n        if (accessor.sparse || accessor.bufferView == undefined) {\r\n            accessor._babylonVertexBuffer[kind] = this._loadFloatAccessorAsync(context, accessor).then((data) => {\r\n                return new VertexBuffer(engine, data, kind, false);\r\n            });\r\n        } else {\r\n            const bufferView = ArrayItem.Get(`${context}/bufferView`, this._gltf.bufferViews, accessor.bufferView);\r\n            accessor._babylonVertexBuffer[kind] = this._loadVertexBufferViewAsync(bufferView).then((babylonBuffer) => {\r\n                const numComponents = GLTFLoader._GetNumComponents(context, accessor.type);\r\n                return new VertexBuffer(\r\n                    engine,\r\n                    babylonBuffer,\r\n                    kind,\r\n                    false,\r\n                    undefined,\r\n                    bufferView.byteStride,\r\n                    undefined,\r\n                    accessor.byteOffset,\r\n                    numComponents,\r\n                    accessor.componentType,\r\n                    accessor.normalized,\r\n                    true,\r\n                    undefined,\r\n                    true\r\n                );\r\n            });\r\n        }\r\n\r\n        return accessor._babylonVertexBuffer[kind];\r\n    }\r\n\r\n    private _loadMaterialMetallicRoughnessPropertiesAsync(context: string, properties: IMaterialPbrMetallicRoughness, babylonMaterial: Material): Promise<void> {\r\n        const promises = new Array<Promise<unknown>>();\r\n        const adapter = this._getOrCreateMaterialAdapter(babylonMaterial);\r\n\r\n        if (properties) {\r\n            // Set base color and alpha using adapter\r\n            if (properties.baseColorFactor) {\r\n                adapter.baseColor = Color3.FromArray(properties.baseColorFactor);\r\n                adapter.geometryOpacity = properties.baseColorFactor[3];\r\n            } else {\r\n                adapter.baseColor = Color3.White();\r\n            }\r\n\r\n            // Set metallic and roughness using adapter\r\n            adapter.baseMetalness = properties.metallicFactor == undefined ? 1 : properties.metallicFactor;\r\n            adapter.specularRoughness = properties.roughnessFactor == undefined ? 1 : properties.roughnessFactor;\r\n\r\n            if (properties.baseColorTexture) {\r\n                promises.push(\r\n                    this.loadTextureInfoAsync(`${context}/baseColorTexture`, properties.baseColorTexture, (texture) => {\r\n                        texture.name = `${babylonMaterial.name} (Base Color)`;\r\n                        adapter.baseColorTexture = texture;\r\n                    })\r\n                );\r\n            }\r\n\r\n            if (properties.metallicRoughnessTexture) {\r\n                properties.metallicRoughnessTexture.nonColorData = true;\r\n                promises.push(\r\n                    this.loadTextureInfoAsync(`${context}/metallicRoughnessTexture`, properties.metallicRoughnessTexture, (texture) => {\r\n                        texture.name = `${babylonMaterial.name} (Metallic Roughness)`;\r\n                        adapter.baseMetalnessTexture = texture;\r\n                        adapter.specularRoughnessTexture = texture;\r\n                    })\r\n                );\r\n\r\n                // Configure texture channel usage using adapter\r\n                adapter.useRoughnessFromMetallicTextureGreen = true;\r\n                adapter.useMetallicFromMetallicTextureBlue = true;\r\n            }\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadMaterialAsync(\r\n        context: string,\r\n        material: IMaterial,\r\n        babylonMesh: Nullable<Mesh>,\r\n        babylonDrawMode: number,\r\n        assign: (babylonMaterial: Material) => void = () => {}\r\n    ): Promise<Material> {\r\n        const extensionPromise = this._extensionsLoadMaterialAsync(context, material, babylonMesh, babylonDrawMode, assign);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        material._data = material._data || {};\r\n        let babylonData = material._data[babylonDrawMode];\r\n        if (!babylonData) {\r\n            this.logOpen(`${context} ${material.name || \"\"}`);\r\n\r\n            const babylonMaterial = this.createMaterial(context, material, babylonDrawMode);\r\n\r\n            babylonData = {\r\n                babylonMaterial: babylonMaterial,\r\n                babylonMeshes: [],\r\n                promise: this.loadMaterialPropertiesAsync(context, material, babylonMaterial),\r\n            };\r\n\r\n            material._data[babylonDrawMode] = babylonData;\r\n\r\n            GLTFLoader.AddPointerMetadata(babylonMaterial, context);\r\n            this._parent.onMaterialLoadedObservable.notifyObservers(babylonMaterial);\r\n\r\n            this.logClose();\r\n        }\r\n\r\n        if (babylonMesh) {\r\n            babylonData.babylonMeshes.push(babylonMesh);\r\n\r\n            babylonMesh.onDisposeObservable.addOnce(() => {\r\n                const index = babylonData.babylonMeshes.indexOf(babylonMesh);\r\n                if (index !== -1) {\r\n                    babylonData.babylonMeshes.splice(index, 1);\r\n                }\r\n            });\r\n        }\r\n\r\n        assign(babylonData.babylonMaterial);\r\n\r\n        return babylonData.promise.then(() => {\r\n            return babylonData.babylonMaterial;\r\n        });\r\n    }\r\n\r\n    private _createDefaultMaterial(name: string, babylonDrawMode: number): Material {\r\n        if (!this._pbrMaterialImpl) {\r\n            throw new Error(\"PBR Material class not loaded\");\r\n        }\r\n        this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n        const babylonMaterial = new this._pbrMaterialImpl.materialClass(name, this._babylonScene);\r\n        babylonMaterial._parentContainer = this._assetContainer;\r\n        this._babylonScene._blockEntityCollection = false;\r\n        babylonMaterial.fillMode = babylonDrawMode;\r\n        babylonMaterial.transparencyMode = this._pbrMaterialImpl.materialClass.MATERIAL_OPAQUE;\r\n        // Create the material adapter and set some default properties.\r\n        // We don't need to wait for the promise to resolve here.\r\n        const adapter = this._getOrCreateMaterialAdapter(babylonMaterial);\r\n        adapter.transparencyAsAlphaCoverage = this._parent.transparencyAsCoverage;\r\n\r\n        // Set default metallic and roughness values\r\n        adapter.baseMetalness = 1.0;\r\n        adapter.specularRoughness = 1.0;\r\n\r\n        return babylonMaterial;\r\n    }\r\n\r\n    /**\r\n     * Creates a Babylon material from a glTF material.\r\n     * @param context The context when loading the asset\r\n     * @param material The glTF material property\r\n     * @param babylonDrawMode The draw mode for the Babylon material\r\n     * @returns The Babylon material\r\n     */\r\n    public createMaterial(context: string, material: IMaterial, babylonDrawMode: number): Material {\r\n        const extensionMaterial = this._extensionsCreateMaterial(context, material, babylonDrawMode);\r\n        if (extensionMaterial) {\r\n            return extensionMaterial;\r\n        }\r\n\r\n        const name = material.name || `material${material.index}`;\r\n        const babylonMaterial = this._createDefaultMaterial(name, babylonDrawMode);\r\n\r\n        return babylonMaterial;\r\n    }\r\n\r\n    /**\r\n     * Loads properties from a glTF material into a Babylon material.\r\n     * @param context The context when loading the asset\r\n     * @param material The glTF material property\r\n     * @param babylonMaterial The Babylon material\r\n     * @returns A promise that resolves when the load is complete\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Promise<void> {\r\n        const extensionPromise = this._extensionsLoadMaterialPropertiesAsync(context, material, babylonMaterial);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        promises.push(this.loadMaterialBasePropertiesAsync(context, material, babylonMaterial));\r\n\r\n        if (material.pbrMetallicRoughness) {\r\n            promises.push(this._loadMaterialMetallicRoughnessPropertiesAsync(`${context}/pbrMetallicRoughness`, material.pbrMetallicRoughness, babylonMaterial));\r\n        }\r\n\r\n        this.loadMaterialAlphaProperties(context, material, babylonMaterial);\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n\r\n    /**\r\n     * Loads the normal, occlusion, and emissive properties from a glTF material into a Babylon material.\r\n     * @param context The context when loading the asset\r\n     * @param material The glTF material property\r\n     * @param babylonMaterial The Babylon material\r\n     * @returns A promise that resolves when the load is complete\r\n     */\r\n    public loadMaterialBasePropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Promise<void> {\r\n        const promises = new Array<Promise<unknown>>();\r\n        const adapter = this._getOrCreateMaterialAdapter(babylonMaterial);\r\n\r\n        // Set emission color using adapter\r\n        adapter.emissionColor = material.emissiveFactor ? Color3.FromArray(material.emissiveFactor) : new Color3(0, 0, 0);\r\n\r\n        // Set double-sided properties using adapter\r\n        if (material.doubleSided) {\r\n            adapter.backFaceCulling = false;\r\n            adapter.twoSidedLighting = true;\r\n        }\r\n\r\n        if (material.normalTexture) {\r\n            material.normalTexture.nonColorData = true;\r\n            promises.push(\r\n                this.loadTextureInfoAsync(`${context}/normalTexture`, material.normalTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Normal)`;\r\n                    adapter.geometryNormalTexture = texture;\r\n                    if (material.normalTexture?.scale != undefined) {\r\n                        texture.level = material.normalTexture.scale;\r\n                    }\r\n                })\r\n            );\r\n\r\n            // Set normal map inversions using adapter\r\n            adapter.setNormalMapInversions(!this._babylonScene.useRightHandedSystem, this._babylonScene.useRightHandedSystem);\r\n        }\r\n\r\n        let aoTexture: BaseTexture;\r\n        let aoStrength: number = 1.0;\r\n        let emissionTexture: BaseTexture;\r\n\r\n        if (material.occlusionTexture) {\r\n            material.occlusionTexture.nonColorData = true;\r\n            promises.push(\r\n                this.loadTextureInfoAsync(`${context}/occlusionTexture`, material.occlusionTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Occlusion)`;\r\n                    aoTexture = texture;\r\n                })\r\n            );\r\n\r\n            if (material.occlusionTexture.strength != undefined) {\r\n                aoStrength = material.occlusionTexture.strength;\r\n            }\r\n        }\r\n\r\n        if (material.emissiveTexture) {\r\n            promises.push(\r\n                this.loadTextureInfoAsync(`${context}/emissiveTexture`, material.emissiveTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Emissive)`;\r\n                    emissionTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {\r\n            // Set ambient occlusion and emissive textures using adapter\r\n            if (aoTexture) {\r\n                adapter.ambientOcclusionTexture = aoTexture;\r\n                adapter.ambientOcclusionTextureStrength = aoStrength;\r\n            }\r\n\r\n            if (emissionTexture) {\r\n                adapter.emissionColorTexture = emissionTexture;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Loads the alpha properties from a glTF material into a Babylon material.\r\n     * Must be called after the setting the albedo texture of the Babylon material when the material has an albedo texture.\r\n     * @param context The context when loading the asset\r\n     * @param material The glTF material property\r\n     * @param babylonMaterial The Babylon material\r\n     */\r\n    public loadMaterialAlphaProperties(context: string, material: IMaterial, babylonMaterial: Material): void {\r\n        if (!this._pbrMaterialImpl) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const adapter = this._getOrCreateMaterialAdapter(babylonMaterial);\r\n        const baseColorTexture = adapter.baseColorTexture;\r\n\r\n        const alphaMode = material.alphaMode || MaterialAlphaMode.OPAQUE;\r\n        switch (alphaMode) {\r\n            case MaterialAlphaMode.OPAQUE: {\r\n                babylonMaterial.transparencyMode = this._pbrMaterialImpl.materialClass.MATERIAL_OPAQUE;\r\n                babylonMaterial.alpha = 1.0; // Force alpha to 1.0 for opaque mode.\r\n                break;\r\n            }\r\n            case MaterialAlphaMode.MASK: {\r\n                babylonMaterial.transparencyMode = this._pbrMaterialImpl.materialClass.MATERIAL_ALPHATEST;\r\n                adapter.alphaCutOff = material.alphaCutoff == undefined ? 0.5 : material.alphaCutoff;\r\n                if (baseColorTexture) {\r\n                    baseColorTexture.hasAlpha = true;\r\n                }\r\n                break;\r\n            }\r\n            case MaterialAlphaMode.BLEND: {\r\n                babylonMaterial.transparencyMode = this._pbrMaterialImpl.materialClass.MATERIAL_ALPHABLEND;\r\n                if (baseColorTexture) {\r\n                    baseColorTexture.hasAlpha = true;\r\n                    adapter.useAlphaFromBaseColorTexture = true;\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                throw new Error(`${context}/alphaMode: Invalid value (${material.alphaMode})`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF texture info.\r\n     * @param context The context when loading the asset\r\n     * @param textureInfo The glTF texture info property\r\n     * @param assign A function called synchronously after parsing the glTF properties\r\n     * @returns A promise that resolves with the loaded Babylon texture when the load is complete\r\n     */\r\n    public loadTextureInfoAsync(context: string, textureInfo: ITextureInfo, assign: (babylonTexture: BaseTexture) => void = () => {}): Promise<BaseTexture> {\r\n        const extensionPromise = this._extensionsLoadTextureInfoAsync(context, textureInfo, assign);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        this.logOpen(`${context}`);\r\n\r\n        if (textureInfo.texCoord! >= 6) {\r\n            throw new Error(`${context}/texCoord: Invalid value (${textureInfo.texCoord})`);\r\n        }\r\n\r\n        const texture = ArrayItem.Get(`${context}/index`, this._gltf.textures, textureInfo.index);\r\n        texture._textureInfo = textureInfo;\r\n\r\n        const promise = this._loadTextureAsync(`/textures/${textureInfo.index}`, texture, (babylonTexture) => {\r\n            babylonTexture.coordinatesIndex = textureInfo.texCoord || 0;\r\n            GLTFLoader.AddPointerMetadata(babylonTexture, context);\r\n            this._parent.onTextureLoadedObservable.notifyObservers(babylonTexture);\r\n            assign(babylonTexture);\r\n        });\r\n\r\n        this.logClose();\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadTextureAsync(context: string, texture: ITexture, assign: (babylonTexture: BaseTexture) => void = () => {}): Promise<BaseTexture> {\r\n        const extensionPromise = this._extensionsLoadTextureAsync(context, texture, assign);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        this.logOpen(`${context} ${texture.name || \"\"}`);\r\n\r\n        const sampler = texture.sampler == undefined ? GLTFLoader.DefaultSampler : ArrayItem.Get(`${context}/sampler`, this._gltf.samplers, texture.sampler);\r\n        const image = ArrayItem.Get(`${context}/source`, this._gltf.images, texture.source);\r\n        const promise = this._createTextureAsync(context, sampler, image, assign, undefined, !texture._textureInfo.nonColorData);\r\n\r\n        this.logClose();\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _createTextureAsync(\r\n        context: string,\r\n        sampler: ISampler,\r\n        image: IImage,\r\n        assign: (babylonTexture: BaseTexture) => void = () => {},\r\n        textureLoaderOptions?: unknown,\r\n        useSRGBBuffer?: boolean\r\n    ): Promise<BaseTexture> {\r\n        const samplerData = this._loadSampler(`/samplers/${sampler.index}`, sampler);\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        const deferred = new Deferred<void>();\r\n        this._babylonScene._blockEntityCollection = !!this._assetContainer;\r\n        const textureCreationOptions: ITextureCreationOptions = {\r\n            noMipmap: samplerData.noMipMaps,\r\n            invertY: false,\r\n            samplingMode: samplerData.samplingMode,\r\n            onLoad: () => {\r\n                if (!this._disposed) {\r\n                    deferred.resolve();\r\n                }\r\n            },\r\n            onError: (message?: string, exception?: any) => {\r\n                if (!this._disposed) {\r\n                    deferred.reject(new Error(`${context}: ${exception && exception.message ? exception.message : message || \"Failed to load texture\"}`));\r\n                }\r\n            },\r\n            mimeType: image.mimeType ?? GetMimeType(image.uri ?? \"\"),\r\n            loaderOptions: textureLoaderOptions,\r\n            useSRGBBuffer: !!useSRGBBuffer && this._parent.useSRGBBuffers,\r\n        };\r\n        const babylonTexture = new Texture(null, this._babylonScene, textureCreationOptions);\r\n        babylonTexture._parentContainer = this._assetContainer;\r\n        this._babylonScene._blockEntityCollection = false;\r\n        promises.push(deferred.promise);\r\n\r\n        promises.push(\r\n            this.loadImageAsync(`/images/${image.index}`, image).then((data) => {\r\n                const name = image.uri || `${this._fileName}#image${image.index}`;\r\n                const dataUrl = `data:${this._uniqueRootUrl}${name}`;\r\n                babylonTexture.updateURL(dataUrl, data);\r\n\r\n                // Set the internal texture label.\r\n                const internalTexture = babylonTexture.getInternalTexture();\r\n                if (internalTexture) {\r\n                    internalTexture.label = image.name;\r\n                }\r\n            })\r\n        );\r\n\r\n        babylonTexture.wrapU = samplerData.wrapU;\r\n        babylonTexture.wrapV = samplerData.wrapV;\r\n        assign(babylonTexture);\r\n\r\n        if (this._parent.useGltfTextureNames) {\r\n            babylonTexture.name = image.name || image.uri || `image${image.index}`;\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {\r\n            return babylonTexture;\r\n        });\r\n    }\r\n\r\n    private _loadSampler(context: string, sampler: ISampler): _ISamplerData {\r\n        if (!sampler._data) {\r\n            sampler._data = {\r\n                noMipMaps: sampler.minFilter === TextureMinFilter.NEAREST || sampler.minFilter === TextureMinFilter.LINEAR,\r\n                samplingMode: GLTFLoader._GetTextureSamplingMode(context, sampler),\r\n                wrapU: GLTFLoader._GetTextureWrapMode(`${context}/wrapS`, sampler.wrapS),\r\n                wrapV: GLTFLoader._GetTextureWrapMode(`${context}/wrapT`, sampler.wrapT),\r\n            };\r\n        }\r\n\r\n        return sampler._data;\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF image.\r\n     * @param context The context when loading the asset\r\n     * @param image The glTF image property\r\n     * @returns A promise that resolves with the loaded data when the load is complete\r\n     */\r\n    public loadImageAsync(context: string, image: IImage): Promise<ArrayBufferView> {\r\n        if (!image._data) {\r\n            this.logOpen(`${context} ${image.name || \"\"}`);\r\n\r\n            if (image.uri) {\r\n                image._data = this.loadUriAsync(`${context}/uri`, image, image.uri);\r\n            } else {\r\n                const bufferView = ArrayItem.Get(`${context}/bufferView`, this._gltf.bufferViews, image.bufferView);\r\n                image._data = this.loadBufferViewAsync(`/bufferViews/${bufferView.index}`, bufferView);\r\n            }\r\n\r\n            this.logClose();\r\n        }\r\n\r\n        return image._data;\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF uri.\r\n     * @param context The context when loading the asset\r\n     * @param property The glTF property associated with the uri\r\n     * @param uri The base64 or relative uri\r\n     * @returns A promise that resolves with the loaded data when the load is complete\r\n     */\r\n    public loadUriAsync(context: string, property: IProperty, uri: string): Promise<ArrayBufferView> {\r\n        const extensionPromise = this._extensionsLoadUriAsync(context, property, uri);\r\n        if (extensionPromise) {\r\n            return extensionPromise;\r\n        }\r\n\r\n        if (!GLTFLoader._ValidateUri(uri)) {\r\n            throw new Error(`${context}: '${uri}' is invalid`);\r\n        }\r\n\r\n        if (IsBase64DataUrl(uri)) {\r\n            const data = new Uint8Array(DecodeBase64UrlToBinary(uri));\r\n            this.log(`${context}: Decoded ${uri.substring(0, 64)}... (${data.length} bytes)`);\r\n            return Promise.resolve(data);\r\n        }\r\n\r\n        this.log(`${context}: Loading ${uri}`);\r\n\r\n        return this._parent.preprocessUrlAsync(this._rootUrl + uri).then((url) => {\r\n            return new Promise((resolve, reject) => {\r\n                this._parent._loadFile(\r\n                    this._babylonScene,\r\n                    url,\r\n                    (data) => {\r\n                        if (!this._disposed) {\r\n                            this.log(`${context}: Loaded ${uri} (${(data as ArrayBuffer).byteLength} bytes)`);\r\n                            resolve(new Uint8Array(data as ArrayBuffer));\r\n                        }\r\n                    },\r\n                    true,\r\n                    (request) => {\r\n                        reject(new LoadFileError(`${context}: Failed to load '${uri}'${request ? \": \" + request.status + \" \" + request.statusText : \"\"}`, request));\r\n                    }\r\n                );\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a JSON pointer to the _internalMetadata of the Babylon object at `<object>._internalMetadata.gltf.pointers`.\r\n     * @param babylonObject the Babylon object with _internalMetadata\r\n     * @param pointer the JSON pointer\r\n     */\r\n    public static AddPointerMetadata(babylonObject: IWithMetadata, pointer: string): void {\r\n        babylonObject.metadata = babylonObject.metadata || {};\r\n        const metadata = (babylonObject._internalMetadata = babylonObject._internalMetadata || {});\r\n        const gltf = (metadata.gltf = metadata.gltf || {});\r\n        const pointers = (gltf.pointers = gltf.pointers || []);\r\n        pointers.push(pointer);\r\n    }\r\n\r\n    private static _GetTextureWrapMode(context: string, mode: TextureWrapMode | undefined): number {\r\n        // Set defaults if undefined\r\n        mode = mode == undefined ? TextureWrapMode.REPEAT : mode;\r\n\r\n        switch (mode) {\r\n            case TextureWrapMode.CLAMP_TO_EDGE:\r\n                return Texture.CLAMP_ADDRESSMODE;\r\n            case TextureWrapMode.MIRRORED_REPEAT:\r\n                return Texture.MIRROR_ADDRESSMODE;\r\n            case TextureWrapMode.REPEAT:\r\n                return Texture.WRAP_ADDRESSMODE;\r\n            default:\r\n                Logger.Warn(`${context}: Invalid value (${mode})`);\r\n                return Texture.WRAP_ADDRESSMODE;\r\n        }\r\n    }\r\n\r\n    private static _GetTextureSamplingMode(context: string, sampler: ISampler): number {\r\n        // Set defaults if undefined\r\n        const magFilter = sampler.magFilter == undefined ? TextureMagFilter.LINEAR : sampler.magFilter;\r\n        const minFilter = sampler.minFilter == undefined ? TextureMinFilter.LINEAR_MIPMAP_LINEAR : sampler.minFilter;\r\n\r\n        if (magFilter === TextureMagFilter.LINEAR) {\r\n            switch (minFilter) {\r\n                case TextureMinFilter.NEAREST:\r\n                    return Texture.LINEAR_NEAREST;\r\n                case TextureMinFilter.LINEAR:\r\n                    return Texture.LINEAR_LINEAR;\r\n                case TextureMinFilter.NEAREST_MIPMAP_NEAREST:\r\n                    return Texture.LINEAR_NEAREST_MIPNEAREST;\r\n                case TextureMinFilter.LINEAR_MIPMAP_NEAREST:\r\n                    return Texture.LINEAR_LINEAR_MIPNEAREST;\r\n                case TextureMinFilter.NEAREST_MIPMAP_LINEAR:\r\n                    return Texture.LINEAR_NEAREST_MIPLINEAR;\r\n                case TextureMinFilter.LINEAR_MIPMAP_LINEAR:\r\n                    return Texture.LINEAR_LINEAR_MIPLINEAR;\r\n                default:\r\n                    Logger.Warn(`${context}/minFilter: Invalid value (${minFilter})`);\r\n                    return Texture.LINEAR_LINEAR_MIPLINEAR;\r\n            }\r\n        } else {\r\n            if (magFilter !== TextureMagFilter.NEAREST) {\r\n                Logger.Warn(`${context}/magFilter: Invalid value (${magFilter})`);\r\n            }\r\n\r\n            switch (minFilter) {\r\n                case TextureMinFilter.NEAREST:\r\n                    return Texture.NEAREST_NEAREST;\r\n                case TextureMinFilter.LINEAR:\r\n                    return Texture.NEAREST_LINEAR;\r\n                case TextureMinFilter.NEAREST_MIPMAP_NEAREST:\r\n                    return Texture.NEAREST_NEAREST_MIPNEAREST;\r\n                case TextureMinFilter.LINEAR_MIPMAP_NEAREST:\r\n                    return Texture.NEAREST_LINEAR_MIPNEAREST;\r\n                case TextureMinFilter.NEAREST_MIPMAP_LINEAR:\r\n                    return Texture.NEAREST_NEAREST_MIPLINEAR;\r\n                case TextureMinFilter.LINEAR_MIPMAP_LINEAR:\r\n                    return Texture.NEAREST_LINEAR_MIPLINEAR;\r\n                default:\r\n                    Logger.Warn(`${context}/minFilter: Invalid value (${minFilter})`);\r\n                    return Texture.NEAREST_NEAREST_MIPNEAREST;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _GetTypedArrayConstructor(context: string, componentType: AccessorComponentType): TypedArrayConstructor {\r\n        try {\r\n            return GetTypedArrayConstructor(componentType);\r\n        } catch (e) {\r\n            throw new Error(`${context}: ${e.message}`);\r\n        }\r\n    }\r\n\r\n    private static _GetTypedArray(context: string, componentType: AccessorComponentType, bufferView: ArrayBufferView, byteOffset: number | undefined, length: number): TypedArray {\r\n        const buffer = bufferView.buffer;\r\n        byteOffset = bufferView.byteOffset + (byteOffset || 0);\r\n\r\n        const constructor = GLTFLoader._GetTypedArrayConstructor(`${context}/componentType`, componentType);\r\n\r\n        const componentTypeLength = VertexBuffer.GetTypeByteLength(componentType);\r\n        if (byteOffset % componentTypeLength !== 0) {\r\n            // HACK: Copy the buffer if byte offset is not a multiple of component type byte length.\r\n            Logger.Warn(`${context}: Copying buffer as byte offset (${byteOffset}) is not a multiple of component type byte length (${componentTypeLength})`);\r\n            return new constructor(buffer.slice(byteOffset, byteOffset + length * componentTypeLength), 0);\r\n        }\r\n\r\n        return new constructor(buffer, byteOffset, length);\r\n    }\r\n\r\n    private static _GetNumComponents(context: string, type: string): number {\r\n        switch (type) {\r\n            case \"SCALAR\":\r\n                return 1;\r\n            case \"VEC2\":\r\n                return 2;\r\n            case \"VEC3\":\r\n                return 3;\r\n            case \"VEC4\":\r\n                return 4;\r\n            case \"MAT2\":\r\n                return 4;\r\n            case \"MAT3\":\r\n                return 9;\r\n            case \"MAT4\":\r\n                return 16;\r\n        }\r\n\r\n        throw new Error(`${context}: Invalid type (${type})`);\r\n    }\r\n\r\n    private static _ValidateUri(uri: string): boolean {\r\n        return Tools.IsBase64(uri) || uri.indexOf(\"..\") === -1;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _GetDrawMode(context: string, mode: number | undefined): number {\r\n        if (mode == undefined) {\r\n            mode = MeshPrimitiveMode.TRIANGLES;\r\n        }\r\n\r\n        switch (mode) {\r\n            case MeshPrimitiveMode.POINTS:\r\n                return Material.PointListDrawMode;\r\n            case MeshPrimitiveMode.LINES:\r\n                return Material.LineListDrawMode;\r\n            case MeshPrimitiveMode.LINE_LOOP:\r\n                return Material.LineLoopDrawMode;\r\n            case MeshPrimitiveMode.LINE_STRIP:\r\n                return Material.LineStripDrawMode;\r\n            case MeshPrimitiveMode.TRIANGLES:\r\n                return Material.TriangleFillMode;\r\n            case MeshPrimitiveMode.TRIANGLE_STRIP:\r\n                return Material.TriangleStripDrawMode;\r\n            case MeshPrimitiveMode.TRIANGLE_FAN:\r\n                return Material.TriangleFanDrawMode;\r\n        }\r\n\r\n        throw new Error(`${context}: Invalid mesh primitive mode (${mode})`);\r\n    }\r\n\r\n    private _compileMaterialsAsync(): Promise<void> {\r\n        this._parent._startPerformanceCounter(\"Compile materials\");\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        if (this._gltf.materials) {\r\n            for (const material of this._gltf.materials) {\r\n                if (material._data) {\r\n                    for (const babylonDrawMode in material._data) {\r\n                        const babylonData = material._data[babylonDrawMode];\r\n                        for (const babylonMesh of babylonData.babylonMeshes) {\r\n                            // Ensure nonUniformScaling is set if necessary.\r\n                            babylonMesh.computeWorldMatrix(true);\r\n\r\n                            const babylonMaterial = babylonData.babylonMaterial;\r\n                            promises.push(babylonMaterial.forceCompilationAsync(babylonMesh));\r\n                            promises.push(babylonMaterial.forceCompilationAsync(babylonMesh, { useInstances: true }));\r\n                            if (this._parent.useClipPlane) {\r\n                                promises.push(babylonMaterial.forceCompilationAsync(babylonMesh, { clipPlane: true }));\r\n                                promises.push(babylonMaterial.forceCompilationAsync(babylonMesh, { clipPlane: true, useInstances: true }));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {\r\n            this._parent._endPerformanceCounter(\"Compile materials\");\r\n        });\r\n    }\r\n\r\n    private _compileShadowGeneratorsAsync(): Promise<void> {\r\n        this._parent._startPerformanceCounter(\"Compile shadow generators\");\r\n\r\n        const promises = new Array<Promise<unknown>>();\r\n\r\n        const lights = this._babylonScene.lights;\r\n        for (const light of lights) {\r\n            const generator = light.getShadowGenerator();\r\n            if (generator) {\r\n                promises.push(generator.forceCompilationAsync());\r\n            }\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {\r\n            this._parent._endPerformanceCounter(\"Compile shadow generators\");\r\n        });\r\n    }\r\n\r\n    private _forEachExtensions(action: (extension: IGLTFLoaderExtension) => void): void {\r\n        for (const extension of this._extensions) {\r\n            if (extension.enabled) {\r\n                action(extension);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _applyExtensions<T>(property: IProperty, functionName: string, actionAsync: (extension: IGLTFLoaderExtension) => Nullable<T> | undefined): Nullable<T> {\r\n        for (const extension of this._extensions) {\r\n            if (extension.enabled) {\r\n                const id = `${extension.name}.${functionName}`;\r\n                const loaderProperty = property as ILoaderProperty;\r\n                loaderProperty._activeLoaderExtensionFunctions = loaderProperty._activeLoaderExtensionFunctions || {};\r\n                const activeLoaderExtensionFunctions = loaderProperty._activeLoaderExtensionFunctions;\r\n                if (!activeLoaderExtensionFunctions[id]) {\r\n                    activeLoaderExtensionFunctions[id] = true;\r\n\r\n                    try {\r\n                        const result = actionAsync(extension);\r\n                        if (result) {\r\n                            return result;\r\n                        }\r\n                    } finally {\r\n                        delete activeLoaderExtensionFunctions[id];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private _extensionsOnLoading(): void {\r\n        this._forEachExtensions((extension) => extension.onLoading && extension.onLoading());\r\n    }\r\n\r\n    private _extensionsOnReady(): void {\r\n        this._forEachExtensions((extension) => extension.onReady && extension.onReady());\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadSceneAsync(context: string, scene: IScene): Nullable<Promise<void>> {\r\n        return this._applyExtensions(scene, \"loadScene\", (extension) => extension.loadSceneAsync && extension.loadSceneAsync(context, scene));\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void): Nullable<Promise<TransformNode>> {\r\n        return this._applyExtensions(node, \"loadNode\", (extension) => extension.loadNodeAsync && extension.loadNodeAsync(context, node, assign));\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadCameraAsync(context: string, camera: ICamera, assign: (babylonCamera: Camera) => void): Nullable<Promise<Camera>> {\r\n        return this._applyExtensions(camera, \"loadCamera\", (extension) => extension.loadCameraAsync && extension.loadCameraAsync(context, camera, assign));\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadVertexDataAsync(context: string, primitive: IMeshPrimitive, babylonMesh: Mesh): Nullable<Promise<Geometry>> {\r\n        return this._applyExtensions(primitive, \"loadVertexData\", (extension) => extension._loadVertexDataAsync && extension._loadVertexDataAsync(context, primitive, babylonMesh));\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadMeshPrimitiveAsync(\r\n        context: string,\r\n        name: string,\r\n        node: INode,\r\n        mesh: IMesh,\r\n        primitive: IMeshPrimitive,\r\n        assign: (babylonMesh: AbstractMesh) => void\r\n    ): Nullable<Promise<AbstractMesh>> {\r\n        return this._applyExtensions(\r\n            primitive,\r\n            \"loadMeshPrimitive\",\r\n            (extension) => extension._loadMeshPrimitiveAsync && extension._loadMeshPrimitiveAsync(context, name, node, mesh, primitive, assign)\r\n        );\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadMaterialAsync(\r\n        context: string,\r\n        material: IMaterial,\r\n        babylonMesh: Nullable<Mesh>,\r\n        babylonDrawMode: number,\r\n        assign: (babylonMaterial: Material) => void\r\n    ): Nullable<Promise<Material>> {\r\n        return this._applyExtensions(\r\n            material,\r\n            \"loadMaterial\",\r\n            (extension) => extension._loadMaterialAsync && extension._loadMaterialAsync(context, material, babylonMesh, babylonDrawMode, assign)\r\n        );\r\n    }\r\n\r\n    private _extensionsCreateMaterial(context: string, material: IMaterial, babylonDrawMode: number): Nullable<Material> {\r\n        return this._applyExtensions(material, \"createMaterial\", (extension) => extension.createMaterial && extension.createMaterial(context, material, babylonDrawMode));\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return this._applyExtensions(\r\n            material,\r\n            \"loadMaterialProperties\",\r\n            (extension) => extension.loadMaterialPropertiesAsync && extension.loadMaterialPropertiesAsync(context, material, babylonMaterial)\r\n        );\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadTextureInfoAsync(context: string, textureInfo: ITextureInfo, assign: (babylonTexture: BaseTexture) => void): Nullable<Promise<BaseTexture>> {\r\n        return this._applyExtensions(textureInfo, \"loadTextureInfo\", (extension) => extension.loadTextureInfoAsync && extension.loadTextureInfoAsync(context, textureInfo, assign));\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadTextureAsync(context: string, texture: ITexture, assign: (babylonTexture: BaseTexture) => void): Nullable<Promise<BaseTexture>> {\r\n        return this._applyExtensions(texture, \"loadTexture\", (extension) => extension._loadTextureAsync && extension._loadTextureAsync(context, texture, assign));\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadAnimationAsync(context: string, animation: IAnimation): Nullable<Promise<AnimationGroup>> {\r\n        return this._applyExtensions(animation, \"loadAnimation\", (extension) => extension.loadAnimationAsync && extension.loadAnimationAsync(context, animation));\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadAnimationChannelAsync(\r\n        context: string,\r\n        animationContext: string,\r\n        animation: IAnimation,\r\n        channel: IAnimationChannel,\r\n        onLoad: (babylonAnimatable: IAnimatable, babylonAnimation: Animation) => void\r\n    ): Nullable<Promise<void>> {\r\n        return this._applyExtensions(\r\n            animation,\r\n            \"loadAnimationChannel\",\r\n            (extension) => extension._loadAnimationChannelAsync && extension._loadAnimationChannelAsync(context, animationContext, animation, channel, onLoad)\r\n        );\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadSkinAsync(context: string, node: INode, skin: ISkin): Nullable<Promise<void>> {\r\n        return this._applyExtensions(skin, \"loadSkin\", (extension) => extension._loadSkinAsync && extension._loadSkinAsync(context, node, skin));\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadUriAsync(context: string, property: IProperty, uri: string): Nullable<Promise<ArrayBufferView>> {\r\n        return this._applyExtensions(property, \"loadUri\", (extension) => extension._loadUriAsync && extension._loadUriAsync(context, property, uri));\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadBufferViewAsync(context: string, bufferView: IBufferView): Nullable<Promise<ArrayBufferView>> {\r\n        return this._applyExtensions(bufferView, \"loadBufferView\", (extension) => extension.loadBufferViewAsync && extension.loadBufferViewAsync(context, bufferView));\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    private _extensionsLoadBufferAsync(context: string, buffer: IBuffer, byteOffset: number, byteLength: number): Nullable<Promise<ArrayBufferView>> {\r\n        return this._applyExtensions(buffer, \"loadBuffer\", (extension) => extension.loadBufferAsync && extension.loadBufferAsync(context, buffer, byteOffset, byteLength));\r\n    }\r\n\r\n    /**\r\n     * Helper method called by a loader extension to load an glTF extension.\r\n     * @param context The context when loading the asset\r\n     * @param property The glTF property to load the extension from\r\n     * @param extensionName The name of the extension to load\r\n     * @param actionAsync The action to run\r\n     * @returns The promise returned by actionAsync or null if the extension does not exist\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax, @typescript-eslint/naming-convention\r\n    public static LoadExtensionAsync<TExtension = unknown, TResult = void>(\r\n        context: string,\r\n        property: IProperty,\r\n        extensionName: string,\r\n        actionAsync: (extensionContext: string, extension: TExtension) => Nullable<Promise<TResult>>\r\n    ): Nullable<Promise<TResult>> {\r\n        if (!property.extensions) {\r\n            return null;\r\n        }\r\n\r\n        const extensions = property.extensions;\r\n\r\n        const extension = extensions[extensionName] as TExtension;\r\n        if (!extension) {\r\n            return null;\r\n        }\r\n\r\n        return actionAsync(`${context}/extensions/${extensionName}`, extension);\r\n    }\r\n\r\n    /**\r\n     * Helper method called by a loader extension to load a glTF extra.\r\n     * @param context The context when loading the asset\r\n     * @param property The glTF property to load the extra from\r\n     * @param extensionName The name of the extension to load\r\n     * @param actionAsync The action to run\r\n     * @returns The promise returned by actionAsync or null if the extra does not exist\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax, @typescript-eslint/naming-convention\r\n    public static LoadExtraAsync<TExtra = unknown, TResult = void>(\r\n        context: string,\r\n        property: IProperty,\r\n        extensionName: string,\r\n        actionAsync: (extraContext: string, extra: TExtra) => Nullable<Promise<TResult>>\r\n    ): Nullable<Promise<TResult>> {\r\n        if (!property.extras) {\r\n            return null;\r\n        }\r\n\r\n        const extras = property.extras;\r\n\r\n        const extra = extras[extensionName] as TExtra;\r\n        if (!extra) {\r\n            return null;\r\n        }\r\n\r\n        return actionAsync(`${context}/extras/${extensionName}`, extra);\r\n    }\r\n\r\n    /**\r\n     * Checks for presence of an extension.\r\n     * @param name The name of the extension to check\r\n     * @returns A boolean indicating the presence of the given extension name in `extensionsUsed`\r\n     */\r\n    public isExtensionUsed(name: string): boolean {\r\n        return !!this._gltf.extensionsUsed && this._gltf.extensionsUsed.indexOf(name) !== -1;\r\n    }\r\n\r\n    /**\r\n     * Increments the indentation level and logs a message.\r\n     * @param message The message to log\r\n     */\r\n    public logOpen(message: string): void {\r\n        this._parent._logOpen(message);\r\n    }\r\n\r\n    /**\r\n     * Decrements the indentation level.\r\n     */\r\n    public logClose(): void {\r\n        this._parent._logClose();\r\n    }\r\n\r\n    /**\r\n     * Logs a message\r\n     * @param message The message to log\r\n     */\r\n    public log(message: string): void {\r\n        this._parent._log(message);\r\n    }\r\n\r\n    /**\r\n     * Starts a performance counter.\r\n     * @param counterName The name of the performance counter\r\n     */\r\n    public startPerformanceCounter(counterName: string): void {\r\n        this._parent._startPerformanceCounter(counterName);\r\n    }\r\n\r\n    /**\r\n     * Ends a performance counter.\r\n     * @param counterName The name of the performance counter\r\n     */\r\n    public endPerformanceCounter(counterName: string): void {\r\n        this._parent._endPerformanceCounter(counterName);\r\n    }\r\n}\r\n\r\nGLTFFileLoader._CreateGLTF2Loader = (parent) => new GLTFLoader(parent);\r\n", "import type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { Tuple } from \"core/types\";\r\n\r\n/**\r\n * Linearly transformed cosine textures that are used in the Area Lights shaders.\r\n */\r\nexport type ILTCTextures = {\r\n    /**\r\n     * Linearly transformed cosine texture BRDF Approximation.\r\n     */\r\n    LTC1: BaseTexture;\r\n\r\n    /**\r\n     * Linearly transformed cosine texture Fresnel Approximation.\r\n     */\r\n    LTC2: BaseTexture;\r\n};\r\n\r\n/**\r\n * Loads LTC texture data from Babylon.js CDN.\r\n * @returns Promise with data for LTC1 and LTC2 textures for area lights.\r\n */\r\nexport async function DecodeLTCTextureDataAsync(): Promise<Tuple<Uint16Array, 2>> {\r\n    const ltc1 = new Uint16Array(64 * 64 * 4);\r\n    const ltc2 = new Uint16Array(64 * 64 * 4);\r\n    const file = await Tools.LoadFileAsync(Tools.GetAssetUrl(\"https://assets.babylonjs.com/core/areaLights/areaLightsLTC.bin\"));\r\n    const ltcEncoded = new Uint16Array(file);\r\n\r\n    const pixelCount = ltcEncoded.length / 8;\r\n\r\n    for (let pixelIndex = 0; pixelIndex < pixelCount; pixelIndex++) {\r\n        ltc1[pixelIndex * 4] = ltcEncoded[pixelIndex * 8];\r\n        ltc1[pixelIndex * 4 + 1] = ltcEncoded[pixelIndex * 8 + 1];\r\n        ltc1[pixelIndex * 4 + 2] = ltcEncoded[pixelIndex * 8 + 2];\r\n        ltc1[pixelIndex * 4 + 3] = ltcEncoded[pixelIndex * 8 + 3];\r\n\r\n        ltc2[pixelIndex * 4] = ltcEncoded[pixelIndex * 8 + 4];\r\n        ltc2[pixelIndex * 4 + 1] = ltcEncoded[pixelIndex * 8 + 5];\r\n        ltc2[pixelIndex * 4 + 2] = ltcEncoded[pixelIndex * 8 + 6];\r\n        ltc2[pixelIndex * 4 + 3] = ltcEncoded[pixelIndex * 8 + 7];\r\n    }\r\n\r\n    return [ltc1, ltc2];\r\n}\r\n", "import type { Vector3 } from \"core/Maths/math.vector\";\r\nimport { RawTexture } from \"core/Materials/Textures/rawTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { Light } from \"core/Lights/light\";\r\nimport type { Effect } from \"core/Materials/effect\";\r\nimport type { ILTCTextures } from \"core/Lights/LTC/ltcTextureTool\";\r\nimport { DecodeLTCTextureDataAsync } from \"core/Lights/LTC/ltcTextureTool\";\r\nimport type { Scene } from \"core/scene\";\r\nimport { Logger } from \"core/Misc/logger\";\r\n\r\ndeclare module \"../scene\" {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    export interface Scene {\r\n        /**\r\n         * @internal\r\n         */\r\n        _ltcTextures?: ILTCTextures;\r\n    }\r\n}\r\n\r\nfunction CreateSceneLTCTextures(scene: Scene): void {\r\n    const useDelayedTextureLoading = scene.useDelayedTextureLoading;\r\n    scene.useDelayedTextureLoading = false;\r\n\r\n    const previousState = scene._blockEntityCollection;\r\n    scene._blockEntityCollection = false;\r\n\r\n    scene._ltcTextures = {\r\n        LTC1: RawTexture.CreateRGBATexture(null, 64, 64, scene.getEngine(), false, false, Constants.TEXTURE_LINEAR_LINEAR, Constants.TEXTURETYPE_HALF_FLOAT, 0, false, true),\r\n        LTC2: RawTexture.CreateRGBATexture(null, 64, 64, scene.getEngine(), false, false, Constants.TEXTURE_LINEAR_LINEAR, Constants.TEXTURETYPE_HALF_FLOAT, 0, false, true),\r\n    };\r\n\r\n    scene._blockEntityCollection = previousState;\r\n\r\n    scene._ltcTextures.LTC1.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n    scene._ltcTextures.LTC1.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n\r\n    scene._ltcTextures.LTC2.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n    scene._ltcTextures.LTC2.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n\r\n    scene.useDelayedTextureLoading = useDelayedTextureLoading;\r\n\r\n    DecodeLTCTextureDataAsync()\r\n        // eslint-disable-next-line github/no-then\r\n        .then((textureData) => {\r\n            if (scene._ltcTextures) {\r\n                const ltc1 = scene._ltcTextures?.LTC1 as RawTexture;\r\n                ltc1.update(textureData[0]);\r\n\r\n                const ltc2 = scene._ltcTextures?.LTC2 as RawTexture;\r\n                ltc2.update(textureData[1]);\r\n\r\n                scene.onDisposeObservable.addOnce(() => {\r\n                    scene._ltcTextures?.LTC1.dispose();\r\n                    scene._ltcTextures?.LTC2.dispose();\r\n                });\r\n            }\r\n        })\r\n        // eslint-disable-next-line github/no-then\r\n        .catch((error) => {\r\n            Logger.Error(`Area Light fail to get LTC textures data. Error: ${error}`);\r\n        });\r\n}\r\n\r\n/**\r\n * Abstract Area Light class that servers as parent for all Area Lights implementations.\r\n * The light is emitted from the area in the -Z direction.\r\n */\r\nexport abstract class AreaLight extends Light {\r\n    /**\r\n     * Area Light position.\r\n     */\r\n    public position: Vector3;\r\n\r\n    /**\r\n     * Creates a area light object.\r\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\r\n     * @param name The friendly name of the light\r\n     * @param position The position of the area light.\r\n     * @param scene The scene the light belongs to\r\n     */\r\n    constructor(name: string, position: Vector3, scene?: Scene) {\r\n        super(name, scene);\r\n        this.position = position;\r\n\r\n        if (!this._scene._ltcTextures) {\r\n            CreateSceneLTCTextures(this._scene);\r\n        }\r\n    }\r\n\r\n    public override transferTexturesToEffect(effect: Effect): Light {\r\n        if (this._scene._ltcTextures) {\r\n            effect.setTexture(\"areaLightsLTC1Sampler\", this._scene._ltcTextures.LTC1);\r\n            effect.setTexture(\"areaLightsLTC2Sampler\", this._scene._ltcTextures.LTC2);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Prepares the list of defines specific to the light type.\r\n     * @param defines the list of defines\r\n     * @param lightIndex defines the index of the light for the effect\r\n     */\r\n    public prepareLightSpecificDefines(defines: any, lightIndex: number): void {\r\n        defines[\"AREALIGHT\" + lightIndex] = true;\r\n        defines[\"AREALIGHTUSED\"] = true;\r\n    }\r\n\r\n    public override _isReady(): boolean {\r\n        if (this._scene._ltcTextures) {\r\n            return this._scene._ltcTextures.LTC1.isReady() && this._scene._ltcTextures.LTC2.isReady();\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n", "import { Vector3 } from \"../Maths/math.vector\";\nimport { Node } from \"../node\";\nimport { Light } from \"./light\";\nimport type { Effect } from \"core/Materials/effect\";\nimport { RegisterClass } from \"core/Misc/typeStore\";\nimport { serialize } from \"../Misc/decorators\";\nimport type { Scene } from \"core/scene\";\nimport { AreaLight } from \"./areaLight\";\n\nNode.AddNodeConstructor(\"Light_Type_4\", (name, scene) => {\n    return () => new RectAreaLight(name, Vector3.Zero(), 1, 1, scene);\n});\n\n/**\n * A rectangular area light defined by an unique point in world space, a width and a height.\n * The light is emitted from the rectangular area in the -Z direction.\n */\nexport class RectAreaLight extends AreaLight {\n    private readonly _width: Vector3;\n    private readonly _height: Vector3;\n    protected readonly _pointTransformedPosition: Vector3;\n    protected readonly _pointTransformedWidth: Vector3;\n    protected readonly _pointTransformedHeight: Vector3;\n\n    /**\n     * Rect Area Light width.\n     */\n    @serialize()\n    public get width(): number {\n        return this._width.x;\n    }\n    /**\n     * Rect Area Light width.\n     */\n    public set width(value: number) {\n        this._width.x = value;\n    }\n\n    /**\n     * Rect Area Light height.\n     */\n    @serialize()\n    public get height(): number {\n        return this._height.y;\n    }\n    /**\n     * Rect Area Light height.\n     */\n    public set height(value: number) {\n        this._height.y = value;\n    }\n\n    /**\n     * Creates a rectangular area light object.\n     * Documentation : https://doc.babylonjs.com/features/featuresDeepDive/lights/lights_introduction\n     * @param name The friendly name of the light\n     * @param position The position of the area light.\n     * @param width The width of the area light.\n     * @param height The height of the area light.\n     * @param scene The scene the light belongs to\n     */\n    constructor(name: string, position: Vector3, width: number, height: number, scene?: Scene) {\n        super(name, position, scene);\n        this._width = new Vector3(width, 0, 0);\n        this._height = new Vector3(0, height, 0);\n        this._pointTransformedPosition = Vector3.Zero();\n        this._pointTransformedWidth = Vector3.Zero();\n        this._pointTransformedHeight = Vector3.Zero();\n    }\n\n    /**\n     * Returns the string \"RectAreaLight\"\n     * @returns the class name\n     */\n    public override getClassName(): string {\n        return \"RectAreaLight\";\n    }\n\n    /**\n     * Returns the integer 4.\n     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\n     */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    public override getTypeID(): number {\n        return Light.LIGHTTYPEID_RECT_AREALIGHT;\n    }\n\n    protected _buildUniformLayout(): void {\n        this._uniformBuffer.addUniform(\"vLightData\", 4);\n        this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\n        this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\n        this._uniformBuffer.addUniform(\"vLightWidth\", 4);\n        this._uniformBuffer.addUniform(\"vLightHeight\", 4);\n        this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\n        this._uniformBuffer.addUniform(\"depthValues\", 2);\n        this._uniformBuffer.create();\n    }\n\n    protected _computeTransformedInformation(): boolean {\n        if (this.parent && this.parent.getWorldMatrix) {\n            Vector3.TransformCoordinatesToRef(this.position, this.parent.getWorldMatrix(), this._pointTransformedPosition);\n            Vector3.TransformNormalToRef(this._width, this.parent.getWorldMatrix(), this._pointTransformedWidth);\n            Vector3.TransformNormalToRef(this._height, this.parent.getWorldMatrix(), this._pointTransformedHeight);\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Sets the passed Effect \"effect\" with the PointLight transformed position (or position, if none) and passed name (string).\n     * @param effect The effect to update\n     * @param lightIndex The index of the light in the effect to update\n     * @returns The point light\n     */\n    public transferToEffect(effect: Effect, lightIndex: string): RectAreaLight {\n        if (this._computeTransformedInformation()) {\n            this._uniformBuffer.updateFloat4(\n                \"vLightData\",\n                this._pointTransformedPosition.x - this._scene.floatingOriginOffset.x,\n                this._pointTransformedPosition.y - this._scene.floatingOriginOffset.y,\n                this._pointTransformedPosition.z - this._scene.floatingOriginOffset.z,\n                0,\n                lightIndex\n            );\n            this._uniformBuffer.updateFloat4(\"vLightWidth\", this._pointTransformedWidth.x / 2, this._pointTransformedWidth.y / 2, this._pointTransformedWidth.z / 2, 0, lightIndex);\n            this._uniformBuffer.updateFloat4(\n                \"vLightHeight\",\n                this._pointTransformedHeight.x / 2,\n                this._pointTransformedHeight.y / 2,\n                this._pointTransformedHeight.z / 2,\n                0,\n                lightIndex\n            );\n        } else {\n            this._uniformBuffer.updateFloat4(\n                \"vLightData\",\n                this.position.x - this._scene.floatingOriginOffset.x,\n                this.position.y - this._scene.floatingOriginOffset.y,\n                this.position.z - this._scene.floatingOriginOffset.z,\n                0,\n                lightIndex\n            );\n            this._uniformBuffer.updateFloat4(\"vLightWidth\", this._width.x / 2, this._width.y / 2, this._width.z / 2, 0.0, lightIndex);\n            this._uniformBuffer.updateFloat4(\"vLightHeight\", this._height.x / 2, this._height.y / 2, this._height.z / 2, 0.0, lightIndex);\n        }\n        return this;\n    }\n\n    public transferToNodeMaterialEffect(effect: Effect, lightDataUniformName: string) {\n        if (this._computeTransformedInformation()) {\n            effect.setFloat3(\n                lightDataUniformName,\n                this._pointTransformedPosition.x - this._scene.floatingOriginOffset.x,\n                this._pointTransformedPosition.y - this._scene.floatingOriginOffset.y,\n                this._pointTransformedPosition.z - this._scene.floatingOriginOffset.z\n            );\n        } else {\n            effect.setFloat3(\n                lightDataUniformName,\n                this.position.x - this._scene.floatingOriginOffset.x,\n                this.position.y - this._scene.floatingOriginOffset.y,\n                this.position.z - this._scene.floatingOriginOffset.z\n            );\n        }\n        return this;\n    }\n}\n\n// Register Class Name\nRegisterClass(\"BABYLON.RectAreaLight\", RectAreaLight);\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { Vector3, Quaternion } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { Light } from \"core/Lights/light\";\r\nimport { RectAreaLight } from \"core/Lights/rectAreaLight\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { TransformNode as BabylonTransformNode } from \"core/Meshes/transformNode\";\r\n\r\nimport type { IEXTLightsArea_LightReference } from \"babylonjs-gltf2interface\";\r\nimport { EXTLightsArea_LightShape } from \"babylonjs-gltf2interface\";\r\nimport type { INode, IEXTLightsArea_Light } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"EXT_lights_area\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the EXT_lights_area extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"EXT_lights_area\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/EXT_lights_area/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class EXT_lights_area implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /** hidden */\r\n    private _loader: GLTFLoader;\r\n    private _lights?: IEXTLightsArea_Light[];\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n        delete this._lights;\r\n    }\r\n\r\n    /** @internal */\r\n    public onLoading(): void {\r\n        const extensions = this._loader.gltf.extensions;\r\n        if (extensions && extensions[this.name]) {\r\n            const extension = extensions[this.name];\r\n            this._lights = extension.lights;\r\n            ArrayItem.Assign(this._lights);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void): Nullable<Promise<TransformNode>> {\r\n        return GLTFLoader.LoadExtensionAsync<IEXTLightsArea_LightReference, TransformNode>(context, node, this.name, async (extensionContext, extension) => {\r\n            this._loader._allMaterialsDirtyRequired = true;\r\n\r\n            return await this._loader.loadNodeAsync(context, node, (babylonMesh) => {\r\n                let babylonLight: Light;\r\n\r\n                const light = ArrayItem.Get(extensionContext, this._lights, extension.light);\r\n                const name = light.name || babylonMesh.name;\r\n\r\n                this._loader.babylonScene._blockEntityCollection = !!this._loader._assetContainer;\r\n\r\n                switch (light.shape) {\r\n                    case EXTLightsArea_LightShape.RECT: {\r\n                        const width = light.width !== undefined ? light.width : 1.0;\r\n                        const height = light.height !== undefined ? light.height : 1.0;\r\n                        const babylonRectAreaLight = new RectAreaLight(name, Vector3.Zero(), width, height, this._loader.babylonScene);\r\n                        babylonLight = babylonRectAreaLight;\r\n                        break;\r\n                    }\r\n                    case EXTLightsArea_LightShape.DISK: {\r\n                        // For disk lights, we'll use RectAreaLight with equal width and height to approximate a square area\r\n                        // In the future, this could be extended to support actual disk area lights\r\n                        const radius = light.radius !== undefined ? light.radius : 0.5;\r\n                        const size = radius * 2; // Convert radius to square size\r\n                        const babylonRectAreaLight = new RectAreaLight(name, Vector3.Zero(), size, size, this._loader.babylonScene);\r\n                        babylonLight = babylonRectAreaLight;\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        this._loader.babylonScene._blockEntityCollection = false;\r\n                        throw new Error(`${extensionContext}: Invalid area light shape (${light.shape})`);\r\n                    }\r\n                }\r\n\r\n                babylonLight._parentContainer = this._loader._assetContainer;\r\n                this._loader.babylonScene._blockEntityCollection = false;\r\n                light._babylonLight = babylonLight;\r\n\r\n                babylonLight.falloffType = Light.FALLOFF_GLTF;\r\n                babylonLight.diffuse = light.color ? Color3.FromArray(light.color) : Color3.White();\r\n                babylonLight.intensity = light.intensity == undefined ? 1 : light.intensity;\r\n\r\n                // glTF EXT_lights_area specifies lights face down -Z, but Babylon.js area lights face down +Z\r\n                // Create a parent transform node with 180-degree rotation around Y axis to flip the direction\r\n                const lightParentNode = new BabylonTransformNode(`${name}_orientation`, this._loader.babylonScene);\r\n                lightParentNode.rotationQuaternion = Quaternion.RotationAxis(Vector3.Up(), Math.PI);\r\n                lightParentNode.parent = babylonMesh;\r\n                babylonLight.parent = lightParentNode;\r\n\r\n                this._loader._babylonLights.push(babylonLight);\r\n\r\n                GLTFLoader.AddPointerMetadata(babylonLight, extensionContext);\r\n\r\n                assign(babylonMesh);\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new EXT_lights_area(loader));\r\n", "import { serialize, serializeAsMatrix, serializeAsVector3 } from \"../../Misc/decorators\";\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"../../Maths/math.vector\";\r\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { Texture } from \"../../Materials/Textures/texture\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport { GetClass, RegisterClass } from \"../../Misc/typeStore\";\r\nimport type { AbstractEngine } from \"../../Engines/abstractEngine\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { SerializationHelper } from \"../../Misc/decorators.serialization\";\r\n\r\nimport \"../../Engines/AbstractEngine/abstractEngine.cubeTexture\";\r\n\r\n/**\r\n * Defines the available options when creating a cube texture\r\n */\r\nexport interface ICubeTextureCreationOptions {\r\n    /** Defines the suffixes add to the picture name in case six images are in use like _px.jpg */\r\n    extensions?: string[];\r\n\r\n    /** noMipmap defines if mipmaps should be created or not */\r\n    noMipmap?: boolean;\r\n\r\n    /** files defines the six files to load for the different faces in that order: px, py, pz, nx, ny, nz */\r\n    files?: string[];\r\n\r\n    /** buffer to load instead of loading the data from the url */\r\n    buffer?: ArrayBufferView;\r\n\r\n    /** onLoad defines a callback triggered at the end of the file load if no errors occurred */\r\n    onLoad?: () => void;\r\n\r\n    /** onError defines a callback triggered in case of error during load */\r\n    onError?: (message?: string, exception?: any) => void;\r\n\r\n    /** format defines the internal format to use for the texture once loaded */\r\n    format?: number;\r\n\r\n    /** prefiltered defines whether or not the texture is created from prefiltered data */\r\n    prefiltered?: boolean;\r\n\r\n    /** forcedExtension defines the extensions to use (force a special type of file to load) in case it is different from the file name */\r\n    forcedExtension?: any;\r\n\r\n    /** createPolynomials defines whether or not to create polynomial harmonics from the texture data if necessary */\r\n    createPolynomials?: boolean;\r\n\r\n    /** lodScale defines the scale applied to environment texture. This manages the range of LOD level used for IBL according to the roughness */\r\n    lodScale?: number;\r\n\r\n    /** lodOffset defines the offset applied to environment texture. This manages first LOD level used for IBL according to the roughness */\r\n    lodOffset?: number;\r\n\r\n    /** loaderOptions options to be passed to the loader */\r\n    loaderOptions?: any;\r\n\r\n    /** useSRGBBuffer Defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU) (default: false) */\r\n    useSRGBBuffer?: boolean;\r\n}\r\n\r\n// The default scale applied to environment texture. This manages the range of LOD level used for IBL according to the roughness\r\nconst DefaultLodScale = 0.8;\r\n\r\n/**\r\n * Class for creating a cube texture\r\n */\r\nexport class CubeTexture extends BaseTexture {\r\n    private _delayedOnLoad: Nullable<() => void>;\r\n    private _delayedOnError: Nullable<(message?: string, exception?: any) => void>;\r\n    private _lodScale: number;\r\n    private _lodOffset: number;\r\n\r\n    /**\r\n     * Observable triggered once the texture has been loaded.\r\n     */\r\n    public onLoadObservable: Observable<CubeTexture> = new Observable<CubeTexture>();\r\n\r\n    /**\r\n     * The url of the texture\r\n     */\r\n    @serialize()\r\n    public url: string;\r\n\r\n    /**\r\n     * Gets or sets the center of the bounding box associated with the cube texture.\r\n     * It must define where the camera used to render the texture was set\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#using-local-cubemap-mode\r\n     */\r\n    @serializeAsVector3()\r\n    public boundingBoxPosition = Vector3.Zero();\r\n\r\n    private _boundingBoxSize: Vector3;\r\n\r\n    /**\r\n     * Gets or sets the size of the bounding box associated with the cube texture\r\n     * When defined, the cubemap will switch to local mode\r\n     * @see https://community.arm.com/graphics/b/blog/posts/reflections-based-on-local-cubemaps-in-unity\r\n     * @example https://www.babylonjs-playground.com/#RNASML\r\n     */\r\n    public set boundingBoxSize(value: Vector3) {\r\n        if (this._boundingBoxSize && this._boundingBoxSize.equals(value)) {\r\n            return;\r\n        }\r\n        this._boundingBoxSize = value;\r\n        const scene = this.getScene();\r\n        if (scene) {\r\n            scene.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the bounding box size\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/using/reflectionTexture#using-local-cubemap-mode\r\n     */\r\n    @serializeAsVector3()\r\n    public get boundingBoxSize(): Vector3 {\r\n        return this._boundingBoxSize;\r\n    }\r\n\r\n    protected _rotationY: number = 0;\r\n\r\n    /**\r\n     * Sets texture matrix rotation angle around Y axis in radians.\r\n     */\r\n    @serialize(\"rotationY\")\r\n    public set rotationY(value: number) {\r\n        this._rotationY = value;\r\n        this.setReflectionTextureMatrix(Matrix.RotationY(this._rotationY));\r\n    }\r\n    /**\r\n     * Gets texture matrix rotation angle around Y axis radians.\r\n     */\r\n    public get rotationY(): number {\r\n        return this._rotationY;\r\n    }\r\n\r\n    /**\r\n     * Are mip maps generated for this texture or not.\r\n     */\r\n    public override get noMipmap(): boolean {\r\n        return this._noMipmap;\r\n    }\r\n\r\n    private _noMipmap: boolean;\r\n\r\n    /** @internal */\r\n    @serialize(\"files\")\r\n    public _files: Nullable<string[]> = null;\r\n\r\n    @serialize(\"forcedExtension\")\r\n    protected _forcedExtension: Nullable<string> = null;\r\n\r\n    /**\r\n     * Gets the forced extension (if any)\r\n     */\r\n    public get forcedExtension(): Nullable<string> {\r\n        return this._forcedExtension;\r\n    }\r\n\r\n    @serialize(\"extensions\")\r\n    private _extensions: Nullable<string[]> = null;\r\n\r\n    @serializeAsMatrix(\"textureMatrix\")\r\n    private _textureMatrix: Matrix;\r\n\r\n    @serializeAsMatrix(\"textureMatrixRefraction\")\r\n    private _textureMatrixRefraction: Matrix = new Matrix();\r\n\r\n    private _format: number;\r\n    private _createPolynomials: boolean;\r\n    private _loaderOptions: any;\r\n    private _useSRGBBuffer?: boolean;\r\n    private _buffer: Nullable<ArrayBufferView> = null;\r\n\r\n    /**\r\n     * Creates a cube texture from an array of image urls\r\n     * @param files defines an array of image urls\r\n     * @param scene defines the hosting scene\r\n     * @param noMipmap specifies if mip maps are not used\r\n     * @returns a cube texture\r\n     */\r\n    public static CreateFromImages(files: string[], scene: Scene, noMipmap?: boolean): CubeTexture {\r\n        let rootUrlKey = \"\";\r\n\r\n        for (const url of files) {\r\n            rootUrlKey += url;\r\n        }\r\n\r\n        return new CubeTexture(rootUrlKey, scene, null, noMipmap, files);\r\n    }\r\n\r\n    /**\r\n     * Creates and return a texture created from prefilterd data by tools like IBL Baker or Lys.\r\n     * @param url defines the url of the prefiltered texture\r\n     * @param scene defines the scene the texture is attached to\r\n     * @param forcedExtension defines the extension of the file if different from the url\r\n     * @param createPolynomials defines whether or not to create polynomial harmonics from the texture data if necessary\r\n     * @returns the prefiltered texture\r\n     */\r\n    public static CreateFromPrefilteredData(url: string, scene: Scene, forcedExtension: any = null, createPolynomials: boolean = true) {\r\n        const oldValue = scene.useDelayedTextureLoading;\r\n        scene.useDelayedTextureLoading = false;\r\n\r\n        const result = new CubeTexture(url, scene, null, false, null, null, null, undefined, true, forcedExtension, createPolynomials);\r\n\r\n        scene.useDelayedTextureLoading = oldValue;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a cube texture to use with reflection for instance. It can be based upon dds or six images as well\r\n     * as prefiltered data.\r\n     * @param rootUrl defines the url of the texture or the root name of the six images\r\n     * @param sceneOrEngine defines the scene or engine the texture is attached to\r\n     * @param extensionsOrOptions defines the suffixes add to the picture name in case six images are in use like _px.jpg or set of all options to create the cube texture\r\n     * @param noMipmap defines if mipmaps should be created or not\r\n     * @param files defines the six files to load for the different faces in that order: px, py, pz, nx, ny, nz\r\n     * @param onLoad defines a callback triggered at the end of the file load if no errors occurred\r\n     * @param onError defines a callback triggered in case of error during load\r\n     * @param format defines the internal format to use for the texture once loaded\r\n     * @param prefiltered defines whether or not the texture is created from prefiltered data\r\n     * @param forcedExtension defines the extensions to use (force a special type of file to load) in case it is different from the file name\r\n     * @param createPolynomials defines whether or not to create polynomial harmonics from the texture data if necessary\r\n     * @param lodScale defines the scale applied to environment texture. This manages the range of LOD level used for IBL according to the roughness\r\n     * @param lodOffset defines the offset applied to environment texture. This manages first LOD level used for IBL according to the roughness\r\n     * @param loaderOptions options to be passed to the loader\r\n     * @param useSRGBBuffer Defines if the texture must be loaded in a sRGB GPU buffer (if supported by the GPU) (default: false)\r\n     * @returns the cube texture\r\n     */\r\n    constructor(\r\n        rootUrl: string,\r\n        sceneOrEngine: Scene | AbstractEngine,\r\n        extensionsOrOptions: Nullable<string[] | ICubeTextureCreationOptions> = null,\r\n        noMipmap: boolean = false,\r\n        files: Nullable<string[]> = null,\r\n        onLoad: Nullable<() => void> = null,\r\n        onError: Nullable<(message?: string, exception?: any) => void> = null,\r\n        format: number = Constants.TEXTUREFORMAT_RGBA,\r\n        prefiltered = false,\r\n        forcedExtension: any = null,\r\n        createPolynomials: boolean = false,\r\n        lodScale: number = DefaultLodScale,\r\n        lodOffset: number = 0,\r\n        loaderOptions?: any,\r\n        useSRGBBuffer?: boolean\r\n    ) {\r\n        super(sceneOrEngine);\r\n\r\n        this.name = rootUrl;\r\n        this.url = rootUrl;\r\n        this._noMipmap = noMipmap;\r\n        this.hasAlpha = false;\r\n        this.isCube = true;\r\n        this._textureMatrix = Matrix.Identity();\r\n        this.coordinatesMode = Texture.CUBIC_MODE;\r\n\r\n        let extensions: Nullable<string[]> = null;\r\n        let buffer: Nullable<ArrayBufferView> = null;\r\n\r\n        if (extensionsOrOptions !== null && !Array.isArray(extensionsOrOptions)) {\r\n            extensions = extensionsOrOptions.extensions ?? null;\r\n            this._noMipmap = extensionsOrOptions.noMipmap ?? false;\r\n            files = extensionsOrOptions.files ?? null;\r\n            buffer = extensionsOrOptions.buffer ?? null;\r\n            this._format = extensionsOrOptions.format ?? Constants.TEXTUREFORMAT_RGBA;\r\n            prefiltered = extensionsOrOptions.prefiltered ?? false;\r\n            forcedExtension = extensionsOrOptions.forcedExtension ?? null;\r\n            this._createPolynomials = extensionsOrOptions.createPolynomials ?? false;\r\n            this._lodScale = extensionsOrOptions.lodScale ?? DefaultLodScale;\r\n            this._lodOffset = extensionsOrOptions.lodOffset ?? 0;\r\n            this._loaderOptions = extensionsOrOptions.loaderOptions;\r\n            this._useSRGBBuffer = extensionsOrOptions.useSRGBBuffer;\r\n            onLoad = extensionsOrOptions.onLoad ?? null;\r\n            onError = extensionsOrOptions.onError ?? null;\r\n        } else {\r\n            this._noMipmap = noMipmap;\r\n            this._format = format;\r\n            this._createPolynomials = createPolynomials;\r\n            extensions = extensionsOrOptions;\r\n            this._loaderOptions = loaderOptions;\r\n            this._useSRGBBuffer = useSRGBBuffer;\r\n            this._lodScale = lodScale;\r\n            this._lodOffset = lodOffset;\r\n        }\r\n\r\n        if (!rootUrl && !files) {\r\n            return;\r\n        }\r\n\r\n        this.updateURL(rootUrl, forcedExtension, onLoad, prefiltered, onError, extensions, this.getScene()?.useDelayedTextureLoading, files, buffer);\r\n    }\r\n\r\n    /**\r\n     * Get the current class name of the texture useful for serialization or dynamic coding.\r\n     * @returns \"CubeTexture\"\r\n     */\r\n    public override getClassName(): string {\r\n        return \"CubeTexture\";\r\n    }\r\n\r\n    /**\r\n     * Update the url (and optional buffer) of this texture if url was null during construction.\r\n     * @param url the url of the texture\r\n     * @param forcedExtension defines the extension to use\r\n     * @param onLoad callback called when the texture is loaded  (defaults to null)\r\n     * @param prefiltered Defines whether the updated texture is prefiltered or not\r\n     * @param onError callback called if there was an error during the loading process (defaults to null)\r\n     * @param extensions defines the suffixes add to the picture name in case six images are in use like _px.jpg...\r\n     * @param delayLoad defines if the texture should be loaded now (false by default)\r\n     * @param files defines the six files to load for the different faces in that order: px, py, pz, nx, ny, nz\r\n     * @param buffer the buffer to use instead of loading from the url\r\n     */\r\n    public updateURL(\r\n        url: string,\r\n        forcedExtension: Nullable<string> = null,\r\n        onLoad: Nullable<() => void> = null,\r\n        prefiltered: boolean = false,\r\n        onError: Nullable<(message?: string, exception?: any) => void> = null,\r\n        extensions: Nullable<string[]> = null,\r\n        delayLoad = false,\r\n        files: Nullable<string[]> = null,\r\n        buffer: Nullable<ArrayBufferView> = null\r\n    ): void {\r\n        if (!this.name || this.name.startsWith(\"data:\")) {\r\n            this.name = url;\r\n        }\r\n        this.url = url;\r\n\r\n        if (forcedExtension) {\r\n            this._forcedExtension = forcedExtension;\r\n        }\r\n\r\n        const lastDot = url.lastIndexOf(\".\");\r\n        const extension = forcedExtension ? forcedExtension : lastDot > -1 ? url.substring(lastDot).toLowerCase() : \"\";\r\n        const isDDS = extension.indexOf(\".dds\") === 0;\r\n        const isEnv = extension.indexOf(\".env\") === 0;\r\n        const isBasis = extension.indexOf(\".basis\") === 0;\r\n\r\n        if (isEnv) {\r\n            this.gammaSpace = false;\r\n            this._prefiltered = false;\r\n            this.anisotropicFilteringLevel = 1;\r\n        } else {\r\n            this._prefiltered = prefiltered;\r\n\r\n            if (prefiltered) {\r\n                this.gammaSpace = false;\r\n                this.anisotropicFilteringLevel = 1;\r\n            }\r\n        }\r\n\r\n        if (files) {\r\n            this._files = files;\r\n        } else {\r\n            if (!isBasis && !isEnv && !isDDS && !extensions) {\r\n                extensions = [\"_px.jpg\", \"_py.jpg\", \"_pz.jpg\", \"_nx.jpg\", \"_ny.jpg\", \"_nz.jpg\"];\r\n            }\r\n\r\n            this._files = this._files || [];\r\n            this._files.length = 0;\r\n\r\n            if (extensions) {\r\n                for (let index = 0; index < extensions.length; index++) {\r\n                    this._files.push(url + extensions[index]);\r\n                }\r\n                this._extensions = extensions;\r\n            }\r\n        }\r\n\r\n        this._buffer = buffer;\r\n\r\n        if (delayLoad) {\r\n            this.delayLoadState = Constants.DELAYLOADSTATE_NOTLOADED;\r\n            this._delayedOnLoad = onLoad;\r\n            this._delayedOnError = onError;\r\n        } else {\r\n            this._loadTexture(onLoad, onError);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delays loading of the cube texture\r\n     * @param forcedExtension defines the extension to use\r\n     */\r\n    public override delayLoad(forcedExtension?: string): void {\r\n        if (this.delayLoadState !== Constants.DELAYLOADSTATE_NOTLOADED) {\r\n            return;\r\n        }\r\n        if (forcedExtension) {\r\n            this._forcedExtension = forcedExtension;\r\n        }\r\n\r\n        this.delayLoadState = Constants.DELAYLOADSTATE_LOADED;\r\n        this._loadTexture(this._delayedOnLoad, this._delayedOnError);\r\n    }\r\n\r\n    /**\r\n     * Returns the reflection texture matrix\r\n     * @returns the reflection texture matrix\r\n     */\r\n    public override getReflectionTextureMatrix(): Matrix {\r\n        return this._textureMatrix;\r\n    }\r\n\r\n    /**\r\n     * Sets the reflection texture matrix\r\n     * @param value Reflection texture matrix\r\n     */\r\n    public setReflectionTextureMatrix(value: Matrix): void {\r\n        if (value.updateFlag === this._textureMatrix.updateFlag) {\r\n            return;\r\n        }\r\n\r\n        if (value.isIdentity() !== this._textureMatrix.isIdentity()) {\r\n            this.getScene()?.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag, (mat) => mat.getActiveTextures().indexOf(this) !== -1);\r\n        }\r\n\r\n        this._textureMatrix = value;\r\n\r\n        if (!this.getScene()?.useRightHandedSystem) {\r\n            return;\r\n        }\r\n\r\n        const scale = TmpVectors.Vector3[0];\r\n        const quat = TmpVectors.Quaternion[0];\r\n        const trans = TmpVectors.Vector3[1];\r\n\r\n        this._textureMatrix.decompose(scale, quat, trans);\r\n\r\n        quat.z *= -1; // these two operations correspond to negating the x and y euler angles\r\n        quat.w *= -1;\r\n\r\n        Matrix.ComposeToRef(scale, quat, trans, this._textureMatrixRefraction);\r\n    }\r\n\r\n    /**\r\n     * Gets a suitable rotate/transform matrix when the texture is used for refraction.\r\n     * There's a separate function from getReflectionTextureMatrix because refraction requires a special configuration of the matrix in right-handed mode.\r\n     * @returns The refraction matrix\r\n     */\r\n    public override getRefractionTextureMatrix(): Matrix {\r\n        return this.getScene()?.useRightHandedSystem ? this._textureMatrixRefraction : this._textureMatrix;\r\n    }\r\n\r\n    private _loadTexture(onLoad: Nullable<() => void> = null, onError: Nullable<(message?: string, exception?: any) => void> = null) {\r\n        const scene = this.getScene();\r\n        const oldTexture = this._texture;\r\n        this._texture = this._getFromCache(this.url, this._noMipmap, undefined, undefined, this._useSRGBBuffer, this.isCube);\r\n\r\n        const onLoadProcessing = () => {\r\n            this.onLoadObservable.notifyObservers(this);\r\n            if (oldTexture) {\r\n                oldTexture.dispose();\r\n                this.getScene()?.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n            }\r\n            if (onLoad) {\r\n                onLoad();\r\n            }\r\n        };\r\n\r\n        const errorHandler = (message?: string, exception?: any) => {\r\n            this._loadingError = true;\r\n            this._errorObject = { message, exception };\r\n            if (onError) {\r\n                onError(message, exception);\r\n            }\r\n            Texture.OnTextureLoadErrorObservable.notifyObservers(this);\r\n        };\r\n\r\n        if (!this._texture) {\r\n            if (this._prefiltered) {\r\n                this._texture = this._getEngine()!.createPrefilteredCubeTexture(\r\n                    this.url,\r\n                    scene,\r\n                    this._lodScale,\r\n                    this._lodOffset,\r\n                    onLoad,\r\n                    errorHandler,\r\n                    this._format,\r\n                    this._forcedExtension,\r\n                    this._createPolynomials\r\n                );\r\n            } else {\r\n                this._texture = this._getEngine()!.createCubeTexture(\r\n                    this.url,\r\n                    scene,\r\n                    this._files,\r\n                    this._noMipmap,\r\n                    onLoad,\r\n                    errorHandler,\r\n                    this._format,\r\n                    this._forcedExtension,\r\n                    false,\r\n                    this._lodScale,\r\n                    this._lodOffset,\r\n                    null,\r\n                    this._loaderOptions,\r\n                    !!this._useSRGBBuffer,\r\n                    this._buffer\r\n                );\r\n            }\r\n\r\n            this._texture?.onLoadedObservable.add(() => this.onLoadObservable.notifyObservers(this));\r\n        } else {\r\n            if (this._texture.isReady) {\r\n                Tools.SetImmediate(() => onLoadProcessing());\r\n            } else {\r\n                this._texture.onLoadedObservable.add(() => onLoadProcessing());\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parses text to create a cube texture\r\n     * @param parsedTexture define the serialized text to read from\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root url of the cube texture\r\n     * @returns a cube texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): CubeTexture {\r\n        const texture = SerializationHelper.Parse(\r\n            () => {\r\n                let prefiltered: boolean = false;\r\n                if (parsedTexture.prefiltered) {\r\n                    prefiltered = parsedTexture.prefiltered;\r\n                }\r\n                return new CubeTexture(\r\n                    rootUrl + (parsedTexture.url ?? parsedTexture.name),\r\n                    scene,\r\n                    parsedTexture.extensions,\r\n                    false,\r\n                    parsedTexture.files || null,\r\n                    null,\r\n                    null,\r\n                    undefined,\r\n                    prefiltered,\r\n                    parsedTexture.forcedExtension\r\n                );\r\n            },\r\n            parsedTexture,\r\n            scene\r\n        );\r\n\r\n        // Local Cubemaps\r\n        if (parsedTexture.boundingBoxPosition) {\r\n            texture.boundingBoxPosition = Vector3.FromArray(parsedTexture.boundingBoxPosition);\r\n        }\r\n        if (parsedTexture.boundingBoxSize) {\r\n            texture.boundingBoxSize = Vector3.FromArray(parsedTexture.boundingBoxSize);\r\n        }\r\n\r\n        // Animations\r\n        if (parsedTexture.animations) {\r\n            for (let animationIndex = 0; animationIndex < parsedTexture.animations.length; animationIndex++) {\r\n                const parsedAnimation = parsedTexture.animations[animationIndex];\r\n                const internalClass = GetClass(\"BABYLON.Animation\");\r\n                if (internalClass) {\r\n                    texture.animations.push(internalClass.Parse(parsedAnimation));\r\n                }\r\n            }\r\n        }\r\n\r\n        return texture;\r\n    }\r\n\r\n    /**\r\n     * Makes a clone, or deep copy, of the cube texture\r\n     * @returns a new cube texture\r\n     */\r\n    public override clone(): CubeTexture {\r\n        let uniqueId = 0;\r\n\r\n        const newCubeTexture = SerializationHelper.Clone(() => {\r\n            const cubeTexture = new CubeTexture(this.url, this.getScene() || this._getEngine()!, this._extensions, this._noMipmap, this._files);\r\n            uniqueId = cubeTexture.uniqueId;\r\n\r\n            return cubeTexture;\r\n        }, this);\r\n\r\n        newCubeTexture.uniqueId = uniqueId;\r\n\r\n        return newCubeTexture;\r\n    }\r\n}\r\n\r\nTexture._CubeTextureParser = CubeTexture.Parse;\r\n// Some exporters relies on Tools.Instantiate\r\nRegisterClass(\"BABYLON.CubeTexture\", CubeTexture);\r\n", "import { SerializationHelper } from \"../../Misc/decorators.serialization\";\r\nimport { _UpdateRGBDAsync as UpdateRGBDAsyncEnvTools } from \"../../Misc/environmentTextureTools\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { SphericalPolynomial } from \"../../Maths/sphericalPolynomial\";\r\nimport { InternalTextureSource } from \"./internalTexture\";\r\nimport { CubeTexture } from \"./cubeTexture\";\r\nimport { Constants } from \"../../Engines/constants\";\r\n\r\n/**\r\n * Raw cube texture where the raw buffers are passed in\r\n */\r\nexport class RawCubeTexture extends CubeTexture {\r\n    /**\r\n     * Creates a cube texture where the raw buffers are passed in.\r\n     * @param scene defines the scene the texture is attached to\r\n     * @param data defines the array of data to use to create each face\r\n     * @param size defines the size of the textures\r\n     * @param format defines the format of the data\r\n     * @param type defines the type of the data (like Engine.TEXTURETYPE_UNSIGNED_BYTE)\r\n     * @param generateMipMaps  defines if the engine should generate the mip levels\r\n     * @param invertY defines if data must be stored with Y axis inverted\r\n     * @param samplingMode defines the required sampling mode (like Texture.NEAREST_SAMPLINGMODE)\r\n     * @param compression defines the compression used (null by default)\r\n     */\r\n    constructor(\r\n        scene: Scene,\r\n        data: Nullable<ArrayBufferView[]>,\r\n        size: number,\r\n        format: number = Constants.TEXTUREFORMAT_RGBA,\r\n        type: number = Constants.TEXTURETYPE_UNSIGNED_BYTE,\r\n        generateMipMaps: boolean = false,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        compression: Nullable<string> = null\r\n    ) {\r\n        super(\"\", scene);\r\n\r\n        this._texture = scene.getEngine().createRawCubeTexture(data, size, format, type, generateMipMaps, invertY, samplingMode, compression);\r\n    }\r\n\r\n    /**\r\n     * Updates the raw cube texture.\r\n     * @param data defines the data to store\r\n     * @param format defines the data format\r\n     * @param type defines the type fo the data (Engine.TEXTURETYPE_UNSIGNED_BYTE by default)\r\n     * @param invertY defines if data must be stored with Y axis inverted\r\n     * @param compression defines the compression used (null by default)\r\n     */\r\n    public update(data: ArrayBufferView[], format: number, type: number, invertY: boolean, compression: Nullable<string> = null): void {\r\n        this._texture!.getEngine().updateRawCubeTexture(this._texture!, data, format, type, invertY, compression);\r\n    }\r\n\r\n    /**\r\n     * Updates a raw cube texture with RGBD encoded data.\r\n     * @param data defines the array of data [mipmap][face] to use to create each face\r\n     * @param sphericalPolynomial defines the spherical polynomial for irradiance\r\n     * @param lodScale defines the scale applied to environment texture. This manages the range of LOD level used for IBL according to the roughness\r\n     * @param lodOffset defines the offset applied to environment texture. This manages first LOD level used for IBL according to the roughness\r\n     * @returns a promise that resolves when the operation is complete\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    public updateRGBDAsync(data: ArrayBufferView[][], sphericalPolynomial: Nullable<SphericalPolynomial> = null, lodScale: number = 0.8, lodOffset: number = 0): Promise<void> {\r\n        // eslint-disable-next-line github/no-then\r\n        return UpdateRGBDAsyncEnvTools(this._texture!, data, sphericalPolynomial, lodScale, lodOffset).then(() => {});\r\n    }\r\n\r\n    /**\r\n     * Clones the raw cube texture.\r\n     * @returns a new cube texture\r\n     */\r\n    public override clone(): CubeTexture {\r\n        return SerializationHelper.Clone(() => {\r\n            const scene = this.getScene()!;\r\n            const internalTexture = this._texture!;\r\n\r\n            const texture = new RawCubeTexture(\r\n                scene,\r\n                internalTexture._bufferViewArray,\r\n                internalTexture.width,\r\n                internalTexture.format,\r\n                internalTexture.type,\r\n                internalTexture.generateMipMaps,\r\n                internalTexture.invertY,\r\n                internalTexture.samplingMode,\r\n                internalTexture._compression\r\n            );\r\n\r\n            if (internalTexture.source === InternalTextureSource.CubeRawRGBD) {\r\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                texture.updateRGBDAsync(\r\n                    internalTexture._bufferViewArrayArray!,\r\n                    internalTexture._sphericalPolynomial,\r\n                    internalTexture._lodGenerationScale,\r\n                    internalTexture._lodGenerationOffset\r\n                );\r\n            }\r\n\r\n            return texture;\r\n        }, this);\r\n    }\r\n}\r\n", "import type { Nullable } from \"core/types\";\r\nimport { SphericalHarmonics, SphericalPolynomial } from \"core/Maths/sphericalPolynomial\";\r\nimport { Quaternion, Matrix } from \"core/Maths/math.vector\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { RawCubeTexture } from \"core/Materials/Textures/rawCubeTexture\";\r\n\r\nimport type { IEXTLightsImageBased_LightReferenceImageBased, IEXTLightsImageBased_LightImageBased, IEXTLightsImageBased } from \"babylonjs-gltf2interface\";\r\nimport type { IScene } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"EXT_lights_image_based\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the EXT_lights_image_based extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"EXT_lights_image_based\"]: {};\r\n    }\r\n}\r\n\r\ndeclare module \"babylonjs-gltf2interface\" {\r\n    /** @internal */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    interface IEXTLightsImageBased_LightImageBased {\r\n        _babylonTexture?: BaseTexture;\r\n        _loaded?: Promise<void>;\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/EXT_lights_image_based/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class EXT_lights_image_based implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n    private _lights?: IEXTLightsImageBased_LightImageBased[];\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n        delete this._lights;\r\n    }\r\n\r\n    /** @internal */\r\n    public onLoading(): void {\r\n        const extensions = this._loader.gltf.extensions;\r\n        if (extensions && extensions[this.name]) {\r\n            const extension = extensions[this.name] as IEXTLightsImageBased;\r\n            this._lights = extension.lights;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadSceneAsync(context: string, scene: IScene): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IEXTLightsImageBased_LightReferenceImageBased>(context, scene, this.name, async (extensionContext, extension) => {\r\n            this._loader._allMaterialsDirtyRequired = true;\r\n\r\n            const promises = new Array<Promise<any>>();\r\n\r\n            promises.push(this._loader.loadSceneAsync(context, scene));\r\n\r\n            this._loader.logOpen(`${extensionContext}`);\r\n\r\n            const light = ArrayItem.Get(`${extensionContext}/light`, this._lights, extension.light);\r\n            promises.push(\r\n                // eslint-disable-next-line github/no-then\r\n                this._loadLightAsync(`/extensions/${this.name}/lights/${extension.light}`, light).then((texture) => {\r\n                    this._loader.babylonScene.environmentTexture = texture;\r\n                })\r\n            );\r\n\r\n            this._loader.logClose();\r\n\r\n            // eslint-disable-next-line github/no-then\r\n            return await Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadLightAsync(context: string, light: IEXTLightsImageBased_LightImageBased): Promise<BaseTexture> {\r\n        if (!light._loaded) {\r\n            const promises = new Array<Promise<any>>();\r\n\r\n            this._loader.logOpen(`${context}`);\r\n\r\n            const imageData = new Array<Array<ArrayBufferView>>(light.specularImages.length);\r\n            for (let mipmap = 0; mipmap < light.specularImages.length; mipmap++) {\r\n                const faces = light.specularImages[mipmap];\r\n                imageData[mipmap] = new Array<ArrayBufferView>(faces.length);\r\n                for (let face = 0; face < faces.length; face++) {\r\n                    const specularImageContext = `${context}/specularImages/${mipmap}/${face}`;\r\n                    this._loader.logOpen(`${specularImageContext}`);\r\n\r\n                    const index = faces[face];\r\n                    const image = ArrayItem.Get(specularImageContext, this._loader.gltf.images, index);\r\n                    promises.push(\r\n                        // eslint-disable-next-line github/no-then\r\n                        this._loader.loadImageAsync(`/images/${index}`, image).then((data) => {\r\n                            imageData[mipmap][face] = data;\r\n                        })\r\n                    );\r\n\r\n                    this._loader.logClose();\r\n                }\r\n            }\r\n\r\n            this._loader.logClose();\r\n\r\n            // eslint-disable-next-line github/no-then\r\n            light._loaded = Promise.all(promises).then(async () => {\r\n                const babylonTexture = new RawCubeTexture(this._loader.babylonScene, null, light.specularImageSize);\r\n                babylonTexture.name = light.name || \"environment\";\r\n                light._babylonTexture = babylonTexture;\r\n\r\n                if (light.intensity != undefined) {\r\n                    babylonTexture.level = light.intensity;\r\n                }\r\n\r\n                if (light.rotation) {\r\n                    let rotation = Quaternion.FromArray(light.rotation);\r\n\r\n                    // Invert the rotation so that positive rotation is counter-clockwise.\r\n                    if (!this._loader.babylonScene.useRightHandedSystem) {\r\n                        rotation = Quaternion.Inverse(rotation);\r\n                    }\r\n\r\n                    Matrix.FromQuaternionToRef(rotation, babylonTexture.getReflectionTextureMatrix());\r\n                }\r\n\r\n                if (!light.irradianceCoefficients) {\r\n                    throw new Error(`${context}: Irradiance coefficients are missing`);\r\n                }\r\n\r\n                const sphericalHarmonics = SphericalHarmonics.FromArray(light.irradianceCoefficients);\r\n                sphericalHarmonics.scaleInPlace(light.intensity);\r\n\r\n                sphericalHarmonics.convertIrradianceToLambertianRadiance();\r\n                const sphericalPolynomial = SphericalPolynomial.FromHarmonics(sphericalHarmonics);\r\n\r\n                // Compute the lod generation scale to fit exactly to the number of levels available.\r\n                const lodGenerationScale = (imageData.length - 1) / Math.log2(light.specularImageSize);\r\n                return await babylonTexture.updateRGBDAsync(imageData, sphericalPolynomial, lodGenerationScale);\r\n            });\r\n        }\r\n\r\n        // eslint-disable-next-line github/no-then\r\n        return light._loaded.then(() => {\r\n            return light._babylonTexture!;\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new EXT_lights_image_based(loader));\r\n", "import type { Nullable, DeepImmutableObject } from \"../types\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { VertexBuffer, Buffer } from \"../Buffers/buffer\";\r\nimport { Matrix, Vector3, TmpVectors } from \"../Maths/math.vector\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { BoundingInfo } from \"core/Culling/boundingInfo\";\r\n\r\ndeclare module \"./mesh\" {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    export interface Mesh {\r\n        /**\r\n         * Gets or sets a boolean defining if we want picking to pick thin instances as well\r\n         */\r\n        thinInstanceEnablePicking: boolean;\r\n\r\n        /**\r\n         * Indicates that a buffer created as static should be recreated if the buffer is updated (by calling thinInstanceSetMatrixAt or thinInstanceSetAttributeAt, for eg.)\r\n         * If this flag is false (the default behavior), a buffer created as \"static\" won't show any update done to it, and will stay the same as it was created.\r\n         * Note however that recreating a buffer each time there's a change will have some performance cost, that's why it is set to false by default.\r\n         * You should set this flag to true only if your static buffers should change infrequently. If they change frequently, you should create your buffers as \"dynamic\" instead.\r\n         */\r\n        thinInstanceAllowAutomaticStaticBufferRecreation: boolean;\r\n\r\n        /**\r\n         * Creates a new thin instance\r\n         * @param matrix the matrix or array of matrices (position, rotation, scale) of the thin instance(s) to create\r\n         * @param refresh true to refresh the underlying gpu buffer (default: true). If you do multiple calls to this method in a row, set refresh to true only for the last call to save performance\r\n         * @returns the thin instance index number. If you pass an array of matrices, other instance indexes are index+1, index+2, etc\r\n         */\r\n        thinInstanceAdd(matrix: DeepImmutableObject<Matrix> | Array<DeepImmutableObject<Matrix>>, refresh?: boolean): number;\r\n\r\n        /**\r\n         * Adds the transformation (matrix) of the current mesh as a thin instance\r\n         * @param refresh true to refresh the underlying gpu buffer (default: true). If you do multiple calls to this method in a row, set refresh to true only for the last call to save performance\r\n         * @returns the thin instance index number\r\n         */\r\n        thinInstanceAddSelf(refresh?: boolean): number;\r\n\r\n        /**\r\n         * Registers a custom attribute to be used with thin instances\r\n         * @param kind name of the attribute\r\n         * @param stride size in floats of the attribute\r\n         */\r\n        thinInstanceRegisterAttribute(kind: string, stride: number): void;\r\n\r\n        /**\r\n         * Sets the matrix of a thin instance\r\n         * @param index index of the thin instance\r\n         * @param matrix matrix to set\r\n         * @param refresh true to refresh the underlying gpu buffer (default: true). If you do multiple calls to this method in a row, set refresh to true only for the last call to save performance\r\n         */\r\n        thinInstanceSetMatrixAt(index: number, matrix: DeepImmutableObject<Matrix>, refresh?: boolean): void;\r\n\r\n        /**\r\n         * Sets the value of a custom attribute for a thin instance\r\n         * @param kind name of the attribute\r\n         * @param index index of the thin instance\r\n         * @param value value to set\r\n         * @param refresh true to refresh the underlying gpu buffer (default: true). If you do multiple calls to this method in a row, set refresh to true only for the last call to save performance\r\n         */\r\n        thinInstanceSetAttributeAt(kind: string, index: number, value: Array<number>, refresh?: boolean): void;\r\n\r\n        /**\r\n         * Gets / sets the number of thin instances to display. Note that you can't set a number higher than what the underlying buffer can handle.\r\n         */\r\n        thinInstanceCount: number;\r\n\r\n        /**\r\n         * Sets a buffer to be used with thin instances. This method is a faster way to setup multiple instances than calling thinInstanceAdd repeatedly\r\n         * @param kind name of the attribute. Use \"matrix\" to setup the buffer of matrices\r\n         * @param buffer buffer to set\r\n         * @param stride size in floats of each value of the buffer\r\n         * @param staticBuffer indicates that the buffer is static, so that you won't change it after it is set (better performances - true by default)\r\n         */\r\n        thinInstanceSetBuffer(kind: string, buffer: Nullable<Float32Array>, stride?: number, staticBuffer?: boolean): void;\r\n\r\n        /**\r\n         * Gets the list of world matrices\r\n         * @returns an array containing all the world matrices from the thin instances\r\n         */\r\n        thinInstanceGetWorldMatrices(): Matrix[];\r\n\r\n        /**\r\n         * Synchronize the gpu buffers with a thin instance buffer. Call this method if you update later on the buffers passed to thinInstanceSetBuffer\r\n         * @param kind name of the attribute to update. Use \"matrix\" to update the buffer of matrices\r\n         */\r\n        thinInstanceBufferUpdated(kind: string): void;\r\n\r\n        /**\r\n         * Applies a partial update to a buffer directly on the GPU\r\n         * Note that the buffer located on the CPU is NOT updated! It's up to you to update it (or not) with the same data you pass to this method\r\n         * @param kind name of the attribute to update. Use \"matrix\" to update the buffer of matrices\r\n         * @param data the data to set in the GPU buffer\r\n         * @param offset the offset in the GPU buffer where to update the data\r\n         */\r\n        thinInstancePartialBufferUpdate(kind: string, data: Float32Array, offset: number): void;\r\n\r\n        /**\r\n         * Refreshes the bounding info, taking into account all the thin instances defined\r\n         * @param forceRefreshParentInfo true to force recomputing the mesh bounding info and use it to compute the aggregated bounding info\r\n         * @param applySkeleton defines whether to apply the skeleton before computing the bounding info\r\n         * @param applyMorph  defines whether to apply the morph target before computing the bounding info\r\n         */\r\n        thinInstanceRefreshBoundingInfo(forceRefreshParentInfo?: boolean, applySkeleton?: boolean, applyMorph?: boolean): void;\r\n\r\n        /** @internal */\r\n        _thinInstanceInitializeUserStorage(): void;\r\n\r\n        /** @internal */\r\n        _thinInstanceUpdateBufferSize(kind: string, numInstances?: number): void;\r\n\r\n        /** @internal */\r\n        _thinInstanceCreateMatrixBuffer(kind: string, buffer: Nullable<Float32Array>, staticBuffer: boolean): Buffer;\r\n\r\n        /** @internal */\r\n        _thinInstanceRecreateBuffer(kind: string, staticBuffer?: boolean): void;\r\n\r\n        /** @internal */\r\n        _userThinInstanceBuffersStorage: {\r\n            data: { [key: string]: Float32Array };\r\n            sizes: { [key: string]: number };\r\n            vertexBuffers: { [key: string]: Nullable<VertexBuffer> };\r\n            strides: { [key: string]: number };\r\n        };\r\n    }\r\n}\r\n\r\nMesh.prototype.thinInstanceAdd = function (matrix: DeepImmutableObject<Matrix> | Array<DeepImmutableObject<Matrix>>, refresh: boolean = true): number {\r\n    if (!this.getScene().getEngine().getCaps().instancedArrays) {\r\n        Logger.Error(\"Thin Instances are not supported on this device as Instanced Array extension not supported\");\r\n        return -1;\r\n    }\r\n\r\n    this._thinInstanceUpdateBufferSize(\"matrix\", Array.isArray(matrix) ? matrix.length : 1);\r\n\r\n    const index = this._thinInstanceDataStorage.instancesCount;\r\n\r\n    if (Array.isArray(matrix)) {\r\n        for (let i = 0; i < matrix.length; ++i) {\r\n            this.thinInstanceSetMatrixAt(this._thinInstanceDataStorage.instancesCount++, matrix[i], i === matrix.length - 1 && refresh);\r\n        }\r\n    } else {\r\n        this.thinInstanceSetMatrixAt(this._thinInstanceDataStorage.instancesCount++, matrix, refresh);\r\n    }\r\n\r\n    return index;\r\n};\r\n\r\nMesh.prototype.thinInstanceAddSelf = function (refresh: boolean = true): number {\r\n    return this.thinInstanceAdd(Matrix.IdentityReadOnly, refresh);\r\n};\r\n\r\nMesh.prototype.thinInstanceRegisterAttribute = function (kind: string, stride: number): void {\r\n    // preserve backward compatibility\r\n    if (kind === VertexBuffer.ColorKind) {\r\n        kind = VertexBuffer.ColorInstanceKind;\r\n    }\r\n\r\n    this.removeVerticesData(kind);\r\n\r\n    this._thinInstanceInitializeUserStorage();\r\n\r\n    this._userThinInstanceBuffersStorage.strides[kind] = stride;\r\n    this._userThinInstanceBuffersStorage.sizes[kind] = stride * Math.max(32, this._thinInstanceDataStorage.instancesCount); // Initial size\r\n    this._userThinInstanceBuffersStorage.data[kind] = new Float32Array(this._userThinInstanceBuffersStorage.sizes[kind]);\r\n    this._userThinInstanceBuffersStorage.vertexBuffers[kind] = new VertexBuffer(this.getEngine(), this._userThinInstanceBuffersStorage.data[kind], kind, true, false, stride, true);\r\n\r\n    this.setVerticesBuffer(this._userThinInstanceBuffersStorage.vertexBuffers[kind]!);\r\n};\r\n\r\nMesh.prototype.thinInstanceSetMatrixAt = function (index: number, matrix: DeepImmutableObject<Matrix>, refresh: boolean = true): boolean {\r\n    if (!this._thinInstanceDataStorage.matrixData || index >= this._thinInstanceDataStorage.instancesCount) {\r\n        return false;\r\n    }\r\n\r\n    const matrixData = this._thinInstanceDataStorage.matrixData;\r\n\r\n    matrix.copyToArray(matrixData, index * 16);\r\n\r\n    if (this._thinInstanceDataStorage.worldMatrices) {\r\n        this._thinInstanceDataStorage.worldMatrices[index] = matrix as Matrix;\r\n    }\r\n\r\n    if (refresh) {\r\n        this.thinInstanceBufferUpdated(\"matrix\");\r\n\r\n        if (!this.doNotSyncBoundingInfo) {\r\n            this.thinInstanceRefreshBoundingInfo(false);\r\n        }\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nMesh.prototype.thinInstanceSetAttributeAt = function (kind: string, index: number, value: Array<number>, refresh: boolean = true): boolean {\r\n    // preserve backward compatibility\r\n    if (kind === VertexBuffer.ColorKind) {\r\n        kind = VertexBuffer.ColorInstanceKind;\r\n    }\r\n\r\n    if (!this._userThinInstanceBuffersStorage || !this._userThinInstanceBuffersStorage.data[kind] || index >= this._thinInstanceDataStorage.instancesCount) {\r\n        return false;\r\n    }\r\n\r\n    this._thinInstanceUpdateBufferSize(kind, 0); // make sur the buffer for the kind attribute is big enough\r\n\r\n    this._userThinInstanceBuffersStorage.data[kind].set(value, index * this._userThinInstanceBuffersStorage.strides[kind]);\r\n\r\n    if (refresh) {\r\n        this.thinInstanceBufferUpdated(kind);\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nObject.defineProperty(Mesh.prototype, \"thinInstanceCount\", {\r\n    get: function (this: Mesh) {\r\n        return this._thinInstanceDataStorage.instancesCount;\r\n    },\r\n    set: function (this: Mesh, value: number) {\r\n        const matrixData = this._thinInstanceDataStorage.matrixData ?? this.source?._thinInstanceDataStorage.matrixData;\r\n        const numMaxInstances = matrixData ? matrixData.length / 16 : 0;\r\n\r\n        if (value <= numMaxInstances) {\r\n            this._thinInstanceDataStorage.instancesCount = value;\r\n        }\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nMesh.prototype._thinInstanceCreateMatrixBuffer = function (kind: string, buffer: Float32Array, staticBuffer: boolean = true): Buffer {\r\n    const matrixBuffer = new Buffer(this.getEngine(), buffer, !staticBuffer, 16, false, true);\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n        this.setVerticesBuffer(matrixBuffer.createVertexBuffer(kind + i, i * 4, 4));\r\n    }\r\n\r\n    return matrixBuffer;\r\n};\r\n\r\nMesh.prototype.thinInstanceSetBuffer = function (kind: string, buffer: Nullable<Float32Array>, stride: number = 0, staticBuffer: boolean = true): void {\r\n    stride = stride || 16;\r\n\r\n    if (kind === \"matrix\") {\r\n        this._thinInstanceDataStorage.matrixBuffer?.dispose();\r\n        this._thinInstanceDataStorage.matrixBuffer = null;\r\n        this._thinInstanceDataStorage.matrixBufferSize = buffer ? buffer.length : 32 * stride;\r\n        this._thinInstanceDataStorage.matrixData = buffer;\r\n        this._thinInstanceDataStorage.worldMatrices = null;\r\n\r\n        if (buffer !== null) {\r\n            this._thinInstanceDataStorage.instancesCount = buffer.length / stride;\r\n            this._thinInstanceDataStorage.matrixBuffer = this._thinInstanceCreateMatrixBuffer(\"world\", buffer, staticBuffer);\r\n\r\n            if (!this.doNotSyncBoundingInfo) {\r\n                this.thinInstanceRefreshBoundingInfo(false);\r\n            }\r\n        } else {\r\n            this._thinInstanceDataStorage.instancesCount = 0;\r\n            if (!this.doNotSyncBoundingInfo) {\r\n                // mesh has no more thin instances, so need to recompute the bounding box because it's the regular mesh that will now be displayed\r\n                this.refreshBoundingInfo();\r\n            }\r\n        }\r\n    } else if (kind === \"previousMatrix\") {\r\n        this._thinInstanceDataStorage.previousMatrixBuffer?.dispose();\r\n        this._thinInstanceDataStorage.previousMatrixBuffer = null;\r\n        this._thinInstanceDataStorage.previousMatrixData = buffer;\r\n        if (buffer !== null) {\r\n            this._thinInstanceDataStorage.previousMatrixBuffer = this._thinInstanceCreateMatrixBuffer(\"previousWorld\", buffer, staticBuffer);\r\n        }\r\n    } else {\r\n        // color for instanced mesh is ColorInstanceKind and not ColorKind because of native that needs to do the differenciation\r\n        // hot switching kind here to preserve backward compatibility\r\n        if (kind === VertexBuffer.ColorKind) {\r\n            kind = VertexBuffer.ColorInstanceKind;\r\n        }\r\n\r\n        if (buffer === null) {\r\n            if (this._userThinInstanceBuffersStorage?.data[kind]) {\r\n                this.removeVerticesData(kind);\r\n                delete this._userThinInstanceBuffersStorage.data[kind];\r\n                delete this._userThinInstanceBuffersStorage.strides[kind];\r\n                delete this._userThinInstanceBuffersStorage.sizes[kind];\r\n                delete this._userThinInstanceBuffersStorage.vertexBuffers[kind];\r\n            }\r\n        } else {\r\n            this._thinInstanceInitializeUserStorage();\r\n\r\n            this._userThinInstanceBuffersStorage.data[kind] = buffer;\r\n            this._userThinInstanceBuffersStorage.strides[kind] = stride;\r\n            this._userThinInstanceBuffersStorage.sizes[kind] = buffer.length;\r\n            this._userThinInstanceBuffersStorage.vertexBuffers[kind] = new VertexBuffer(this.getEngine(), buffer, kind, !staticBuffer, false, stride, true);\r\n\r\n            this.setVerticesBuffer(this._userThinInstanceBuffersStorage.vertexBuffers[kind]!);\r\n        }\r\n    }\r\n};\r\n\r\nMesh.prototype.thinInstanceBufferUpdated = function (kind: string): void {\r\n    if (kind === \"matrix\") {\r\n        if (this.thinInstanceAllowAutomaticStaticBufferRecreation && this._thinInstanceDataStorage.matrixBuffer && !this._thinInstanceDataStorage.matrixBuffer.isUpdatable()) {\r\n            this._thinInstanceRecreateBuffer(kind);\r\n        }\r\n        this._thinInstanceDataStorage.matrixBuffer?.updateDirectly(this._thinInstanceDataStorage.matrixData!, 0, this._thinInstanceDataStorage.instancesCount);\r\n    } else if (kind === \"previousMatrix\") {\r\n        if (\r\n            this.thinInstanceAllowAutomaticStaticBufferRecreation &&\r\n            this._thinInstanceDataStorage.previousMatrixBuffer &&\r\n            !this._thinInstanceDataStorage.previousMatrixBuffer.isUpdatable()\r\n        ) {\r\n            this._thinInstanceRecreateBuffer(kind);\r\n        }\r\n        this._thinInstanceDataStorage.previousMatrixBuffer?.updateDirectly(this._thinInstanceDataStorage.previousMatrixData!, 0, this._thinInstanceDataStorage.instancesCount);\r\n    } else {\r\n        // preserve backward compatibility\r\n        if (kind === VertexBuffer.ColorKind) {\r\n            kind = VertexBuffer.ColorInstanceKind;\r\n        }\r\n\r\n        if (this._userThinInstanceBuffersStorage?.vertexBuffers[kind]) {\r\n            if (this.thinInstanceAllowAutomaticStaticBufferRecreation && !this._userThinInstanceBuffersStorage.vertexBuffers[kind]!.isUpdatable()) {\r\n                this._thinInstanceRecreateBuffer(kind);\r\n            }\r\n            this._userThinInstanceBuffersStorage.vertexBuffers[kind]!.updateDirectly(this._userThinInstanceBuffersStorage.data[kind], 0);\r\n        }\r\n    }\r\n};\r\n\r\nMesh.prototype.thinInstancePartialBufferUpdate = function (kind: string, data: Float32Array, offset: number): void {\r\n    if (kind === \"matrix\") {\r\n        if (this._thinInstanceDataStorage.matrixBuffer) {\r\n            this._thinInstanceDataStorage.matrixBuffer.updateDirectly(data, offset);\r\n        }\r\n    } else {\r\n        // preserve backward compatibility\r\n        if (kind === VertexBuffer.ColorKind) {\r\n            kind = VertexBuffer.ColorInstanceKind;\r\n        }\r\n\r\n        if (this._userThinInstanceBuffersStorage?.vertexBuffers[kind]) {\r\n            this._userThinInstanceBuffersStorage.vertexBuffers[kind]!.updateDirectly(data, offset);\r\n        }\r\n    }\r\n};\r\n\r\nMesh.prototype.thinInstanceGetWorldMatrices = function (): Matrix[] {\r\n    if (!this._thinInstanceDataStorage.matrixData || !this._thinInstanceDataStorage.matrixBuffer) {\r\n        return [];\r\n    }\r\n    const matrixData = this._thinInstanceDataStorage.matrixData;\r\n\r\n    if (!this._thinInstanceDataStorage.worldMatrices) {\r\n        this._thinInstanceDataStorage.worldMatrices = [] as Matrix[];\r\n\r\n        for (let i = 0; i < this._thinInstanceDataStorage.instancesCount; ++i) {\r\n            this._thinInstanceDataStorage.worldMatrices[i] = Matrix.FromArray(matrixData, i * 16);\r\n        }\r\n    }\r\n\r\n    return this._thinInstanceDataStorage.worldMatrices;\r\n};\r\n\r\nMesh.prototype.thinInstanceRefreshBoundingInfo = function (forceRefreshParentInfo: boolean = false, applySkeleton: boolean = false, applyMorph: boolean = false) {\r\n    if (!this._thinInstanceDataStorage.matrixData || !this._thinInstanceDataStorage.matrixBuffer) {\r\n        return;\r\n    }\r\n\r\n    const vectors = this._thinInstanceDataStorage.boundingVectors;\r\n\r\n    if (forceRefreshParentInfo || !this.rawBoundingInfo) {\r\n        vectors.length = 0;\r\n        this.refreshBoundingInfo(applySkeleton, applyMorph);\r\n        const boundingInfo = this.getBoundingInfo();\r\n        this.rawBoundingInfo = new BoundingInfo(boundingInfo.minimum, boundingInfo.maximum);\r\n    }\r\n\r\n    const boundingInfo = this.getBoundingInfo();\r\n    const matrixData = this._thinInstanceDataStorage.matrixData;\r\n\r\n    if (vectors.length === 0) {\r\n        for (let v = 0; v < boundingInfo.boundingBox.vectors.length; ++v) {\r\n            vectors.push(boundingInfo.boundingBox.vectors[v].clone());\r\n        }\r\n    }\r\n\r\n    TmpVectors.Vector3[0].setAll(Number.POSITIVE_INFINITY); // min\r\n    TmpVectors.Vector3[1].setAll(Number.NEGATIVE_INFINITY); // max\r\n\r\n    for (let i = 0; i < this._thinInstanceDataStorage.instancesCount; ++i) {\r\n        Matrix.FromArrayToRef(matrixData, i * 16, TmpVectors.Matrix[0]);\r\n\r\n        for (let v = 0; v < vectors.length; ++v) {\r\n            Vector3.TransformCoordinatesToRef(vectors[v], TmpVectors.Matrix[0], TmpVectors.Vector3[2]);\r\n            TmpVectors.Vector3[0].minimizeInPlace(TmpVectors.Vector3[2]);\r\n            TmpVectors.Vector3[1].maximizeInPlace(TmpVectors.Vector3[2]);\r\n        }\r\n    }\r\n\r\n    boundingInfo.reConstruct(TmpVectors.Vector3[0], TmpVectors.Vector3[1]);\r\n\r\n    this._updateBoundingInfo();\r\n};\r\n\r\nMesh.prototype._thinInstanceRecreateBuffer = function (kind: string, staticBuffer: boolean = true) {\r\n    if (kind === \"matrix\") {\r\n        this._thinInstanceDataStorage.matrixBuffer?.dispose();\r\n        this._thinInstanceDataStorage.matrixBuffer = this._thinInstanceCreateMatrixBuffer(\"world\", this._thinInstanceDataStorage.matrixData, staticBuffer);\r\n    } else if (kind === \"previousMatrix\") {\r\n        if (this._scene.needsPreviousWorldMatrices) {\r\n            this._thinInstanceDataStorage.previousMatrixBuffer?.dispose();\r\n            this._thinInstanceDataStorage.previousMatrixBuffer = this._thinInstanceCreateMatrixBuffer(\r\n                \"previousWorld\",\r\n                this._thinInstanceDataStorage.previousMatrixData ?? this._thinInstanceDataStorage.matrixData,\r\n                staticBuffer\r\n            );\r\n        }\r\n    } else {\r\n        if (kind === VertexBuffer.ColorKind) {\r\n            kind = VertexBuffer.ColorInstanceKind;\r\n        }\r\n\r\n        this._userThinInstanceBuffersStorage.vertexBuffers[kind]?.dispose();\r\n        this._userThinInstanceBuffersStorage.vertexBuffers[kind] = new VertexBuffer(\r\n            this.getEngine(),\r\n            this._userThinInstanceBuffersStorage.data[kind],\r\n            kind,\r\n            !staticBuffer,\r\n            false,\r\n            this._userThinInstanceBuffersStorage.strides[kind],\r\n            true\r\n        );\r\n        this.setVerticesBuffer(this._userThinInstanceBuffersStorage.vertexBuffers[kind]!);\r\n    }\r\n};\r\n\r\nMesh.prototype._thinInstanceUpdateBufferSize = function (kind: string, numInstances: number = 1) {\r\n    // preserve backward compatibility\r\n    if (kind === VertexBuffer.ColorKind) {\r\n        kind = VertexBuffer.ColorInstanceKind;\r\n    }\r\n\r\n    const kindIsMatrix = kind === \"matrix\";\r\n\r\n    if (!kindIsMatrix && (!this._userThinInstanceBuffersStorage || !this._userThinInstanceBuffersStorage.strides[kind])) {\r\n        return;\r\n    }\r\n\r\n    const stride = kindIsMatrix ? 16 : this._userThinInstanceBuffersStorage.strides[kind];\r\n    const currentSize = kindIsMatrix ? this._thinInstanceDataStorage.matrixBufferSize : this._userThinInstanceBuffersStorage.sizes[kind];\r\n    let data = kindIsMatrix ? this._thinInstanceDataStorage.matrixData : this._userThinInstanceBuffersStorage.data[kind];\r\n\r\n    const bufferSize = (this._thinInstanceDataStorage.instancesCount + numInstances) * stride;\r\n\r\n    let newSize = currentSize;\r\n\r\n    while (newSize < bufferSize) {\r\n        newSize *= 2;\r\n    }\r\n\r\n    if (!data || currentSize != newSize) {\r\n        if (!data) {\r\n            data = new Float32Array(newSize);\r\n        } else {\r\n            const newData = new Float32Array(newSize);\r\n            newData.set(data, 0);\r\n            data = newData;\r\n        }\r\n\r\n        if (kindIsMatrix) {\r\n            this._thinInstanceDataStorage.matrixBuffer?.dispose();\r\n            this._thinInstanceDataStorage.matrixBuffer = this._thinInstanceCreateMatrixBuffer(\"world\", data, false);\r\n            this._thinInstanceDataStorage.matrixData = data;\r\n            this._thinInstanceDataStorage.matrixBufferSize = newSize;\r\n            if (this._scene.needsPreviousWorldMatrices && !this._thinInstanceDataStorage.previousMatrixData) {\r\n                this._thinInstanceDataStorage.previousMatrixBuffer?.dispose();\r\n                this._thinInstanceDataStorage.previousMatrixBuffer = this._thinInstanceCreateMatrixBuffer(\"previousWorld\", data, false);\r\n            }\r\n        } else {\r\n            this._userThinInstanceBuffersStorage.vertexBuffers[kind]?.dispose();\r\n\r\n            this._userThinInstanceBuffersStorage.data[kind] = data;\r\n            this._userThinInstanceBuffersStorage.sizes[kind] = newSize;\r\n            this._userThinInstanceBuffersStorage.vertexBuffers[kind] = new VertexBuffer(this.getEngine(), data, kind, true, false, stride, true);\r\n\r\n            this.setVerticesBuffer(this._userThinInstanceBuffersStorage.vertexBuffers[kind]!);\r\n        }\r\n    }\r\n};\r\n\r\nMesh.prototype._thinInstanceInitializeUserStorage = function () {\r\n    if (!this._userThinInstanceBuffersStorage) {\r\n        this._userThinInstanceBuffersStorage = {\r\n            data: {},\r\n            sizes: {},\r\n            vertexBuffers: {},\r\n            strides: {},\r\n        };\r\n    }\r\n};\r\n\r\nMesh.prototype._disposeThinInstanceSpecificData = function () {\r\n    if (this._thinInstanceDataStorage?.matrixBuffer) {\r\n        this._thinInstanceDataStorage.matrixBuffer.dispose();\r\n        this._thinInstanceDataStorage.matrixBuffer = null;\r\n    }\r\n    if (this._thinInstanceDataStorage?.previousMatrixBuffer) {\r\n        this._thinInstanceDataStorage.previousMatrixBuffer.dispose();\r\n        this._thinInstanceDataStorage.previousMatrixBuffer = null;\r\n    }\r\n};\r\n", "import { Vector3, Quaternion, Matrix, TmpVectors } from \"core/Maths/math.vector\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport type { INode } from \"../glTFLoaderInterfaces\";\r\nimport type { IEXTMeshGpuInstancing } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nimport \"core/Meshes/thinInstanceMesh\";\r\n\r\nconst NAME = \"EXT_mesh_gpu_instancing\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the EXT_mesh_gpu_instancing extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"EXT_mesh_gpu_instancing\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/EXT_mesh_gpu_instancing/README.md)\r\n * [Playground Sample](https://playground.babylonjs.com/#QFIGLW#9)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class EXT_mesh_gpu_instancing implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void): Nullable<Promise<TransformNode>> {\r\n        return GLTFLoader.LoadExtensionAsync<IEXTMeshGpuInstancing, TransformNode>(context, node, this.name, async (extensionContext, extension) => {\r\n            this._loader._disableInstancedMesh++;\r\n\r\n            const promise = this._loader.loadNodeAsync(`/nodes/${node.index}`, node, assign);\r\n\r\n            this._loader._disableInstancedMesh--;\r\n\r\n            if (!node._primitiveBabylonMeshes) {\r\n                return await promise;\r\n            }\r\n\r\n            const promises = new Array<Promise<Nullable<Float32Array>>>();\r\n            let instanceCount = 0;\r\n\r\n            const loadAttribute = (attribute: string) => {\r\n                if (extension.attributes[attribute] == undefined) {\r\n                    promises.push(Promise.resolve(null));\r\n                    return;\r\n                }\r\n\r\n                const accessor = ArrayItem.Get(`${extensionContext}/attributes/${attribute}`, this._loader.gltf.accessors, extension.attributes[attribute]);\r\n                promises.push(this._loader._loadFloatAccessorAsync(`/accessors/${accessor.bufferView}`, accessor));\r\n\r\n                if (instanceCount === 0) {\r\n                    instanceCount = accessor.count;\r\n                } else if (instanceCount !== accessor.count) {\r\n                    throw new Error(`${extensionContext}/attributes: Instance buffer accessors do not have the same count.`);\r\n                }\r\n            };\r\n\r\n            loadAttribute(\"TRANSLATION\");\r\n            loadAttribute(\"ROTATION\");\r\n            loadAttribute(\"SCALE\");\r\n\r\n            // eslint-disable-next-line github/no-then\r\n            return await promise.then(async (babylonTransformNode) => {\r\n                const [translationBuffer, rotationBuffer, scaleBuffer] = await Promise.all(promises);\r\n                const matrices = new Float32Array(instanceCount * 16);\r\n                TmpVectors.Vector3[0].copyFromFloats(0, 0, 0); // translation\r\n                TmpVectors.Quaternion[0].copyFromFloats(0, 0, 0, 1); // rotation\r\n                TmpVectors.Vector3[1].copyFromFloats(1, 1, 1); // scale\r\n                for (let i = 0; i < instanceCount; ++i) {\r\n                    translationBuffer && Vector3.FromArrayToRef(translationBuffer, i * 3, TmpVectors.Vector3[0]);\r\n                    rotationBuffer && Quaternion.FromArrayToRef(rotationBuffer, i * 4, TmpVectors.Quaternion[0]);\r\n                    scaleBuffer && Vector3.FromArrayToRef(scaleBuffer, i * 3, TmpVectors.Vector3[1]);\r\n\r\n                    Matrix.ComposeToRef(TmpVectors.Vector3[1], TmpVectors.Quaternion[0], TmpVectors.Vector3[0], TmpVectors.Matrix[0]);\r\n\r\n                    TmpVectors.Matrix[0].copyToArray(matrices, i * 16);\r\n                }\r\n                for (const babylonMesh of node._primitiveBabylonMeshes!) {\r\n                    (babylonMesh as Mesh).thinInstanceSetBuffer(\"matrix\", matrices, 16, true);\r\n                }\r\n                return babylonTransformNode;\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new EXT_mesh_gpu_instancing(loader));\r\n", "import { Tools } from \"../../Misc/tools\";\r\nimport type { IDisposable } from \"../../scene\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare let MeshoptDecoder: any;\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nlet NumberOfWorkers = 0;\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nlet WorkerTimeout: Nullable<ReturnType<typeof setTimeout>> = null;\r\n\r\n/**\r\n * Configuration for meshoptimizer compression\r\n */\r\nexport interface IMeshoptCompressionConfiguration {\r\n    /**\r\n     * Configuration for the decoder.\r\n     */\r\n    decoder: {\r\n        /**\r\n         * The url to the meshopt decoder library.\r\n         */\r\n        url: string;\r\n    };\r\n}\r\n\r\n/**\r\n * Meshopt compression (https://github.com/zeux/meshoptimizer)\r\n *\r\n * This class wraps the meshopt library from https://github.com/zeux/meshoptimizer/tree/master/js.\r\n *\r\n * **Encoder**\r\n *\r\n * The encoder is not currently implemented.\r\n *\r\n * **Decoder**\r\n *\r\n * By default, the configuration points to a copy of the meshopt files on the Babylon.js preview CDN (e.g. https://preview.babylonjs.com/meshopt_decoder.js).\r\n *\r\n * To update the configuration, use the following code:\r\n * ```javascript\r\n *     MeshoptCompression.Configuration = {\r\n *         decoder: {\r\n *             url: \"<url to the meshopt decoder library>\"\r\n *         }\r\n *     };\r\n * ```\r\n */\r\nexport class MeshoptCompression implements IDisposable {\r\n    private _decoderModulePromise?: Promise<any>;\r\n\r\n    /**\r\n     * The configuration. Defaults to the following:\r\n     * ```javascript\r\n     * decoder: {\r\n     *   url: \"https://cdn.babylonjs.com/meshopt_decoder.js\"\r\n     * }\r\n     * ```\r\n     */\r\n    public static Configuration: IMeshoptCompressionConfiguration = {\r\n        decoder: {\r\n            url: `${Tools._DefaultCdnUrl}/meshopt_decoder.js`,\r\n        },\r\n    };\r\n\r\n    private static _Default: Nullable<MeshoptCompression> = null;\r\n\r\n    /**\r\n     * Default instance for the meshoptimizer object.\r\n     */\r\n    public static get Default(): MeshoptCompression {\r\n        if (!MeshoptCompression._Default) {\r\n            MeshoptCompression._Default = new MeshoptCompression();\r\n        }\r\n\r\n        return MeshoptCompression._Default;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() {\r\n        const decoder = MeshoptCompression.Configuration.decoder;\r\n\r\n        // eslint-disable-next-line github/no-then\r\n        this._decoderModulePromise = Tools.LoadBabylonScriptAsync(decoder.url).then(() => {\r\n            // Wait for WebAssembly compilation before resolving promise\r\n            return MeshoptDecoder.ready;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Stop all async operations and release resources.\r\n     */\r\n    public dispose(): void {\r\n        delete this._decoderModulePromise;\r\n    }\r\n\r\n    /**\r\n     * Decode meshopt data.\r\n     * @see https://github.com/zeux/meshoptimizer/tree/master/js#decoder\r\n     * @param source The input data.\r\n     * @param count The number of elements.\r\n     * @param stride The stride in bytes.\r\n     * @param mode The compression mode.\r\n     * @param filter The compression filter.\r\n     * @returns a Promise<Uint8Array> that resolves to the decoded data\r\n     */\r\n    public async decodeGltfBufferAsync(source: Uint8Array, count: number, stride: number, mode: \"ATTRIBUTES\" | \"TRIANGLES\" | \"INDICES\", filter?: string): Promise<Uint8Array> {\r\n        await this._decoderModulePromise!;\r\n        if (NumberOfWorkers === 0) {\r\n            MeshoptDecoder.useWorkers(1);\r\n            NumberOfWorkers = 1;\r\n        }\r\n        const result = await MeshoptDecoder.decodeGltfBufferAsync(count, stride, source, mode, filter);\r\n        // a simple debounce to avoid switching back and forth between workers and no workers while decoding\r\n        if (WorkerTimeout !== null) {\r\n            clearTimeout(WorkerTimeout);\r\n        }\r\n        WorkerTimeout = setTimeout(() => {\r\n            MeshoptDecoder.useWorkers(0);\r\n            NumberOfWorkers = 0;\r\n            WorkerTimeout = null;\r\n        }, 1000);\r\n        return result;\r\n    }\r\n}\r\n", "import type { Nullable } from \"core/types\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { ArrayItem, GLTFLoader } from \"../glTFLoader\";\r\nimport type { IBufferView } from \"../glTFLoaderInterfaces\";\r\nimport type { IEXTMeshoptCompression } from \"babylonjs-gltf2interface\";\r\nimport { MeshoptCompression } from \"core/Meshes/Compression/meshoptCompression\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"EXT_meshopt_compression\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the EXT_meshopt_compression extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"EXT_meshopt_compression\"]: {};\r\n    }\r\n}\r\n\r\ninterface IBufferViewMeshopt extends IBufferView {\r\n    _meshOptData?: Promise<ArrayBufferView>;\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/EXT_meshopt_compression/README.md)\r\n *\r\n * This extension uses a WebAssembly decoder module from https://github.com/zeux/meshoptimizer/tree/master/js\r\n * @since 5.0.0\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class EXT_meshopt_compression implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this.enabled = loader.isExtensionUsed(NAME);\r\n        this._loader = loader;\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadBufferViewAsync(context: string, bufferView: IBufferView): Nullable<Promise<ArrayBufferView>> {\r\n        return GLTFLoader.LoadExtensionAsync<IEXTMeshoptCompression, ArrayBufferView>(context, bufferView, this.name, async (extensionContext, extension) => {\r\n            const bufferViewMeshopt = bufferView as IBufferViewMeshopt;\r\n            if (bufferViewMeshopt._meshOptData) {\r\n                return await bufferViewMeshopt._meshOptData;\r\n            }\r\n\r\n            const buffer = ArrayItem.Get(`${context}/buffer`, this._loader.gltf.buffers, extension.buffer);\r\n            bufferViewMeshopt._meshOptData = this._loader\r\n                .loadBufferAsync(`/buffers/${buffer.index}`, buffer, extension.byteOffset || 0, extension.byteLength)\r\n                // eslint-disable-next-line github/no-then\r\n                .then(async (buffer) => {\r\n                    return await MeshoptCompression.Default.decodeGltfBufferAsync(buffer as Uint8Array, extension.count, extension.byteStride, extension.mode, extension.filter);\r\n                });\r\n\r\n            return await bufferViewMeshopt._meshOptData;\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new EXT_meshopt_compression(loader));\r\n", "import type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\nimport type { ITexture } from \"../glTFLoaderInterfaces\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { IEXTTextureWebP } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"EXT_texture_webp\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the EXT_texture_webp extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"EXT_texture_webp\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/EXT_texture_webp/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class EXT_texture_webp implements IGLTFLoaderExtension {\r\n    /** The name of this extension. */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled. */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public _loadTextureAsync(context: string, texture: ITexture, assign: (babylonTexture: BaseTexture) => void): Nullable<Promise<BaseTexture>> {\r\n        return GLTFLoader.LoadExtensionAsync<IEXTTextureWebP, BaseTexture>(context, texture, this.name, async (extensionContext, extension) => {\r\n            const sampler = texture.sampler == undefined ? GLTFLoader.DefaultSampler : ArrayItem.Get(`${context}/sampler`, this._loader.gltf.samplers, texture.sampler);\r\n            const image = ArrayItem.Get(`${extensionContext}/source`, this._loader.gltf.images, extension.source);\r\n            return await this._loader._createTextureAsync(\r\n                context,\r\n                sampler,\r\n                image,\r\n                (babylonTexture) => {\r\n                    assign(babylonTexture);\r\n                },\r\n                undefined,\r\n                !texture._textureInfo.nonColorData\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new EXT_texture_webp(loader));\r\n", "import type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\nimport type { ITexture } from \"../glTFLoaderInterfaces\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { IEXTTextureAVIF } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"EXT_texture_avif\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the EXT_texture_avif extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"EXT_texture_avif\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [glTF PR](https://github.com/KhronosGroup/glTF/pull/2235)\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/EXT_texture_avif/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class EXT_texture_avif implements IGLTFLoaderExtension {\r\n    /** The name of this extension. */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled. */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public _loadTextureAsync(context: string, texture: ITexture, assign: (babylonTexture: BaseTexture) => void): Nullable<Promise<BaseTexture>> {\r\n        return GLTFLoader.LoadExtensionAsync<IEXTTextureAVIF, BaseTexture>(context, texture, this.name, async (extensionContext, extension) => {\r\n            const sampler = texture.sampler == undefined ? GLTFLoader.DefaultSampler : ArrayItem.Get(`${context}/sampler`, this._loader.gltf.samplers, texture.sampler);\r\n            const image = ArrayItem.Get(`${extensionContext}/source`, this._loader.gltf.images, extension.source);\r\n            return await this._loader._createTextureAsync(\r\n                context,\r\n                sampler,\r\n                image,\r\n                (babylonTexture) => {\r\n                    assign(babylonTexture);\r\n                },\r\n                undefined,\r\n                !texture._textureInfo.nonColorData\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new EXT_texture_avif(loader));\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { SpotLight } from \"core/Lights/spotLight\";\r\nimport { Light } from \"core/Lights/light\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\n\r\nimport type { IEXTLightsIES_LightReference } from \"babylonjs-gltf2interface\";\r\nimport type { IEXTLightsIES_Light, INode } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\n\r\nconst NAME = \"EXT_lights_ies\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the EXT_lights_ies extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"EXT_lights_ies\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/tree/main/extensions/2.0/Vendor/EXT_lights_ies)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class EXT_lights_ies implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /** hidden */\r\n    private _loader: GLTFLoader;\r\n    private _lights?: IEXTLightsIES_Light[];\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n        delete this._lights;\r\n    }\r\n\r\n    /** @internal */\r\n    public onLoading(): void {\r\n        const extensions = this._loader.gltf.extensions;\r\n        if (extensions && extensions[this.name]) {\r\n            const extension = extensions[this.name];\r\n            this._lights = extension.lights;\r\n            ArrayItem.Assign(this._lights);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void): Nullable<Promise<TransformNode>> {\r\n        return GLTFLoader.LoadExtensionAsync<IEXTLightsIES_LightReference, TransformNode>(context, node, this.name, async (extensionContext, extension) => {\r\n            this._loader._allMaterialsDirtyRequired = true;\r\n\r\n            let babylonSpotLight: SpotLight;\r\n            let light: IEXTLightsIES_Light;\r\n\r\n            const transformNode = await this._loader.loadNodeAsync(context, node, (babylonMesh) => {\r\n                light = ArrayItem.Get(extensionContext, this._lights, extension.light);\r\n                const name = light.name || babylonMesh.name;\r\n\r\n                this._loader.babylonScene._blockEntityCollection = !!this._loader._assetContainer;\r\n\r\n                babylonSpotLight = new SpotLight(name, Vector3.Zero(), Vector3.Backward(), 0, 1, this._loader.babylonScene);\r\n                babylonSpotLight.angle = Math.PI / 2;\r\n                babylonSpotLight.innerAngle = 0;\r\n\r\n                babylonSpotLight._parentContainer = this._loader._assetContainer;\r\n                this._loader.babylonScene._blockEntityCollection = false;\r\n                light._babylonLight = babylonSpotLight;\r\n\r\n                babylonSpotLight.falloffType = Light.FALLOFF_GLTF;\r\n                babylonSpotLight.diffuse = extension.color ? Color3.FromArray(extension.color) : Color3.White();\r\n                babylonSpotLight.intensity = extension.multiplier || 1;\r\n                babylonSpotLight.range = Number.MAX_VALUE;\r\n                babylonSpotLight.parent = babylonMesh;\r\n\r\n                this._loader._babylonLights.push(babylonSpotLight);\r\n\r\n                GLTFLoader.AddPointerMetadata(babylonSpotLight, extensionContext);\r\n\r\n                assign(babylonMesh);\r\n            });\r\n\r\n            // Load the profile\r\n            let bufferData: ArrayBufferView;\r\n            if (light!.uri) {\r\n                bufferData = await this._loader.loadUriAsync(context, light!, light!.uri);\r\n            } else {\r\n                const bufferView = ArrayItem.Get(`${context}/bufferView`, this._loader.gltf.bufferViews, light!.bufferView);\r\n                bufferData = await this._loader.loadBufferViewAsync(`/bufferViews/${bufferView.index}`, bufferView);\r\n            }\r\n            babylonSpotLight!.iesProfileTexture = new Texture(\r\n                name + \"_iesProfile\",\r\n                this._loader.babylonScene,\r\n                true,\r\n                false,\r\n                undefined,\r\n                null,\r\n                null,\r\n                bufferData,\r\n                true,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                \".ies\"\r\n            );\r\n\r\n            return transformNode;\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new EXT_lights_ies(loader));\r\n", "import type { Nullable, TypedArray, TypedArrayConstructor } from \"core/types\";\r\nimport type { EncoderMessage, IDracoAttributeData, IDracoEncodedMeshData, IDracoEncoderOptions } from \"./dracoEncoder.types\";\r\nimport type { DecoderMessage } from \"./dracoDecoder.types\";\r\nimport type { DecoderBuffer, Decoder, Mesh, PointCloud, Status, DecoderModule, EncoderModule, MeshBuilder, Encoder, DracoInt8Array } from \"draco3dgltf\";\r\nimport { DracoDecoderModule } from \"draco3dgltf\";\r\nimport type { VertexDataTypedArray } from \"core/Buffers/bufferUtils\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare let DracoDecoderModule: DracoDecoderModule;\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare let DracoEncoderModule: (props: { wasmBinary?: ArrayBuffer }) => Promise<EncoderModule>;\r\n\r\ninterface IInitDoneMessage {\r\n    id: \"initDone\";\r\n}\r\n\r\n// WorkerGlobalScope\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare function importScripts(...urls: string[]): void;\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare function postMessage(message: IInitDoneMessage | DecoderMessage | EncoderMessage, transfer?: ArrayBufferLike[]): void;\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function EncodeMesh(\r\n    module: unknown /** EncoderModule */,\r\n    attributes: Array<IDracoAttributeData>,\r\n    indices: Nullable<Uint16Array | Uint32Array>,\r\n    options: IDracoEncoderOptions\r\n): Nullable<IDracoEncodedMeshData> {\r\n    const encoderModule = module as EncoderModule;\r\n    let encoder: Nullable<Encoder> = null;\r\n    let meshBuilder: Nullable<MeshBuilder> = null;\r\n    let mesh: Nullable<Mesh> = null;\r\n    let encodedNativeBuffer: Nullable<DracoInt8Array> = null;\r\n    const attributeIDs: Record<string, number> = {}; // Babylon kind -> Draco unique id\r\n\r\n    // Double-check that at least a position attribute is provided\r\n    const positionAttribute = attributes.find((a) => a.dracoName === \"POSITION\");\r\n    if (!positionAttribute) {\r\n        throw new Error(\"Position attribute is required for Draco encoding\");\r\n    }\r\n\r\n    // If no indices are provided, assume mesh is unindexed. Let's generate them, since Draco meshes require them.\r\n    // TODO: This may be the POINT_CLOUD case, but need to investigate. Should work for now-- just less efficient.\r\n    if (!indices) {\r\n        // Assume position attribute is the largest attribute.\r\n        const positionVerticesCount = positionAttribute.data.length / positionAttribute.size;\r\n        indices = new (positionVerticesCount > 65535 ? Uint32Array : Uint16Array)(positionVerticesCount);\r\n        for (let i = 0; i < positionVerticesCount; i++) {\r\n            indices[i] = i;\r\n        }\r\n    }\r\n\r\n    try {\r\n        encoder = new encoderModule.Encoder();\r\n        meshBuilder = new encoderModule.MeshBuilder();\r\n        mesh = new encoderModule.Mesh();\r\n\r\n        // Add the faces\r\n        meshBuilder.AddFacesToMesh(mesh, indices.length / 3, indices);\r\n\r\n        const addAttributeMap = new Map<\r\n            Function,\r\n            (builder: MeshBuilder, mesh: Mesh, attr: any, count: number, size: number, data: Exclude<VertexDataTypedArray, Uint8ClampedArray>) => number\r\n        >([\r\n            [Float32Array, (mb, m, a, c, s, d) => mb.AddFloatAttribute(m, a, c, s, d)],\r\n            [Uint32Array, (mb, m, a, c, s, d) => mb.AddUInt32Attribute(m, a, c, s, d)],\r\n            [Uint16Array, (mb, m, a, c, s, d) => mb.AddUInt16Attribute(m, a, c, s, d)],\r\n            [Uint8Array, (mb, m, a, c, s, d) => mb.AddUInt8Attribute(m, a, c, s, d)],\r\n            [Int32Array, (mb, m, a, c, s, d) => mb.AddInt32Attribute(m, a, c, s, d)],\r\n            [Int16Array, (mb, m, a, c, s, d) => mb.AddInt16Attribute(m, a, c, s, d)],\r\n            [Int8Array, (mb, m, a, c, s, d) => mb.AddInt8Attribute(m, a, c, s, d)],\r\n        ]);\r\n\r\n        // Add the attributes\r\n        for (const attribute of attributes) {\r\n            if (attribute.data instanceof Uint8ClampedArray) {\r\n                attribute.data = new Uint8Array(attribute.data); // Draco does not support Uint8ClampedArray\r\n            }\r\n            const addAttribute = addAttributeMap.get(attribute.data.constructor)!;\r\n            const verticesCount = attribute.data.length / attribute.size;\r\n            attributeIDs[attribute.kind] = addAttribute(meshBuilder, mesh, encoderModule[attribute.dracoName], verticesCount, attribute.size, attribute.data);\r\n            if (options.quantizationBits && options.quantizationBits[attribute.dracoName]) {\r\n                encoder.SetAttributeQuantization(encoderModule[attribute.dracoName], options.quantizationBits[attribute.dracoName]);\r\n            }\r\n        }\r\n\r\n        // Set the options\r\n        if (options.method) {\r\n            encoder.SetEncodingMethod(encoderModule[options.method]);\r\n        }\r\n        if (options.encodeSpeed !== undefined && options.decodeSpeed !== undefined) {\r\n            encoder.SetSpeedOptions(options.encodeSpeed, options.decodeSpeed);\r\n        }\r\n\r\n        // Encode to native buffer\r\n        encodedNativeBuffer = new encoderModule.DracoInt8Array();\r\n        const encodedLength = encoder.EncodeMeshToDracoBuffer(mesh, encodedNativeBuffer);\r\n        if (encodedLength <= 0) {\r\n            throw new Error(\"Draco encoding failed.\");\r\n        }\r\n\r\n        // Copy the native buffer data to worker heap\r\n        const encodedData = new Int8Array(encodedLength);\r\n        for (let i = 0; i < encodedLength; i++) {\r\n            encodedData[i] = encodedNativeBuffer.GetValue(i);\r\n        }\r\n\r\n        return { data: encodedData, attributeIds: attributeIDs };\r\n    } finally {\r\n        if (mesh) {\r\n            encoderModule.destroy(mesh);\r\n        }\r\n        if (meshBuilder) {\r\n            encoderModule.destroy(meshBuilder);\r\n        }\r\n        if (encoder) {\r\n            encoderModule.destroy(encoder);\r\n        }\r\n        if (encodedNativeBuffer) {\r\n            encoderModule.destroy(encodedNativeBuffer);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * The worker function that gets converted to a blob url to pass into a worker.\r\n * To be used if a developer wants to create their own worker instance and inject it instead of using the default worker.\r\n */\r\nexport function EncoderWorkerFunction(): void {\r\n    let encoderPromise: PromiseLike<EncoderModule> | undefined;\r\n\r\n    onmessage = (event) => {\r\n        const message = event.data;\r\n        switch (message.id) {\r\n            case \"init\": {\r\n                // if URL is provided then load the script. Otherwise expect the script to be loaded already\r\n                if (message.url) {\r\n                    importScripts(message.url);\r\n                }\r\n                const initEncoderObject = message.wasmBinary ? { wasmBinary: message.wasmBinary } : {};\r\n                encoderPromise = DracoEncoderModule(initEncoderObject);\r\n                postMessage({ id: \"initDone\" });\r\n                break;\r\n            }\r\n            case \"encodeMesh\": {\r\n                if (!encoderPromise) {\r\n                    throw new Error(\"Draco encoder module is not available\");\r\n                }\r\n                // eslint-disable-next-line github/no-then\r\n                encoderPromise.then((encoder) => {\r\n                    const result = EncodeMesh(encoder, message.attributes, message.indices, message.options);\r\n                    postMessage({ id: \"encodeMeshDone\", encodedMeshData: result }, result ? [result.data.buffer] : undefined);\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function DecodeMesh(\r\n    module: unknown /** DecoderModule */,\r\n    data: Int8Array,\r\n    attributeIDs: Record<string, number> | undefined,\r\n    onIndicesData: (indices: Uint16Array | Uint32Array) => void,\r\n    onAttributeData: (kind: string, data: ArrayBufferView, size: number, offset: number, stride: number, normalized: boolean) => void\r\n): number {\r\n    const decoderModule = module as DecoderModule;\r\n    let decoder: Nullable<Decoder> = null;\r\n    let buffer: Nullable<DecoderBuffer> = null;\r\n    let geometry: Nullable<Mesh | PointCloud> = null;\r\n\r\n    try {\r\n        decoder = new decoderModule.Decoder();\r\n\r\n        buffer = new decoderModule.DecoderBuffer();\r\n        buffer.Init(data, data.byteLength);\r\n\r\n        let status: Status;\r\n        const type = decoder.GetEncodedGeometryType(buffer);\r\n        switch (type) {\r\n            case decoderModule.TRIANGULAR_MESH: {\r\n                const mesh = new decoderModule.Mesh();\r\n                status = decoder.DecodeBufferToMesh(buffer, mesh);\r\n                if (!status.ok() || mesh.ptr === 0) {\r\n                    throw new Error(status.error_msg());\r\n                }\r\n\r\n                const numFaces = mesh.num_faces();\r\n                const numIndices = numFaces * 3;\r\n                const byteLength = numIndices * 4;\r\n\r\n                const ptr = decoderModule._malloc(byteLength);\r\n                try {\r\n                    decoder.GetTrianglesUInt32Array(mesh, byteLength, ptr);\r\n                    const indices = new Uint32Array(numIndices);\r\n                    indices.set(new Uint32Array(decoderModule.HEAPF32.buffer, ptr, numIndices));\r\n                    onIndicesData(indices);\r\n                } finally {\r\n                    decoderModule._free(ptr);\r\n                }\r\n\r\n                geometry = mesh;\r\n                break;\r\n            }\r\n            case decoderModule.POINT_CLOUD: {\r\n                const pointCloud = new decoderModule.PointCloud();\r\n                status = decoder.DecodeBufferToPointCloud(buffer, pointCloud);\r\n                if (!status.ok() || !pointCloud.ptr) {\r\n                    throw new Error(status.error_msg());\r\n                }\r\n\r\n                geometry = pointCloud;\r\n                break;\r\n            }\r\n            default: {\r\n                throw new Error(`Invalid geometry type ${type}`);\r\n            }\r\n        }\r\n\r\n        const numPoints = geometry.num_points();\r\n\r\n        const processAttribute = (decoder: Decoder, geometry: Mesh | PointCloud, kind: string, attribute: any /** Attribute */) => {\r\n            const dataType = attribute.data_type();\r\n            const numComponents = attribute.num_components();\r\n            const normalized = attribute.normalized();\r\n            const byteStride = attribute.byte_stride();\r\n            const byteOffset = attribute.byte_offset();\r\n\r\n            const dataTypeInfo: Record<number, { typedArrayConstructor: TypedArrayConstructor; heap: TypedArray }> = {\r\n                [decoderModule.DT_FLOAT32]: { typedArrayConstructor: Float32Array, heap: decoderModule.HEAPF32 },\r\n                [decoderModule.DT_INT8]: { typedArrayConstructor: Int8Array, heap: decoderModule.HEAP8 },\r\n                [decoderModule.DT_INT16]: { typedArrayConstructor: Int16Array, heap: decoderModule.HEAP16 },\r\n                [decoderModule.DT_INT32]: { typedArrayConstructor: Int32Array, heap: decoderModule.HEAP32 },\r\n                [decoderModule.DT_UINT8]: { typedArrayConstructor: Uint8Array, heap: decoderModule.HEAPU8 },\r\n                [decoderModule.DT_UINT16]: { typedArrayConstructor: Uint16Array, heap: decoderModule.HEAPU16 },\r\n                [decoderModule.DT_UINT32]: { typedArrayConstructor: Uint32Array, heap: decoderModule.HEAPU32 },\r\n            };\r\n\r\n            const info = dataTypeInfo[dataType];\r\n            if (!info) {\r\n                throw new Error(`Invalid data type ${dataType}`);\r\n            }\r\n\r\n            const numValues = numPoints * numComponents;\r\n            const byteLength = numValues * info.typedArrayConstructor.BYTES_PER_ELEMENT;\r\n\r\n            const ptr = decoderModule._malloc(byteLength);\r\n            try {\r\n                decoder.GetAttributeDataArrayForAllPoints(geometry, attribute, dataType, byteLength, ptr);\r\n                const data = new info.typedArrayConstructor(info.heap.buffer, ptr, numValues);\r\n                onAttributeData(kind, data.slice(), numComponents, byteOffset, byteStride, normalized);\r\n            } finally {\r\n                decoderModule._free(ptr);\r\n            }\r\n        };\r\n\r\n        if (attributeIDs) {\r\n            for (const kind in attributeIDs) {\r\n                const id = attributeIDs[kind];\r\n                const attribute = decoder.GetAttributeByUniqueId(geometry, id);\r\n                processAttribute(decoder, geometry, kind, attribute);\r\n            }\r\n        } else {\r\n            const dracoAttributeTypes: Record<string, number> = {\r\n                position: decoderModule.POSITION,\r\n                normal: decoderModule.NORMAL,\r\n                color: decoderModule.COLOR,\r\n                uv: decoderModule.TEX_COORD,\r\n            };\r\n\r\n            for (const kind in dracoAttributeTypes) {\r\n                const id = decoder.GetAttributeId(geometry, dracoAttributeTypes[kind]);\r\n                if (id !== -1) {\r\n                    const attribute = decoder.GetAttribute(geometry, id);\r\n                    processAttribute(decoder, geometry, kind, attribute);\r\n                }\r\n            }\r\n        }\r\n\r\n        return numPoints;\r\n    } finally {\r\n        if (geometry) {\r\n            decoderModule.destroy(geometry);\r\n        }\r\n\r\n        if (buffer) {\r\n            decoderModule.destroy(buffer);\r\n        }\r\n\r\n        if (decoder) {\r\n            decoderModule.destroy(decoder);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * The worker function that gets converted to a blob url to pass into a worker.\r\n * To be used if a developer wants to create their own worker instance and inject it instead of using the default worker.\r\n */\r\nexport function DecoderWorkerFunction(): void {\r\n    let decoderPromise: PromiseLike<DecoderModule> | undefined;\r\n\r\n    onmessage = (event) => {\r\n        const message = event.data;\r\n        switch (message.id) {\r\n            case \"init\": {\r\n                // if URL is provided then load the script. Otherwise expect the script to be loaded already\r\n                if (message.url) {\r\n                    importScripts(message.url);\r\n                }\r\n                const initDecoderObject = message.wasmBinary ? { wasmBinary: message.wasmBinary } : {};\r\n                decoderPromise = DracoDecoderModule(initDecoderObject);\r\n                postMessage({ id: \"initDone\" });\r\n                break;\r\n            }\r\n            case \"decodeMesh\": {\r\n                if (!decoderPromise) {\r\n                    throw new Error(\"Draco decoder module is not available\");\r\n                }\r\n                // eslint-disable-next-line github/no-then\r\n                decoderPromise.then((decoder) => {\r\n                    const numPoints = DecodeMesh(\r\n                        decoder,\r\n                        message.dataView,\r\n                        message.attributes,\r\n                        (indices) => {\r\n                            postMessage({ id: \"indices\", data: indices }, [indices.buffer]);\r\n                        },\r\n                        (kind, data, size, offset, stride, normalized) => {\r\n                            postMessage({ id: \"attribute\", kind, data, size, byteOffset: offset, byteStride: stride, normalized }, [data.buffer]);\r\n                        }\r\n                    );\r\n                    postMessage({ id: \"decodeMeshDone\", totalVertices: numPoints });\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\n// For backwards compatibility\r\nexport { DecoderWorkerFunction as workerFunction };\r\n\r\n/**\r\n * Initializes a worker that was created for the draco agent pool\r\n * @param worker  The worker to initialize\r\n * @param wasmBinary The wasm binary to load into the worker\r\n * @param moduleUrl The url to the draco decoder module (optional)\r\n * @returns A promise that resolves when the worker is initialized\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport async function initializeWebWorker(worker: Worker, wasmBinary?: ArrayBuffer, moduleUrl?: string): Promise<Worker> {\r\n    return await new Promise<Worker>((resolve, reject) => {\r\n        const onError = (error: ErrorEvent) => {\r\n            worker.removeEventListener(\"error\", onError);\r\n            worker.removeEventListener(\"message\", onMessage);\r\n            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\r\n            reject(error);\r\n        };\r\n\r\n        const onMessage = (event: MessageEvent<IInitDoneMessage>) => {\r\n            if (event.data.id === \"initDone\") {\r\n                worker.removeEventListener(\"error\", onError);\r\n                worker.removeEventListener(\"message\", onMessage);\r\n                resolve(worker);\r\n            }\r\n        };\r\n\r\n        worker.addEventListener(\"error\", onError);\r\n        worker.addEventListener(\"message\", onMessage);\r\n\r\n        // Load with either JS-only or WASM version\r\n        if (!wasmBinary) {\r\n            worker.postMessage({\r\n                id: \"init\",\r\n                url: moduleUrl,\r\n            });\r\n        } else {\r\n            // clone the array buffer to make it transferable\r\n            const clone = wasmBinary.slice(0);\r\n            worker.postMessage(\r\n                {\r\n                    id: \"init\",\r\n                    url: moduleUrl,\r\n                    wasmBinary: clone,\r\n                },\r\n                [clone]\r\n            );\r\n        }\r\n        // note: no transfer list as the ArrayBuffer is shared across main thread and pool workers\r\n    });\r\n}\r\n", "import { Tools } from \"../../Misc/tools\";\r\nimport { AutoReleaseWorkerPool } from \"../../Misc/workerPool\";\r\nimport type { WorkerPool } from \"../../Misc/workerPool\";\r\nimport type { IDisposable } from \"../../scene\";\r\nimport { initializeWebWorker } from \"./dracoCompressionWorker\";\r\n\r\n/**\r\n * Configuration for using a Draco codec.\r\n */\r\nexport interface IDracoCodecConfiguration {\r\n    /**\r\n     * The url to the WebAssembly module.\r\n     */\r\n    wasmUrl?: string;\r\n\r\n    /**\r\n     * The url to the WebAssembly binary.\r\n     */\r\n    wasmBinaryUrl?: string;\r\n\r\n    /**\r\n     * The url to the fallback JavaScript module.\r\n     */\r\n    fallbackUrl?: string;\r\n\r\n    /**\r\n     * The number of workers for async operations. Specify `0` to disable web workers and run synchronously in the current context.\r\n     */\r\n    numWorkers?: number;\r\n\r\n    /**\r\n     * Optional worker pool to use for async encoding/decoding.\r\n     * If provided, the worker pool will be used as is: no Draco scripts will be loaded, and numWorkers will be ignored.\r\n     */\r\n    workerPool?: WorkerPool;\r\n\r\n    /**\r\n     * Optional ArrayBuffer of the WebAssembly binary.\r\n     * If provided it will be used instead of loading the binary from wasmBinaryUrl.\r\n     */\r\n    wasmBinary?: ArrayBuffer;\r\n\r\n    /**\r\n     * The codec module if already available.\r\n     */\r\n    jsModule?: unknown /* DracoDecoderModule | DracoEncoderModule */;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function _GetDefaultNumWorkers(): number {\r\n    if (typeof navigator !== \"object\" || !navigator.hardwareConcurrency) {\r\n        return 1;\r\n    }\r\n\r\n    // Use 50% of the available logical processors but capped at 4.\r\n    return Math.min(Math.floor(navigator.hardwareConcurrency * 0.5), 4);\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function _IsConfigurationAvailable(config: IDracoCodecConfiguration): boolean {\r\n    return !!((config.wasmUrl && (config.wasmBinary || config.wasmBinaryUrl) && typeof WebAssembly === \"object\") || config.fallbackUrl);\r\n    // TODO: Account for jsModule\r\n}\r\n\r\n/**\r\n * Base class for a Draco codec.\r\n * @internal\r\n */\r\nexport abstract class DracoCodec implements IDisposable {\r\n    protected _workerPoolPromise?: Promise<WorkerPool>;\r\n    protected _modulePromise?: Promise<{ module: unknown /** DecoderModule | EncoderModule */ }>;\r\n\r\n    /**\r\n     * Checks if the default codec JS module is in scope.\r\n     */\r\n    protected abstract _isModuleAvailable(): boolean;\r\n\r\n    /**\r\n     * Creates the JS Module for the corresponding wasm.\r\n     */\r\n    protected abstract _createModuleAsync(\r\n        wasmBinary?: ArrayBuffer,\r\n        jsModule?: unknown /** DracoDecoderModule | DracoEncoderModule */\r\n    ): Promise<{ module: unknown /** DecoderModule | EncoderModule */ }>;\r\n\r\n    /**\r\n     * Returns the worker content.\r\n     */\r\n    protected abstract _getWorkerContent(): string;\r\n\r\n    /**\r\n     * Constructor\r\n     * @param configuration The configuration for the DracoCodec instance.\r\n     */\r\n    constructor(configuration: IDracoCodecConfiguration) {\r\n        // check if the codec binary and worker pool was injected\r\n        // Note - it is expected that the developer checked if WebWorker, WebAssembly and the URL object are available\r\n        if (configuration.workerPool) {\r\n            // Set the promise accordingly\r\n            this._workerPoolPromise = Promise.resolve(configuration.workerPool);\r\n            return;\r\n        }\r\n\r\n        // to avoid making big changes to the code here, if wasmBinary is provided use it in the wasmBinaryPromise\r\n        const wasmBinaryProvided = configuration.wasmBinary;\r\n        const numberOfWorkers = configuration.numWorkers ?? _GetDefaultNumWorkers();\r\n        const useWorkers = numberOfWorkers && typeof Worker === \"function\" && typeof URL === \"function\";\r\n        const urlNeeded = useWorkers || !configuration.jsModule;\r\n        // code maintained here for back-compat with no changes\r\n\r\n        const codecInfo: { url: string | undefined; wasmBinaryPromise: Promise<ArrayBuffer | undefined> } =\r\n            configuration.wasmUrl && configuration.wasmBinaryUrl && typeof WebAssembly === \"object\"\r\n                ? {\r\n                      url: urlNeeded ? Tools.GetBabylonScriptURL(configuration.wasmUrl, true) : \"\",\r\n                      wasmBinaryPromise: wasmBinaryProvided\r\n                          ? Promise.resolve(wasmBinaryProvided)\r\n                          : Tools.LoadFileAsync(Tools.GetBabylonScriptURL(configuration.wasmBinaryUrl, true)),\r\n                  }\r\n                : {\r\n                      url: urlNeeded ? Tools.GetBabylonScriptURL(configuration.fallbackUrl!) : \"\",\r\n                      wasmBinaryPromise: Promise.resolve(undefined),\r\n                  };\r\n        // If using workers, initialize a worker pool with either the wasm or url?\r\n        if (useWorkers) {\r\n            // eslint-disable-next-line github/no-then\r\n            this._workerPoolPromise = codecInfo.wasmBinaryPromise.then((wasmBinary) => {\r\n                const workerContent = this._getWorkerContent();\r\n                const workerBlobUrl = URL.createObjectURL(new Blob([workerContent], { type: \"application/javascript\" }));\r\n\r\n                // eslint-disable-next-line @typescript-eslint/promise-function-async\r\n                return new AutoReleaseWorkerPool(numberOfWorkers, () => {\r\n                    const worker = new Worker(workerBlobUrl);\r\n                    return initializeWebWorker(worker, wasmBinary, codecInfo.url);\r\n                });\r\n            });\r\n        } else {\r\n            // eslint-disable-next-line github/no-then\r\n            this._modulePromise = codecInfo.wasmBinaryPromise.then(async (wasmBinary) => {\r\n                if (!this._isModuleAvailable()) {\r\n                    if (!configuration.jsModule) {\r\n                        if (!codecInfo.url) {\r\n                            throw new Error(\"Draco codec module is not available\");\r\n                        }\r\n                        await Tools.LoadBabylonScriptAsync(codecInfo.url);\r\n                    }\r\n                }\r\n                return await this._createModuleAsync(wasmBinary as ArrayBuffer, configuration.jsModule);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a promise that resolves when ready. Call this manually to ensure the draco codec is ready before use.\r\n     * @returns a promise that resolves when ready\r\n     */\r\n    public async whenReadyAsync(): Promise<void> {\r\n        if (this._workerPoolPromise) {\r\n            await this._workerPoolPromise;\r\n            return;\r\n        }\r\n\r\n        if (this._modulePromise) {\r\n            await this._modulePromise;\r\n            return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop all async operations and release resources.\r\n     */\r\n    public dispose(): void {\r\n        if (this._workerPoolPromise) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises, github/no-then\r\n            this._workerPoolPromise.then((workerPool) => {\r\n                workerPool.dispose();\r\n            });\r\n        }\r\n\r\n        delete this._workerPoolPromise;\r\n        delete this._modulePromise;\r\n    }\r\n}\r\n", "import { DracoDecoderModule } from \"draco3dgltf\";\r\nimport { _IsConfigurationAvailable, DracoCodec, type IDracoCodecConfiguration } from \"./dracoCodec\";\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport { Geometry } from \"../geometry\";\r\nimport { VertexBuffer } from \"../buffer\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport type { BoundingInfo } from \"../../Culling/boundingInfo\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { DecodeMesh, DecoderWorkerFunction } from \"./dracoCompressionWorker\";\r\nimport type { IAttributeData, MeshData, DecoderMessage } from \"./dracoDecoder.types\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare let DracoDecoderModule: DracoDecoderModule;\r\n\r\n/**\r\n * @experimental This class is an experimental version of `DracoCompression` and is subject to change.\r\n *\r\n * Draco Decoder (https://google.github.io/draco/)\r\n *\r\n * This class wraps the Draco decoder module.\r\n *\r\n * By default, the configuration points to a copy of the Draco decoder files for glTF from the Babylon.js cdn https://cdn.babylonjs.com/draco_wasm_wrapper_gltf.js.\r\n *\r\n * To update the configuration, use the following code:\r\n * ```javascript\r\n *     DracoDecoder.DefaultConfiguration = {\r\n *          wasmUrl: \"<url to the WebAssembly library>\",\r\n *          wasmBinaryUrl: \"<url to the WebAssembly binary>\",\r\n *          fallbackUrl: \"<url to the fallback JavaScript library>\",\r\n *     };\r\n * ```\r\n *\r\n * Draco has two versions, one for WebAssembly and one for JavaScript. The decoder configuration can be set to only support WebAssembly or only support the JavaScript version.\r\n * Decoding will automatically fallback to the JavaScript version if WebAssembly version is not configured or if WebAssembly is not supported by the browser.\r\n * Use `DracoDecoder.DefaultAvailable` to determine if the decoder configuration is available for the current context.\r\n *\r\n * To decode Draco compressed data, get the default DracoDecoder object and call decodeMeshToGeometryAsync:\r\n * ```javascript\r\n *     var geometry = await DracoDecoder.Default.decodeMeshToGeometryAsync(data);\r\n * ```\r\n */\r\nexport class DracoDecoder extends DracoCodec {\r\n    /**\r\n     * Default configuration for the DracoDecoder. Defaults to the following:\r\n     * - numWorkers: 50% of the available logical processors, capped to 4. If no logical processors are available, defaults to 1.\r\n     * - wasmUrl: `\"https://cdn.babylonjs.com/draco_wasm_wrapper_gltf.js\"`\r\n     * - wasmBinaryUrl: `\"https://cdn.babylonjs.com/draco_decoder_gltf.wasm\"`\r\n     * - fallbackUrl: `\"https://cdn.babylonjs.com/draco_decoder_gltf.js\"`\r\n     */\r\n    public static DefaultConfiguration: IDracoCodecConfiguration = {\r\n        wasmUrl: `${Tools._DefaultCdnUrl}/draco_wasm_wrapper_gltf.js`,\r\n        wasmBinaryUrl: `${Tools._DefaultCdnUrl}/draco_decoder_gltf.wasm`,\r\n        fallbackUrl: `${Tools._DefaultCdnUrl}/draco_decoder_gltf.js`,\r\n    };\r\n\r\n    /**\r\n     * Returns true if the decoder's `DefaultConfiguration` is available.\r\n     */\r\n    public static get DefaultAvailable(): boolean {\r\n        return _IsConfigurationAvailable(DracoDecoder.DefaultConfiguration);\r\n    }\r\n\r\n    protected static _Default: Nullable<DracoDecoder> = null;\r\n    /**\r\n     * Default instance for the DracoDecoder.\r\n     */\r\n    public static get Default(): DracoDecoder {\r\n        DracoDecoder._Default ??= new DracoDecoder();\r\n        return DracoDecoder._Default;\r\n    }\r\n\r\n    /**\r\n     * Reset the default DracoDecoder object to null and disposing the removed default instance.\r\n     * Note that if the workerPool is a member of the static DefaultConfiguration object it is recommended not to run dispose,\r\n     * unless the static worker pool is no longer needed.\r\n     * @param skipDispose set to true to not dispose the removed default instance\r\n     */\r\n    public static ResetDefault(skipDispose?: boolean): void {\r\n        if (DracoDecoder._Default) {\r\n            if (!skipDispose) {\r\n                DracoDecoder._Default.dispose();\r\n            }\r\n            DracoDecoder._Default = null;\r\n        }\r\n    }\r\n\r\n    protected override _isModuleAvailable(): boolean {\r\n        return typeof DracoDecoderModule !== \"undefined\";\r\n    }\r\n\r\n    protected override async _createModuleAsync(wasmBinary?: ArrayBuffer, jsModule?: unknown /** DracoDecoderModule */): Promise<{ module: unknown /** DecoderModule */ }> {\r\n        const module = await ((jsModule as DracoDecoderModule) || DracoDecoderModule)({ wasmBinary });\r\n        return { module };\r\n    }\r\n\r\n    protected override _getWorkerContent(): string {\r\n        return `${DecodeMesh}(${DecoderWorkerFunction})()`;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Draco decoder.\r\n     * @param configuration Optional override of the configuration for the DracoDecoder. If not provided, defaults to {@link DracoDecoder.DefaultConfiguration}.\r\n     */\r\n    constructor(configuration: IDracoCodecConfiguration = DracoDecoder.DefaultConfiguration) {\r\n        super(configuration);\r\n    }\r\n\r\n    /**\r\n     * Decode Draco compressed mesh data to mesh data.\r\n     * @param data The ArrayBuffer or ArrayBufferView of the compressed Draco data\r\n     * @param attributes A map of attributes from vertex buffer kinds to Draco unique ids\r\n     * @param gltfNormalizedOverride A map of attributes from vertex buffer kinds to normalized flags to override the Draco normalization\r\n     * @returns A promise that resolves with the decoded mesh data\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    public decodeMeshToMeshDataAsync(\r\n        data: ArrayBuffer | ArrayBufferView,\r\n        attributes?: { [kind: string]: number },\r\n        gltfNormalizedOverride?: { [kind: string]: boolean }\r\n    ): Promise<MeshData> {\r\n        const dataView = data instanceof ArrayBuffer ? new Int8Array(data) : new Int8Array(data.buffer, data.byteOffset, data.byteLength);\r\n\r\n        const applyGltfNormalizedOverride = (kind: string, normalized: boolean): boolean => {\r\n            if (gltfNormalizedOverride && gltfNormalizedOverride[kind] !== undefined) {\r\n                if (normalized !== gltfNormalizedOverride[kind]) {\r\n                    Logger.Warn(\r\n                        `Normalized flag from Draco data (${normalized}) does not match normalized flag from glTF accessor (${gltfNormalizedOverride[kind]}). Using flag from glTF accessor.`\r\n                    );\r\n                }\r\n\r\n                return gltfNormalizedOverride[kind];\r\n            } else {\r\n                return normalized;\r\n            }\r\n        };\r\n\r\n        if (this._workerPoolPromise) {\r\n            // eslint-disable-next-line github/no-then\r\n            return this._workerPoolPromise.then(async (workerPool) => {\r\n                return await new Promise<MeshData>((resolve, reject) => {\r\n                    workerPool.push((worker, onComplete) => {\r\n                        let resultIndices: Nullable<Uint16Array | Uint32Array> = null;\r\n                        const resultAttributes: Array<IAttributeData> = [];\r\n\r\n                        const onError = (error: ErrorEvent) => {\r\n                            worker.removeEventListener(\"error\", onError);\r\n                            worker.removeEventListener(\"message\", onMessage);\r\n                            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\r\n                            reject(error);\r\n                            onComplete();\r\n                        };\r\n\r\n                        const onMessage = (event: MessageEvent<DecoderMessage>) => {\r\n                            const message = event.data;\r\n                            switch (message.id) {\r\n                                case \"indices\": {\r\n                                    resultIndices = message.data;\r\n                                    break;\r\n                                }\r\n                                case \"attribute\": {\r\n                                    resultAttributes.push({\r\n                                        kind: message.kind,\r\n                                        data: message.data,\r\n                                        size: message.size,\r\n                                        byteOffset: message.byteOffset,\r\n                                        byteStride: message.byteStride,\r\n                                        normalized: applyGltfNormalizedOverride(message.kind, message.normalized),\r\n                                    });\r\n                                    break;\r\n                                }\r\n                                case \"decodeMeshDone\": {\r\n                                    worker.removeEventListener(\"error\", onError);\r\n                                    worker.removeEventListener(\"message\", onMessage);\r\n                                    resolve({ indices: resultIndices!, attributes: resultAttributes, totalVertices: message.totalVertices });\r\n                                    onComplete();\r\n                                    break;\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        worker.addEventListener(\"error\", onError);\r\n                        worker.addEventListener(\"message\", onMessage);\r\n\r\n                        const dataViewCopy = dataView.slice();\r\n                        worker.postMessage({ id: \"decodeMesh\", dataView: dataViewCopy, attributes: attributes }, [dataViewCopy.buffer]);\r\n                    });\r\n                });\r\n            });\r\n        }\r\n\r\n        if (this._modulePromise) {\r\n            // eslint-disable-next-line github/no-then\r\n            return this._modulePromise.then((decoder) => {\r\n                let resultIndices: Nullable<Uint16Array | Uint32Array> = null;\r\n                const resultAttributes: Array<IAttributeData> = [];\r\n\r\n                const numPoints = DecodeMesh(\r\n                    decoder.module,\r\n                    dataView,\r\n                    attributes,\r\n                    (indices) => {\r\n                        resultIndices = indices;\r\n                    },\r\n                    (kind, data, size, byteOffset, byteStride, normalized) => {\r\n                        resultAttributes.push({\r\n                            kind,\r\n                            data,\r\n                            size,\r\n                            byteOffset,\r\n                            byteStride,\r\n                            normalized,\r\n                        });\r\n                    }\r\n                );\r\n\r\n                return { indices: resultIndices!, attributes: resultAttributes, totalVertices: numPoints };\r\n            });\r\n        }\r\n\r\n        throw new Error(\"Draco decoder module is not available\");\r\n    }\r\n\r\n    /**\r\n     * Decode Draco compressed mesh data to Babylon geometry.\r\n     * @param name The name to use when creating the geometry\r\n     * @param scene The scene to use when creating the geometry\r\n     * @param data The ArrayBuffer or ArrayBufferView of the Draco compressed data\r\n     * @param attributes A map of attributes from vertex buffer kinds to Draco unique ids\r\n     * @returns A promise that resolves with the decoded geometry\r\n     */\r\n    public async decodeMeshToGeometryAsync(name: string, scene: Scene, data: ArrayBuffer | ArrayBufferView, attributes?: { [kind: string]: number }): Promise<Geometry> {\r\n        const meshData = await this.decodeMeshToMeshDataAsync(data, attributes);\r\n        const geometry = new Geometry(name, scene);\r\n        if (meshData.indices) {\r\n            geometry.setIndices(meshData.indices);\r\n        }\r\n        for (const attribute of meshData.attributes) {\r\n            geometry.setVerticesBuffer(\r\n                new VertexBuffer(\r\n                    scene.getEngine(),\r\n                    attribute.data,\r\n                    attribute.kind,\r\n                    false,\r\n                    undefined,\r\n                    attribute.byteStride,\r\n                    undefined,\r\n                    attribute.byteOffset,\r\n                    attribute.size,\r\n                    undefined,\r\n                    attribute.normalized,\r\n                    true\r\n                ),\r\n                meshData.totalVertices\r\n            );\r\n        }\r\n        return geometry;\r\n    }\r\n\r\n    /** @internal */\r\n    public async _decodeMeshToGeometryForGltfAsync(\r\n        name: string,\r\n        scene: Scene,\r\n        data: ArrayBuffer | ArrayBufferView,\r\n        attributes: { [kind: string]: number },\r\n        gltfNormalizedOverride: { [kind: string]: boolean },\r\n        boundingInfo: Nullable<BoundingInfo>\r\n    ): Promise<Geometry> {\r\n        const meshData = await this.decodeMeshToMeshDataAsync(data, attributes, gltfNormalizedOverride);\r\n        const geometry = new Geometry(name, scene);\r\n        if (boundingInfo) {\r\n            geometry._boundingInfo = boundingInfo;\r\n            geometry.useBoundingInfoFromGeometry = true;\r\n        }\r\n        if (meshData.indices) {\r\n            geometry.setIndices(meshData.indices);\r\n        }\r\n        for (const attribute of meshData.attributes) {\r\n            geometry.setVerticesBuffer(\r\n                new VertexBuffer(\r\n                    scene.getEngine(),\r\n                    attribute.data,\r\n                    attribute.kind,\r\n                    false,\r\n                    undefined,\r\n                    attribute.byteStride,\r\n                    undefined,\r\n                    attribute.byteOffset,\r\n                    attribute.size,\r\n                    undefined,\r\n                    attribute.normalized,\r\n                    true\r\n                ),\r\n                meshData.totalVertices\r\n            );\r\n        }\r\n        return geometry;\r\n    }\r\n}\r\n", "/* eslint-disable github/no-then */\r\nimport { DracoDecoder } from \"core/Meshes/Compression/dracoDecoder\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { Geometry } from \"core/Meshes/geometry\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\n\r\nimport { MeshPrimitiveMode } from \"babylonjs-gltf2interface\";\r\nimport type { IKHRDracoMeshCompression } from \"babylonjs-gltf2interface\";\r\nimport type { IMeshPrimitive, IBufferView } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem, LoadBoundingInfoFromPositionAccessor } from \"../glTFLoader\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_draco_mesh_compression\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_draco_mesh_compression extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_draco_mesh_compression\"]: {};\r\n    }\r\n}\r\n\r\ninterface IBufferViewDraco extends IBufferView {\r\n    _dracoBabylonGeometry?: Promise<Geometry>;\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_draco_mesh_compression/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_draco_mesh_compression implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * The draco decoder used to decode vertex data or DracoDecoder.Default if not defined\r\n     */\r\n    public dracoDecoder?: DracoDecoder;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines whether to use the normalized flag from the glTF accessor instead of the Draco data. Defaults to true.\r\n     */\r\n    public useNormalizedFlagFromAccessor = true;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = DracoDecoder.DefaultAvailable && this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose(): void {\r\n        delete this.dracoDecoder;\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public _loadVertexDataAsync(context: string, primitive: IMeshPrimitive, babylonMesh: Mesh): Nullable<Promise<Geometry>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRDracoMeshCompression, Geometry>(context, primitive, this.name, async (extensionContext, extension) => {\r\n            if (primitive.mode != undefined) {\r\n                if (primitive.mode !== MeshPrimitiveMode.TRIANGLES && primitive.mode !== MeshPrimitiveMode.TRIANGLE_STRIP) {\r\n                    throw new Error(`${context}: Unsupported mode ${primitive.mode}`);\r\n                }\r\n            }\r\n\r\n            const attributes: { [kind: string]: number } = {};\r\n            const normalized: { [kind: string]: boolean } = {};\r\n            const loadAttribute = (name: string, kind: string) => {\r\n                const uniqueId = extension.attributes[name];\r\n                if (uniqueId == undefined) {\r\n                    return;\r\n                }\r\n\r\n                babylonMesh._delayInfo = babylonMesh._delayInfo || [];\r\n                if (babylonMesh._delayInfo.indexOf(kind) === -1) {\r\n                    babylonMesh._delayInfo.push(kind);\r\n                }\r\n\r\n                attributes[kind] = uniqueId;\r\n\r\n                if (this.useNormalizedFlagFromAccessor) {\r\n                    const accessor = ArrayItem.TryGet(this._loader.gltf.accessors, primitive.attributes[name]);\r\n                    if (accessor) {\r\n                        normalized[kind] = accessor.normalized || false;\r\n                    }\r\n                }\r\n            };\r\n\r\n            loadAttribute(\"POSITION\", VertexBuffer.PositionKind);\r\n            loadAttribute(\"NORMAL\", VertexBuffer.NormalKind);\r\n            loadAttribute(\"TANGENT\", VertexBuffer.TangentKind);\r\n            loadAttribute(\"TEXCOORD_0\", VertexBuffer.UVKind);\r\n            loadAttribute(\"TEXCOORD_1\", VertexBuffer.UV2Kind);\r\n            loadAttribute(\"TEXCOORD_2\", VertexBuffer.UV3Kind);\r\n            loadAttribute(\"TEXCOORD_3\", VertexBuffer.UV4Kind);\r\n            loadAttribute(\"TEXCOORD_4\", VertexBuffer.UV5Kind);\r\n            loadAttribute(\"TEXCOORD_5\", VertexBuffer.UV6Kind);\r\n            loadAttribute(\"JOINTS_0\", VertexBuffer.MatricesIndicesKind);\r\n            loadAttribute(\"WEIGHTS_0\", VertexBuffer.MatricesWeightsKind);\r\n            loadAttribute(\"COLOR_0\", VertexBuffer.ColorKind);\r\n\r\n            const bufferView = ArrayItem.Get(extensionContext, this._loader.gltf.bufferViews, extension.bufferView) as IBufferViewDraco;\r\n            if (!bufferView._dracoBabylonGeometry) {\r\n                bufferView._dracoBabylonGeometry = this._loader.loadBufferViewAsync(`/bufferViews/${bufferView.index}`, bufferView).then(async (data) => {\r\n                    const dracoDecoder = this.dracoDecoder || DracoDecoder.Default;\r\n                    const positionAccessor = ArrayItem.TryGet(this._loader.gltf.accessors, primitive.attributes[\"POSITION\"]);\r\n                    const babylonBoundingInfo =\r\n                        !this._loader.parent.alwaysComputeBoundingBox && !babylonMesh.skeleton && positionAccessor ? LoadBoundingInfoFromPositionAccessor(positionAccessor) : null;\r\n                    return await dracoDecoder\r\n                        ._decodeMeshToGeometryForGltfAsync(babylonMesh.name, this._loader.babylonScene, data, attributes, normalized, babylonBoundingInfo)\r\n                        .catch((error) => {\r\n                            throw new Error(`${context}: ${error.message}`);\r\n                        });\r\n                });\r\n            }\r\n\r\n            return await bufferView._dracoBabylonGeometry;\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_draco_mesh_compression(loader));\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { DirectionalLight } from \"core/Lights/directionalLight\";\r\nimport { PointLight } from \"core/Lights/pointLight\";\r\nimport { SpotLight } from \"core/Lights/spotLight\";\r\nimport { Light } from \"core/Lights/light\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\n\r\nimport type { IKHRLightsPunctual_LightReference } from \"babylonjs-gltf2interface\";\r\nimport { KHRLightsPunctual_LightType } from \"babylonjs-gltf2interface\";\r\nimport type { INode, IKHRLightsPunctual_Light } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_lights_punctual\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_lights_punctual extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_lights_punctual\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_lights_punctual/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_lights implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /** hidden */\r\n    private _loader: GLTFLoader;\r\n    private _lights?: IKHRLightsPunctual_Light[];\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n        delete this._lights;\r\n    }\r\n\r\n    /** @internal */\r\n    public onLoading(): void {\r\n        const extensions = this._loader.gltf.extensions;\r\n        if (extensions && extensions[this.name]) {\r\n            const extension = extensions[this.name];\r\n            this._lights = extension.lights;\r\n            ArrayItem.Assign(this._lights);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void): Nullable<Promise<TransformNode>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRLightsPunctual_LightReference, TransformNode>(context, node, this.name, async (extensionContext, extension) => {\r\n            this._loader._allMaterialsDirtyRequired = true;\r\n\r\n            return await this._loader.loadNodeAsync(context, node, (babylonMesh) => {\r\n                let babylonLight: Light;\r\n\r\n                const light = ArrayItem.Get(extensionContext, this._lights, extension.light);\r\n                const name = light.name || babylonMesh.name;\r\n\r\n                this._loader.babylonScene._blockEntityCollection = !!this._loader._assetContainer;\r\n\r\n                switch (light.type) {\r\n                    case KHRLightsPunctual_LightType.DIRECTIONAL: {\r\n                        const babylonDirectionalLight = new DirectionalLight(name, Vector3.Backward(), this._loader.babylonScene);\r\n                        babylonDirectionalLight.position.setAll(0);\r\n                        babylonLight = babylonDirectionalLight;\r\n                        break;\r\n                    }\r\n                    case KHRLightsPunctual_LightType.POINT: {\r\n                        babylonLight = new PointLight(name, Vector3.Zero(), this._loader.babylonScene);\r\n                        break;\r\n                    }\r\n                    case KHRLightsPunctual_LightType.SPOT: {\r\n                        const babylonSpotLight = new SpotLight(name, Vector3.Zero(), Vector3.Backward(), 0, 1, this._loader.babylonScene);\r\n                        babylonSpotLight.angle = ((light.spot && light.spot.outerConeAngle) || Math.PI / 4) * 2;\r\n                        babylonSpotLight.innerAngle = ((light.spot && light.spot.innerConeAngle) || 0) * 2;\r\n                        babylonLight = babylonSpotLight;\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        this._loader.babylonScene._blockEntityCollection = false;\r\n                        throw new Error(`${extensionContext}: Invalid light type (${light.type})`);\r\n                    }\r\n                }\r\n\r\n                babylonLight._parentContainer = this._loader._assetContainer;\r\n                this._loader.babylonScene._blockEntityCollection = false;\r\n                light._babylonLight = babylonLight;\r\n\r\n                babylonLight.falloffType = Light.FALLOFF_GLTF;\r\n                babylonLight.diffuse = light.color ? Color3.FromArray(light.color) : Color3.White();\r\n                babylonLight.intensity = light.intensity == undefined ? 1 : light.intensity;\r\n                babylonLight.range = light.range == undefined ? Number.MAX_VALUE : light.range;\r\n                babylonLight.parent = babylonMesh;\r\n\r\n                this._loader._babylonLights.push(babylonLight);\r\n\r\n                GLTFLoader.AddPointerMetadata(babylonLight, extensionContext);\r\n\r\n                assign(babylonMesh);\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_lights(loader));\r\n", "import type { Nullable } from \"core/types\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsPbrSpecularGlossiness } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_materials_pbrSpecularGlossiness\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_pbrSpecularGlossiness extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_pbrSpecularGlossiness\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Archived/KHR_materials_pbrSpecularGlossiness/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_pbrSpecularGlossiness implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 200;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsPbrSpecularGlossiness>(context, material, this.name, async (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialBasePropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadSpecularGlossinessPropertiesAsync(extensionContext, extension, babylonMaterial));\r\n            this._loader.loadMaterialAlphaProperties(context, material, babylonMaterial);\r\n            // eslint-disable-next-line github/no-then\r\n            return await Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadSpecularGlossinessPropertiesAsync(context: string, properties: IKHRMaterialsPbrSpecularGlossiness, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        babylonMaterial.metallic = null;\r\n        babylonMaterial.roughness = null;\r\n\r\n        if (properties.diffuseFactor) {\r\n            babylonMaterial.albedoColor = Color3.FromArray(properties.diffuseFactor);\r\n            babylonMaterial.alpha = properties.diffuseFactor[3];\r\n        } else {\r\n            babylonMaterial.albedoColor = Color3.White();\r\n        }\r\n\r\n        babylonMaterial.reflectivityColor = properties.specularFactor ? Color3.FromArray(properties.specularFactor) : Color3.White();\r\n        babylonMaterial.microSurface = properties.glossinessFactor == undefined ? 1 : properties.glossinessFactor;\r\n\r\n        if (properties.diffuseTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/diffuseTexture`, properties.diffuseTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Diffuse)`;\r\n                    babylonMaterial.albedoTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (properties.specularGlossinessTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/specularGlossinessTexture`, properties.specularGlossinessTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Specular Glossiness)`;\r\n                    babylonMaterial.reflectivityTexture = texture;\r\n                    babylonMaterial.reflectivityTexture.hasAlpha = true;\r\n                })\r\n            );\r\n\r\n            babylonMaterial.useMicroSurfaceFromReflectivityMapAlpha = true;\r\n        }\r\n\r\n        // eslint-disable-next-line github/no-then\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_pbrSpecularGlossiness(loader));\r\n", "import type { Nullable } from \"core/types\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_materials_unlit\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_unlit extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_unlit\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_unlit/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_unlit implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 210;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync(context, material, this.name, async () => {\r\n            return await this._loadUnlitPropertiesAsync(context, material, babylonMaterial);\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadUnlitPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Promise<void> {\r\n        const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\r\n\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        const properties = material.pbrMetallicRoughness;\r\n        if (properties) {\r\n            if (properties.baseColorFactor) {\r\n                adapter.baseColor = Color3.FromArray(properties.baseColorFactor);\r\n                adapter.geometryOpacity = properties.baseColorFactor[3];\r\n            }\r\n\r\n            if (properties.baseColorTexture) {\r\n                promises.push(\r\n                    this._loader.loadTextureInfoAsync(`${context}/baseColorTexture`, properties.baseColorTexture, (texture) => {\r\n                        texture.name = `${babylonMaterial.name} (Base Color)`;\r\n                        adapter.baseColorTexture = texture;\r\n                    })\r\n                );\r\n            }\r\n        }\r\n        adapter.isUnlit = true;\r\n        if (material.doubleSided) {\r\n            adapter.backFaceCulling = false;\r\n            adapter.twoSidedLighting = true;\r\n        }\r\n\r\n        this._loader.loadMaterialAlphaProperties(context, material, babylonMaterial);\r\n\r\n        // eslint-disable-next-line github/no-then\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_unlit(loader));\r\n", "import type { Nullable } from \"core/types\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { IMaterial, ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type {\r\n    IKHRMaterialsClearcoat,\r\n    IKHRMaterialsClearcoatDarkening,\r\n    IKHRMaterialsClearcoatIor,\r\n    IKHRMaterialsClearcoatColor,\r\n    IKHRMaterialsClearcoatAnisotropy,\r\n} from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\n\r\nconst NAME = \"KHR_materials_clearcoat\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_clearcoat extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_clearcoat\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_clearcoat/README.md)\r\n * [Playground Sample](https://www.babylonjs-playground.com/frame.html#7F7PN6#8)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_clearcoat implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 190;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsClearcoat>(context, material, this.name, async (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadClearCoatPropertiesAsync(extensionContext, extension, babylonMaterial));\r\n\r\n            const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\r\n            if (extension.extensions && extension.extensions.KHR_materials_clearcoat_darkening) {\r\n                const darkeningExtension = extension.extensions.KHR_materials_clearcoat_darkening as IKHRMaterialsClearcoatDarkening;\r\n                promises.push(this._loadClearCoatDarkeningPropertiesAsync(extensionContext, darkeningExtension, babylonMaterial));\r\n            }\r\n            if (extension.extensions && extension.extensions.KHR_materials_clearcoat_ior) {\r\n                const iorExtension = extension.extensions.KHR_materials_clearcoat_ior as IKHRMaterialsClearcoatIor;\r\n                let ior = 1.5;\r\n                if (iorExtension.clearcoatIor !== undefined) {\r\n                    ior = iorExtension.clearcoatIor;\r\n                }\r\n                adapter.coatIor = ior;\r\n            }\r\n            if (extension.extensions && extension.extensions.KHR_materials_clearcoat_anisotropy) {\r\n                const anisotropyExtension = extension.extensions.KHR_materials_clearcoat_anisotropy as IKHRMaterialsClearcoatAnisotropy;\r\n                promises.push(this._loadClearCoatAnisotropyPropertiesAsync(extensionContext, anisotropyExtension, babylonMaterial));\r\n            }\r\n            if (extension.extensions && extension.extensions.KHR_materials_clearcoat_color) {\r\n                const colorExtension = extension.extensions.KHR_materials_clearcoat_color as IKHRMaterialsClearcoatColor;\r\n                promises.push(this._loadClearCoatColorPropertiesAsync(extensionContext, colorExtension, babylonMaterial));\r\n            }\r\n\r\n            await Promise.all(promises);\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadClearCoatPropertiesAsync(context: string, properties: IKHRMaterialsClearcoat, babylonMaterial: Material): Promise<void> {\r\n        const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        // Set non-texture properties immediately\r\n        adapter.configureCoat();\r\n        adapter.coatWeight = properties.clearcoatFactor !== undefined ? properties.clearcoatFactor : 0;\r\n        adapter.coatRoughness = properties.clearcoatRoughnessFactor !== undefined ? properties.clearcoatRoughnessFactor : 0;\r\n\r\n        // Load textures\r\n        if (properties.clearcoatTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/clearcoatTexture`, properties.clearcoatTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (ClearCoat)`;\r\n                    adapter.coatWeightTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (properties.clearcoatRoughnessTexture) {\r\n            (properties.clearcoatRoughnessTexture as ITextureInfo).nonColorData = true;\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/clearcoatRoughnessTexture`, properties.clearcoatRoughnessTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (ClearCoat Roughness)`;\r\n                    adapter.coatRoughnessTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (properties.clearcoatNormalTexture) {\r\n            (properties.clearcoatNormalTexture as ITextureInfo).nonColorData = true;\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/clearcoatNormalTexture`, properties.clearcoatNormalTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (ClearCoat Normal)`;\r\n                    adapter.geometryCoatNormalTexture = texture;\r\n                    if (properties.clearcoatNormalTexture?.scale != undefined) {\r\n                        adapter.geometryCoatNormalTextureScale = properties.clearcoatNormalTexture.scale;\r\n                    }\r\n                })\r\n            );\r\n            adapter.setNormalMapInversions(!babylonMaterial.getScene().useRightHandedSystem, babylonMaterial.getScene().useRightHandedSystem);\r\n        }\r\n\r\n        // eslint-disable-next-line github/no-then\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadClearCoatDarkeningPropertiesAsync(context: string, properties: IKHRMaterialsClearcoatDarkening, babylonMaterial: Material): Promise<void> {\r\n        const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        adapter.coatDarkening = properties.clearcoatDarkeningFactor !== undefined ? properties.clearcoatDarkeningFactor : 1;\r\n\r\n        if (properties.clearcoatDarkeningTexture) {\r\n            (properties.clearcoatDarkeningTexture as ITextureInfo).nonColorData = true;\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/clearcoatDarkeningTexture`, properties.clearcoatDarkeningTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (ClearCoat Darkening)`;\r\n                    adapter.coatDarkeningTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        // eslint-disable-next-line github/no-then\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadClearCoatColorPropertiesAsync(context: string, properties: IKHRMaterialsClearcoatColor, babylonMaterial: Material): Promise<void> {\r\n        const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\r\n        const promises = new Array<Promise<any>>();\r\n        const colorFactor = Color3.White();\r\n        if (properties.clearcoatColorFactor !== undefined) {\r\n            colorFactor.fromArray(properties.clearcoatColorFactor);\r\n        }\r\n\r\n        adapter.coatColor = colorFactor;\r\n\r\n        if (properties.clearcoatColorTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/clearcoatColorTexture`, properties.clearcoatColorTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (ClearCoat Color)`;\r\n                    adapter.coatColorTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        // eslint-disable-next-line github/no-then\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadClearCoatAnisotropyPropertiesAsync(context: string, properties: IKHRMaterialsClearcoatAnisotropy, babylonMaterial: Material): Promise<void> {\r\n        const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        // Set non-texture properties immediately\r\n        const clearcoatAnisotropyWeight = properties.clearcoatAnisotropyStrength ?? 0;\r\n        const clearcoatAnisotropyAngle = properties.clearcoatAnisotropyRotation ?? 0;\r\n\r\n        adapter.coatRoughnessAnisotropy = clearcoatAnisotropyWeight;\r\n        adapter.geometryCoatTangentAngle = clearcoatAnisotropyAngle;\r\n\r\n        // Check if this is glTF-style anisotropy\r\n        const extensions = properties.extensions ?? {};\r\n        if (!extensions.EXT_materials_anisotropy_openpbr || !extensions.EXT_materials_anisotropy_openpbr.openPbrAnisotropyEnabled) {\r\n            adapter.configureGltfStyleAnisotropy(true);\r\n        }\r\n\r\n        // Load texture if present\r\n        if (properties.clearcoatAnisotropyTexture) {\r\n            (properties.clearcoatAnisotropyTexture as ITextureInfo).nonColorData = true;\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/clearcoatAnisotropyTexture`, properties.clearcoatAnisotropyTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Clearcoat Anisotropy)`;\r\n                    adapter.geometryCoatTangentTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        // eslint-disable-next-line github/no-then\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_clearcoat(loader));\r\n", "import type { Nullable } from \"core/types\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsIridescence } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_materials_iridescence\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_iridescence extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_iridescence\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_iridescence/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_iridescence implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 195;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsIridescence>(context, material, this.name, async (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadIridescencePropertiesAsync(extensionContext, extension, babylonMaterial));\r\n            // eslint-disable-next-line github/no-then\r\n            return await Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadIridescencePropertiesAsync(context: string, properties: IKHRMaterialsIridescence, babylonMaterial: Material): Promise<void> {\r\n        const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        // Set non-texture properties immediately\r\n        const iridescenceWeight = properties.iridescenceFactor ?? 0;\r\n        const iridescenceIor = properties.iridescenceIor ?? (properties as any).iridescenceIOR ?? 1.3;\r\n        const iridescenceThicknessMinimum = properties.iridescenceThicknessMinimum ?? 100;\r\n        const iridescenceThicknessMaximum = properties.iridescenceThicknessMaximum ?? 400;\r\n\r\n        adapter.iridescenceWeight = iridescenceWeight;\r\n        adapter.iridescenceIor = iridescenceIor;\r\n        adapter.iridescenceThicknessMinimum = iridescenceThicknessMinimum;\r\n        adapter.iridescenceThicknessMaximum = iridescenceThicknessMaximum;\r\n\r\n        // Load textures\r\n        if (properties.iridescenceTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/iridescenceTexture`, properties.iridescenceTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Iridescence)`;\r\n                    adapter.iridescenceTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (properties.iridescenceThicknessTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/iridescenceThicknessTexture`, properties.iridescenceThicknessTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Iridescence Thickness)`;\r\n                    adapter.iridescenceThicknessTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        // eslint-disable-next-line github/no-then\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_iridescence(loader));\r\n", "import type { Nullable } from \"core/types\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { IMaterial, ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsAnisotropy } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_materials_anisotropy\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_anisotropy extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_anisotropy\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/tree/main/extensions/2.0/Khronos/KHR_materials_anisotropy)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_anisotropy implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 195;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsAnisotropy>(context, material, this.name, async (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadAnisotropyPropertiesAsync(extensionContext, extension, babylonMaterial));\r\n            await Promise.all(promises);\r\n        });\r\n    }\r\n\r\n    private async _loadAnisotropyPropertiesAsync(context: string, properties: IKHRMaterialsAnisotropy, babylonMaterial: Material): Promise<void> {\r\n        const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        // Set non-texture properties immediately\r\n        const anisotropyWeight = properties.anisotropyStrength ?? 0;\r\n        const anisotropyAngle = properties.anisotropyRotation ?? 0;\r\n\r\n        adapter.specularRoughnessAnisotropy = anisotropyWeight;\r\n        adapter.geometryTangentAngle = anisotropyAngle;\r\n\r\n        // Check if this is glTF-style anisotropy\r\n        const extensions = properties.extensions ?? {};\r\n        if (!extensions.EXT_materials_anisotropy_openpbr || !extensions.EXT_materials_anisotropy_openpbr.openPbrAnisotropyEnabled) {\r\n            adapter.configureGltfStyleAnisotropy(true);\r\n        }\r\n\r\n        // Load texture if present\r\n        if (properties.anisotropyTexture) {\r\n            (properties.anisotropyTexture as ITextureInfo).nonColorData = true;\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/anisotropyTexture`, properties.anisotropyTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Anisotropy Intensity)`;\r\n                    adapter.geometryTangentTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        await Promise.all(promises);\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_anisotropy(loader));\r\n", "import type { Nullable } from \"core/types\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsEmissiveStrength } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_materials_emissive_strength\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_emissive_strength extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_emissive_strength\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_emissive_strength/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_emissive_strength implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 170;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsEmissiveStrength>(context, material, this.name, async (extensionContext, extension) => {\r\n            await this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial);\r\n            this._loadEmissiveProperties(extensionContext, extension, babylonMaterial);\r\n            return await Promise.resolve();\r\n        });\r\n    }\r\n\r\n    private _loadEmissiveProperties(context: string, properties: IKHRMaterialsEmissiveStrength, babylonMaterial: Material): void {\r\n        if (properties.emissiveStrength !== undefined) {\r\n            const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\r\n            adapter.emissionLuminance = properties.emissiveStrength;\r\n        }\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_emissive_strength(loader));\r\n", "import type { Nullable } from \"core/types\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { IMaterial, ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { IKHRMaterialsSheen } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_materials_sheen\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_sheen extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_sheen\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_sheen/README.md)\r\n * [Playground Sample](https://www.babylonjs-playground.com/frame.html#BNIZX6#4)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_sheen implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 190;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsSheen>(context, material, this.name, async (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadSheenPropertiesAsync(extensionContext, extension, babylonMaterial));\r\n            // eslint-disable-next-line github/no-then\r\n            return await Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadSheenPropertiesAsync(context: string, properties: IKHRMaterialsSheen, babylonMaterial: Material): Promise<void> {\r\n        const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        adapter.configureFuzz();\r\n\r\n        // Set non-texture properties immediately\r\n        const sheenColor = properties.sheenColorFactor !== undefined ? Color3.FromArray(properties.sheenColorFactor) : Color3.Black();\r\n        const sheenRoughness = properties.sheenRoughnessFactor !== undefined ? properties.sheenRoughnessFactor : 0.0;\r\n\r\n        adapter.fuzzWeight = 1; // KHR_materials_sheen assumes intensity of 1\r\n        adapter.fuzzColor = sheenColor;\r\n        adapter.fuzzRoughness = sheenRoughness;\r\n\r\n        // Load textures\r\n        if (properties.sheenColorTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/sheenColorTexture`, properties.sheenColorTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Sheen Color)`;\r\n                    adapter.fuzzColorTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (properties.sheenRoughnessTexture) {\r\n            (properties.sheenRoughnessTexture as ITextureInfo).nonColorData = true;\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/sheenRoughnessTexture`, properties.sheenRoughnessTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Sheen Roughness)`;\r\n                    adapter.fuzzRoughnessTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        // eslint-disable-next-line github/no-then\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_sheen(loader));\r\n", "import type { Nullable } from \"core/types\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { IMaterial, ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { IEXTMaterialsSpecularEdgeColor, IKHRMaterialsSpecular } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_materials_specular\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_specular extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_specular\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_specular/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_specular implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 190;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsSpecular>(context, material, this.name, async (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadSpecularPropertiesAsync(extensionContext, extension, babylonMaterial));\r\n            // Handle the EXT_materials_specular_edge_color sub-extension\r\n            // https://github.com/KhronosGroup/glTF/blob/2a1111b88f052cbd3e2d82abb9faee56e7494904/extensions/2.0/Vendor/EXT_materials_specular_edge_color/README.md\r\n            const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\r\n            if (extension.extensions && extension.extensions.EXT_materials_specular_edge_color) {\r\n                const specularEdgeColorExtension = extension.extensions.EXT_materials_specular_edge_color as IEXTMaterialsSpecularEdgeColor;\r\n                if (specularEdgeColorExtension.specularEdgeColorEnabled) {\r\n                    adapter.enableSpecularEdgeColor(true);\r\n                }\r\n            }\r\n            // eslint-disable-next-line github/no-then\r\n            return await Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadSpecularPropertiesAsync(context: string, properties: IKHRMaterialsSpecular, babylonMaterial: Material): Promise<void> {\r\n        const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        // Set non-texture properties immediately\r\n        adapter.specularWeight = properties.specularFactor ?? 1.0;\r\n        adapter.specularColor = properties.specularColorFactor !== undefined ? Color3.FromArray(properties.specularColorFactor) : new Color3(1, 1, 1);\r\n\r\n        if (properties.specularTexture) {\r\n            (properties.specularTexture as ITextureInfo).nonColorData = true;\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/specularTexture`, properties.specularTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Specular)`;\r\n                    adapter.specularWeightTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (properties.specularColorTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/specularColorTexture`, properties.specularColorTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Specular Color)`;\r\n                    adapter.specularColorTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        // eslint-disable-next-line github/no-then\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_specular(loader));\r\n", "import type { Nullable } from \"core/types\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsIor } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_materials_ior\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_ior extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_ior\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_ior/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_ior implements IGLTFLoaderExtension {\r\n    /**\r\n     * Default ior Value from the spec.\r\n     */\r\n    private static readonly _DEFAULT_IOR = 1.5;\r\n\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 180;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsIor>(context, material, this.name, async (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadIorPropertiesAsync(extensionContext, extension, babylonMaterial));\r\n            // eslint-disable-next-line github/no-then\r\n            return await Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadIorPropertiesAsync(context: string, properties: IKHRMaterialsIor, babylonMaterial: Material): Promise<void> {\r\n        const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\r\n        const indexOfRefraction = properties.ior !== undefined ? properties.ior : KHR_materials_ior._DEFAULT_IOR;\r\n        adapter.specularIor = indexOfRefraction;\r\n\r\n        return Promise.resolve();\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_ior(loader));\r\n", "import type { Nullable } from \"core/types\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\n\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport type { Node } from \"core/node\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { INode, IMeshPrimitive, IMesh } from \"../glTFLoaderInterfaces\";\r\nimport type { IKHRMaterialVariants_Mapping, IKHRMaterialVariants_Variant, IKHRMaterialVariants_Variants } from \"babylonjs-gltf2interface\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\nimport type { MaterialVariantsController } from \"../../glTFFileLoader\";\r\n\r\nconst NAME = \"KHR_materials_variants\";\r\n\r\nexport { MaterialVariantsController };\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // Define options related types here so they can be referenced in the options,\r\n    // but export the types at the module level. This ensures the types are in the\r\n    // correct namespace for UMD.\r\n    type MaterialVariantsController = {\r\n        /**\r\n         * The list of available variant names for this asset.\r\n         */\r\n        readonly variants: readonly string[];\r\n\r\n        /**\r\n         * Gets or sets the selected variant.\r\n         */\r\n        selectedVariant: string;\r\n    };\r\n\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_variants extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_variants\"]: Partial<{\r\n            /**\r\n             * Specifies the name of the variant that should be selected by default.\r\n             */\r\n            defaultVariant: string;\r\n\r\n            /**\r\n             * Defines a callback that will be called if material variants are loaded.\r\n             * @experimental\r\n             */\r\n            onLoaded: (controller: MaterialVariantsController) => void;\r\n        }>;\r\n    }\r\n}\r\n\r\ninterface IVariantsMap {\r\n    [key: string]: Array<{ mesh: AbstractMesh; material: Nullable<Material> }>;\r\n}\r\n\r\ninterface IExtensionMetadata {\r\n    lastSelected: Nullable<string | Array<string>>;\r\n    original: Array<{ mesh: AbstractMesh; material: Nullable<Material> }>;\r\n    variants: IVariantsMap;\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_variants/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_variants implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    private _variants?: Array<IKHRMaterialVariants_Variant>;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME) && !this._loader.parent.skipMaterials;\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of available variant names for this asset.\r\n     * @param rootNode The glTF root node\r\n     * @returns the list of all the variant names for this model\r\n     */\r\n    public static GetAvailableVariants(rootNode: TransformNode): string[] {\r\n        const extensionMetadata = this._GetExtensionMetadata(rootNode);\r\n        if (!extensionMetadata) {\r\n            return [];\r\n        }\r\n\r\n        return Object.keys(extensionMetadata.variants);\r\n    }\r\n\r\n    /**\r\n     * Gets the list of available variant names for this asset.\r\n     * @param rootNode The glTF root node\r\n     * @returns the list of all the variant names for this model\r\n     */\r\n    public getAvailableVariants(rootNode: TransformNode): string[] {\r\n        return KHR_materials_variants.GetAvailableVariants(rootNode);\r\n    }\r\n\r\n    /**\r\n     * Select a variant given a variant name or a list of variant names.\r\n     * @param rootNode The glTF root node\r\n     * @param variantName The variant name(s) to select.\r\n     */\r\n    public static SelectVariant(rootNode: TransformNode, variantName: string | string[]): void {\r\n        const extensionMetadata = this._GetExtensionMetadata(rootNode);\r\n        if (!extensionMetadata) {\r\n            throw new Error(`Cannot select variant on a glTF mesh that does not have the ${NAME} extension`);\r\n        }\r\n\r\n        const select = (variantName: string): void => {\r\n            const entries = extensionMetadata.variants[variantName];\r\n            if (entries) {\r\n                for (const entry of entries) {\r\n                    entry.mesh.material = entry.material;\r\n                }\r\n            }\r\n        };\r\n\r\n        if (variantName instanceof Array) {\r\n            for (const name of variantName) {\r\n                select(name);\r\n            }\r\n        } else {\r\n            select(variantName);\r\n        }\r\n\r\n        extensionMetadata.lastSelected = variantName;\r\n    }\r\n\r\n    /**\r\n     * Select a variant given a variant name or a list of variant names.\r\n     * @param rootNode The glTF root node\r\n     * @param variantName The variant name(s) to select.\r\n     */\r\n    public selectVariant(rootNode: TransformNode, variantName: string | string[]): void {\r\n        KHR_materials_variants.SelectVariant(rootNode, variantName);\r\n    }\r\n\r\n    /**\r\n     * Reset back to the original before selecting a variant.\r\n     * @param rootNode The glTF root node\r\n     */\r\n    public static Reset(rootNode: TransformNode): void {\r\n        const extensionMetadata = this._GetExtensionMetadata(rootNode);\r\n        if (!extensionMetadata) {\r\n            throw new Error(`Cannot reset on a glTF mesh that does not have the ${NAME} extension`);\r\n        }\r\n\r\n        for (const entry of extensionMetadata.original) {\r\n            entry.mesh.material = entry.material;\r\n        }\r\n\r\n        extensionMetadata.lastSelected = null;\r\n    }\r\n\r\n    /**\r\n     * Reset back to the original before selecting a variant.\r\n     * @param rootNode The glTF root node\r\n     */\r\n    public reset(rootNode: TransformNode): void {\r\n        KHR_materials_variants.Reset(rootNode);\r\n    }\r\n\r\n    /**\r\n     * Gets the last selected variant name(s) or null if original.\r\n     * @param rootNode The glTF root node\r\n     * @returns The selected variant name(s).\r\n     */\r\n    public static GetLastSelectedVariant(rootNode: TransformNode): Nullable<string | string[]> {\r\n        const extensionMetadata = this._GetExtensionMetadata(rootNode);\r\n        if (!extensionMetadata) {\r\n            throw new Error(`Cannot get the last selected variant on a glTF mesh that does not have the ${NAME} extension`);\r\n        }\r\n\r\n        return extensionMetadata.lastSelected;\r\n    }\r\n\r\n    /**\r\n     * Gets the last selected variant name(s) or null if original.\r\n     * @param rootNode The glTF root node\r\n     * @returns The selected variant name(s).\r\n     */\r\n    public getLastSelectedVariant(rootNode: TransformNode): Nullable<string | string[]> {\r\n        return KHR_materials_variants.GetLastSelectedVariant(rootNode);\r\n    }\r\n\r\n    private static _GetExtensionMetadata(rootNode: Nullable<TransformNode>): Nullable<IExtensionMetadata> {\r\n        return rootNode?._internalMetadata?.gltf?.[NAME] || null;\r\n    }\r\n\r\n    /** @internal */\r\n    public onLoading(): void {\r\n        const extensions = this._loader.gltf.extensions;\r\n        if (extensions && extensions[this.name]) {\r\n            const extension = extensions[this.name] as IKHRMaterialVariants_Variants;\r\n            this._variants = extension.variants;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public onReady(): void {\r\n        const rootNode = this._loader.rootBabylonMesh;\r\n        if (rootNode) {\r\n            const options = this._loader.parent.extensionOptions[NAME];\r\n            if (options?.defaultVariant) {\r\n                KHR_materials_variants.SelectVariant(rootNode, options.defaultVariant);\r\n            }\r\n\r\n            options?.onLoaded?.({\r\n                get variants() {\r\n                    return KHR_materials_variants.GetAvailableVariants(rootNode);\r\n                },\r\n                get selectedVariant(): string {\r\n                    const lastSelectedVariant = KHR_materials_variants.GetLastSelectedVariant(rootNode);\r\n                    if (!lastSelectedVariant) {\r\n                        return KHR_materials_variants.GetAvailableVariants(rootNode)[0];\r\n                    }\r\n                    if (Array.isArray(lastSelectedVariant)) {\r\n                        return lastSelectedVariant[0];\r\n                    }\r\n                    return lastSelectedVariant;\r\n                },\r\n                set selectedVariant(variantName) {\r\n                    KHR_materials_variants.SelectVariant(rootNode, variantName);\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public _loadMeshPrimitiveAsync(\r\n        context: string,\r\n        name: string,\r\n        node: INode,\r\n        mesh: IMesh,\r\n        primitive: IMeshPrimitive,\r\n        assign: (babylonMesh: AbstractMesh) => void\r\n    ): Nullable<Promise<AbstractMesh>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialVariants_Mapping, AbstractMesh>(context, primitive, this.name, async (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(\r\n                this._loader._loadMeshPrimitiveAsync(context, name, node, mesh, primitive, (babylonMesh) => {\r\n                    assign(babylonMesh);\r\n\r\n                    if (babylonMesh instanceof Mesh) {\r\n                        const babylonDrawMode = GLTFLoader._GetDrawMode(context, primitive.mode);\r\n\r\n                        const root = this._loader.rootBabylonMesh;\r\n                        const metadata = root ? (root._internalMetadata = root._internalMetadata || {}) : {};\r\n                        const gltf = (metadata.gltf = metadata.gltf || {});\r\n                        const extensionMetadata: IExtensionMetadata = (gltf[NAME] = gltf[NAME] || { lastSelected: null, original: [], variants: {} });\r\n\r\n                        // Store the original material.\r\n                        extensionMetadata.original.push({ mesh: babylonMesh, material: babylonMesh.material });\r\n\r\n                        // For each mapping, look at the variants and make a new entry for them.\r\n                        for (let mappingIndex = 0; mappingIndex < extension.mappings.length; ++mappingIndex) {\r\n                            const mapping = extension.mappings[mappingIndex];\r\n                            const material = ArrayItem.Get(`${extensionContext}/mappings/${mappingIndex}/material`, this._loader.gltf.materials, mapping.material);\r\n                            promises.push(\r\n                                this._loader._loadMaterialAsync(`#/materials/${mapping.material}`, material, babylonMesh, babylonDrawMode, (babylonMaterial) => {\r\n                                    for (let mappingVariantIndex = 0; mappingVariantIndex < mapping.variants.length; ++mappingVariantIndex) {\r\n                                        const variantIndex = mapping.variants[mappingVariantIndex];\r\n                                        const variant = ArrayItem.Get(`/extensions/${NAME}/variants/${variantIndex}`, this._variants, variantIndex);\r\n                                        extensionMetadata.variants[variant.name] = extensionMetadata.variants[variant.name] || [];\r\n                                        extensionMetadata.variants[variant.name].push({\r\n                                            mesh: babylonMesh,\r\n                                            material: babylonMaterial,\r\n                                        });\r\n\r\n                                        // Replace the target when original mesh is cloned\r\n                                        babylonMesh.onClonedObservable.add((newOne: Node) => {\r\n                                            const newMesh = newOne as Mesh;\r\n                                            let metadata: Nullable<IExtensionMetadata> = null;\r\n                                            let newRoot: Nullable<Node> = newMesh;\r\n\r\n                                            // Find root to get medata\r\n                                            do {\r\n                                                newRoot = newRoot.parent;\r\n                                                if (!newRoot) {\r\n                                                    return;\r\n                                                }\r\n                                                metadata = KHR_materials_variants._GetExtensionMetadata(newRoot as Mesh);\r\n                                            } while (metadata === null);\r\n\r\n                                            // Need to clone the metadata on the root (first time only)\r\n                                            if (root && metadata === KHR_materials_variants._GetExtensionMetadata(root)) {\r\n                                                // Copy main metadata\r\n                                                newRoot._internalMetadata = {};\r\n                                                for (const key in root._internalMetadata) {\r\n                                                    newRoot._internalMetadata[key] = root._internalMetadata[key];\r\n                                                }\r\n\r\n                                                // Copy the gltf metadata\r\n                                                newRoot._internalMetadata.gltf = [];\r\n                                                for (const key in root._internalMetadata.gltf) {\r\n                                                    newRoot._internalMetadata.gltf[key] = root._internalMetadata.gltf[key];\r\n                                                }\r\n\r\n                                                // Duplicate the extension specific metadata\r\n                                                newRoot._internalMetadata.gltf[NAME] = { lastSelected: null, original: [], variants: {} };\r\n                                                for (const original of metadata.original) {\r\n                                                    newRoot._internalMetadata.gltf[NAME].original.push({\r\n                                                        mesh: original.mesh,\r\n                                                        material: original.material,\r\n                                                    });\r\n                                                }\r\n                                                for (const key in metadata.variants) {\r\n                                                    if (Object.prototype.hasOwnProperty.call(metadata.variants, key)) {\r\n                                                        newRoot._internalMetadata.gltf[NAME].variants[key] = [];\r\n                                                        for (const variantEntry of metadata.variants[key]) {\r\n                                                            newRoot._internalMetadata.gltf[NAME].variants[key].push({\r\n                                                                mesh: variantEntry.mesh,\r\n                                                                material: variantEntry.material,\r\n                                                            });\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n\r\n                                                metadata = newRoot._internalMetadata.gltf[NAME];\r\n                                            }\r\n\r\n                                            // Relocate\r\n                                            for (const target of metadata!.original) {\r\n                                                if (target.mesh === babylonMesh) {\r\n                                                    target.mesh = newMesh;\r\n                                                }\r\n                                            }\r\n                                            for (const target of metadata!.variants[variant.name]) {\r\n                                                if (target.mesh === babylonMesh) {\r\n                                                    target.mesh = newMesh;\r\n                                                }\r\n                                            }\r\n                                        });\r\n                                    }\r\n                                })\r\n                            );\r\n                        }\r\n                    }\r\n                })\r\n            );\r\n            // eslint-disable-next-line github/no-then\r\n            return await Promise.all(promises).then(([babylonMesh]) => {\r\n                return babylonMesh;\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_variants(loader));\r\n", "import type { Nullable } from \"core/types\";\r\nimport type { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IMaterial, ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsTransmission } from \"babylonjs-gltf2interface\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport type { Texture } from \"core/Materials/Textures/texture\";\r\nimport { RenderTargetTexture } from \"core/Materials/Textures/renderTargetTexture\";\r\nimport type { Observer } from \"core/Misc/observable\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Constants } from \"core/Engines/constants\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { Color4 } from \"core/Maths/math.color\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\ninterface ITransmissionHelperHolder {\r\n    /**\r\n     * @internal\r\n     */\r\n    _transmissionHelper: TransmissionHelper | undefined;\r\n}\r\n\r\ninterface ITransmissionHelperOptions {\r\n    /**\r\n     * The size of the render buffers (default: 1024)\r\n     */\r\n    renderSize: number;\r\n\r\n    /**\r\n     * The number of samples to use when generating the render target texture for opaque meshes (default: 4)\r\n     */\r\n    samples: number;\r\n\r\n    /**\r\n     * Scale to apply when selecting the LOD level to sample the refraction texture (default: 1)\r\n     */\r\n    lodGenerationScale: number;\r\n\r\n    /**\r\n     * Offset to apply when selecting the LOD level to sample the refraction texture (default: -4)\r\n     */\r\n    lodGenerationOffset: number;\r\n\r\n    /**\r\n     * Type of the refraction render target texture (default: TEXTURETYPE_HALF_FLOAT)\r\n     */\r\n    renderTargetTextureType: number;\r\n\r\n    /**\r\n     * Defines if the mipmaps for the refraction render target texture must be generated (default: true)\r\n     */\r\n    generateMipmaps: boolean;\r\n\r\n    /**\r\n     * Clear color of the opaque texture. If not provided, use the scene clear color (which will be converted to linear space).\r\n     * If provided, should be in linear space\r\n     */\r\n    clearColor?: Color4;\r\n}\r\n\r\n/**\r\n * A class to handle setting up the rendering of opaque objects to be shown through transmissive objects.\r\n */\r\nclass TransmissionHelper {\r\n    /**\r\n     * Creates the default options for the helper.\r\n     * @returns the default options\r\n     */\r\n    private static _GetDefaultOptions(): ITransmissionHelperOptions {\r\n        return {\r\n            renderSize: 1024,\r\n            samples: 4,\r\n            lodGenerationScale: 1,\r\n            lodGenerationOffset: -4,\r\n            renderTargetTextureType: Constants.TEXTURETYPE_HALF_FLOAT,\r\n            generateMipmaps: true,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Stores the creation options.\r\n     */\r\n    private readonly _scene: Scene & ITransmissionHelperHolder;\r\n\r\n    private _options: ITransmissionHelperOptions;\r\n\r\n    private _opaqueRenderTarget: Nullable<RenderTargetTexture> = null;\r\n    private _opaqueMeshesCache: AbstractMesh[] = [];\r\n    private _transparentMeshesCache: AbstractMesh[] = [];\r\n    private _materialObservers: { [id: string]: Nullable<Observer<AbstractMesh>> } = {};\r\n\r\n    /**\r\n     * This observable will be notified with any error during the creation of the environment,\r\n     * mainly texture creation errors.\r\n     */\r\n    public onErrorObservable: Observable<{ message?: string; exception?: any }>;\r\n\r\n    /**\r\n     * constructor\r\n     * @param options Defines the options we want to customize the helper\r\n     * @param scene The scene to add the material to\r\n     */\r\n    constructor(options: Partial<ITransmissionHelperOptions>, scene: Scene) {\r\n        this._options = {\r\n            ...TransmissionHelper._GetDefaultOptions(),\r\n            ...options,\r\n        };\r\n        this._scene = scene as any;\r\n        this._scene._transmissionHelper = this;\r\n\r\n        this.onErrorObservable = new Observable();\r\n        this._scene.onDisposeObservable.addOnce(() => {\r\n            this.dispose();\r\n        });\r\n\r\n        this._parseScene();\r\n        this._setupRenderTargets();\r\n    }\r\n\r\n    /**\r\n     * Updates the background according to the new options\r\n     * @param options\r\n     */\r\n    public updateOptions(options: Partial<ITransmissionHelperOptions>) {\r\n        // First check if any options are actually being changed. If not, exit.\r\n        const newValues = Object.keys(options).filter((key: string) => (this._options as any)[key] !== (options as any)[key]);\r\n        if (!newValues.length) {\r\n            return;\r\n        }\r\n\r\n        const newOptions = {\r\n            ...this._options,\r\n            ...options,\r\n        };\r\n\r\n        const oldOptions = this._options;\r\n        this._options = newOptions;\r\n\r\n        // If size changes, recreate everything\r\n        if (\r\n            newOptions.renderSize !== oldOptions.renderSize ||\r\n            newOptions.renderTargetTextureType !== oldOptions.renderTargetTextureType ||\r\n            newOptions.generateMipmaps !== oldOptions.generateMipmaps ||\r\n            !this._opaqueRenderTarget\r\n        ) {\r\n            this._setupRenderTargets();\r\n        } else {\r\n            this._opaqueRenderTarget.samples = newOptions.samples;\r\n            this._opaqueRenderTarget.lodGenerationScale = newOptions.lodGenerationScale;\r\n            this._opaqueRenderTarget.lodGenerationOffset = newOptions.lodGenerationOffset;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns the opaque render target texture or null if not available.\r\n     */\r\n    public getOpaqueTarget(): Nullable<Texture> {\r\n        return this._opaqueRenderTarget;\r\n    }\r\n\r\n    private _shouldRenderAsTransmission(material: Nullable<Material>): boolean {\r\n        return (material as any)?.subSurface?.isRefractionEnabled ? true : false;\r\n    }\r\n\r\n    private _addMesh(mesh: AbstractMesh): void {\r\n        this._materialObservers[mesh.uniqueId] = mesh.onMaterialChangedObservable.add(this._onMeshMaterialChanged.bind(this));\r\n\r\n        // we need to defer the processing because _addMesh may be called as part as an instance mesh creation, in which case some\r\n        // internal properties are not setup yet, like _sourceMesh (needed when doing mesh.material below)\r\n        Tools.SetImmediate(() => {\r\n            if (this._shouldRenderAsTransmission(mesh.material)) {\r\n                (mesh.material as PBRMaterial).refractionTexture = this._opaqueRenderTarget;\r\n                if (this._transparentMeshesCache.indexOf(mesh) === -1) {\r\n                    this._transparentMeshesCache.push(mesh);\r\n                }\r\n            } else {\r\n                if (this._opaqueMeshesCache.indexOf(mesh) === -1) {\r\n                    this._opaqueMeshesCache.push(mesh);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private _removeMesh(mesh: AbstractMesh): void {\r\n        mesh.onMaterialChangedObservable.remove(this._materialObservers[mesh.uniqueId]);\r\n        delete this._materialObservers[mesh.uniqueId];\r\n        let idx = this._transparentMeshesCache.indexOf(mesh);\r\n        if (idx !== -1) {\r\n            this._transparentMeshesCache.splice(idx, 1);\r\n        }\r\n        idx = this._opaqueMeshesCache.indexOf(mesh);\r\n        if (idx !== -1) {\r\n            this._opaqueMeshesCache.splice(idx, 1);\r\n        }\r\n    }\r\n\r\n    private _parseScene(): void {\r\n        this._scene.meshes.forEach(this._addMesh.bind(this));\r\n        // Listen for when a mesh is added to the scene and add it to our cache lists.\r\n        this._scene.onNewMeshAddedObservable.add(this._addMesh.bind(this));\r\n        // Listen for when a mesh is removed from to the scene and remove it from our cache lists.\r\n        this._scene.onMeshRemovedObservable.add(this._removeMesh.bind(this));\r\n    }\r\n\r\n    // When one of the meshes in the scene has its material changed, make sure that it's in the correct cache list.\r\n    private _onMeshMaterialChanged(mesh: AbstractMesh) {\r\n        const transparentIdx = this._transparentMeshesCache.indexOf(mesh);\r\n        const opaqueIdx = this._opaqueMeshesCache.indexOf(mesh);\r\n\r\n        // If the material is transparent, make sure that it's added to the transparent list and removed from the opaque list\r\n        const useTransmission = this._shouldRenderAsTransmission(mesh.material);\r\n        if (useTransmission) {\r\n            if (mesh.material) {\r\n                const subSurface = (mesh.material as PBRMaterial).subSurface;\r\n                if (subSurface) {\r\n                    subSurface.refractionTexture = this._opaqueRenderTarget;\r\n                }\r\n            }\r\n            if (opaqueIdx !== -1) {\r\n                this._opaqueMeshesCache.splice(opaqueIdx, 1);\r\n                this._transparentMeshesCache.push(mesh);\r\n            } else if (transparentIdx === -1) {\r\n                this._transparentMeshesCache.push(mesh);\r\n            }\r\n            // If the material is opaque, make sure that it's added to the opaque list and removed from the transparent list\r\n        } else {\r\n            if (transparentIdx !== -1) {\r\n                this._transparentMeshesCache.splice(transparentIdx, 1);\r\n                this._opaqueMeshesCache.push(mesh);\r\n            } else if (opaqueIdx === -1) {\r\n                this._opaqueMeshesCache.push(mesh);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Check if the opaque render target has not been disposed and can still be used.\r\n     * @returns\r\n     */\r\n    public _isRenderTargetValid() {\r\n        return this._opaqueRenderTarget?.getInternalTexture() !== null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Setup the render targets according to the specified options.\r\n     */\r\n    public _setupRenderTargets(): void {\r\n        if (this._opaqueRenderTarget) {\r\n            this._opaqueRenderTarget.dispose();\r\n        }\r\n        this._opaqueRenderTarget = new RenderTargetTexture(\r\n            \"opaqueSceneTexture\",\r\n            this._options.renderSize,\r\n            this._scene,\r\n            this._options.generateMipmaps,\r\n            undefined,\r\n            this._options.renderTargetTextureType\r\n        );\r\n        this._opaqueRenderTarget.ignoreCameraViewport = true;\r\n        this._opaqueRenderTarget.renderList = this._opaqueMeshesCache;\r\n        this._opaqueRenderTarget.clearColor = this._options.clearColor?.clone() ?? this._scene.clearColor.clone();\r\n        this._opaqueRenderTarget.gammaSpace = false;\r\n        this._opaqueRenderTarget.lodGenerationScale = this._options.lodGenerationScale;\r\n        this._opaqueRenderTarget.lodGenerationOffset = this._options.lodGenerationOffset;\r\n        this._opaqueRenderTarget.samples = this._options.samples;\r\n        this._opaqueRenderTarget.renderSprites = true;\r\n        this._opaqueRenderTarget.renderParticles = true;\r\n        this._opaqueRenderTarget.disableImageProcessing = true;\r\n\r\n        let saveSceneEnvIntensity: number;\r\n        this._opaqueRenderTarget.onBeforeBindObservable.add((opaqueRenderTarget) => {\r\n            saveSceneEnvIntensity = this._scene.environmentIntensity;\r\n            this._scene.environmentIntensity = 1.0;\r\n            if (!this._options.clearColor) {\r\n                this._scene.clearColor.toLinearSpaceToRef(opaqueRenderTarget.clearColor, this._scene.getEngine().useExactSrgbConversions);\r\n            } else {\r\n                opaqueRenderTarget.clearColor.copyFrom(this._options.clearColor);\r\n            }\r\n        });\r\n        this._opaqueRenderTarget.onAfterUnbindObservable.add(() => {\r\n            this._scene.environmentIntensity = saveSceneEnvIntensity;\r\n        });\r\n\r\n        for (const mesh of this._transparentMeshesCache) {\r\n            if (this._shouldRenderAsTransmission(mesh.material)) {\r\n                (mesh.material as PBRMaterial).refractionTexture = this._opaqueRenderTarget;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose all the elements created by the Helper.\r\n     */\r\n    public dispose(): void {\r\n        this._scene._transmissionHelper = undefined;\r\n        if (this._opaqueRenderTarget) {\r\n            this._opaqueRenderTarget.dispose();\r\n            this._opaqueRenderTarget = null;\r\n        }\r\n        this._transparentMeshesCache = [];\r\n        this._opaqueMeshesCache = [];\r\n    }\r\n}\r\n\r\nconst NAME = \"KHR_materials_transmission\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_transmission extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_transmission\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_transmission/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_transmission implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 175;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n        if (this.enabled) {\r\n            loader.parent.transparencyAsCoverage = true;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsTransmission>(context, material, this.name, async (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadTransparentPropertiesAsync(extensionContext, material, babylonMaterial, extension));\r\n            // eslint-disable-next-line github/no-then\r\n            return await Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax, @typescript-eslint/promise-function-async\r\n    private _loadTransparentPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material, extension: IKHRMaterialsTransmission): Promise<void> {\r\n        const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\r\n        const transmissionWeight = extension.transmissionFactor !== undefined ? extension.transmissionFactor : 0.0;\r\n\r\n        if (transmissionWeight === 0) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        // Set transmission properties immediately via adapter\r\n        adapter.configureTransmission();\r\n        adapter.transmissionWeight = transmissionWeight;\r\n\r\n        // Handle transmission helper setup (only needed for PBR materials)\r\n        if (transmissionWeight > 0) {\r\n            const scene = babylonMaterial.getScene() as unknown as ITransmissionHelperHolder;\r\n            if (!scene._transmissionHelper) {\r\n                new TransmissionHelper({}, babylonMaterial.getScene());\r\n            } else if (!scene._transmissionHelper?._isRenderTargetValid()) {\r\n                // If the render target is not valid, recreate it.\r\n                scene._transmissionHelper?._setupRenderTargets();\r\n            }\r\n        }\r\n\r\n        // Load texture if present\r\n        let texturePromise: Promise<Nullable<BaseTexture>> = Promise.resolve(null);\r\n        if (extension.transmissionTexture) {\r\n            (extension.transmissionTexture as ITextureInfo).nonColorData = true;\r\n            texturePromise = this._loader.loadTextureInfoAsync(`${context}/transmissionTexture`, extension.transmissionTexture, (texture: BaseTexture) => {\r\n                texture.name = `${babylonMaterial.name} (Transmission)`;\r\n                adapter.transmissionWeightTexture = texture;\r\n            });\r\n        }\r\n\r\n        // eslint-disable-next-line github/no-then\r\n        return texturePromise.then(() => {});\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_transmission(loader));\r\n", "/* eslint-disable github/no-then */\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IMaterial, ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsDiffuseTransmission } from \"babylonjs-gltf2interface\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_materials_diffuse_transmission\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_diffuse_transmission extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_diffuse_transmission\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Proposed Specification](https://github.com/KhronosGroup/glTF/pull/1825)\r\n * !!! Experimental Extension Subject to Changes !!!\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_diffuse_transmission implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 174;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n        if (this.enabled) {\r\n            loader.parent.transparencyAsCoverage = true;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsDiffuseTransmission>(context, material, this.name, async (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadTranslucentPropertiesAsync(extensionContext, material, babylonMaterial, extension));\r\n            return await Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax, @typescript-eslint/promise-function-async\r\n    private _loadTranslucentPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material, extension: IKHRMaterialsDiffuseTransmission): Promise<void> {\r\n        const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\r\n        adapter.configureSubsurface();\r\n        adapter.subsurfaceWeight = extension.diffuseTransmissionFactor ?? 0;\r\n        adapter.subsurfaceColor = extension.diffuseTransmissionColorFactor !== undefined ? Color3.FromArray(extension.diffuseTransmissionColorFactor) : Color3.White();\r\n\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        if (extension.diffuseTransmissionTexture) {\r\n            (extension.diffuseTransmissionTexture as ITextureInfo).nonColorData = true;\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/diffuseTransmissionTexture`, extension.diffuseTransmissionTexture).then((texture: BaseTexture) => {\r\n                    texture.name = `${babylonMaterial.name} (Diffuse Transmission)`;\r\n                    adapter.subsurfaceWeightTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (extension.diffuseTransmissionColorTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/diffuseTransmissionColorTexture`, extension.diffuseTransmissionColorTexture).then((texture: BaseTexture) => {\r\n                    texture.name = `${babylonMaterial.name} (Diffuse Transmission Color)`;\r\n                    adapter.subsurfaceColorTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_diffuse_transmission(loader));\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { IMaterial, ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsVolume } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_materials_volume\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_volume extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_volume\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_volume/README.md)\r\n * @since 5.0.0\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_volume implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 173;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n        if (this.enabled) {\r\n            // We need to disable instance usage because the attenuation factor depends on the node scale of each individual mesh\r\n            this._loader._disableInstancedMesh++;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        if (this.enabled) {\r\n            this._loader._disableInstancedMesh--;\r\n        }\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsVolume>(context, material, this.name, async (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadVolumePropertiesAsync(extensionContext, material, babylonMaterial, extension));\r\n            // eslint-disable-next-line github/no-then\r\n            return await Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadVolumePropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material, extension: IKHRMaterialsVolume): Promise<void> {\r\n        const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\r\n\r\n        // If transparency isn't enabled already, this extension shouldn't do anything.\r\n        // i.e. it requires either the KHR_materials_transmission or KHR_materials_diffuse_transmission extensions.\r\n        if ((adapter.transmissionWeight === 0 && adapter.subsurfaceWeight === 0) || !extension.thicknessFactor) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        adapter.transmissionDepth = extension.attenuationDistance !== undefined ? extension.attenuationDistance : Number.MAX_VALUE;\r\n        adapter.transmissionColor =\r\n            extension.attenuationColor !== undefined && extension.attenuationColor.length == 3 ? Color3.FromArray(extension.attenuationColor) : Color3.White();\r\n        adapter.volumeThickness = extension.thicknessFactor ?? 0;\r\n\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        if (extension.thicknessTexture) {\r\n            (extension.thicknessTexture as ITextureInfo).nonColorData = true;\r\n            // eslint-disable-next-line github/no-then\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/thicknessTexture`, extension.thicknessTexture, (texture: BaseTexture) => {\r\n                    texture.name = `${babylonMaterial.name} (Thickness)`;\r\n                    adapter.volumeThicknessTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        // eslint-disable-next-line github/no-then\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_volume(loader));\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsDispersion } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_materials_dispersion\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_dispersion extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_dispersion\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/87bd64a7f5e23c84b6aef2e6082069583ed0ddb4/extensions/2.0/Khronos/KHR_materials_dispersion/README.md)\r\n * @experimental\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_dispersion implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 174;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsDispersion>(context, material, this.name, async (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadDispersionPropertiesAsync(extensionContext, material, babylonMaterial, extension));\r\n            // eslint-disable-next-line github/no-then\r\n            return await Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadDispersionPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material, extension: IKHRMaterialsDispersion): Promise<void> {\r\n        const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\r\n\r\n        // If transparency isn't enabled already, this extension shouldn't do anything.\r\n        // i.e. it requires either the KHR_materials_transmission or KHR_materials_diffuse_transmission extensions.\r\n        if (adapter.transmissionWeight > 0 || !extension.dispersion) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        adapter.transmissionDispersionAbbeNumber = 20.0 / extension.dispersion;\r\n\r\n        return Promise.resolve();\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_dispersion(loader));\r\n", "import type { Nullable } from \"core/types\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsDiffuseRoughness } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_materials_diffuse_roughness\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_materials_diffuse_roughness extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_materials_diffuse_roughness\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/fdee35425ae560ea378092e38977216d63a094ec/extensions/2.0/Khronos/KHR_materials_diffuse_roughness/README.md)\r\n * @experimental\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_materials_diffuse_roughness implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 190;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsDiffuseRoughness>(context, material, this.name, async (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadDiffuseRoughnessPropertiesAsync(extensionContext, extension, babylonMaterial));\r\n            // eslint-disable-next-line github/no-then\r\n            return await Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadDiffuseRoughnessPropertiesAsync(context: string, properties: IKHRMaterialsDiffuseRoughness, babylonMaterial: Material): Promise<void> {\r\n        const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        adapter.baseDiffuseRoughness = properties.diffuseRoughnessFactor ?? 0;\r\n\r\n        if (properties.diffuseRoughnessTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/diffuseRoughnessTexture`, properties.diffuseRoughnessTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Diffuse Roughness)`;\r\n                    adapter.baseDiffuseRoughnessTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        // eslint-disable-next-line github/no-then\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_materials_diffuse_roughness(loader));\r\n", "import type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport type { GLTFLoader } from \"../glTFLoader\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_mesh_quantization\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_mesh_quantization extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_mesh_quantization\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_mesh_quantization/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_mesh_quantization implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this.enabled = loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {}\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_mesh_quantization(loader));\r\n", "import type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\nimport type { ITexture } from \"../glTFLoaderInterfaces\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { IKHRTextureBasisU } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_texture_basisu\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_texture_basisu extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_texture_basisu\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_texture_basisu/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_texture_basisu implements IGLTFLoaderExtension {\r\n    /** The name of this extension. */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled. */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public _loadTextureAsync(context: string, texture: ITexture, assign: (babylonTexture: BaseTexture) => void): Nullable<Promise<BaseTexture>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRTextureBasisU, BaseTexture>(context, texture, this.name, async (extensionContext, extension) => {\r\n            const sampler = texture.sampler == undefined ? GLTFLoader.DefaultSampler : ArrayItem.Get(`${context}/sampler`, this._loader.gltf.samplers, texture.sampler);\r\n            const image = ArrayItem.Get(`${extensionContext}/source`, this._loader.gltf.images, extension.source);\r\n            return await this._loader._createTextureAsync(\r\n                context,\r\n                sampler,\r\n                image,\r\n                (babylonTexture) => {\r\n                    assign(babylonTexture);\r\n                },\r\n                texture._textureInfo.nonColorData ? { useRGBAIfASTCBC7NotAvailableWhenUASTC: true } : undefined,\r\n                !texture._textureInfo.nonColorData\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_texture_basisu(loader));\r\n", "import type { Nullable } from \"core/types\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\n\r\nimport type { ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRTextureTransform } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_texture_transform\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_texture_transform extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_texture_transform\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_texture_transform/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_texture_transform implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadTextureInfoAsync(context: string, textureInfo: ITextureInfo, assign: (babylonTexture: BaseTexture) => void): Nullable<Promise<BaseTexture>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRTextureTransform, BaseTexture>(context, textureInfo, this.name, async (extensionContext, extension) => {\r\n            return await this._loader.loadTextureInfoAsync(context, textureInfo, (babylonTexture) => {\r\n                if (!(babylonTexture instanceof Texture)) {\r\n                    throw new Error(`${extensionContext}: Texture type not supported`);\r\n                }\r\n\r\n                if (extension.offset) {\r\n                    babylonTexture.uOffset = extension.offset[0];\r\n                    babylonTexture.vOffset = extension.offset[1];\r\n                }\r\n\r\n                // Always rotate around the origin.\r\n                babylonTexture.uRotationCenter = 0;\r\n                babylonTexture.vRotationCenter = 0;\r\n\r\n                if (extension.rotation) {\r\n                    babylonTexture.wAng = -extension.rotation;\r\n                }\r\n\r\n                if (extension.scale) {\r\n                    babylonTexture.uScale = extension.scale[0];\r\n                    babylonTexture.vScale = extension.scale[1];\r\n                }\r\n\r\n                if (extension.texCoord != undefined) {\r\n                    babylonTexture.coordinatesIndex = extension.texCoord;\r\n                }\r\n\r\n                assign(babylonTexture);\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_texture_transform(loader));\r\n", "import type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport type { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRXmpJsonLd_Gltf, IKHRXmpJsonLd_Node } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"KHR_xmp_json_ld\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_xmp_json_ld extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_xmp_json_ld\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_xmp_json_ld/README.md)\r\n * @since 5.0.0\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_xmp_json_ld implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 100;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * Called after the loader state changes to LOADING.\r\n     */\r\n    public onLoading(): void {\r\n        if (this._loader.rootBabylonMesh === null) {\r\n            return;\r\n        }\r\n\r\n        const xmpGltf = this._loader.gltf.extensions?.KHR_xmp_json_ld as IKHRXmpJsonLd_Gltf;\r\n        const xmpNode = this._loader.gltf.asset?.extensions?.KHR_xmp_json_ld as IKHRXmpJsonLd_Node;\r\n        if (xmpGltf && xmpNode) {\r\n            const packet = +xmpNode.packet;\r\n            if (xmpGltf.packets && packet < xmpGltf.packets.length) {\r\n                this._loader.rootBabylonMesh.metadata = this._loader.rootBabylonMesh.metadata || {};\r\n                this._loader.rootBabylonMesh.metadata.xmp = xmpGltf.packets[packet];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_xmp_json_ld(loader));\r\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\n\r\nimport { Animation } from \"core/Animations/animation\";\r\nimport type { ICamera, IKHRLightsPunctual_Light, IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport { AnimationPropertyInfo } from \"../glTFLoaderAnimation\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { SetInterpolationForKey } from \"./objectModelMapping\";\r\n\r\nfunction getColor3(_target: any, source: Float32Array, offset: number, scale: number): Color3 {\r\n    return Color3.FromArray(source, offset).scale(scale);\r\n}\r\n\r\nfunction getAlpha(_target: any, source: Float32Array, offset: number, scale: number): number {\r\n    return source[offset + 3] * scale;\r\n}\r\n\r\nfunction getFloat(_target: any, source: Float32Array, offset: number, scale: number): number {\r\n    return source[offset] * scale;\r\n}\r\n\r\nfunction getMinusFloat(_target: any, source: Float32Array, offset: number, scale: number): number {\r\n    return -source[offset] * scale;\r\n}\r\n\r\nfunction getNextFloat(_target: any, source: Float32Array, offset: number, scale: number): number {\r\n    return source[offset + 1] * scale;\r\n}\r\n\r\nfunction getFloatBy2(_target: any, source: Float32Array, offset: number, scale: number): number {\r\n    return source[offset] * scale * 2;\r\n}\r\n\r\nfunction getTextureTransformTree(textureName: string) {\r\n    return {\r\n        scale: [\r\n            new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, `${textureName}.uScale`, getFloat, () => 2),\r\n            new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, `${textureName}.vScale`, getNextFloat, () => 2),\r\n        ],\r\n        offset: [\r\n            new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, `${textureName}.uOffset`, getFloat, () => 2),\r\n            new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, `${textureName}.vOffset`, getNextFloat, () => 2),\r\n        ],\r\n        rotation: [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, `${textureName}.wAng`, getMinusFloat, () => 1)],\r\n    };\r\n}\r\n\r\nclass CameraAnimationPropertyInfo extends AnimationPropertyInfo {\r\n    /** @internal */\r\n    public buildAnimations(target: ICamera, name: string, fps: number, keys: any[]) {\r\n        return [{ babylonAnimatable: target._babylonCamera!, babylonAnimation: this._buildAnimation(name, fps, keys) }];\r\n    }\r\n}\r\n\r\nclass MaterialAnimationPropertyInfo extends AnimationPropertyInfo {\r\n    /** @internal */\r\n    public buildAnimations(target: IMaterial, name: string, fps: number, keys: any[]) {\r\n        const babylonAnimations: { babylonAnimatable: IAnimatable; babylonAnimation: Animation }[] = [];\r\n        for (const fillMode in target._data!) {\r\n            babylonAnimations.push({\r\n                babylonAnimatable: target._data[fillMode].babylonMaterial,\r\n                babylonAnimation: this._buildAnimation(name, fps, keys),\r\n            });\r\n        }\r\n        return babylonAnimations;\r\n    }\r\n}\r\n\r\nclass LightAnimationPropertyInfo extends AnimationPropertyInfo {\r\n    /** @internal */\r\n    public buildAnimations(target: IKHRLightsPunctual_Light, name: string, fps: number, keys: any[]) {\r\n        return [{ babylonAnimatable: target._babylonLight!, babylonAnimation: this._buildAnimation(name, fps, keys) }];\r\n    }\r\n}\r\n\r\nSetInterpolationForKey(\"/cameras/{}/orthographic/xmag\", [\r\n    new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"orthoLeft\", getMinusFloat, () => 1),\r\n    new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"orthoRight\", getNextFloat, () => 1),\r\n]);\r\n\r\nSetInterpolationForKey(\"/cameras/{}/orthographic/ymag\", [\r\n    new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"orthoBottom\", getMinusFloat, () => 1),\r\n    new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"orthoTop\", getNextFloat, () => 1),\r\n]);\r\n\r\nSetInterpolationForKey(\"/cameras/{}/orthographic/zfar\", [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"maxZ\", getFloat, () => 1)]);\r\nSetInterpolationForKey(\"/cameras/{}/orthographic/znear\", [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"minZ\", getFloat, () => 1)]);\r\n\r\nSetInterpolationForKey(\"/cameras/{}/perspective/yfov\", [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"fov\", getFloat, () => 1)]);\r\nSetInterpolationForKey(\"/cameras/{}/perspective/zfar\", [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"maxZ\", getFloat, () => 1)]);\r\nSetInterpolationForKey(\"/cameras/{}/perspective/znear\", [new CameraAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"minZ\", getFloat, () => 1)]);\r\n\r\n// add interpolation to the materials mapping\r\nSetInterpolationForKey(\"/materials/{}/pbrMetallicRoughness/baseColorFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"albedoColor\", getColor3, () => 4),\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"alpha\", getAlpha, () => 4),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/pbrMetallicRoughness/metallicFactor\", [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"metallic\", getFloat, () => 1)]);\r\nSetInterpolationForKey(\"/materials/{}/pbrMetallicRoughness/metallicFactor\", [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"roughness\", getFloat, () => 1)]);\r\nconst baseColorTextureInterpolation = getTextureTransformTree(\"albedoTexture\");\r\nSetInterpolationForKey(\"/materials/{}/pbrMetallicRoughness/baseColorTexture/extensions/KHR_texture_transform/scale\", baseColorTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/pbrMetallicRoughness/baseColorTexture/extensions/KHR_texture_transform/offset\", baseColorTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/pbrMetallicRoughness/baseColorTexture/extensions/KHR_texture_transform/rotation\", baseColorTextureInterpolation.rotation);\r\n\r\nconst metallicRoughnessTextureInterpolation = getTextureTransformTree(\"metallicTexture\");\r\nSetInterpolationForKey(\"//materials/{}/pbrMetallicRoughness/metallicRoughnessTexture/scale\", metallicRoughnessTextureInterpolation.scale);\r\nSetInterpolationForKey(\"//materials/{}/pbrMetallicRoughness/metallicRoughnessTexture/offset\", metallicRoughnessTextureInterpolation.offset);\r\nSetInterpolationForKey(\"//materials/{}/pbrMetallicRoughness/metallicRoughnessTexture/rotation\", metallicRoughnessTextureInterpolation.rotation);\r\n\r\nSetInterpolationForKey(\"/materials/{}/emissiveFactor\", [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"emissiveColor\", getColor3, () => 3)]);\r\nconst normalTextureInterpolation = getTextureTransformTree(\"bumpTexture\");\r\nSetInterpolationForKey(\"/materials/{}/normalTexture/scale\", [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"bumpTexture.level\", getFloat, () => 1)]);\r\n\r\nSetInterpolationForKey(\"/materials/{}/normalTexture/extensions/KHR_texture_transform/scale\", normalTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/normalTexture/extensions/KHR_texture_transform/offset\", normalTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/normalTexture/extensions/KHR_texture_transform/rotation\", normalTextureInterpolation.rotation);\r\n\r\nSetInterpolationForKey(\"/materials/{}/occlusionTexture/strength\", [new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"ambientTextureStrength\", getFloat, () => 1)]);\r\n\r\nconst occlusionTextureInterpolation = getTextureTransformTree(\"ambientTexture\");\r\nSetInterpolationForKey(\"/materials/{}/occlusionTexture/extensions/KHR_texture_transform/scale\", occlusionTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/occlusionTexture/extensions/KHR_texture_transform/offset\", occlusionTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/occlusionTexture/extensions/KHR_texture_transform/rotation\", occlusionTextureInterpolation.rotation);\r\nconst emissiveTextureInterpolation = getTextureTransformTree(\"emissiveTexture\");\r\nSetInterpolationForKey(\"/materials/{}/emissiveTexture/extensions/KHR_texture_transform/scale\", emissiveTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/emissiveTexture/extensions/KHR_texture_transform/offset\", emissiveTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/emissiveTexture/extensions/KHR_texture_transform/rotation\", emissiveTextureInterpolation.rotation);\r\n\r\n// materials extensions\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_anisotropy/anisotropyStrength\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"anisotropy.intensity\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_anisotropy/anisotropyRotation\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"anisotropy.angle\", getFloat, () => 1),\r\n]);\r\nconst anisotropyTextureInterpolation = getTextureTransformTree(\"anisotropy.texture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_anisotropy/anisotropyTexture/extensions/KHR_texture_transform/scale\", anisotropyTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_anisotropy/anisotropyTexture/extensions/KHR_texture_transform/offset\", anisotropyTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_anisotropy/anisotropyTexture/extensions/KHR_texture_transform/rotation\", anisotropyTextureInterpolation.rotation);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"clearCoat.intensity\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatRoughnessFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"clearCoat.roughness\", getFloat, () => 1),\r\n]);\r\nconst clearcoatTextureInterpolation = getTextureTransformTree(\"clearCoat.texture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatTexture/extensions/KHR_texture_transform/scale\", clearcoatTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatTexture/extensions/KHR_texture_transform/offset\", clearcoatTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatTexture/extensions/KHR_texture_transform/rotation\", clearcoatTextureInterpolation.rotation);\r\nconst clearcoatNormalTextureInterpolation = getTextureTransformTree(\"clearCoat.bumpTexture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatNormalTexture/scale\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"clearCoat.bumpTexture.level\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatNormalTexture/extensions/KHR_texture_transform/scale\", clearcoatNormalTextureInterpolation.scale);\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatNormalTexture/extensions/KHR_texture_transform/offset\",\r\n    clearcoatNormalTextureInterpolation.offset\r\n);\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatNormalTexture/extensions/KHR_texture_transform/rotation\",\r\n    clearcoatNormalTextureInterpolation.rotation\r\n);\r\nconst clearcoatRoughnessTextureInterpolation = getTextureTransformTree(\"clearCoat.textureRoughness\");\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatRoughnessTexture/extensions/KHR_texture_transform/scale\",\r\n    clearcoatRoughnessTextureInterpolation.scale\r\n);\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatRoughnessTexture/extensions/KHR_texture_transform/offset\",\r\n    clearcoatRoughnessTextureInterpolation.offset\r\n);\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_clearcoat/clearcoatRoughnessTexture/extensions/KHR_texture_transform/rotation\",\r\n    clearcoatRoughnessTextureInterpolation.rotation\r\n);\r\n\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_dispersion/dispersionFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"subSurface.dispersion\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_emissive_strength/emissiveStrength\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"emissiveIntensity\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_ior/ior\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"indexOfRefraction\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_iridescence/iridescenceFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"iridescence.intensity\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_iridescence/iridescenceIor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"iridescence.indexOfRefraction\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_iridescence/iridescenceThicknessMinimum\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"iridescence.minimumThickness\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_iridescence/iridescenceThicknessMaximum\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"iridescence.maximumThickness\", getFloat, () => 1),\r\n]);\r\n\r\nconst iridescenceTextureInterpolation = getTextureTransformTree(\"iridescence.texture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_iridescence/iridescenceTexture/extensions/KHR_texture_transform/scale\", iridescenceTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_iridescence/iridescenceTexture/extensions/KHR_texture_transform/offset\", iridescenceTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_iridescence/iridescenceTexture/extensions/KHR_texture_transform/rotation\", iridescenceTextureInterpolation.rotation);\r\n\r\nconst iridescenceThicknessTextureInterpolation = getTextureTransformTree(\"iridescence.thicknessTexture\");\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_iridescence/iridescenceThicknessTexture/extensions/KHR_texture_transform/scale\",\r\n    iridescenceThicknessTextureInterpolation.scale\r\n);\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_iridescence/iridescenceThicknessTexture/extensions/KHR_texture_transform/offset\",\r\n    iridescenceThicknessTextureInterpolation.offset\r\n);\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_iridescence/iridescenceThicknessTexture/extensions/KHR_texture_transform/rotation\",\r\n    iridescenceThicknessTextureInterpolation.rotation\r\n);\r\n\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_sheen/sheenColorFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"sheen.color\", getColor3, () => 3),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_sheen/sheenRoughnessFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"sheen.roughness\", getFloat, () => 1),\r\n]);\r\n\r\nconst sheenTextureInterpolation = getTextureTransformTree(\"sheen.texture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_sheen/sheenColorTexture/extensions/KHR_texture_transform/scale\", sheenTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_sheen/sheenColorTexture/extensions/KHR_texture_transform/offset\", sheenTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_sheen/sheenColorTexture/extensions/KHR_texture_transform/rotation\", sheenTextureInterpolation.rotation);\r\n\r\nconst sheenRoughnessTextureInterpolation = getTextureTransformTree(\"sheen.textureRoughness\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_sheen/sheenRoughnessTexture/extensions/KHR_texture_transform/scale\", sheenRoughnessTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_sheen/sheenRoughnessTexture/extensions/KHR_texture_transform/offset\", sheenRoughnessTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_sheen/sheenRoughnessTexture/extensions/KHR_texture_transform/rotation\", sheenRoughnessTextureInterpolation.rotation);\r\n\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_specular/specularFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"metallicF0Factor\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_specular/specularColorFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"metallicReflectanceColor\", getColor3, () => 3),\r\n]);\r\n\r\nconst specularTextureInterpolation = getTextureTransformTree(\"metallicReflectanceTexture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_specular/specularTexture/extensions/KHR_texture_transform/scale\", specularTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_specular/specularTexture/extensions/KHR_texture_transform/offset\", specularTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_specular/specularTexture/extensions/KHR_texture_transform/rotation\", specularTextureInterpolation.rotation);\r\nconst specularColorTextureInterpolation = getTextureTransformTree(\"reflectanceTexture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_specular/specularColorTexture/extensions/KHR_texture_transform/scale\", specularColorTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_specular/specularColorTexture/extensions/KHR_texture_transform/offset\", specularColorTextureInterpolation.offset);\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_specular/specularColorTexture/extensions/KHR_texture_transform/rotation\",\r\n    specularColorTextureInterpolation.rotation\r\n);\r\n\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_transmission/transmissionFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"subSurface.refractionIntensity\", getFloat, () => 1),\r\n]);\r\nconst transmissionTextureInterpolation = getTextureTransformTree(\"subSurface.refractionIntensityTexture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_transmission/transmissionTexture/extensions/KHR_texture_transform/scale\", transmissionTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_transmission/transmissionTexture/extensions/KHR_texture_transform/offset\", transmissionTextureInterpolation.offset);\r\nSetInterpolationForKey(\r\n    \"/materials/{}/extensions/KHR_materials_transmission/transmissionTexture/extensions/KHR_texture_transform/rotation\",\r\n    transmissionTextureInterpolation.rotation\r\n);\r\n\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_volume/attenuationColor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"subSurface.tintColor\", getColor3, () => 3),\r\n]);\r\n\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_volume/attenuationDistance\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"subSurface.tintColorAtDistance\", getFloat, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_volume/thicknessFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"subSurface.maximumThickness\", getFloat, () => 1),\r\n]);\r\n\r\nconst thicknessTextureInterpolation = getTextureTransformTree(\"subSurface.thicknessTexture\");\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_volume/thicknessTexture/extensions/KHR_texture_transform/scale\", thicknessTextureInterpolation.scale);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_volume/thicknessTexture/extensions/KHR_texture_transform/offset\", thicknessTextureInterpolation.offset);\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_volume/thicknessTexture/extensions/KHR_texture_transform/rotation\", thicknessTextureInterpolation.rotation);\r\n\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_diffuse_transmission/diffuseTransmissionFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"subSurface.translucencyIntensity\", getFloat, () => 1),\r\n]);\r\n\r\nconst diffuseTransmissionTextureInterpolation = getTextureTransformTree(\"subSurface.translucencyIntensityTexture\");\r\nSetInterpolationForKey(\r\n    \"materials/{}/extensions/KHR_materials_diffuse_transmission/diffuseTransmissionTexture/extensions/KHR_texture_transform/scale\",\r\n    diffuseTransmissionTextureInterpolation.scale\r\n);\r\nSetInterpolationForKey(\r\n    \"materials/{}/extensions/KHR_materials_diffuse_transmission/diffuseTransmissionTexture/extensions/KHR_texture_transform/offset\",\r\n    diffuseTransmissionTextureInterpolation.offset\r\n);\r\nSetInterpolationForKey(\r\n    \"materials/{}/extensions/KHR_materials_diffuse_transmission/diffuseTransmissionTexture/extensions/KHR_texture_transform/rotation\",\r\n    diffuseTransmissionTextureInterpolation.rotation\r\n);\r\n\r\nSetInterpolationForKey(\"/materials/{}/extensions/KHR_materials_diffuse_transmission/diffuseTransmissionColorFactor\", [\r\n    new MaterialAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"subSurface.translucencyColor\", getColor3, () => 3),\r\n]);\r\n\r\nconst diffuseTransmissionColorTextureInterpolation = getTextureTransformTree(\"subSurface.translucencyColorTexture\");\r\nSetInterpolationForKey(\r\n    \"materials/{}/extensions/KHR_materials_diffuse_transmission/diffuseTransmissionColorTexture/extensions/KHR_texture_transform/scale\",\r\n    diffuseTransmissionColorTextureInterpolation.scale\r\n);\r\nSetInterpolationForKey(\r\n    \"materials/{}/extensions/KHR_materials_diffuse_transmission/diffuseTransmissionColorTexture/extensions/KHR_texture_transform/offset\",\r\n    diffuseTransmissionColorTextureInterpolation.offset\r\n);\r\nSetInterpolationForKey(\r\n    \"materials/{}/extensions/KHR_materials_diffuse_transmission/diffuseTransmissionColorTexture/extensions/KHR_texture_transform/rotation\",\r\n    diffuseTransmissionColorTextureInterpolation.rotation\r\n);\r\n\r\nSetInterpolationForKey(\"/extensions/KHR_lights_punctual/lights/{}/color\", [new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"diffuse\", getColor3, () => 3)]);\r\nSetInterpolationForKey(\"/extensions/KHR_lights_punctual/lights/{}/intensity\", [new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"intensity\", getFloat, () => 1)]);\r\nSetInterpolationForKey(\"/extensions/KHR_lights_punctual/lights/{}/range\", [new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"range\", getFloat, () => 1)]);\r\nSetInterpolationForKey(\"/extensions/KHR_lights_punctual/lights/{}/spot/innerConeAngle\", [\r\n    new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"innerAngle\", getFloatBy2, () => 1),\r\n]);\r\nSetInterpolationForKey(\"/extensions/KHR_lights_punctual/lights/{}/spot/outerConeAngle\", [\r\n    new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"angle\", getFloatBy2, () => 1),\r\n]);\r\n\r\nSetInterpolationForKey(\"/nodes/{}/extensions/EXT_lights_ies/color\", [new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_COLOR3, \"diffuse\", getColor3, () => 3)]);\r\nSetInterpolationForKey(\"/nodes/{}/extensions/EXT_lights_ies/multiplier\", [new LightAnimationPropertyInfo(Animation.ANIMATIONTYPE_FLOAT, \"intensity\", getFloat, () => 1)]);\r\n", "import type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport type { GLTFLoader } from \"../glTFLoader\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { Animation } from \"core/Animations/animation\";\r\nimport type { IAnimatable } from \"core/Animations/animatable.interface\";\r\nimport type { IAnimation, IAnimationChannel } from \"../glTFLoaderInterfaces\";\r\nimport type { IKHRAnimationPointer } from \"babylonjs-gltf2interface\";\r\nimport { AnimationChannelTargetPath } from \"babylonjs-gltf2interface\";\r\nimport { Logger } from \"core/Misc/logger\";\r\nimport type { GLTFPathToObjectConverter } from \"./gltfPathToObjectConverter\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\nimport { GetPathToObjectConverter } from \"./objectModelMapping\";\r\nimport \"./KHR_animation_pointer.data\";\r\n\r\nconst NAME = \"KHR_animation_pointer\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_animation_pointer extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_animation_pointer\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification PR](https://github.com/KhronosGroup/glTF/pull/2147)\r\n * !!! Experimental Extension Subject to Changes !!!\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class KHR_animation_pointer implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    private _loader: GLTFLoader;\r\n    private _pathToObjectConverter?: GLTFPathToObjectConverter<any, any, any>;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this._pathToObjectConverter = GetPathToObjectConverter(this._loader.gltf);\r\n    }\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public get enabled(): boolean {\r\n        return this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n        delete this._pathToObjectConverter; // GC\r\n    }\r\n\r\n    /**\r\n     * Loads a glTF animation channel.\r\n     * @param context The context when loading the asset\r\n     * @param animationContext The context of the animation when loading the asset\r\n     * @param animation The glTF animation property\r\n     * @param channel The glTF animation channel property\r\n     * @param onLoad Called for each animation loaded\r\n     * @returns A void promise that resolves when the load is complete or null if not handled\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public _loadAnimationChannelAsync(\r\n        context: string,\r\n        animationContext: string,\r\n        animation: IAnimation,\r\n        channel: IAnimationChannel,\r\n        onLoad: (babylonAnimatable: IAnimatable, babylonAnimation: Animation) => void\r\n    ): Nullable<Promise<void>> {\r\n        const extension = channel.target.extensions?.KHR_animation_pointer as IKHRAnimationPointer;\r\n        if (!extension || !this._pathToObjectConverter) {\r\n            return null;\r\n        }\r\n\r\n        if (channel.target.path !== AnimationChannelTargetPath.POINTER) {\r\n            Logger.Warn(`${context}/target/path: Value (${channel.target.path}) must be (${AnimationChannelTargetPath.POINTER}) when using the ${this.name} extension`);\r\n        }\r\n\r\n        if (channel.target.node != undefined) {\r\n            Logger.Warn(`${context}/target/node: Value (${channel.target.node}) must not be present when using the ${this.name} extension`);\r\n        }\r\n\r\n        const extensionContext = `${context}/extensions/${this.name}`;\r\n\r\n        const pointer = extension.pointer;\r\n        if (!pointer) {\r\n            throw new Error(`${extensionContext}: Pointer is missing`);\r\n        }\r\n\r\n        try {\r\n            const obj = this._pathToObjectConverter.convert(pointer);\r\n            if (!obj.info.interpolation) {\r\n                throw new Error(`${extensionContext}/pointer: Interpolation is missing`);\r\n            }\r\n            return this._loader._loadAnimationChannelFromTargetInfoAsync(\r\n                context,\r\n                animationContext,\r\n                animation,\r\n                channel,\r\n                {\r\n                    object: obj.object,\r\n                    info: obj.info.interpolation,\r\n                },\r\n                onLoad\r\n            );\r\n        } catch (e) {\r\n            Logger.Warn(`${extensionContext}/pointer: Invalid pointer (${pointer}) skipped`);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_animation_pointer(loader));\r\n", "/**\r\n * Composed of a frame, and an action function\r\n */\r\nexport class AnimationEvent {\r\n    /**\r\n     * Specifies if the animation event is done\r\n     */\r\n    public isDone: boolean = false;\r\n\r\n    /**\r\n     * Initializes the animation event\r\n     * @param frame The frame for which the event is triggered\r\n     * @param action The event to perform when triggered\r\n     * @param onlyOnce Specifies if the event should be triggered only once\r\n     */\r\n    constructor(\r\n        /** The frame for which the event is triggered **/\r\n        public frame: number,\r\n        /** The event to perform when triggered **/\r\n        public action: (currentFrame: number) => void,\r\n        /** Specifies if the event should be triggered only once**/\r\n        public onlyOnce?: boolean\r\n    ) {}\r\n\r\n    /** @internal */\r\n    public _clone(): AnimationEvent {\r\n        return new AnimationEvent(this.frame, this.action, this.onlyOnce);\r\n    }\r\n}\r\n", "import { Tools } from \"../Misc/tools\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport type { ISoundOptions } from \"./Interfaces/ISoundOptions\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport type { IAudioEngine } from \"./Interfaces/IAudioEngine\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { AbstractEngine } from \"core/Engines/abstractEngine\";\r\nimport { _RetryWithInterval } from \"core/Misc/timingTools\";\r\n\r\n/**\r\n * Defines a sound that can be played in the application.\r\n * The sound can either be an ambient track or a simple sound played in reaction to a user action.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic\r\n */\r\nexport class Sound {\r\n    /**\r\n     * The name of the sound in the scene.\r\n     */\r\n    public name: string;\r\n    /**\r\n     * Does the sound autoplay once loaded.\r\n     */\r\n    public autoplay: boolean = false;\r\n\r\n    private _loop = false;\r\n    /**\r\n     * Does the sound loop after it finishes playing once.\r\n     */\r\n    public get loop(): boolean {\r\n        return this._loop;\r\n    }\r\n\r\n    public set loop(value: boolean) {\r\n        if (value === this._loop) {\r\n            return;\r\n        }\r\n\r\n        this._loop = value;\r\n        this.updateOptions({ loop: value });\r\n    }\r\n\r\n    /**\r\n     * Does the sound use a custom attenuation curve to simulate the falloff\r\n     * happening when the source gets further away from the camera.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-your-own-custom-attenuation-function\r\n     */\r\n    public useCustomAttenuation: boolean = false;\r\n    /**\r\n     * The sound track id this sound belongs to.\r\n     */\r\n    public soundTrackId: number;\r\n    /**\r\n     * Is this sound currently played.\r\n     */\r\n    public isPlaying: boolean = false;\r\n    /**\r\n     * Is this sound currently paused.\r\n     */\r\n    public isPaused: boolean = false;\r\n    /**\r\n     * Define the reference distance the sound should be heard perfectly.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public refDistance: number = 1;\r\n    /**\r\n     * Define the roll off factor of spatial sounds.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public rolloffFactor: number = 1;\r\n    /**\r\n     * Define the max distance the sound should be heard (intensity just became 0 at this point).\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public maxDistance: number = 100;\r\n    /**\r\n     * Define the distance attenuation model the sound will follow.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public distanceModel: string = \"linear\";\r\n    /**\r\n     * @internal\r\n     * Back Compat\r\n     **/\r\n    public onended: () => any;\r\n    /**\r\n     * Gets or sets an object used to store user defined information for the sound.\r\n     */\r\n    public metadata: any = null;\r\n\r\n    /**\r\n     * Observable event when the current playing sound finishes.\r\n     */\r\n    public onEndedObservable = new Observable<Sound>();\r\n\r\n    /**\r\n     * Gets the current time for the sound.\r\n     */\r\n    public get currentTime(): number {\r\n        if (this._htmlAudioElement) {\r\n            return this._htmlAudioElement.currentTime;\r\n        }\r\n\r\n        if (AbstractEngine.audioEngine?.audioContext && (this.isPlaying || this.isPaused)) {\r\n            // The `_currentTime` member is only updated when the sound is paused. Add the time since the last start\r\n            // to get the actual current time.\r\n            const timeSinceLastStart = this.isPaused ? 0 : AbstractEngine.audioEngine.audioContext.currentTime - this._startTime;\r\n            return this._currentTime + timeSinceLastStart;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Does this sound enables spatial sound.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public get spatialSound(): boolean {\r\n        return this._spatialSound;\r\n    }\r\n\r\n    /**\r\n     * Does this sound enables spatial sound.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public set spatialSound(newValue: boolean) {\r\n        if (newValue == this._spatialSound) {\r\n            return;\r\n        }\r\n\r\n        const wasPlaying = this.isPlaying;\r\n        this.pause();\r\n\r\n        if (newValue) {\r\n            this._spatialSound = newValue;\r\n            this._updateSpatialParameters();\r\n        } else {\r\n            this._disableSpatialSound();\r\n        }\r\n\r\n        if (wasPlaying) {\r\n            this.play();\r\n        }\r\n    }\r\n\r\n    private _spatialSound: boolean = false;\r\n    private _panningModel: string = \"equalpower\";\r\n    private _playbackRate: number = 1;\r\n    private _streaming: boolean = false;\r\n    private _startTime: number = 0;\r\n    private _currentTime: number = 0;\r\n    private _position: Vector3 = Vector3.Zero();\r\n    private _localDirection: Vector3 = new Vector3(1, 0, 0);\r\n    private _volume: number = 1;\r\n    private _isReadyToPlay: boolean = false;\r\n    private _isDirectional: boolean = false;\r\n    private _readyToPlayCallback: Nullable<() => any>;\r\n    private _audioBuffer: Nullable<AudioBuffer>;\r\n    private _soundSource: Nullable<AudioBufferSourceNode>;\r\n    private _streamingSource: Nullable<AudioNode>;\r\n    private _soundPanner: Nullable<PannerNode>;\r\n    private _soundGain: Nullable<GainNode>;\r\n    private _inputAudioNode: Nullable<AudioNode>;\r\n    private _outputAudioNode: Nullable<AudioNode>;\r\n    // Used if you'd like to create a directional sound.\r\n    // If not set, the sound will be omnidirectional\r\n    private _coneInnerAngle: number = 360;\r\n    private _coneOuterAngle: number = 360;\r\n    private _coneOuterGain: number = 0;\r\n    private _scene: Scene;\r\n    private _connectedTransformNode: Nullable<TransformNode>;\r\n    private _customAttenuationFunction: (currentVolume: number, currentDistance: number, maxDistance: number, refDistance: number, rolloffFactor: number) => number;\r\n    private _registerFunc: Nullable<(connectedMesh: TransformNode) => void>;\r\n    private _isOutputConnected = false;\r\n    private _htmlAudioElement: Nullable<HTMLAudioElement>;\r\n    private _urlType: \"Unknown\" | \"String\" | \"Array\" | \"ArrayBuffer\" | \"MediaStream\" | \"AudioBuffer\" | \"MediaElement\" = \"Unknown\";\r\n    private _length?: number;\r\n    private _offset?: number;\r\n    private _tryToPlayTimeout: Nullable<NodeJS.Timeout>;\r\n    private _audioUnlockedObserver?: Nullable<Observer<IAudioEngine>>;\r\n    private _url?: Nullable<string>;\r\n    /**\r\n     * @internal\r\n     */\r\n    public static _SceneComponentInitialization: (scene: Scene) => void = (_) => {\r\n        throw _WarnImport(\"AudioSceneComponent\");\r\n    };\r\n\r\n    /**\r\n     * Create a sound and attach it to a scene\r\n     * @param name Name of your sound\r\n     * @param urlOrArrayBuffer Url to the sound to load async or ArrayBuffer, it also works with MediaStreams and AudioBuffers\r\n     * @param scene defines the scene the sound belongs to\r\n     * @param readyToPlayCallback Provide a callback function if you'd like to load your code once the sound is ready to be played\r\n     * @param options Objects to provide with the current available options: autoplay, loop, volume, spatialSound, maxDistance, rolloffFactor, refDistance, distanceModel, panningModel, streaming\r\n     */\r\n    constructor(name: string, urlOrArrayBuffer: any, scene?: Nullable<Scene>, readyToPlayCallback: Nullable<() => void> = null, options?: ISoundOptions) {\r\n        this.name = name;\r\n        scene = scene || EngineStore.LastCreatedScene;\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._scene = scene;\r\n        Sound._SceneComponentInitialization(scene);\r\n\r\n        this._readyToPlayCallback = readyToPlayCallback;\r\n        // Default custom attenuation function is a linear attenuation\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        this._customAttenuationFunction = (currentVolume: number, currentDistance: number, maxDistance: number, refDistance: number, rolloffFactor: number) => {\r\n            if (currentDistance < maxDistance) {\r\n                return currentVolume * (1 - currentDistance / maxDistance);\r\n            } else {\r\n                return 0;\r\n            }\r\n        };\r\n        if (options) {\r\n            this.autoplay = options.autoplay || false;\r\n            this._loop = options.loop || false;\r\n            // if volume === 0, we need another way to check this option\r\n            if (options.volume !== undefined) {\r\n                this._volume = options.volume;\r\n            }\r\n            this._spatialSound = options.spatialSound ?? false;\r\n            this.maxDistance = options.maxDistance ?? 100;\r\n            this.useCustomAttenuation = options.useCustomAttenuation ?? false;\r\n            this.rolloffFactor = options.rolloffFactor || 1;\r\n            this.refDistance = options.refDistance || 1;\r\n            this.distanceModel = options.distanceModel || \"linear\";\r\n            this._playbackRate = options.playbackRate || 1;\r\n            this._streaming = options.streaming ?? false;\r\n            this._length = options.length;\r\n            this._offset = options.offset;\r\n        }\r\n\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio && AbstractEngine.audioEngine.audioContext) {\r\n            this._soundGain = AbstractEngine.audioEngine.audioContext.createGain();\r\n            this._soundGain.gain.value = this._volume;\r\n            this._inputAudioNode = this._soundGain;\r\n            this._outputAudioNode = this._soundGain;\r\n            if (this._spatialSound) {\r\n                this._createSpatialParameters();\r\n            }\r\n            this._scene.mainSoundTrack.addSound(this);\r\n            let validParameter = true;\r\n\r\n            // if no parameter is passed, you need to call setAudioBuffer yourself to prepare the sound\r\n            if (urlOrArrayBuffer) {\r\n                try {\r\n                    if (typeof urlOrArrayBuffer === \"string\") {\r\n                        this._urlType = \"String\";\r\n                        this._url = urlOrArrayBuffer;\r\n                    } else if (urlOrArrayBuffer instanceof ArrayBuffer) {\r\n                        this._urlType = \"ArrayBuffer\";\r\n                    } else if (urlOrArrayBuffer instanceof HTMLMediaElement) {\r\n                        this._urlType = \"MediaElement\";\r\n                    } else if (urlOrArrayBuffer instanceof MediaStream) {\r\n                        this._urlType = \"MediaStream\";\r\n                    } else if (urlOrArrayBuffer instanceof AudioBuffer) {\r\n                        this._urlType = \"AudioBuffer\";\r\n                    } else if (Array.isArray(urlOrArrayBuffer)) {\r\n                        this._urlType = \"Array\";\r\n                    }\r\n\r\n                    let urls: string[] = [];\r\n                    let codecSupportedFound = false;\r\n\r\n                    switch (this._urlType) {\r\n                        case \"MediaElement\":\r\n                            this._streaming = true;\r\n                            this._isReadyToPlay = true;\r\n                            this._streamingSource = AbstractEngine.audioEngine.audioContext.createMediaElementSource(urlOrArrayBuffer);\r\n\r\n                            if (this.autoplay) {\r\n                                this.play(0, this._offset, this._length);\r\n                            }\r\n\r\n                            if (this._readyToPlayCallback) {\r\n                                this._readyToPlayCallback();\r\n                            }\r\n                            break;\r\n                        case \"MediaStream\":\r\n                            this._streaming = true;\r\n                            this._isReadyToPlay = true;\r\n                            this._streamingSource = AbstractEngine.audioEngine.audioContext.createMediaStreamSource(urlOrArrayBuffer);\r\n\r\n                            if (this.autoplay) {\r\n                                this.play(0, this._offset, this._length);\r\n                            }\r\n\r\n                            if (this._readyToPlayCallback) {\r\n                                this._readyToPlayCallback();\r\n                            }\r\n                            break;\r\n                        case \"ArrayBuffer\":\r\n                            if ((<ArrayBuffer>urlOrArrayBuffer).byteLength > 0) {\r\n                                codecSupportedFound = true;\r\n                                this._soundLoaded(urlOrArrayBuffer);\r\n                            }\r\n                            break;\r\n                        case \"AudioBuffer\":\r\n                            this._audioBufferLoaded(urlOrArrayBuffer);\r\n                            break;\r\n                        case \"String\":\r\n                            urls.push(urlOrArrayBuffer);\r\n                        // eslint-disable-next-line no-fallthrough\r\n                        case \"Array\":\r\n                            if (urls.length === 0) {\r\n                                urls = urlOrArrayBuffer;\r\n                            }\r\n                            // If we found a supported format, we load it immediately and stop the loop\r\n                            for (let i = 0; i < urls.length; i++) {\r\n                                const url = urls[i];\r\n                                codecSupportedFound =\r\n                                    (options && options.skipCodecCheck) ||\r\n                                    (url.indexOf(\".mp3\", url.length - 4) !== -1 && AbstractEngine.audioEngine.isMP3supported) ||\r\n                                    (url.indexOf(\".ogg\", url.length - 4) !== -1 && AbstractEngine.audioEngine.isOGGsupported) ||\r\n                                    url.indexOf(\".wav\", url.length - 4) !== -1 ||\r\n                                    url.indexOf(\".m4a\", url.length - 4) !== -1 ||\r\n                                    url.indexOf(\".mp4\", url.length - 4) !== -1 ||\r\n                                    url.indexOf(\"blob:\") !== -1;\r\n                                if (codecSupportedFound) {\r\n                                    // Loading sound\r\n                                    if (!this._streaming) {\r\n                                        this._scene._loadFile(\r\n                                            url,\r\n                                            (data) => {\r\n                                                this._soundLoaded(data as ArrayBuffer);\r\n                                            },\r\n                                            undefined,\r\n                                            true,\r\n                                            true,\r\n                                            (exception) => {\r\n                                                if (exception) {\r\n                                                    Logger.Error(\"XHR \" + exception.status + \" error on: \" + url + \".\");\r\n                                                }\r\n                                                Logger.Error(\"Sound creation aborted.\");\r\n                                                this._scene.mainSoundTrack.removeSound(this);\r\n                                            }\r\n                                        );\r\n                                    }\r\n                                    // Streaming sound using HTML5 Audio tag\r\n                                    else {\r\n                                        this._htmlAudioElement = new Audio(url);\r\n                                        this._htmlAudioElement.controls = false;\r\n                                        this._htmlAudioElement.loop = this.loop;\r\n                                        Tools.SetCorsBehavior(url, this._htmlAudioElement);\r\n                                        this._htmlAudioElement.preload = \"auto\";\r\n                                        this._htmlAudioElement.addEventListener(\r\n                                            \"canplaythrough\",\r\n                                            () => {\r\n                                                this._isReadyToPlay = true;\r\n                                                if (this.autoplay) {\r\n                                                    this.play(0, this._offset, this._length);\r\n                                                }\r\n                                                if (this._readyToPlayCallback) {\r\n                                                    this._readyToPlayCallback();\r\n                                                }\r\n                                            },\r\n                                            { once: true }\r\n                                        );\r\n                                        document.body.appendChild(this._htmlAudioElement);\r\n                                        this._htmlAudioElement.load();\r\n                                    }\r\n                                    break;\r\n                                }\r\n                            }\r\n                            break;\r\n                        default:\r\n                            validParameter = false;\r\n                            break;\r\n                    }\r\n\r\n                    if (!validParameter) {\r\n                        Logger.Error(\"Parameter must be a URL to the sound, an Array of URLs (.mp3 & .ogg) or an ArrayBuffer of the sound.\");\r\n                    } else {\r\n                        if (!codecSupportedFound) {\r\n                            this._isReadyToPlay = true;\r\n                            // Simulating a ready to play event to avoid breaking code path\r\n                            if (this._readyToPlayCallback) {\r\n                                setTimeout(() => {\r\n                                    if (this._readyToPlayCallback) {\r\n                                        this._readyToPlayCallback();\r\n                                    }\r\n                                }, 1000);\r\n                            }\r\n                        }\r\n                    }\r\n                } catch (ex) {\r\n                    Logger.Error(\"Unexpected error. Sound creation aborted.\");\r\n                    this._scene.mainSoundTrack.removeSound(this);\r\n                }\r\n            }\r\n        } else {\r\n            // Adding an empty sound to avoid breaking audio calls for non Web Audio browsers\r\n            this._scene.mainSoundTrack.addSound(this);\r\n            if (AbstractEngine.audioEngine && !AbstractEngine.audioEngine.WarnedWebAudioUnsupported) {\r\n                Logger.Error(\"Web Audio is not supported by your browser.\");\r\n                AbstractEngine.audioEngine.WarnedWebAudioUnsupported = true;\r\n            }\r\n            // Simulating a ready to play event to avoid breaking code for non web audio browsers\r\n            if (this._readyToPlayCallback) {\r\n                setTimeout(() => {\r\n                    if (this._readyToPlayCallback) {\r\n                        this._readyToPlayCallback();\r\n                    }\r\n                }, 1000);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release the sound and its associated resources\r\n     */\r\n    public dispose() {\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio) {\r\n            if (this.isPlaying) {\r\n                this.stop();\r\n            }\r\n            this._isReadyToPlay = false;\r\n            if (this.soundTrackId === -1) {\r\n                this._scene.mainSoundTrack.removeSound(this);\r\n            } else if (this._scene.soundTracks) {\r\n                this._scene.soundTracks[this.soundTrackId].removeSound(this);\r\n            }\r\n            if (this._soundGain) {\r\n                this._soundGain.disconnect();\r\n                this._soundGain = null;\r\n            }\r\n            if (this._soundPanner) {\r\n                this._soundPanner.disconnect();\r\n                this._soundPanner = null;\r\n            }\r\n            if (this._soundSource) {\r\n                this._soundSource.disconnect();\r\n                this._soundSource = null;\r\n            }\r\n            this._audioBuffer = null;\r\n\r\n            if (this._htmlAudioElement) {\r\n                this._htmlAudioElement.pause();\r\n                this._htmlAudioElement.src = \"\";\r\n                document.body.removeChild(this._htmlAudioElement);\r\n                this._htmlAudioElement = null;\r\n            }\r\n\r\n            if (this._streamingSource) {\r\n                this._streamingSource.disconnect();\r\n                this._streamingSource = null;\r\n            }\r\n\r\n            if (this._connectedTransformNode && this._registerFunc) {\r\n                this._connectedTransformNode.unregisterAfterWorldMatrixUpdate(this._registerFunc);\r\n                this._connectedTransformNode = null;\r\n            }\r\n\r\n            this._clearTimeoutsAndObservers();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets if the sounds is ready to be played or not.\r\n     * @returns true if ready, otherwise false\r\n     */\r\n    public isReady(): boolean {\r\n        return this._isReadyToPlay;\r\n    }\r\n\r\n    /**\r\n     * Get the current class name.\r\n     * @returns current class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"Sound\";\r\n    }\r\n\r\n    private _audioBufferLoaded(buffer: AudioBuffer) {\r\n        if (!AbstractEngine.audioEngine?.audioContext) {\r\n            return;\r\n        }\r\n        this._audioBuffer = buffer;\r\n        this._isReadyToPlay = true;\r\n        if (this.autoplay) {\r\n            this.play(0, this._offset, this._length);\r\n        }\r\n        if (this._readyToPlayCallback) {\r\n            this._readyToPlayCallback();\r\n        }\r\n    }\r\n\r\n    private _soundLoaded(audioData: ArrayBuffer) {\r\n        if (!AbstractEngine.audioEngine?.audioContext) {\r\n            return;\r\n        }\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        AbstractEngine.audioEngine.audioContext.decodeAudioData(\r\n            audioData,\r\n            (buffer) => {\r\n                this._audioBufferLoaded(buffer);\r\n            },\r\n            (err: any) => {\r\n                Logger.Error(\"Error while decoding audio data for: \" + this.name + \" / Error: \" + err);\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sets the data of the sound from an audiobuffer\r\n     * @param audioBuffer The audioBuffer containing the data\r\n     */\r\n    public setAudioBuffer(audioBuffer: AudioBuffer): void {\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio) {\r\n            this._audioBuffer = audioBuffer;\r\n            this._isReadyToPlay = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the current sounds options such as maxdistance, loop...\r\n     * @param options A JSON object containing values named as the object properties\r\n     */\r\n    public updateOptions(options: ISoundOptions): void {\r\n        if (options) {\r\n            this.loop = options.loop ?? this.loop;\r\n            this.maxDistance = options.maxDistance ?? this.maxDistance;\r\n            this.useCustomAttenuation = options.useCustomAttenuation ?? this.useCustomAttenuation;\r\n            this.rolloffFactor = options.rolloffFactor ?? this.rolloffFactor;\r\n            this.refDistance = options.refDistance ?? this.refDistance;\r\n            this.distanceModel = options.distanceModel ?? this.distanceModel;\r\n            this._playbackRate = options.playbackRate ?? this._playbackRate;\r\n            this._length = options.length ?? undefined;\r\n            this.spatialSound = options.spatialSound ?? this._spatialSound;\r\n            this._setOffset(options.offset ?? undefined);\r\n            this.setVolume(options.volume ?? this._volume);\r\n            this._updateSpatialParameters();\r\n            if (this.isPlaying) {\r\n                if (this._streaming && this._htmlAudioElement) {\r\n                    this._htmlAudioElement.playbackRate = this._playbackRate;\r\n                    if (this._htmlAudioElement.loop !== this.loop) {\r\n                        this._htmlAudioElement.loop = this.loop;\r\n                    }\r\n                } else {\r\n                    if (this._soundSource) {\r\n                        this._soundSource.playbackRate.value = this._playbackRate;\r\n                        if (this._soundSource.loop !== this.loop) {\r\n                            this._soundSource.loop = this.loop;\r\n                        }\r\n                        if (this._offset !== undefined && this._soundSource.loopStart !== this._offset) {\r\n                            this._soundSource.loopStart = this._offset;\r\n                        }\r\n                        if (this._length !== undefined && this._length !== this._soundSource.loopEnd) {\r\n                            this._soundSource.loopEnd = (this._offset! | 0) + this._length;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _createSpatialParameters() {\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio && AbstractEngine.audioEngine.audioContext) {\r\n            if (this._scene.headphone) {\r\n                this._panningModel = \"HRTF\";\r\n            }\r\n            this._soundPanner = this._soundPanner ?? AbstractEngine.audioEngine.audioContext.createPanner();\r\n            if (this._soundPanner && this._outputAudioNode) {\r\n                this._updateSpatialParameters();\r\n                this._soundPanner.connect(this._outputAudioNode);\r\n                this._inputAudioNode = this._soundPanner;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _disableSpatialSound() {\r\n        if (!this._spatialSound) {\r\n            return;\r\n        }\r\n        this._inputAudioNode = this._soundGain;\r\n        this._soundPanner?.disconnect();\r\n        this._soundPanner = null;\r\n        this._spatialSound = false;\r\n    }\r\n\r\n    private _updateSpatialParameters() {\r\n        if (!this._spatialSound) {\r\n            return;\r\n        }\r\n        if (this._soundPanner) {\r\n            if (this.useCustomAttenuation) {\r\n                // Tricks to disable in a way embedded Web Audio attenuation\r\n                this._soundPanner.distanceModel = \"linear\";\r\n                this._soundPanner.maxDistance = Number.MAX_VALUE;\r\n                this._soundPanner.refDistance = 1;\r\n                this._soundPanner.rolloffFactor = 1;\r\n                this._soundPanner.panningModel = this._panningModel as any;\r\n            } else {\r\n                this._soundPanner.distanceModel = this.distanceModel as any;\r\n                this._soundPanner.maxDistance = this.maxDistance;\r\n                this._soundPanner.refDistance = this.refDistance;\r\n                this._soundPanner.rolloffFactor = this.rolloffFactor;\r\n                this._soundPanner.panningModel = this._panningModel as any;\r\n            }\r\n        } else {\r\n            this._createSpatialParameters();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switch the panning model to HRTF:\r\n     * Renders a stereo output of higher quality than equalpower — it uses a convolution with measured impulse responses from human subjects.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public switchPanningModelToHRTF() {\r\n        this._panningModel = \"HRTF\";\r\n        this._switchPanningModel();\r\n    }\r\n\r\n    /**\r\n     * Switch the panning model to Equal Power:\r\n     * Represents the equal-power panning algorithm, generally regarded as simple and efficient. equalpower is the default value.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public switchPanningModelToEqualPower() {\r\n        this._panningModel = \"equalpower\";\r\n        this._switchPanningModel();\r\n    }\r\n\r\n    private _switchPanningModel() {\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio && this._spatialSound && this._soundPanner) {\r\n            this._soundPanner.panningModel = this._panningModel as any;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect this sound to a sound track audio node like gain...\r\n     * @param soundTrackAudioNode the sound track audio node to connect to\r\n     */\r\n    public connectToSoundTrackAudioNode(soundTrackAudioNode: AudioNode): void {\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio && this._outputAudioNode) {\r\n            if (this._isOutputConnected) {\r\n                this._outputAudioNode.disconnect();\r\n            }\r\n            this._outputAudioNode.connect(soundTrackAudioNode);\r\n            this._isOutputConnected = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transform this sound into a directional source\r\n     * @param coneInnerAngle Size of the inner cone in degree\r\n     * @param coneOuterAngle Size of the outer cone in degree\r\n     * @param coneOuterGain Volume of the sound outside the outer cone (between 0.0 and 1.0)\r\n     */\r\n    public setDirectionalCone(coneInnerAngle: number, coneOuterAngle: number, coneOuterGain: number): void {\r\n        if (coneOuterAngle < coneInnerAngle) {\r\n            Logger.Error(\"setDirectionalCone(): outer angle of the cone must be superior or equal to the inner angle.\");\r\n            return;\r\n        }\r\n        this._coneInnerAngle = coneInnerAngle;\r\n        this._coneOuterAngle = coneOuterAngle;\r\n        this._coneOuterGain = coneOuterGain;\r\n        this._isDirectional = true;\r\n\r\n        if (this.isPlaying && this.loop) {\r\n            this.stop();\r\n            this.play(0, this._offset, this._length);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the inner angle for the directional cone.\r\n     */\r\n    public get directionalConeInnerAngle(): number {\r\n        return this._coneInnerAngle;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the inner angle for the directional cone.\r\n     */\r\n    public set directionalConeInnerAngle(value: number) {\r\n        if (value != this._coneInnerAngle) {\r\n            if (this._coneOuterAngle < value) {\r\n                Logger.Error(\"directionalConeInnerAngle: outer angle of the cone must be superior or equal to the inner angle.\");\r\n                return;\r\n            }\r\n\r\n            this._coneInnerAngle = value;\r\n            if (AbstractEngine.audioEngine?.canUseWebAudio && this._spatialSound && this._soundPanner) {\r\n                this._soundPanner.coneInnerAngle = this._coneInnerAngle;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the outer angle for the directional cone.\r\n     */\r\n    public get directionalConeOuterAngle(): number {\r\n        return this._coneOuterAngle;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the outer angle for the directional cone.\r\n     */\r\n    public set directionalConeOuterAngle(value: number) {\r\n        if (value != this._coneOuterAngle) {\r\n            if (value < this._coneInnerAngle) {\r\n                Logger.Error(\"directionalConeOuterAngle: outer angle of the cone must be superior or equal to the inner angle.\");\r\n                return;\r\n            }\r\n\r\n            this._coneOuterAngle = value;\r\n            if (AbstractEngine.audioEngine?.canUseWebAudio && this._spatialSound && this._soundPanner) {\r\n                this._soundPanner.coneOuterAngle = this._coneOuterAngle;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the position of the emitter if spatial sound is enabled\r\n     * @param newPosition Defines the new position\r\n     */\r\n    public setPosition(newPosition: Vector3): void {\r\n        if (newPosition.equals(this._position)) {\r\n            return;\r\n        }\r\n        this._position.copyFrom(newPosition);\r\n\r\n        if (\r\n            AbstractEngine.audioEngine?.canUseWebAudio &&\r\n            this._spatialSound &&\r\n            this._soundPanner &&\r\n            !isNaN(this._position.x) &&\r\n            !isNaN(this._position.y) &&\r\n            !isNaN(this._position.z)\r\n        ) {\r\n            this._soundPanner.positionX.value = this._position.x;\r\n            this._soundPanner.positionY.value = this._position.y;\r\n            this._soundPanner.positionZ.value = this._position.z;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the local direction of the emitter if spatial sound is enabled\r\n     * @param newLocalDirection Defines the new local direction\r\n     */\r\n    public setLocalDirectionToMesh(newLocalDirection: Vector3): void {\r\n        this._localDirection = newLocalDirection;\r\n\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio && this._connectedTransformNode && this.isPlaying) {\r\n            this._updateDirection();\r\n        }\r\n    }\r\n\r\n    private _updateDirection() {\r\n        if (!this._connectedTransformNode || !this._soundPanner) {\r\n            return;\r\n        }\r\n\r\n        const mat = this._connectedTransformNode.getWorldMatrix();\r\n        const direction = Vector3.TransformNormal(this._localDirection, mat);\r\n        direction.normalize();\r\n        this._soundPanner.orientationX.value = direction.x;\r\n        this._soundPanner.orientationY.value = direction.y;\r\n        this._soundPanner.orientationZ.value = direction.z;\r\n    }\r\n\r\n    /** @internal */\r\n    public updateDistanceFromListener() {\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio && this._connectedTransformNode && this.useCustomAttenuation && this._soundGain && this._scene.activeCamera) {\r\n            const distance = this._scene.audioListenerPositionProvider\r\n                ? this._connectedTransformNode.position.subtract(this._scene.audioListenerPositionProvider()).length()\r\n                : this._connectedTransformNode.getDistanceToCamera(this._scene.activeCamera);\r\n            this._soundGain.gain.value = this._customAttenuationFunction(this._volume, distance, this.maxDistance, this.refDistance, this.rolloffFactor);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a new custom attenuation function for the sound.\r\n     * @param callback Defines the function used for the attenuation\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-your-own-custom-attenuation-function\r\n     */\r\n    public setAttenuationFunction(callback: (currentVolume: number, currentDistance: number, maxDistance: number, refDistance: number, rolloffFactor: number) => number): void {\r\n        this._customAttenuationFunction = callback;\r\n    }\r\n\r\n    /**\r\n     * Play the sound\r\n     * @param time (optional) Start the sound after X seconds. Start immediately (0) by default.\r\n     * @param offset (optional) Start the sound at a specific time in seconds\r\n     * @param length (optional) Sound duration (in seconds)\r\n     */\r\n    public play(time?: number, offset?: number, length?: number): void {\r\n        if (this._isReadyToPlay && this._scene.audioEnabled && AbstractEngine.audioEngine?.audioContext) {\r\n            try {\r\n                this._clearTimeoutsAndObservers();\r\n\r\n                let startTime = time ? AbstractEngine.audioEngine?.audioContext.currentTime + time : AbstractEngine.audioEngine?.audioContext.currentTime;\r\n                if (!this._soundSource || !this._streamingSource) {\r\n                    if (this._spatialSound && this._soundPanner) {\r\n                        if (!isNaN(this._position.x) && !isNaN(this._position.y) && !isNaN(this._position.z)) {\r\n                            this._soundPanner.positionX.value = this._position.x;\r\n                            this._soundPanner.positionY.value = this._position.y;\r\n                            this._soundPanner.positionZ.value = this._position.z;\r\n                        }\r\n                        if (this._isDirectional) {\r\n                            this._soundPanner.coneInnerAngle = this._coneInnerAngle;\r\n                            this._soundPanner.coneOuterAngle = this._coneOuterAngle;\r\n                            this._soundPanner.coneOuterGain = this._coneOuterGain;\r\n                            if (this._connectedTransformNode) {\r\n                                this._updateDirection();\r\n                            } else {\r\n                                this._soundPanner.setOrientation(this._localDirection.x, this._localDirection.y, this._localDirection.z);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (this._streaming) {\r\n                    if (!this._streamingSource && this._htmlAudioElement) {\r\n                        this._streamingSource = AbstractEngine.audioEngine.audioContext.createMediaElementSource(this._htmlAudioElement);\r\n                        this._htmlAudioElement.onended = () => {\r\n                            this._onended();\r\n                        };\r\n                        this._htmlAudioElement.playbackRate = this._playbackRate;\r\n                    }\r\n                    if (this._streamingSource) {\r\n                        this._streamingSource.disconnect();\r\n                        if (this._inputAudioNode) {\r\n                            this._streamingSource.connect(this._inputAudioNode);\r\n                        }\r\n                    }\r\n                    if (this._htmlAudioElement) {\r\n                        // required to manage properly the new suspended default state of Chrome\r\n                        // When the option 'streaming: true' is used, we need first to wait for\r\n                        // the audio engine to be unlocked by a user gesture before trying to play\r\n                        // an HTML Audio element\r\n                        const tryToPlay = () => {\r\n                            if (AbstractEngine.audioEngine?.unlocked) {\r\n                                if (!this._htmlAudioElement) {\r\n                                    return;\r\n                                }\r\n\r\n                                this._htmlAudioElement.currentTime = offset ?? 0;\r\n                                const playPromise = this._htmlAudioElement.play();\r\n\r\n                                // In browsers that don’t yet support this functionality,\r\n                                // playPromise won’t be defined.\r\n                                if (playPromise !== undefined) {\r\n                                    // eslint-disable-next-line github/no-then\r\n                                    playPromise.catch(() => {\r\n                                        // Automatic playback failed.\r\n                                        // Waiting for the audio engine to be unlocked by user click on unmute\r\n                                        AbstractEngine.audioEngine?.lock();\r\n                                        if (this.loop || this.autoplay) {\r\n                                            this._audioUnlockedObserver = AbstractEngine.audioEngine?.onAudioUnlockedObservable.addOnce(() => {\r\n                                                tryToPlay();\r\n                                            });\r\n                                        }\r\n                                    });\r\n                                }\r\n                            } else {\r\n                                if (this.loop || this.autoplay) {\r\n                                    this._audioUnlockedObserver = AbstractEngine.audioEngine?.onAudioUnlockedObservable.addOnce(() => {\r\n                                        tryToPlay();\r\n                                    });\r\n                                }\r\n                            }\r\n                        };\r\n                        tryToPlay();\r\n                    }\r\n                } else {\r\n                    const tryToPlay = () => {\r\n                        if (AbstractEngine.audioEngine?.audioContext) {\r\n                            length = length || this._length;\r\n\r\n                            if (offset !== undefined) {\r\n                                this._setOffset(offset);\r\n                            }\r\n\r\n                            if (this._soundSource) {\r\n                                const oldSource = this._soundSource;\r\n                                oldSource.onended = () => {\r\n                                    oldSource.disconnect();\r\n                                };\r\n                            }\r\n                            this._soundSource = AbstractEngine.audioEngine?.audioContext.createBufferSource();\r\n                            if (this._soundSource && this._inputAudioNode) {\r\n                                this._soundSource.buffer = this._audioBuffer;\r\n                                this._soundSource.connect(this._inputAudioNode);\r\n                                this._soundSource.loop = this.loop;\r\n                                if (offset !== undefined) {\r\n                                    this._soundSource.loopStart = offset;\r\n                                }\r\n                                if (length !== undefined) {\r\n                                    this._soundSource.loopEnd = (offset! | 0) + length;\r\n                                }\r\n                                this._soundSource.playbackRate.value = this._playbackRate;\r\n                                this._soundSource.onended = () => {\r\n                                    this._onended();\r\n                                };\r\n                                startTime = time ? AbstractEngine.audioEngine?.audioContext.currentTime + time : AbstractEngine.audioEngine.audioContext.currentTime;\r\n                                const actualOffset = ((this.isPaused ? this.currentTime : 0) + (this._offset ?? 0)) % this._soundSource.buffer!.duration;\r\n                                this._soundSource.start(startTime, actualOffset, this.loop ? undefined : length);\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    if (AbstractEngine.audioEngine?.audioContext.state === \"suspended\") {\r\n                        // Wait a bit for FF as context seems late to be ready.\r\n                        this._tryToPlayTimeout = setTimeout(() => {\r\n                            if (AbstractEngine.audioEngine?.audioContext!.state === \"suspended\") {\r\n                                // Automatic playback failed.\r\n                                // Waiting for the audio engine to be unlocked by user click on unmute\r\n                                AbstractEngine.audioEngine.lock();\r\n                                if (this.loop || this.autoplay) {\r\n                                    this._audioUnlockedObserver = AbstractEngine.audioEngine.onAudioUnlockedObservable.addOnce(() => {\r\n                                        tryToPlay();\r\n                                    });\r\n                                }\r\n                            } else {\r\n                                tryToPlay();\r\n                            }\r\n                        }, 500);\r\n                    } else {\r\n                        tryToPlay();\r\n                    }\r\n                }\r\n                this._startTime = startTime;\r\n                this.isPlaying = true;\r\n                this.isPaused = false;\r\n            } catch (ex) {\r\n                Logger.Error(\"Error while trying to play audio: \" + this.name + \", \" + ex.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _onended() {\r\n        this.isPlaying = false;\r\n        this._startTime = 0;\r\n        this._currentTime = 0;\r\n        if (this.onended) {\r\n            this.onended();\r\n        }\r\n        this.onEndedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Stop the sound\r\n     * @param time (optional) Stop the sound after X seconds. Stop immediately (0) by default.\r\n     */\r\n    public stop(time?: number): void {\r\n        if (this.isPlaying) {\r\n            this._clearTimeoutsAndObservers();\r\n            if (this._streaming) {\r\n                if (this._htmlAudioElement) {\r\n                    this._htmlAudioElement.pause();\r\n                    // Test needed for Firefox or it will generate an Invalid State Error\r\n                    if (this._htmlAudioElement.currentTime > 0) {\r\n                        this._htmlAudioElement.currentTime = 0;\r\n                    }\r\n                } else {\r\n                    this._streamingSource?.disconnect();\r\n                }\r\n                this.isPlaying = false;\r\n            } else if (AbstractEngine.audioEngine?.audioContext && this._soundSource) {\r\n                const stopTime = time ? AbstractEngine.audioEngine.audioContext.currentTime + time : undefined;\r\n                this._soundSource.onended = () => {\r\n                    this.isPlaying = false;\r\n                    this.isPaused = false;\r\n                    this._startTime = 0;\r\n                    this._currentTime = 0;\r\n                    if (this._soundSource) {\r\n                        this._soundSource.onended = () => void 0;\r\n                    }\r\n                    this._onended();\r\n                };\r\n                this._soundSource.stop(stopTime);\r\n            } else {\r\n                this.isPlaying = false;\r\n            }\r\n        } else if (this.isPaused) {\r\n            this.isPaused = false;\r\n            this._startTime = 0;\r\n            this._currentTime = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Put the sound in pause\r\n     */\r\n    public pause(): void {\r\n        if (this.isPlaying) {\r\n            this._clearTimeoutsAndObservers();\r\n            if (this._streaming) {\r\n                if (this._htmlAudioElement) {\r\n                    this._htmlAudioElement.pause();\r\n                } else {\r\n                    this._streamingSource?.disconnect();\r\n                }\r\n                this.isPlaying = false;\r\n                this.isPaused = true;\r\n            } else if (AbstractEngine.audioEngine?.audioContext && this._soundSource) {\r\n                this._soundSource.onended = () => void 0;\r\n                this._soundSource.stop();\r\n                this.isPlaying = false;\r\n                this.isPaused = true;\r\n                this._currentTime += AbstractEngine.audioEngine.audioContext.currentTime - this._startTime;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a dedicated volume for this sounds\r\n     * @param newVolume Define the new volume of the sound\r\n     * @param time Define time for gradual change to new volume\r\n     */\r\n    public setVolume(newVolume: number, time?: number): void {\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio && this._soundGain) {\r\n            if (time && AbstractEngine.audioEngine.audioContext) {\r\n                this._soundGain.gain.cancelScheduledValues(AbstractEngine.audioEngine.audioContext.currentTime);\r\n                this._soundGain.gain.setValueAtTime(this._soundGain.gain.value, AbstractEngine.audioEngine.audioContext.currentTime);\r\n                this._soundGain.gain.linearRampToValueAtTime(newVolume, AbstractEngine.audioEngine.audioContext.currentTime + time);\r\n            } else {\r\n                this._soundGain.gain.value = newVolume;\r\n            }\r\n        }\r\n        this._volume = newVolume;\r\n    }\r\n\r\n    /**\r\n     * Set the sound play back rate\r\n     * @param newPlaybackRate Define the playback rate the sound should be played at\r\n     */\r\n    public setPlaybackRate(newPlaybackRate: number): void {\r\n        this._playbackRate = newPlaybackRate;\r\n        if (this.isPlaying) {\r\n            if (this._streaming && this._htmlAudioElement) {\r\n                this._htmlAudioElement.playbackRate = this._playbackRate;\r\n            } else if (this._soundSource) {\r\n                this._soundSource.playbackRate.value = this._playbackRate;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the sound play back rate.\r\n     * @returns the  play back rate of the sound\r\n     */\r\n    public getPlaybackRate(): number {\r\n        return this._playbackRate;\r\n    }\r\n\r\n    /**\r\n     * Gets the volume of the sound.\r\n     * @returns the volume of the sound\r\n     */\r\n    public getVolume(): number {\r\n        return this._volume;\r\n    }\r\n\r\n    /**\r\n     * Attach the sound to a dedicated mesh\r\n     * @param transformNode The transform node to connect the sound with\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#attaching-a-sound-to-a-mesh\r\n     */\r\n    public attachToMesh(transformNode: TransformNode): void {\r\n        if (this._connectedTransformNode && this._registerFunc) {\r\n            this._connectedTransformNode.unregisterAfterWorldMatrixUpdate(this._registerFunc);\r\n            this._registerFunc = null;\r\n        }\r\n        this._connectedTransformNode = transformNode;\r\n        if (!this._spatialSound) {\r\n            this._spatialSound = true;\r\n            this._createSpatialParameters();\r\n            if (this.isPlaying && this.loop) {\r\n                this.stop();\r\n                this.play(0, this._offset, this._length);\r\n            }\r\n        }\r\n        this._onRegisterAfterWorldMatrixUpdate(this._connectedTransformNode);\r\n        this._registerFunc = (transformNode: TransformNode) => this._onRegisterAfterWorldMatrixUpdate(transformNode);\r\n        this._connectedTransformNode.registerAfterWorldMatrixUpdate(this._registerFunc);\r\n    }\r\n\r\n    /**\r\n     * Detach the sound from the previously attached mesh\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#attaching-a-sound-to-a-mesh\r\n     */\r\n    public detachFromMesh() {\r\n        if (this._connectedTransformNode && this._registerFunc) {\r\n            this._connectedTransformNode.unregisterAfterWorldMatrixUpdate(this._registerFunc);\r\n            this._registerFunc = null;\r\n            this._connectedTransformNode = null;\r\n        }\r\n    }\r\n\r\n    private _onRegisterAfterWorldMatrixUpdate(node: TransformNode): void {\r\n        if (!(<any>node).getBoundingInfo) {\r\n            this.setPosition(node.absolutePosition);\r\n        } else {\r\n            const mesh = node as AbstractMesh;\r\n            const boundingInfo = mesh.getBoundingInfo();\r\n            this.setPosition(boundingInfo.boundingSphere.centerWorld);\r\n        }\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio && this._isDirectional && this.isPlaying) {\r\n            this._updateDirection();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clone the current sound in the scene.\r\n     * @returns the new sound clone\r\n     */\r\n    public clone(): Nullable<Sound> {\r\n        if (!this._streaming) {\r\n            const setBufferAndRun = () => {\r\n                _RetryWithInterval(\r\n                    () => this._isReadyToPlay,\r\n                    () => {\r\n                        clonedSound._audioBuffer = this.getAudioBuffer();\r\n                        clonedSound._isReadyToPlay = true;\r\n                        if (clonedSound.autoplay) {\r\n                            clonedSound.play(0, this._offset, this._length);\r\n                        }\r\n                    },\r\n                    undefined,\r\n                    300\r\n                );\r\n            };\r\n\r\n            const currentOptions = {\r\n                autoplay: this.autoplay,\r\n                loop: this.loop,\r\n                volume: this._volume,\r\n                spatialSound: this._spatialSound,\r\n                maxDistance: this.maxDistance,\r\n                useCustomAttenuation: this.useCustomAttenuation,\r\n                rolloffFactor: this.rolloffFactor,\r\n                refDistance: this.refDistance,\r\n                distanceModel: this.distanceModel,\r\n            };\r\n\r\n            const clonedSound = new Sound(this.name + \"_cloned\", new ArrayBuffer(0), this._scene, null, currentOptions);\r\n            if (this.useCustomAttenuation) {\r\n                clonedSound.setAttenuationFunction(this._customAttenuationFunction);\r\n            }\r\n            clonedSound.setPosition(this._position);\r\n            clonedSound.setPlaybackRate(this._playbackRate);\r\n            setBufferAndRun();\r\n\r\n            return clonedSound;\r\n        }\r\n        // Can't clone a streaming sound\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current underlying audio buffer containing the data\r\n     * @returns the audio buffer\r\n     */\r\n    public getAudioBuffer(): Nullable<AudioBuffer> {\r\n        return this._audioBuffer;\r\n    }\r\n\r\n    /**\r\n     * Gets the WebAudio AudioBufferSourceNode, lets you keep track of and stop instances of this Sound.\r\n     * @returns the source node\r\n     */\r\n    public getSoundSource(): Nullable<AudioBufferSourceNode> {\r\n        return this._soundSource;\r\n    }\r\n\r\n    /**\r\n     * Gets the WebAudio GainNode, gives you precise control over the gain of instances of this Sound.\r\n     * @returns the gain node\r\n     */\r\n    public getSoundGain(): Nullable<GainNode> {\r\n        return this._soundGain;\r\n    }\r\n\r\n    /**\r\n     * Serializes the Sound in a JSON representation\r\n     * @returns the JSON representation of the sound\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {\r\n            name: this.name,\r\n            url: this._url,\r\n            autoplay: this.autoplay,\r\n            loop: this.loop,\r\n            volume: this._volume,\r\n            spatialSound: this._spatialSound,\r\n            maxDistance: this.maxDistance,\r\n            rolloffFactor: this.rolloffFactor,\r\n            refDistance: this.refDistance,\r\n            distanceModel: this.distanceModel,\r\n            playbackRate: this._playbackRate,\r\n            panningModel: this._panningModel,\r\n            soundTrackId: this.soundTrackId,\r\n            metadata: this.metadata,\r\n        };\r\n\r\n        if (this._spatialSound) {\r\n            if (this._connectedTransformNode) {\r\n                serializationObject.connectedMeshId = this._connectedTransformNode.id;\r\n            }\r\n\r\n            serializationObject.position = this._position.asArray();\r\n            serializationObject.refDistance = this.refDistance;\r\n            serializationObject.distanceModel = this.distanceModel;\r\n\r\n            serializationObject.isDirectional = this._isDirectional;\r\n            serializationObject.localDirectionToMesh = this._localDirection.asArray();\r\n            serializationObject.coneInnerAngle = this._coneInnerAngle;\r\n            serializationObject.coneOuterAngle = this._coneOuterAngle;\r\n            serializationObject.coneOuterGain = this._coneOuterGain;\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parse a JSON representation of a sound to instantiate in a given scene\r\n     * @param parsedSound Define the JSON representation of the sound (usually coming from the serialize method)\r\n     * @param scene Define the scene the new parsed sound should be created in\r\n     * @param rootUrl Define the rooturl of the load in case we need to fetch relative dependencies\r\n     * @param sourceSound Define a sound place holder if do not need to instantiate a new one\r\n     * @returns the newly parsed sound\r\n     */\r\n    public static Parse(parsedSound: any, scene: Scene, rootUrl: string, sourceSound?: Sound): Sound {\r\n        const soundName = parsedSound.name;\r\n        let soundUrl;\r\n\r\n        if (parsedSound.url) {\r\n            soundUrl = rootUrl + parsedSound.url;\r\n        } else {\r\n            soundUrl = rootUrl + soundName;\r\n        }\r\n\r\n        const options = {\r\n            autoplay: parsedSound.autoplay,\r\n            loop: parsedSound.loop,\r\n            volume: parsedSound.volume,\r\n            spatialSound: parsedSound.spatialSound,\r\n            maxDistance: parsedSound.maxDistance,\r\n            rolloffFactor: parsedSound.rolloffFactor,\r\n            refDistance: parsedSound.refDistance,\r\n            distanceModel: parsedSound.distanceModel,\r\n            playbackRate: parsedSound.playbackRate,\r\n        };\r\n\r\n        let newSound: Sound;\r\n\r\n        if (!sourceSound) {\r\n            newSound = new Sound(\r\n                soundName,\r\n                soundUrl,\r\n                scene,\r\n                () => {\r\n                    scene.removePendingData(newSound);\r\n                },\r\n                options\r\n            );\r\n            scene.addPendingData(newSound);\r\n        } else {\r\n            const setBufferAndRun = () => {\r\n                _RetryWithInterval(\r\n                    () => sourceSound._isReadyToPlay,\r\n                    () => {\r\n                        newSound._audioBuffer = sourceSound.getAudioBuffer();\r\n                        newSound._isReadyToPlay = true;\r\n                        if (newSound.autoplay) {\r\n                            newSound.play(0, newSound._offset, newSound._length);\r\n                        }\r\n                    },\r\n                    undefined,\r\n                    300\r\n                );\r\n            };\r\n\r\n            newSound = new Sound(soundName, new ArrayBuffer(0), scene, null, options);\r\n            setBufferAndRun();\r\n        }\r\n\r\n        if (parsedSound.position) {\r\n            const soundPosition = Vector3.FromArray(parsedSound.position);\r\n            newSound.setPosition(soundPosition);\r\n        }\r\n        if (parsedSound.isDirectional) {\r\n            newSound.setDirectionalCone(parsedSound.coneInnerAngle || 360, parsedSound.coneOuterAngle || 360, parsedSound.coneOuterGain || 0);\r\n            if (parsedSound.localDirectionToMesh) {\r\n                const localDirectionToMesh = Vector3.FromArray(parsedSound.localDirectionToMesh);\r\n                newSound.setLocalDirectionToMesh(localDirectionToMesh);\r\n            }\r\n        }\r\n        if (parsedSound.connectedMeshId) {\r\n            const connectedMesh = scene.getMeshById(parsedSound.connectedMeshId);\r\n            if (connectedMesh) {\r\n                newSound.attachToMesh(connectedMesh);\r\n            }\r\n        }\r\n\r\n        if (parsedSound.metadata) {\r\n            newSound.metadata = parsedSound.metadata;\r\n        }\r\n\r\n        return newSound;\r\n    }\r\n\r\n    private _setOffset(value?: number) {\r\n        if (this._offset === value) {\r\n            return;\r\n        }\r\n        if (this.isPaused) {\r\n            this.stop();\r\n            this.isPaused = false;\r\n        }\r\n        this._offset = value;\r\n    }\r\n\r\n    private _clearTimeoutsAndObservers() {\r\n        if (this._tryToPlayTimeout) {\r\n            clearTimeout(this._tryToPlayTimeout);\r\n            this._tryToPlayTimeout = null;\r\n        }\r\n        if (this._audioUnlockedObserver) {\r\n            AbstractEngine.audioEngine?.onAudioUnlockedObservable.remove(this._audioUnlockedObserver);\r\n            this._audioUnlockedObserver = null;\r\n        }\r\n    }\r\n}\r\n\r\n// Register Class Name\r\nRegisterClass(\"BABYLON.Sound\", Sound);\r\n", "import type { Sound } from \"../Audio/sound\";\r\nimport { Logger } from \"../Misc/logger\";\r\n\r\n/**\r\n * Wraps one or more Sound objects and selects one with random weight for playback.\r\n */\r\nexport class WeightedSound {\r\n    /** When true a Sound will be selected and played when the current playing Sound completes. */\r\n    public loop: boolean = false;\r\n    private _coneInnerAngle: number = 360;\r\n    private _coneOuterAngle: number = 360;\r\n    private _volume: number = 1;\r\n    /** A Sound is currently playing. */\r\n    public isPlaying: boolean = false;\r\n    /** A Sound is currently paused. */\r\n    public isPaused: boolean = false;\r\n\r\n    private _sounds: Sound[] = [];\r\n    private _weights: number[] = [];\r\n    private _currentIndex?: number;\r\n\r\n    /**\r\n     * Creates a new WeightedSound from the list of sounds given.\r\n     * @param loop When true a Sound will be selected and played when the current playing Sound completes.\r\n     * @param sounds Array of Sounds that will be selected from.\r\n     * @param weights Array of number values for selection weights; length must equal sounds, values will be normalized to 1\r\n     */\r\n    constructor(loop: boolean, sounds: Sound[], weights: number[]) {\r\n        if (sounds.length !== weights.length) {\r\n            throw new Error(\"Sounds length does not equal weights length\");\r\n        }\r\n\r\n        this.loop = loop;\r\n        this._weights = weights;\r\n        // Normalize the weights\r\n        let weightSum = 0;\r\n        for (const weight of weights) {\r\n            weightSum += weight;\r\n        }\r\n        const invWeightSum = weightSum > 0 ? 1 / weightSum : 0;\r\n        for (let i = 0; i < this._weights.length; i++) {\r\n            this._weights[i] *= invWeightSum;\r\n        }\r\n        this._sounds = sounds;\r\n        for (const sound of this._sounds) {\r\n            sound.onEndedObservable.add(() => {\r\n                this._onended();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The size of cone in degrees for a directional sound in which there will be no attenuation.\r\n     */\r\n    public get directionalConeInnerAngle(): number {\r\n        return this._coneInnerAngle;\r\n    }\r\n\r\n    /**\r\n     * The size of cone in degrees for a directional sound in which there will be no attenuation.\r\n     */\r\n    public set directionalConeInnerAngle(value: number) {\r\n        if (value !== this._coneInnerAngle) {\r\n            if (this._coneOuterAngle < value) {\r\n                Logger.Error(\"directionalConeInnerAngle: outer angle of the cone must be superior or equal to the inner angle.\");\r\n                return;\r\n            }\r\n\r\n            this._coneInnerAngle = value;\r\n            for (const sound of this._sounds) {\r\n                sound.directionalConeInnerAngle = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Size of cone in degrees for a directional sound outside of which there will be no sound.\r\n     * Listener angles between innerAngle and outerAngle will falloff linearly.\r\n     */\r\n    public get directionalConeOuterAngle(): number {\r\n        return this._coneOuterAngle;\r\n    }\r\n\r\n    /**\r\n     * Size of cone in degrees for a directional sound outside of which there will be no sound.\r\n     * Listener angles between innerAngle and outerAngle will falloff linearly.\r\n     */\r\n    public set directionalConeOuterAngle(value: number) {\r\n        if (value !== this._coneOuterAngle) {\r\n            if (value < this._coneInnerAngle) {\r\n                Logger.Error(\"directionalConeOuterAngle: outer angle of the cone must be superior or equal to the inner angle.\");\r\n                return;\r\n            }\r\n\r\n            this._coneOuterAngle = value;\r\n            for (const sound of this._sounds) {\r\n                sound.directionalConeOuterAngle = value;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Playback volume.\r\n     */\r\n    public get volume(): number {\r\n        return this._volume;\r\n    }\r\n\r\n    /**\r\n     * Playback volume.\r\n     */\r\n    public set volume(value: number) {\r\n        if (value !== this._volume) {\r\n            for (const sound of this._sounds) {\r\n                sound.setVolume(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _onended() {\r\n        if (this._currentIndex !== undefined) {\r\n            this._sounds[this._currentIndex].autoplay = false;\r\n        }\r\n        if (this.loop && this.isPlaying) {\r\n            this.play();\r\n        } else {\r\n            this.isPlaying = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Suspend playback\r\n     */\r\n    public pause() {\r\n        if (this.isPlaying) {\r\n            this.isPaused = true;\r\n            if (this._currentIndex !== undefined) {\r\n                this._sounds[this._currentIndex].pause();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop playback\r\n     */\r\n    public stop() {\r\n        this.isPlaying = false;\r\n        if (this._currentIndex !== undefined) {\r\n            this._sounds[this._currentIndex].stop();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start playback.\r\n     * @param startOffset Position the clip head at a specific time in seconds.\r\n     */\r\n    public play(startOffset?: number) {\r\n        if (!this.isPaused) {\r\n            this.stop();\r\n            const randomValue = Math.random();\r\n            let total = 0;\r\n            for (let i = 0; i < this._weights.length; i++) {\r\n                total += this._weights[i];\r\n                if (randomValue <= total) {\r\n                    this._currentIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        const sound = this._sounds[this._currentIndex ?? 0];\r\n        if (sound.isReady()) {\r\n            sound.play(0, this.isPaused ? undefined : startOffset);\r\n        } else {\r\n            sound.autoplay = true;\r\n        }\r\n        this.isPlaying = true;\r\n        this.isPaused = false;\r\n    }\r\n}\r\n", "import type { Sound } from \"./sound\";\r\nimport type { Analyser } from \"./analyser\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { AbstractEngine } from \"core/Engines/abstractEngine\";\r\n\r\n/**\r\n * Options allowed during the creation of a sound track.\r\n */\r\nexport interface ISoundTrackOptions {\r\n    /**\r\n     * The volume the sound track should take during creation\r\n     */\r\n    volume?: number;\r\n    /**\r\n     * Define if the sound track is the main sound track of the scene\r\n     */\r\n    mainTrack?: boolean;\r\n}\r\n\r\n/**\r\n * It could be useful to isolate your music & sounds on several tracks to better manage volume on a grouped instance of sounds.\r\n * It will be also used in a future release to apply effects on a specific track.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#using-sound-tracks\r\n */\r\nexport class SoundTrack {\r\n    /**\r\n     * The unique identifier of the sound track in the scene.\r\n     */\r\n    public id: number = -1;\r\n    /**\r\n     * The list of sounds included in the sound track.\r\n     */\r\n    public soundCollection: Array<Sound>;\r\n\r\n    private _outputAudioNode: Nullable<GainNode>;\r\n    private _scene: Scene;\r\n    private _connectedAnalyser: Analyser;\r\n    private _options: ISoundTrackOptions;\r\n    private _isInitialized = false;\r\n\r\n    /**\r\n     * Creates a new sound track.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#using-sound-tracks\r\n     * @param scene Define the scene the sound track belongs to\r\n     * @param options\r\n     */\r\n    constructor(scene?: Nullable<Scene>, options: ISoundTrackOptions = {}) {\r\n        scene = scene || EngineStore.LastCreatedScene;\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._scene = scene;\r\n        this.soundCollection = [];\r\n        this._options = options;\r\n\r\n        if (!this._options.mainTrack && this._scene.soundTracks) {\r\n            this._scene.soundTracks.push(this);\r\n            this.id = this._scene.soundTracks.length - 1;\r\n        }\r\n    }\r\n\r\n    private _initializeSoundTrackAudioGraph() {\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio && AbstractEngine.audioEngine.audioContext) {\r\n            this._outputAudioNode = AbstractEngine.audioEngine.audioContext.createGain();\r\n            this._outputAudioNode.connect(AbstractEngine.audioEngine.masterGain);\r\n\r\n            if (this._options) {\r\n                if (this._options.volume) {\r\n                    this._outputAudioNode.gain.value = this._options.volume;\r\n                }\r\n            }\r\n\r\n            this._isInitialized = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release the sound track and its associated resources\r\n     */\r\n    public dispose(): void {\r\n        if (AbstractEngine.audioEngine && AbstractEngine.audioEngine.canUseWebAudio) {\r\n            if (this._connectedAnalyser) {\r\n                this._connectedAnalyser.stopDebugCanvas();\r\n            }\r\n            while (this.soundCollection.length) {\r\n                this.soundCollection[0].dispose();\r\n            }\r\n            if (this._outputAudioNode) {\r\n                this._outputAudioNode.disconnect();\r\n            }\r\n            this._outputAudioNode = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a sound to this sound track\r\n     * @param sound define the sound to add\r\n     * @ignoreNaming\r\n     */\r\n    public addSound(sound: Sound): void {\r\n        if (!this._isInitialized) {\r\n            this._initializeSoundTrackAudioGraph();\r\n        }\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio && this._outputAudioNode) {\r\n            sound.connectToSoundTrackAudioNode(this._outputAudioNode);\r\n        }\r\n        if (sound.soundTrackId !== undefined) {\r\n            if (sound.soundTrackId === -1) {\r\n                this._scene.mainSoundTrack.removeSound(sound);\r\n            } else if (this._scene.soundTracks) {\r\n                this._scene.soundTracks[sound.soundTrackId].removeSound(sound);\r\n            }\r\n        }\r\n\r\n        this.soundCollection.push(sound);\r\n        sound.soundTrackId = this.id;\r\n    }\r\n\r\n    /**\r\n     * Removes a sound to this sound track\r\n     * @param sound define the sound to remove\r\n     * @ignoreNaming\r\n     */\r\n    public removeSound(sound: Sound): void {\r\n        const index = this.soundCollection.indexOf(sound);\r\n        if (index !== -1) {\r\n            this.soundCollection.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set a global volume for the full sound track.\r\n     * @param newVolume Define the new volume of the sound track\r\n     */\r\n    public setVolume(newVolume: number): void {\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio && this._outputAudioNode) {\r\n            this._outputAudioNode.gain.value = newVolume;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switch the panning model to HRTF:\r\n     * Renders a stereo output of higher quality than equalpower — it uses a convolution with measured impulse responses from human subjects.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public switchPanningModelToHRTF(): void {\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio) {\r\n            for (let i = 0; i < this.soundCollection.length; i++) {\r\n                this.soundCollection[i].switchPanningModelToHRTF();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switch the panning model to Equal Power:\r\n     * Represents the equal-power panning algorithm, generally regarded as simple and efficient. equalpower is the default value.\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#creating-a-spatial-3d-sound\r\n     */\r\n    public switchPanningModelToEqualPower(): void {\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio) {\r\n            for (let i = 0; i < this.soundCollection.length; i++) {\r\n                this.soundCollection[i].switchPanningModelToEqualPower();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect the sound track to an audio analyser allowing some amazing\r\n     * synchronization between the sounds/music and your visualization (VuMeter for instance).\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#using-the-analyser\r\n     * @param analyser The analyser to connect to the engine\r\n     */\r\n    public connectToAnalyser(analyser: Analyser): void {\r\n        if (this._connectedAnalyser) {\r\n            this._connectedAnalyser.stopDebugCanvas();\r\n        }\r\n        this._connectedAnalyser = analyser;\r\n        if (AbstractEngine.audioEngine?.canUseWebAudio && this._outputAudioNode) {\r\n            this._outputAudioNode.disconnect();\r\n            this._connectedAnalyser.connectAudioNodes(this._outputAudioNode, AbstractEngine.audioEngine.masterGain);\r\n        }\r\n    }\r\n}\r\n", "import type { Nullable } from \"../../types\";\nimport type { IAudioParameterRampOptions } from \"../audioParameter\";\nimport type { AbstractAudioNode, AbstractNamedAudioNode } from \"./abstractAudioNode\";\nimport type { AbstractSoundSource, ISoundSourceOptions } from \"./abstractSoundSource\";\nimport type { AudioBus, IAudioBusOptions } from \"./audioBus\";\nimport type { IMainAudioBusOptions, MainAudioBus } from \"./mainAudioBus\";\nimport type { IStaticSoundOptions, StaticSound } from \"./staticSound\";\nimport type { IStaticSoundBufferOptions, StaticSoundBuffer } from \"./staticSoundBuffer\";\nimport type { IStreamingSoundOptions, StreamingSound } from \"./streamingSound\";\nimport type { AbstractSpatialAudioListener, ISpatialAudioListenerOptions } from \"./subProperties/abstractSpatialAudioListener\";\n\nconst Instances: AudioEngineV2[] = [];\n\n/**\n * Gets the most recently created v2 audio engine.\n * @returns The most recently created v2 audio engine.\n */\nexport function LastCreatedAudioEngine(): Nullable<AudioEngineV2> {\n    if (Instances.length === 0) {\n        return null;\n    }\n\n    return Instances[Instances.length - 1];\n}\n\n/**\n * Options for creating a v2 audio engine.\n */\nexport interface IAudioEngineV2Options extends ISpatialAudioListenerOptions {\n    /**\n     * The smoothing duration to use when changing audio parameters, in seconds. Defaults to `0.01` (10 milliseconds).\n     */\n    parameterRampDuration: number;\n    /**\n     * The initial output volume of the audio engine. Defaults to `1`.\n     */\n    volume: number;\n}\n\n/**\n * The state of a v2 audio engine.\n * @see {@link AudioEngineV2.state}\n */\nexport type AudioEngineV2State = \"closed\" | \"interrupted\" | \"running\" | \"suspended\";\n\n/**\n * Abstract base class for v2 audio engines.\n *\n * A v2 audio engine based on the WebAudio API can be created with the {@link CreateAudioEngineAsync} function.\n */\nexport abstract class AudioEngineV2 {\n    /** Not owned, but all items should be in `_nodes` container, too, which is owned. */\n    private readonly _mainBuses = new Set<MainAudioBus>();\n\n    /** Owned top-level sound and bus nodes. */\n    private readonly _nodes = new Set<AbstractNamedAudioNode>();\n\n    private _defaultMainBus: Nullable<MainAudioBus> = null;\n\n    private _parameterRampDuration: number = 0.01;\n\n    protected constructor(options: Partial<IAudioEngineV2Options>) {\n        Instances.push(this);\n\n        if (typeof options.parameterRampDuration === \"number\") {\n            this.parameterRampDuration = options.parameterRampDuration;\n        }\n    }\n\n    /**\n     * The elapsed time since the audio engine was started, in seconds.\n     */\n    public abstract readonly currentTime: number;\n\n    /**\n     * The default main bus that will be used for audio buses and sounds if their `outBus` option is not set.\n     * @see {@link IAudioBusOptions.outBus}\n     * @see {@link IAbstractSoundOptions.outBus}\n     */\n    public get defaultMainBus(): Nullable<MainAudioBus> {\n        if (this._mainBuses.size === 0) {\n            return null;\n        }\n\n        if (!this._defaultMainBus) {\n            this._defaultMainBus = Array.from(this._mainBuses)[0];\n        }\n\n        return this._defaultMainBus;\n    }\n\n    /**\n     * The spatial audio listener properties for the audio engine.\n     * - Each audio engine has exactly one listener.\n     */\n    public abstract readonly listener: AbstractSpatialAudioListener;\n\n    /**\n     * The main output node.\n     * - This is the last node in the audio graph before the audio is sent to the speakers.\n     */\n    public abstract readonly mainOut: AbstractAudioNode;\n\n    /**\n     * The current state of the audio engine.\n     *\n     * Possible values are:\n     * - `\"closed\"`: The audio engine has been closed.\n     * - `\"interrupted\"`: The audio engine has been interrupted and is not running.\n     * - `\"running\"`: The audio engine is running normally.\n     * - `\"suspended\"`: The audio engine is suspended and is not running.\n     */\n    public abstract readonly state: AudioEngineV2State;\n\n    /**\n     * The output volume of the audio engine.\n     */\n    public abstract volume: number;\n\n    /**\n     * The smoothing duration to use when changing audio parameters, in seconds. Defaults to `0.01` (10 milliseconds).\n     *\n     * Due to limitations in some browsers, it is not recommended to set this value to longer than `0.01` seconds.\n     *\n     * Setting this value to longer than `0.01` seconds may result in errors being throw when setting audio parameters.\n     */\n    public get parameterRampDuration(): number {\n        return this._parameterRampDuration;\n    }\n\n    public set parameterRampDuration(value: number) {\n        this._parameterRampDuration = Math.max(0, value);\n    }\n\n    /**\n     * Creates a new audio bus.\n     * @param name - The name of the audio bus.\n     * @param options - The options to use when creating the audio bus.\n     * @returns A promise that resolves with the created audio bus.\n     */\n    public abstract createBusAsync(name: string, options?: Partial<IAudioBusOptions>): Promise<AudioBus>;\n\n    /**\n     * Creates a new main audio bus.\n     * @param name - The name of the main audio bus.\n     * @param options - The options to use when creating the main audio bus.\n     * @returns A promise that resolves with the created main audio bus.\n     */\n    public abstract createMainBusAsync(name: string, options?: Partial<IMainAudioBusOptions>): Promise<MainAudioBus>;\n\n    /**\n     * Creates a new microphone sound source.\n     * @param name - The name of the sound.\n     * @param options - The options for the sound source.\n     * @returns A promise that resolves to the created sound source.\n     */\n    public abstract createMicrophoneSoundSourceAsync(name: string, options?: Partial<ISoundSourceOptions>): Promise<AbstractSoundSource>;\n\n    /**\n     * Creates a new static sound.\n     * @param name - The name of the sound.\n     * @param source - The source of the sound.\n     * @param options - The options for the static sound.\n     * @returns A promise that resolves to the created static sound.\n     */\n    public abstract createSoundAsync(\n        name: string,\n        source: ArrayBuffer | AudioBuffer | StaticSoundBuffer | string | string[],\n        options?: Partial<IStaticSoundOptions>\n    ): Promise<StaticSound>;\n\n    /**\n     * Creates a new static sound buffer.\n     * @param source - The source of the sound buffer.\n     * @param options - The options for the static sound buffer.\n     * @returns A promise that resolves to the created static sound buffer.\n     */\n    public abstract createSoundBufferAsync(\n        source: ArrayBuffer | AudioBuffer | StaticSoundBuffer | string | string[],\n        options?: Partial<IStaticSoundBufferOptions>\n    ): Promise<StaticSoundBuffer>;\n\n    /**\n     * Creates a new sound source.\n     * @param name - The name of the sound.\n     * @param source - The source of the sound.\n     * @param options - The options for the sound source.\n     * @returns A promise that resolves to the created sound source.\n     */\n    public abstract createSoundSourceAsync(name: string, source: AudioNode, options?: Partial<ISoundSourceOptions>): Promise<AbstractSoundSource>;\n\n    /**\n     * Creates a new streaming sound.\n     * @param name - The name of the sound.\n     * @param source - The source of the sound.\n     * @param options - The options for the streaming sound.\n     * @returns A promise that resolves to the created streaming sound.\n     */\n    public abstract createStreamingSoundAsync(name: string, source: HTMLMediaElement | string | string[], options?: Partial<IStreamingSoundOptions>): Promise<StreamingSound>;\n\n    /**\n     * Releases associated resources.\n     */\n    public dispose(): void {\n        if (Instances.includes(this)) {\n            Instances.splice(Instances.indexOf(this), 1);\n        }\n\n        const nodeIt = this._nodes.values();\n        for (let next = nodeIt.next(); !next.done; next = nodeIt.next()) {\n            next.value.dispose();\n        }\n\n        this._mainBuses.clear();\n        this._nodes.clear();\n\n        this._defaultMainBus = null;\n    }\n\n    /**\n     * Checks if the specified format is valid.\n     * @param format The format to check as an audio file extension like \"mp3\" or \"wav\".\n     * @returns `true` if the format is valid; otherwise `false`.\n     */\n    public abstract isFormatValid(format: string): boolean;\n\n    /**\n     * Pauses the audio engine if it is running.\n     * @returns A promise that resolves when the audio engine is paused.\n     */\n    public abstract pauseAsync(): Promise<void>;\n\n    /**\n     * Resumes the audio engine if it is not running.\n     * @returns A promise that resolves when the audio engine is running.\n     */\n    public abstract resumeAsync(): Promise<void>;\n\n    /**\n     * Sets the audio output volume with optional ramping.\n     * If the duration is 0 then the volume is set immediately, otherwise it is ramped to the new value over the given duration using the given shape.\n     * If a ramp is already in progress then the volume is not set and an error is thrown.\n     * @param value The value to set the volume to.\n     * @param options The options to use for ramping the volume change.\n     */\n    public abstract setVolume(value: number, options?: Partial<IAudioParameterRampOptions>): void;\n\n    /**\n     * Unlocks the audio engine if it is locked.\n     * - Note that the returned promise may already be resolved if the audio engine is already unlocked.\n     * @returns A promise that is resolved when the audio engine is unlocked.\n     */\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\n    public unlockAsync(): Promise<void> {\n        return this.resumeAsync();\n    }\n\n    protected _addMainBus(mainBus: MainAudioBus): void {\n        this._mainBuses.add(mainBus);\n\n        this._addNode(mainBus);\n    }\n\n    protected _removeMainBus(mainBus: MainAudioBus): void {\n        this._mainBuses.delete(mainBus);\n        this._defaultMainBus = null;\n\n        this._removeNode(mainBus);\n    }\n\n    protected _addNode(node: AbstractNamedAudioNode): void {\n        this._nodes.add(node);\n    }\n\n    protected _removeNode(node: AbstractNamedAudioNode): void {\n        this._nodes.delete(node);\n    }\n}\n\n/**\n * @internal\n * @param engine - The given audio engine. If `null` then the last created audio engine is used.\n * @returns the given audio engine or the last created audio engine.\n * @throws An error if the resulting engine is `null`.\n */\nexport function _GetAudioEngine(engine: Nullable<AudioEngineV2>): AudioEngineV2 {\n    if (!engine) {\n        engine = LastCreatedAudioEngine();\n    }\n\n    if (engine) {\n        return engine;\n    }\n\n    throw new Error(\"No audio engine.\");\n}\n\n/**\n * Creates a new audio bus.\n * @param name - The name of the audio bus.\n * @param options - The options to use when creating the audio bus.\n * @param engine - The audio engine.\n * @returns A promise that resolves with the created audio bus.\n */\n// eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\nexport function CreateAudioBusAsync(name: string, options: Partial<IAudioBusOptions> = {}, engine: Nullable<AudioEngineV2> = null): Promise<AudioBus> {\n    engine = _GetAudioEngine(engine);\n    return engine.createBusAsync(name, options);\n}\n\n/**\n * Creates a new main audio bus.\n * @param name - The name of the main audio bus.\n * @param options - The options to use when creating the main audio bus.\n * @param engine - The audio engine.\n * @returns A promise that resolves with the created main audio bus.\n */\n// eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\nexport function CreateMainAudioBusAsync(name: string, options: Partial<IMainAudioBusOptions> = {}, engine: Nullable<AudioEngineV2> = null): Promise<MainAudioBus> {\n    engine = _GetAudioEngine(engine);\n    return engine.createMainBusAsync(name, options);\n}\n\n/**\n * Creates a new microphone sound source.\n * @param name - The name of the sound.\n * @param options - The options for the sound source.\n * @param engine - The audio engine.\n * @returns A promise that resolves to the created sound source.\n */\n// eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\nexport function CreateMicrophoneSoundSourceAsync(name: string, options: Partial<ISoundSourceOptions> = {}, engine: Nullable<AudioEngineV2> = null): Promise<AbstractSoundSource> {\n    engine = _GetAudioEngine(engine);\n    return engine.createMicrophoneSoundSourceAsync(name, options);\n}\n\n/**\n * Creates a new static sound.\n * @param name - The name of the sound.\n * @param source - The source of the sound.\n * @param options - The options for the static sound.\n * @param engine - The audio engine.\n * @returns A promise that resolves to the created static sound.\n */\n// eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\nexport function CreateSoundAsync(\n    name: string,\n    source: ArrayBuffer | AudioBuffer | StaticSoundBuffer | string | string[],\n    options: Partial<IStaticSoundOptions> = {},\n    engine: Nullable<AudioEngineV2> = null\n): Promise<StaticSound> {\n    engine = _GetAudioEngine(engine);\n    return engine.createSoundAsync(name, source, options);\n}\n\n/**\n * Creates a new static sound buffer.\n * @param source - The source of the sound buffer.\n * @param options - The options for the static sound buffer.\n * @param engine - The audio engine.\n * @returns A promise that resolves to the created static sound buffer.\n */\nexport async function CreateSoundBufferAsync(\n    source: ArrayBuffer | AudioBuffer | StaticSoundBuffer | string | string[],\n    options: Partial<IStaticSoundBufferOptions> = {},\n    engine: Nullable<AudioEngineV2> = null\n): Promise<StaticSoundBuffer> {\n    engine = _GetAudioEngine(engine);\n    return await engine.createSoundBufferAsync(source, options);\n}\n\n/**\n * Creates a new sound source.\n * @param name - The name of the sound.\n * @param source - The source of the sound.\n * @param options - The options for the sound source.\n * @param engine - The audio engine.\n * @returns A promise that resolves to the created sound source.\n */\n// eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\nexport function CreateSoundSourceAsync(\n    name: string,\n    source: AudioNode,\n    options: Partial<ISoundSourceOptions> = {},\n    engine: Nullable<AudioEngineV2> = null\n): Promise<AbstractSoundSource> {\n    engine = _GetAudioEngine(engine);\n    return engine.createSoundSourceAsync(name, source, options);\n}\n\n/**\n * Creates a new streaming sound.\n * @param name - The name of the sound.\n * @param source - The source of the sound.\n * @param options - The options for the streaming sound.\n * @param engine - The audio engine.\n * @returns A promise that resolves to the created streaming sound.\n */\n// eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\nexport function CreateStreamingSoundAsync(\n    name: string,\n    source: HTMLMediaElement | string | string[],\n    options: Partial<IStreamingSoundOptions> = {},\n    engine: Nullable<AudioEngineV2> = null\n): Promise<StreamingSound> {\n    engine = _GetAudioEngine(engine);\n    return engine.createStreamingSoundAsync(name, source, options);\n}\n", "import { Quaternion, Vector3 } from \"../../../Maths/math.vector\";\nimport type { Node } from \"../../../node\";\nimport type { Nullable } from \"../../../types\";\nimport type { SpatialAudioAttachmentType } from \"../../spatialAudioAttachmentType\";\n\nexport const _SpatialAudioListenerDefaults = {\n    position: Vector3.Zero(),\n    rotation: Vector3.Zero(),\n    rotationQuaternion: new Quaternion(),\n} as const;\n\n/**\n * Options for spatial audio.\n */\nexport interface ISpatialAudioListenerOptions {\n    /**\n     * Whether to automatically update the position and rotation of the listener. Defaults to `true`.\n     */\n    listenerAutoUpdate: boolean;\n    /**\n     * Set to `true` to enable the listener. Defaults to `false`.\n     */\n    listenerEnabled: boolean;\n    /**\n     * The minimum update time in seconds of the listener if it is attached to a mesh, scene or transform node. Defaults to `0`.\n     * - The listener's position and rotation will not update faster than this time, but they may update slower depending on the frame rate.\n     */\n    listenerMinUpdateTime: number;\n    /**\n     * The listener position. Defaults to (0, 0, 0).\n     */\n    listenerPosition: Vector3;\n    /**\n     * The listener rotation, as Euler angles. Defaults to (0, 0, 0).\n     */\n    listenerRotation: Vector3;\n    /**\n     * The listener rotation, as a quaternion. Defaults to (0, 0, 0, 1).\n     */\n    listenerRotationQuaternion: Quaternion;\n}\n\n/**\n * @param options The spatial audio listener options to check.\n * @returns `true` if spatial audio listener options are defined, otherwise `false`.\n */\nexport function _HasSpatialAudioListenerOptions(options: Partial<ISpatialAudioListenerOptions>): boolean {\n    return (\n        options.listenerEnabled ||\n        options.listenerMinUpdateTime !== undefined ||\n        options.listenerPosition !== undefined ||\n        options.listenerRotation !== undefined ||\n        options.listenerRotationQuaternion !== undefined\n    );\n}\n\n/**\n * Abstract class representing the spatial audio `listener` property on an audio engine.\n *\n * @see {@link AudioEngineV2.listener}\n */\nexport abstract class AbstractSpatialAudioListener {\n    /**\n     * Whether the listener is attached to a camera, mesh or transform node.\n     */\n    public abstract isAttached: boolean;\n\n    /**\n     * The minimum update time in seconds of the listener if it is attached to a mesh, scene or transform node. Defaults to `0`.\n     * - The listener's position and rotation will not update faster than this time, but they may update slower depending on the frame rate.\n     */\n    public abstract minUpdateTime: number;\n\n    /**\n     * The listener position. Defaults to (0, 0, 0).\n     */\n    public abstract position: Vector3;\n\n    /**\n     * The listener rotation, as Euler angles. Defaults to (0, 0, 0).\n     */\n    public abstract rotation: Vector3;\n\n    /**\n     * The listener rotation, as a quaternion. Defaults to (0, 0, 0, 1).\n     */\n    public abstract rotationQuaternion: Quaternion;\n\n    /**\n     * Attaches to a scene node.\n     *\n     * Detaches automatically before attaching to the given scene node.\n     * If `sceneNode` is `null` it is the same as calling `detach()`.\n     *\n     * @param sceneNode The scene node to attach to, or `null` to detach.\n     * @param useBoundingBox Whether to use the bounding box of the node for positioning. Defaults to `false`.\n     * @param attachmentType Whether to attach to the node's position and/or rotation. Defaults to `PositionAndRotation`.\n     */\n    public abstract attach(sceneNode: Nullable<Node>, useBoundingBox?: boolean, attachmentType?: SpatialAudioAttachmentType): void;\n\n    /**\n     * Detaches from the scene node if attached.\n     */\n    public abstract detach(): void;\n\n    /**\n     * Updates the position and rotation of the associated audio engine object in the audio rendering graph.\n     *\n     * This is called automatically by default and only needs to be called manually if automatic updates are disabled.\n     */\n    public abstract update(): void;\n}\n", "import type { Node } from \"../../../node\";\nimport type { Nullable } from \"../../../types\";\nimport { SpatialAudioAttachmentType } from \"../../spatialAudioAttachmentType\";\nimport { _SpatialAudioAttacherComponent } from \"../components/spatialAudioAttacherComponent\";\nimport type { ISpatialAudioListenerOptions } from \"./abstractSpatialAudioListener\";\nimport { _SpatialAudioListenerDefaults, AbstractSpatialAudioListener } from \"./abstractSpatialAudioListener\";\n\n/** @internal */\nexport abstract class _SpatialAudioListener extends AbstractSpatialAudioListener {\n    protected _attacherComponent: Nullable<_SpatialAudioAttacherComponent> = null;\n\n    protected constructor() {\n        super();\n\n        this._attacherComponent = new _SpatialAudioAttacherComponent(this);\n    }\n\n    /** @internal */\n    public get isAttached(): boolean {\n        return this._attacherComponent !== null && this._attacherComponent.isAttached;\n    }\n\n    /**\n     * Attaches to a scene node.\n     *\n     * Detaches automatically before attaching to the given scene node.\n     * If `sceneNode` is `null` it is the same as calling `detach()`.\n     *\n     * @param sceneNode The scene node to attach to, or `null` to detach.\n     * @param useBoundingBox Whether to use the bounding box of the node for positioning. Defaults to `false`.\n     * @param attachmentType Whether to attach to the node's position and/or rotation. Defaults to `PositionAndRotation`.\n     */\n    public attach(sceneNode: Nullable<Node>, useBoundingBox: boolean = false, attachmentType: SpatialAudioAttachmentType = SpatialAudioAttachmentType.PositionAndRotation): void {\n        if (!this._attacherComponent) {\n            this._attacherComponent = new _SpatialAudioAttacherComponent(this);\n        }\n        this._attacherComponent.attach(sceneNode, useBoundingBox, attachmentType);\n    }\n\n    /**\n     * Detaches from the scene node if attached.\n     */\n    public detach(): void {\n        this._attacherComponent?.detach();\n    }\n\n    /** @internal */\n    public dispose(): void {\n        this._attacherComponent?.dispose();\n        this._attacherComponent = null;\n    }\n\n    /** @internal */\n    public setOptions(options: Partial<ISpatialAudioListenerOptions>): void {\n        if (options.listenerMinUpdateTime !== undefined) {\n            this.minUpdateTime = options.listenerMinUpdateTime;\n        }\n\n        if (options.listenerPosition) {\n            this.position = options.listenerPosition.clone();\n        }\n\n        if (options.listenerRotationQuaternion) {\n            this.rotationQuaternion = options.listenerRotationQuaternion.clone();\n        } else if (options.listenerRotation) {\n            this.rotation = options.listenerRotation.clone();\n        } else {\n            this.rotationQuaternion = _SpatialAudioListenerDefaults.rotationQuaternion.clone();\n        }\n\n        this.update();\n    }\n\n    public abstract _updatePosition(): void;\n    public abstract _updateRotation(): void;\n}\n", "import { Matrix, Quaternion, Vector3 } from \"../../../Maths/math.vector\";\nimport { _SpatialAudioListener } from \"../../abstractAudio/subProperties/spatialAudioListener\";\nimport { _SpatialWebAudioUpdaterComponent } from \"../components/spatialWebAudioUpdaterComponent\";\nimport { _WebAudioParameterComponent } from \"../components/webAudioParameterComponent\";\nimport type { _WebAudioEngine } from \"../webAudioEngine\";\n\nconst TmpMatrix = Matrix.Zero();\nconst TmpQuaternion = new Quaternion();\nconst TmpVector1 = Vector3.Zero();\nconst TmpVector2 = Vector3.Zero();\n\n/** @internal */\nexport function _CreateSpatialAudioListener(engine: _WebAudioEngine, autoUpdate: boolean, minUpdateTime: number): _SpatialAudioListener {\n    const listener = engine._audioContext.listener;\n    if (\n        listener.forwardX &&\n        listener.forwardY &&\n        listener.forwardZ &&\n        listener.positionX &&\n        listener.positionY &&\n        listener.positionZ &&\n        listener.upX &&\n        listener.upY &&\n        listener.upZ\n    ) {\n        return new _SpatialWebAudioListener(engine, autoUpdate, minUpdateTime);\n    } else {\n        return new _SpatialWebAudioListenerFallback(engine, autoUpdate, minUpdateTime);\n    }\n}\n\nabstract class _AbstractSpatialWebAudioListener extends _SpatialAudioListener {\n    protected readonly _listener: AudioListener;\n\n    protected _lastPosition: Vector3 = Vector3.Zero();\n    protected _lastRotation: Vector3 = Vector3.Zero();\n    protected _lastRotationQuaternion: Quaternion = new Quaternion();\n    protected _updaterComponent: _SpatialWebAudioUpdaterComponent;\n\n    /** @internal */\n    public readonly engine: _WebAudioEngine;\n\n    /** @internal */\n    public readonly position: Vector3 = Vector3.Zero();\n    /** @internal */\n    public readonly rotation: Vector3 = Vector3.Zero();\n    /** @internal */\n    public readonly rotationQuaternion: Quaternion = new Quaternion();\n\n    /** @internal */\n    public constructor(engine: _WebAudioEngine, autoUpdate: boolean, minUpdateTime: number) {\n        super();\n\n        this._listener = engine._audioContext.listener;\n        this.engine = engine;\n\n        this._updaterComponent = new _SpatialWebAudioUpdaterComponent(this, autoUpdate, minUpdateTime);\n    }\n\n    /** @internal */\n    public override dispose(): void {\n        super.dispose();\n\n        this._updaterComponent.dispose();\n        this._updaterComponent = null!;\n    }\n\n    /** @internal */\n    public get minUpdateTime(): number {\n        return this._updaterComponent.minUpdateTime;\n    }\n\n    /** @internal */\n    public set minUpdateTime(value: number) {\n        this._updaterComponent.minUpdateTime = value;\n    }\n\n    /** @internal */\n    public update(): void {\n        if (this.isAttached) {\n            this._attacherComponent?.update();\n        } else {\n            this._updatePosition();\n            this._updateRotation();\n        }\n    }\n\n    public _updatePosition(): void {\n        if (this._lastPosition.equalsWithEpsilon(this.position)) {\n            return;\n        }\n\n        this._setWebAudioPosition(this.position);\n\n        this._lastPosition.copyFrom(this.position);\n    }\n\n    public _updateRotation(): void {\n        if (!this._lastRotationQuaternion.equalsWithEpsilon(this.rotationQuaternion)) {\n            TmpQuaternion.copyFrom(this.rotationQuaternion);\n            this._lastRotationQuaternion.copyFrom(this.rotationQuaternion);\n        } else if (!this._lastRotation.equalsWithEpsilon(this.rotation)) {\n            Quaternion.FromEulerAnglesToRef(this.rotation.x, this.rotation.y, this.rotation.z, TmpQuaternion);\n            this._lastRotation.copyFrom(this.rotation);\n        } else {\n            return;\n        }\n\n        Matrix.FromQuaternionToRef(TmpQuaternion, TmpMatrix);\n\n        // NB: The WebAudio API is right-handed.\n        Vector3.TransformNormalToRef(Vector3.RightHandedForwardReadOnly, TmpMatrix, TmpVector1);\n        Vector3.TransformNormalToRef(Vector3.Up(), TmpMatrix, TmpVector2);\n\n        this._setWebAudioOrientation(TmpVector1, TmpVector2);\n    }\n\n    protected abstract _setWebAudioPosition(position: Vector3): void;\n    protected abstract _setWebAudioOrientation(forward: Vector3, up: Vector3): void;\n}\n\n/**\n * Full-featured spatial audio listener for the Web Audio API.\n *\n * Used in browsers that support the `forwardX/Y/Z`, `positionX/Y/Z`, and `upX/Y/Z` properties on the AudioContext listener.\n *\n * NB: Firefox falls back to using this implementation.\n *\n * @see _SpatialWebAudioListenerFallback for the implementation used if only `setPosition` and `setOrientation` are available.\n *\n * NB: This sub property is not backed by a sub node and all properties are set directly on the audio context listener.\n *\n * @internal\n */\nclass _SpatialWebAudioListener extends _AbstractSpatialWebAudioListener {\n    private _forwardX: _WebAudioParameterComponent;\n    private _forwardY: _WebAudioParameterComponent;\n    private _forwardZ: _WebAudioParameterComponent;\n    private _positionX: _WebAudioParameterComponent;\n    private _positionY: _WebAudioParameterComponent;\n    private _positionZ: _WebAudioParameterComponent;\n    private _upX: _WebAudioParameterComponent;\n    private _upY: _WebAudioParameterComponent;\n    private _upZ: _WebAudioParameterComponent;\n\n    public constructor(engine: _WebAudioEngine, autoUpdate: boolean, minUpdateTime: number) {\n        super(engine, autoUpdate, minUpdateTime);\n\n        const listener = engine._audioContext.listener;\n        this._forwardX = new _WebAudioParameterComponent(engine, listener.forwardX);\n        this._forwardY = new _WebAudioParameterComponent(engine, listener.forwardY);\n        this._forwardZ = new _WebAudioParameterComponent(engine, listener.forwardZ);\n        this._positionX = new _WebAudioParameterComponent(engine, listener.positionX);\n        this._positionY = new _WebAudioParameterComponent(engine, listener.positionY);\n        this._positionZ = new _WebAudioParameterComponent(engine, listener.positionZ);\n        this._upX = new _WebAudioParameterComponent(engine, listener.upX);\n        this._upY = new _WebAudioParameterComponent(engine, listener.upY);\n        this._upZ = new _WebAudioParameterComponent(engine, listener.upZ);\n    }\n\n    protected override _setWebAudioPosition(position: Vector3): void {\n        // If attached and there is a ramp in progress, we assume another update is coming soon that we can wait for.\n        // We don't do this for unattached nodes because there may not be another update coming.\n        if (this.isAttached && (this._positionX.isRamping || this._positionY.isRamping || this._positionZ.isRamping)) {\n            return;\n        }\n\n        this._positionX.targetValue = position.x;\n        this._positionY.targetValue = position.y;\n        this._positionZ.targetValue = position.z;\n    }\n\n    protected override _setWebAudioOrientation(forward: Vector3, up: Vector3): void {\n        // If attached and there is a ramp in progress, we assume another update is coming soon that we can wait for.\n        // We don't do this for unattached nodes because there may not be another update coming.\n        if (\n            this.isAttached &&\n            (this._forwardX.isRamping || this._forwardY.isRamping || this._forwardZ.isRamping || this._upX.isRamping || this._upY.isRamping || this._upZ.isRamping)\n        ) {\n            return;\n        }\n\n        this._forwardX.targetValue = forward.x;\n        this._forwardY.targetValue = forward.y;\n        this._forwardZ.targetValue = forward.z;\n\n        this._upX.targetValue = up.x;\n        this._upY.targetValue = up.y;\n        this._upZ.targetValue = up.z;\n    }\n}\n\n/**\n * Fallback spatial audio listener for the Web Audio API.\n *\n * Used in browsers that do not support the `forwardX/Y/Z`, `positionX/Y/Z`, and `upX/Y/Z` properties on the\n * AudioContext listener.\n *\n * @see _SpatialWebAudioListener for the implementation used if the `forwardX/Y/Z`, `positionX/Y/Z`, and `upX/Y/Z`\n * properties are available.\n *\n * NB: This sub property is not backed by a sub node and all properties are set directly on the audio context listener.\n *\n * @internal\n */\nclass _SpatialWebAudioListenerFallback extends _AbstractSpatialWebAudioListener {\n    protected override _setWebAudioPosition(position: Vector3): void {\n        this._listener.setPosition(position.x, position.y, position.z);\n    }\n\n    protected override _setWebAudioOrientation(forward: Vector3, up: Vector3): void {\n        this._listener.setOrientation(forward.x, forward.y, forward.z, up.x, up.y, up.z);\n    }\n}\n", "import { AudioNodeType, AbstractAudioNode } from \"./abstractAudioNode\";\nimport type { AudioEngineV2 } from \"./audioEngineV2\";\n\n/**\n * Abstract class for the main audio output node.\n *\n * A main audio output is the last audio node in the audio graph before the audio is sent to the speakers.\n *\n * @see {@link AudioEngineV2.mainOut}\n * @internal\n */\nexport abstract class _MainAudioOut extends AbstractAudioNode {\n    protected constructor(engine: AudioEngineV2) {\n        super(engine, AudioNodeType.HAS_INPUTS);\n    }\n}\n", "import type { Nullable } from \"../../types\";\nimport { _MainAudioOut } from \"../abstractAudio/mainAudioOut\";\nimport type { IAudioParameterRampOptions } from \"../audioParameter\";\nimport { _WebAudioParameterComponent } from \"./components/webAudioParameterComponent\";\nimport type { _WebAudioEngine } from \"./webAudioEngine\";\nimport type { IWebAudioInNode } from \"./webAudioNode\";\n\n/** @internal */\nexport class _WebAudioMainOut extends _MainAudioOut implements IWebAudioInNode {\n    private _gainNode: GainNode;\n    private _volume: _WebAudioParameterComponent;\n\n    /** @internal */\n    public override readonly engine: _WebAudioEngine;\n\n    /** @internal */\n    public constructor(engine: _WebAudioEngine) {\n        super(engine);\n\n        this._setGainNode(new GainNode(engine._audioContext));\n    }\n\n    /** @internal */\n    public override dispose(): void {\n        super.dispose();\n\n        this._volume.dispose();\n        this._gainNode.disconnect();\n        this._destinationNode.disconnect();\n    }\n\n    /** @internal */\n    public get _inNode(): GainNode {\n        return this._gainNode;\n    }\n\n    public set _inNode(value: GainNode) {\n        if (this._gainNode === value) {\n            return;\n        }\n\n        this._setGainNode(value);\n    }\n\n    /** @internal */\n    public get volume(): number {\n        return this._volume.targetValue;\n    }\n\n    /** @internal */\n    public set volume(value: number) {\n        this._volume.targetValue = value;\n    }\n\n    private get _destinationNode(): AudioNode {\n        return this.engine._audioDestination;\n    }\n\n    /** @internal */\n    public getClassName(): string {\n        return \"_WebAudioMainOut\";\n    }\n\n    /** @internal */\n    public setVolume(value: number, options: Nullable<Partial<IAudioParameterRampOptions>> = null): void {\n        this._volume.setTargetValue(value, options);\n    }\n\n    private _setGainNode(gainNode: GainNode): void {\n        if (this._gainNode === gainNode) {\n            return;\n        }\n\n        this._gainNode?.disconnect();\n        gainNode.connect(this._destinationNode);\n\n        this._volume = new _WebAudioParameterComponent(this.engine, gainNode.gain);\n\n        this._gainNode = gainNode;\n    }\n}\n", "import type { Nullable } from \"../../types\";\nimport { EngineStore } from \"../../Engines/engineStore\";\nimport type { _WebAudioEngine } from \"./webAudioEngine\";\n\n/**\n * Adds a UI button that starts the audio engine's underlying audio context when the user presses it.\n * @internal\n */\nexport class _WebAudioUnmuteUI {\n    private _button: Nullable<HTMLButtonElement> = null;\n    private _enabled: boolean = true;\n    private _engine: _WebAudioEngine;\n    private _style: Nullable<HTMLStyleElement> = null;\n\n    /** @internal */\n    public constructor(engine: _WebAudioEngine, parentElement?: HTMLElement) {\n        this._engine = engine;\n        const parent = parentElement || EngineStore.LastCreatedEngine?.getInputElement()?.parentElement || document.body;\n        const top = (parent?.offsetTop || 0) + 20;\n\n        this._style = document.createElement(\"style\");\n        this._style.appendChild(\n            document.createTextNode(\n                `.babylonUnmute{position:absolute;top:${top}px;margin-left:20px;height:40px;width:60px;background-color:rgba(51,51,51,0.7);background-image:url(\"data:image/svg+xml;charset=UTF-8,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2239%22%20height%3D%2232%22%20viewBox%3D%220%200%2039%2032%22%3E%3Cpath%20fill%3D%22white%22%20d%3D%22M9.625%2018.938l-0.031%200.016h-4.953q-0.016%200-0.031-0.016v-12.453q0-0.016%200.031-0.016h4.953q0.031%200%200.031%200.016v12.453zM12.125%207.688l8.719-8.703v27.453l-8.719-8.719-0.016-0.047v-9.938zM23.359%207.875l1.406-1.406%204.219%204.203%204.203-4.203%201.422%201.406-4.219%204.219%204.219%204.203-1.484%201.359-4.141-4.156-4.219%204.219-1.406-1.422%204.219-4.203z%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E\");background-size:80%;background-repeat:no-repeat;background-position:center;background-position-y:4px;border:none;outline:none;transition:transform 0.125s ease-out;cursor:pointer;z-index:9999;}.babylonUnmute:hover{transform:scale(1.05)}`\n            )\n        );\n        document.head.appendChild(this._style);\n\n        this._button = document.createElement(\"button\");\n        this._button.className = \"babylonUnmute\";\n        this._button.id = \"babylonUnmuteButton\";\n\n        this._button.addEventListener(\"click\", () => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this._engine.unlockAsync();\n        });\n\n        parent.appendChild(this._button);\n\n        this._engine.stateChangedObservable.add(this._onStateChanged);\n    }\n\n    /** @internal */\n    public dispose(): void {\n        this._button?.remove();\n        this._button = null;\n\n        this._style?.remove();\n        this._style = null;\n\n        this._engine.stateChangedObservable.removeCallback(this._onStateChanged);\n    }\n\n    /** @internal */\n    public get enabled(): boolean {\n        return this._enabled;\n    }\n\n    public set enabled(value: boolean) {\n        this._enabled = value;\n        if (value) {\n            if (this._engine.state !== \"running\") {\n                this._show();\n            }\n        } else {\n            this._hide();\n        }\n    }\n\n    private _show(): void {\n        if (!this._button) {\n            return;\n        }\n\n        this._button.style.display = \"block\";\n    }\n\n    private _hide(): void {\n        if (!this._button) {\n            return;\n        }\n\n        this._button.style.display = \"none\";\n    }\n\n    private _onStateChanged = () => {\n        if (!this._button) {\n            return;\n        }\n\n        if (this._engine.state === \"running\") {\n            this._hide();\n        } else {\n            this._show();\n        }\n    };\n}\n", "import { Observable } from \"../../Misc/observable\";\nimport type { Nullable } from \"../../types\";\nimport type { AbstractNamedAudioNode } from \"../abstractAudio/abstractAudioNode\";\nimport type { AbstractSoundSource, ISoundSourceOptions } from \"../abstractAudio/abstractSoundSource\";\nimport type { AudioBus, IAudioBusOptions } from \"../abstractAudio/audioBus\";\nimport type { AudioEngineV2State, IAudioEngineV2Options } from \"../abstractAudio/audioEngineV2\";\nimport { AudioEngineV2 } from \"../abstractAudio/audioEngineV2\";\nimport type { IMainAudioBusOptions, MainAudioBus } from \"../abstractAudio/mainAudioBus\";\nimport type { IStaticSoundOptions, StaticSound } from \"../abstractAudio/staticSound\";\nimport type { IStaticSoundBufferOptions, StaticSoundBuffer } from \"../abstractAudio/staticSoundBuffer\";\nimport type { IStreamingSoundOptions, StreamingSound } from \"../abstractAudio/streamingSound\";\nimport type { AbstractSpatialAudioListener } from \"../abstractAudio/subProperties/abstractSpatialAudioListener\";\nimport { _HasSpatialAudioListenerOptions } from \"../abstractAudio/subProperties/abstractSpatialAudioListener\";\nimport type { _SpatialAudioListener } from \"../abstractAudio/subProperties/spatialAudioListener\";\nimport type { IAudioParameterRampOptions } from \"../audioParameter\";\nimport { _CreateSpatialAudioListener } from \"./subProperties/spatialWebAudioListener\";\nimport { _WebAudioMainOut } from \"./webAudioMainOut\";\nimport { _WebAudioUnmuteUI } from \"./webAudioUnmuteUI\";\n\n/**\n * Options for creating a v2 audio engine that uses the WebAudio API.\n */\nexport interface IWebAudioEngineOptions extends IAudioEngineV2Options {\n    /**\n     * The audio context to be used by the engine.\n     */\n    audioContext: AudioContext;\n    /**\n     * The default UI's parent element. Defaults to the last created graphics engine's canvas if it exists; otherwise the HTML document's body.\n     */\n    defaultUIParentElement?: HTMLElement;\n    /**\n     * Set to `true` to disable the default UI. Defaults to `false`.\n     */\n    disableDefaultUI?: boolean;\n    /**\n     * Set to `true` to automatically resume the audio context when the user interacts with the page. Defaults to `true`.\n     */\n    resumeOnInteraction: boolean;\n    /**\n     * Set to `true` to automatically resume the audio context when the browser pauses audio playback. Defaults to `true`.\n     */\n    resumeOnPause: boolean;\n    /**\n     * The interval in milliseconds to try resuming audio playback when `resumeOnPause` is `true`. Defaults to `1000`.\n     */\n    resumeOnPauseRetryInterval: number;\n}\n\n/**\n * Creates a new v2 audio engine that uses the WebAudio API.\n * @param options - The options for creating the audio engine.\n * @returns A promise that resolves with the created audio engine.\n */\nexport async function CreateAudioEngineAsync(options: Partial<IWebAudioEngineOptions> = {}): Promise<AudioEngineV2> {\n    const engine = new _WebAudioEngine(options);\n    await engine._initAsync(options);\n    return engine;\n}\n\nconst FormatMimeTypes: { [key: string]: string } = {\n    aac: \"audio/aac\",\n    ac3: \"audio/ac3\",\n    flac: \"audio/flac\",\n    m4a: \"audio/mp4\",\n    mp3: 'audio/mpeg; codecs=\"mp3\"',\n    mp4: \"audio/mp4\",\n    ogg: 'audio/ogg; codecs=\"vorbis\"',\n    wav: \"audio/wav\",\n    webm: 'audio/webm; codecs=\"vorbis\"',\n};\n\n/** @internal */\nexport class _WebAudioEngine extends AudioEngineV2 {\n    private _audioContextStarted = false;\n    private _destinationNode: Nullable<AudioNode> = null;\n    private _invalidFormats = new Set<string>();\n    private _isUpdating = false;\n    private _listener: Nullable<_SpatialAudioListener> = null;\n    private readonly _listenerAutoUpdate: boolean = true;\n    private readonly _listenerMinUpdateTime: number = 0;\n    private _mainOut: _WebAudioMainOut;\n    private _pauseCalled = false;\n    private _resumeOnInteraction = true;\n    private _resumeOnPause = true;\n    private _resumeOnPauseRetryInterval = 1000;\n    private _resumeOnPauseTimerId: any = null;\n    private _resumePromise: Nullable<Promise<void>> = null;\n    private _silentHtmlAudio: Nullable<HTMLAudioElement> = null;\n    private _unmuteUI: Nullable<_WebAudioUnmuteUI> = null;\n    private _updateObservable: Nullable<Observable<void>> = null;\n    private readonly _validFormats = new Set<string>();\n    private _volume = 1;\n\n    /** @internal */\n    public readonly _audioContext: AudioContext;\n\n    /** @internal */\n    public readonly _isUsingOfflineAudioContext: boolean = false;\n\n    /** @internal */\n    public readonly isReadyPromise: Promise<void> = new Promise((resolve) => {\n        this._resolveIsReadyPromise = resolve;\n    });\n\n    /** @internal */\n    public stateChangedObservable: Observable<string> = new Observable();\n\n    /** @internal */\n    public userGestureObservable: Observable<void> = new Observable();\n\n    /** @internal */\n    public constructor(options: Partial<IWebAudioEngineOptions> = {}) {\n        super(options);\n\n        if (typeof options.listenerAutoUpdate === \"boolean\") {\n            this._listenerAutoUpdate = options.listenerAutoUpdate;\n        }\n\n        if (typeof options.listenerMinUpdateTime === \"number\") {\n            this._listenerMinUpdateTime = options.listenerMinUpdateTime;\n        }\n\n        this._volume = options.volume ?? 1;\n\n        if (options.audioContext) {\n            this._isUsingOfflineAudioContext = options.audioContext instanceof OfflineAudioContext;\n            this._audioContext = options.audioContext;\n        } else {\n            this._audioContext = new AudioContext();\n        }\n\n        if (!options.disableDefaultUI) {\n            this._unmuteUI = new _WebAudioUnmuteUI(this, options.defaultUIParentElement);\n        }\n    }\n\n    /** @internal */\n    public async _initAsync(options: Partial<IWebAudioEngineOptions>): Promise<void> {\n        this._resumeOnInteraction = typeof options.resumeOnInteraction === \"boolean\" ? options.resumeOnInteraction : true;\n        this._resumeOnPause = typeof options.resumeOnPause === \"boolean\" ? options.resumeOnPause : true;\n        this._resumeOnPauseRetryInterval = options.resumeOnPauseRetryInterval ?? 1000;\n\n        document.addEventListener(\"click\", this._onUserGestureAsync);\n\n        await this._initAudioContextAsync();\n\n        if (_HasSpatialAudioListenerOptions(options)) {\n            this._listener = _CreateSpatialAudioListener(this, this._listenerAutoUpdate, this._listenerMinUpdateTime);\n            this._listener.setOptions(options);\n        }\n\n        this._resolveIsReadyPromise();\n    }\n\n    /** @internal */\n    public get currentTime(): number {\n        return this._audioContext.currentTime ?? 0;\n    }\n\n    /** @internal */\n    public get _inNode(): AudioNode {\n        return this._audioContext.destination;\n    }\n\n    /** @internal */\n    public get mainOut(): _WebAudioMainOut {\n        return this._mainOut;\n    }\n\n    /** @internal */\n    public get listener(): AbstractSpatialAudioListener {\n        return this._listener ?? (this._listener = _CreateSpatialAudioListener(this, this._listenerAutoUpdate, this._listenerMinUpdateTime));\n    }\n\n    /** @internal */\n    public get state(): AudioEngineV2State {\n        // Always return \"running\" for OfflineAudioContext so sound `play` calls work while the context is suspended.\n        return this._isUsingOfflineAudioContext ? \"running\" : this._audioContext.state;\n    }\n\n    /** @internal */\n    public get volume(): number {\n        return this._volume;\n    }\n\n    /** @internal */\n    public set volume(value: number) {\n        if (this._volume === value) {\n            return;\n        }\n\n        this._volume = value;\n\n        if (this._mainOut) {\n            this._mainOut.volume = value;\n        }\n    }\n\n    /**\n     * This property should only be used by the legacy audio engine.\n     * @internal\n     * */\n    public get _audioDestination(): AudioNode {\n        return this._destinationNode ? this._destinationNode : (this._destinationNode = this._audioContext.destination);\n    }\n\n    public set _audioDestination(value: Nullable<AudioNode>) {\n        this._destinationNode = value;\n    }\n\n    /**\n     * This property should only be used by the legacy audio engine.\n     * @internal\n     */\n    public get _unmuteUIEnabled(): boolean {\n        return this._unmuteUI ? this._unmuteUI.enabled : false;\n    }\n\n    public set _unmuteUIEnabled(value: boolean) {\n        if (this._unmuteUI) {\n            this._unmuteUI.enabled = value;\n        }\n    }\n\n    /** @internal */\n    public async createBusAsync(name: string, options: Partial<IAudioBusOptions> = {}): Promise<AudioBus> {\n        const module = await import(\"./webAudioBus\");\n\n        const bus = new module._WebAudioBus(name, this, options);\n        await bus._initAsync(options);\n\n        return bus;\n    }\n\n    /** @internal */\n    public async createMainBusAsync(name: string, options: Partial<IMainAudioBusOptions> = {}): Promise<MainAudioBus> {\n        const module = await import(\"./webAudioMainBus\");\n\n        const bus = new module._WebAudioMainBus(name, this);\n        await bus._initAsync(options);\n\n        return bus;\n    }\n\n    /** @internal */\n    public async createMicrophoneSoundSourceAsync(name: string, options?: Partial<ISoundSourceOptions>): Promise<AbstractSoundSource> {\n        let mediaStream: MediaStream;\n\n        try {\n            mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        } catch (e) {\n            throw new Error(\"Unable to access microphone: \" + e);\n        }\n\n        return await this.createSoundSourceAsync(name, new MediaStreamAudioSourceNode(this._audioContext, { mediaStream }), {\n            outBusAutoDefault: false,\n            ...options,\n        });\n    }\n\n    /** @internal */\n    public async createSoundAsync(\n        name: string,\n        source: ArrayBuffer | AudioBuffer | StaticSoundBuffer | string | string[],\n        options: Partial<IStaticSoundOptions> = {}\n    ): Promise<StaticSound> {\n        const module = await import(\"./webAudioStaticSound\");\n\n        const sound = new module._WebAudioStaticSound(name, this, options);\n        await sound._initAsync(source, options);\n\n        return sound;\n    }\n\n    /** @internal */\n    public async createSoundBufferAsync(\n        source: ArrayBuffer | AudioBuffer | StaticSoundBuffer | string | string[],\n        options: Partial<IStaticSoundBufferOptions> = {}\n    ): Promise<StaticSoundBuffer> {\n        const module = await import(\"./webAudioStaticSound\");\n\n        const soundBuffer = new module._WebAudioStaticSoundBuffer(this);\n        await soundBuffer._initAsync(source, options);\n\n        return soundBuffer;\n    }\n\n    /** @internal */\n    public async createSoundSourceAsync(name: string, source: AudioNode, options: Partial<ISoundSourceOptions> = {}): Promise<AbstractSoundSource> {\n        const module = await import(\"./webAudioSoundSource\");\n\n        const soundSource = new module._WebAudioSoundSource(name, source, this, options);\n        await soundSource._initAsync(options);\n\n        return soundSource;\n    }\n\n    /** @internal */\n    public async createStreamingSoundAsync(name: string, source: HTMLMediaElement | string | string[], options: Partial<IStreamingSoundOptions> = {}): Promise<StreamingSound> {\n        const module = await import(\"./webAudioStreamingSound\");\n\n        const sound = new module._WebAudioStreamingSound(name, this, options);\n        await sound._initAsync(source, options);\n\n        return sound;\n    }\n\n    /** @internal */\n    public override dispose(): void {\n        super.dispose();\n\n        this._listener?.dispose();\n        this._listener = null;\n\n        // Note that OfflineAudioContext does not have a `close` method.\n        if (this._audioContext.state !== \"closed\" && !this._isUsingOfflineAudioContext) {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this._audioContext.close();\n        }\n\n        document.removeEventListener(\"click\", this._onUserGestureAsync);\n        this._audioContext.removeEventListener(\"statechange\", this._onAudioContextStateChange);\n\n        this._silentHtmlAudio?.remove();\n\n        this._updateObservable?.clear();\n        this._updateObservable = null;\n\n        this._unmuteUI?.dispose();\n        this._unmuteUI = null;\n\n        this.stateChangedObservable.clear();\n    }\n\n    /** @internal */\n    public flagInvalidFormat(format: string): void {\n        this._invalidFormats.add(format);\n    }\n\n    /** @internal */\n    public isFormatValid(format: string): boolean {\n        if (this._validFormats.has(format)) {\n            return true;\n        }\n\n        if (this._invalidFormats.has(format)) {\n            return false;\n        }\n\n        const mimeType = FormatMimeTypes[format];\n        if (mimeType === undefined) {\n            return false;\n        }\n\n        const audio = new Audio();\n        if (audio.canPlayType(mimeType) === \"\") {\n            this._invalidFormats.add(format);\n            return false;\n        }\n\n        this._validFormats.add(format);\n\n        return true;\n    }\n\n    /** @internal */\n    public override async pauseAsync(): Promise<void> {\n        await this._audioContext.suspend();\n\n        this._pauseCalled = true;\n    }\n\n    /** @internal */\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\n    public override resumeAsync(): Promise<void> {\n        this._pauseCalled = false;\n\n        if (this._resumePromise) {\n            return this._resumePromise;\n        }\n\n        this._resumePromise = this._audioContext.resume();\n        return this._resumePromise;\n    }\n\n    /** @internal */\n    public setVolume(value: number, options: Nullable<Partial<IAudioParameterRampOptions>> = null): void {\n        if (this._mainOut) {\n            this._mainOut.setVolume(value, options);\n        } else {\n            throw new Error(\"Main output not initialized yet.\");\n        }\n    }\n\n    /** @internal */\n    public override _addMainBus(mainBus: MainAudioBus): void {\n        super._addMainBus(mainBus);\n    }\n\n    /** @internal */\n    public override _removeMainBus(mainBus: MainAudioBus): void {\n        super._removeMainBus(mainBus);\n    }\n\n    /** @internal */\n    public override _addNode(node: AbstractNamedAudioNode): void {\n        super._addNode(node);\n    }\n\n    /** @internal */\n    public override _removeNode(node: AbstractNamedAudioNode): void {\n        super._removeNode(node);\n    }\n\n    /** @internal */\n    public _addUpdateObserver(callback: () => void): void {\n        if (!this._updateObservable) {\n            this._updateObservable = new Observable<void>();\n        }\n\n        this._updateObservable.add(callback);\n        this._startUpdating();\n    }\n\n    public _removeUpdateObserver(callback: () => void): void {\n        if (this._updateObservable) {\n            this._updateObservable.removeCallback(callback);\n        }\n    }\n\n    private _initAudioContextAsync: () => Promise<void> = async () => {\n        this._audioContext.addEventListener(\"statechange\", this._onAudioContextStateChange);\n\n        this._mainOut = new _WebAudioMainOut(this);\n        this._mainOut.volume = this._volume;\n\n        await this.createMainBusAsync(\"default\");\n    };\n\n    private _onAudioContextStateChange = () => {\n        if (this.state === \"running\") {\n            clearInterval(this._resumeOnPauseTimerId);\n            this._audioContextStarted = true;\n            this._resumePromise = null;\n        }\n        if (this.state === \"suspended\" || this.state === \"interrupted\") {\n            if (this._audioContextStarted && this._resumeOnPause && !this._pauseCalled) {\n                clearInterval(this._resumeOnPauseTimerId);\n\n                this._resumeOnPauseTimerId = setInterval(() => {\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    this.resumeAsync();\n                }, this._resumeOnPauseRetryInterval);\n            }\n        }\n\n        this.stateChangedObservable.notifyObservers(this.state);\n    };\n\n    private _onUserGestureAsync: () => void = async () => {\n        if (this._resumeOnInteraction) {\n            await this._audioContext.resume();\n        }\n\n        // On iOS the ringer switch must be turned on for WebAudio to play.\n        // This gets WebAudio to play with the ringer switch turned off by playing an HTMLAudioElement.\n        if (!this._silentHtmlAudio) {\n            this._silentHtmlAudio = document.createElement(\"audio\");\n\n            const audio = this._silentHtmlAudio;\n            audio.controls = false;\n            audio.preload = \"auto\";\n            audio.loop = true;\n\n            // Wave data for 0.0001 seconds of silence.\n            audio.src = \"data:audio/wav;base64,UklGRjAAAABXQVZFZm10IBAAAAABAAEAgLsAAAB3AQACABAAZGF0YQwAAAAAAAEA/v8CAP//AQA=\";\n\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            audio.play();\n        }\n\n        this.userGestureObservable.notifyObservers();\n    };\n\n    private _resolveIsReadyPromise: () => void;\n\n    private _startUpdating = () => {\n        if (this._isUpdating) {\n            return;\n        }\n\n        this._isUpdating = true;\n\n        if (this.state === \"running\") {\n            this._update();\n        } else {\n            const callback = () => {\n                if (this.state === \"running\") {\n                    this._update();\n                    this.stateChangedObservable.removeCallback(callback);\n                }\n            };\n\n            this.stateChangedObservable.add(callback);\n        }\n    };\n\n    private _update = (): void => {\n        if (this._updateObservable?.hasObservers()) {\n            this._updateObservable.notifyObservers();\n            requestAnimationFrame(this._update);\n        } else {\n            this._isUpdating = false;\n        }\n    };\n}\n", "import type { Analyser } from \"./analyser\";\r\n\r\nimport type { Nullable } from \"../types\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { AbstractEngine } from \"../Engines/abstractEngine\";\r\nimport type { IAudioEngine } from \"./Interfaces/IAudioEngine\";\r\nimport { _WebAudioEngine } from \"../AudioV2/webAudio/webAudioEngine\";\r\nimport type { _WebAudioMainBus } from \"../AudioV2/webAudio/webAudioMainBus\";\r\n\r\n// Sets the default audio engine to Babylon.js\r\nAbstractEngine.AudioEngineFactory = (\r\n    hostElement: Nullable<HTMLElement>,\r\n    audioContext: Nullable<AudioContext>,\r\n    audioDestination: Nullable<AudioDestinationNode | MediaStreamAudioDestinationNode>\r\n) => {\r\n    return new AudioEngine(hostElement, audioContext, audioDestination);\r\n};\r\n\r\n/**\r\n * This represents the default audio engine used in babylon.\r\n * It is responsible to play, synchronize and analyse sounds throughout the  application.\r\n * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic\r\n */\r\nexport class AudioEngine implements IAudioEngine {\r\n    private _audioContext: Nullable<AudioContext> = null;\r\n    private _masterGain: GainNode;\r\n    private _tryToRun = false;\r\n    private _useCustomUnlockedButton: boolean = false;\r\n\r\n    /**\r\n     * Gets whether the current host supports Web Audio and thus could create AudioContexts.\r\n     */\r\n    public canUseWebAudio: boolean = true;\r\n\r\n    /**\r\n     * The master gain node defines the global audio volume of your audio engine.\r\n     */\r\n    public get masterGain(): GainNode {\r\n        return this._masterGain;\r\n    }\r\n\r\n    public set masterGain(value: GainNode) {\r\n        this._masterGain = this._v2.mainOut._inNode = value;\r\n    }\r\n\r\n    /**\r\n     * Defines if Babylon should emit a warning if WebAudio is not supported.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public WarnedWebAudioUnsupported: boolean = false;\r\n\r\n    /**\r\n     * Gets whether or not mp3 are supported by your browser.\r\n     */\r\n    public isMP3supported: boolean = false;\r\n\r\n    /**\r\n     * Gets whether or not ogg are supported by your browser.\r\n     */\r\n    public isOGGsupported: boolean = false;\r\n\r\n    /**\r\n     * Gets whether audio has been unlocked on the device.\r\n     * Some Browsers have strong restrictions about Audio and won't autoplay unless\r\n     * a user interaction has happened.\r\n     */\r\n    public unlocked: boolean = false;\r\n\r\n    /**\r\n     * Defines if the audio engine relies on a custom unlocked button.\r\n     * In this case, the embedded button will not be displayed.\r\n     */\r\n    public get useCustomUnlockedButton(): boolean {\r\n        return this._useCustomUnlockedButton;\r\n    }\r\n\r\n    public set useCustomUnlockedButton(value: boolean) {\r\n        this._useCustomUnlockedButton = value;\r\n        this._v2._unmuteUIEnabled = !value;\r\n    }\r\n\r\n    /**\r\n     * Event raised when audio has been unlocked on the browser.\r\n     */\r\n    public onAudioUnlockedObservable = new Observable<IAudioEngine>();\r\n\r\n    /**\r\n     * Event raised when audio has been locked on the browser.\r\n     */\r\n    public onAudioLockedObservable = new Observable<IAudioEngine>();\r\n\r\n    /** @internal */\r\n    public _v2: _WebAudioEngine;\r\n\r\n    /**\r\n     * Gets the current AudioContext if available.\r\n     */\r\n    public get audioContext(): Nullable<AudioContext> {\r\n        if (this._v2.state === \"running\") {\r\n            // Do not wait for the promise to unlock.\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._triggerRunningStateAsync();\r\n        }\r\n        return this._v2._audioContext;\r\n    }\r\n\r\n    private _connectedAnalyser: Nullable<Analyser>;\r\n\r\n    /**\r\n     * Instantiates a new audio engine.\r\n     *\r\n     * @param hostElement defines the host element where to display the mute icon if necessary\r\n     * @param audioContext defines the audio context to be used by the audio engine\r\n     * @param audioDestination defines the audio destination node to be used by audio engine\r\n     */\r\n    constructor(\r\n        hostElement: Nullable<HTMLElement> = null,\r\n        audioContext: Nullable<AudioContext> = null,\r\n        audioDestination: Nullable<AudioDestinationNode | MediaStreamAudioDestinationNode> = null\r\n    ) {\r\n        const v2 = new _WebAudioEngine({\r\n            audioContext: audioContext ? audioContext : undefined,\r\n            defaultUIParentElement: hostElement?.parentElement ? hostElement.parentElement : undefined,\r\n        });\r\n\r\n        // Historically the unmute button is disabled until a sound tries to play and can't, which results in a call\r\n        // to `AudioEngine.lock()`, which is where the unmute button is enabled if no custom UI is requested.\r\n        v2._unmuteUIEnabled = false;\r\n\r\n        this._masterGain = new GainNode(v2._audioContext);\r\n        v2._audioDestination = audioDestination;\r\n\r\n        v2.stateChangedObservable.add((state) => {\r\n            if (state === \"running\") {\r\n                this.unlocked = true;\r\n                this.onAudioUnlockedObservable.notifyObservers(this);\r\n            } else {\r\n                this.unlocked = false;\r\n                this.onAudioLockedObservable.notifyObservers(this);\r\n            }\r\n        });\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises, github/no-then\r\n        v2._initAsync({ resumeOnInteraction: false }).then(() => {\r\n            const mainBusOutNode = (v2.defaultMainBus as _WebAudioMainBus)._outNode;\r\n            if (mainBusOutNode) {\r\n                mainBusOutNode.disconnect(v2.mainOut._inNode);\r\n                mainBusOutNode.connect(this._masterGain);\r\n            }\r\n\r\n            v2.mainOut._inNode = this._masterGain;\r\n            v2.stateChangedObservable.notifyObservers(v2.state);\r\n        });\r\n\r\n        this.isMP3supported = v2.isFormatValid(\"mp3\");\r\n        this.isOGGsupported = v2.isFormatValid(\"ogg\");\r\n\r\n        this._v2 = v2;\r\n    }\r\n\r\n    /**\r\n     * Flags the audio engine in Locked state.\r\n     * This happens due to new browser policies preventing audio to autoplay.\r\n     */\r\n    public lock() {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this._v2._audioContext.suspend();\r\n\r\n        if (!this._useCustomUnlockedButton) {\r\n            this._v2._unmuteUIEnabled = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unlocks the audio engine once a user action has been done on the dom.\r\n     * This is helpful to resume play once browser policies have been satisfied.\r\n     */\r\n    public unlock() {\r\n        if (this._audioContext?.state === \"running\") {\r\n            if (!this.unlocked) {\r\n                // Notify users that the audio stack is unlocked/unmuted\r\n                this.unlocked = true;\r\n                this.onAudioUnlockedObservable.notifyObservers(this);\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this._triggerRunningStateAsync();\r\n    }\r\n\r\n    /** @internal */\r\n    public _resumeAudioContextOnStateChange(): void {\r\n        this._audioContext?.addEventListener(\r\n            \"statechange\",\r\n            () => {\r\n                if (this.unlocked && this._audioContext?.state !== \"running\") {\r\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                    this._resumeAudioContextAsync();\r\n                }\r\n            },\r\n            {\r\n                once: true,\r\n                passive: true,\r\n                signal: AbortSignal.timeout(3000),\r\n            }\r\n        );\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _resumeAudioContextAsync(): Promise<void> {\r\n        if (this._v2._isUsingOfflineAudioContext) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return this._v2._audioContext.resume();\r\n    }\r\n\r\n    /**\r\n     * Destroy and release the resources associated with the audio context.\r\n     */\r\n    public dispose(): void {\r\n        this._v2.dispose();\r\n\r\n        this.onAudioUnlockedObservable.clear();\r\n        this.onAudioLockedObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * Gets the global volume sets on the master gain.\r\n     * @returns the global volume if set or -1 otherwise\r\n     */\r\n    public getGlobalVolume(): number {\r\n        return this.masterGain.gain.value;\r\n    }\r\n\r\n    /**\r\n     * Sets the global volume of your experience (sets on the master gain).\r\n     * @param newVolume Defines the new global volume of the application\r\n     */\r\n    public setGlobalVolume(newVolume: number): void {\r\n        this.masterGain.gain.value = newVolume;\r\n    }\r\n\r\n    /**\r\n     * Connect the audio engine to an audio analyser allowing some amazing\r\n     * synchronization between the sounds/music and your visualization (VuMeter for instance).\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic#using-the-analyser\r\n     * @param analyser The analyser to connect to the engine\r\n     */\r\n    public connectToAnalyser(analyser: Analyser): void {\r\n        if (this._connectedAnalyser) {\r\n            this._connectedAnalyser.stopDebugCanvas();\r\n        }\r\n\r\n        this._connectedAnalyser = analyser;\r\n        this.masterGain.disconnect();\r\n        this._connectedAnalyser.connectAudioNodes(this.masterGain, this._v2._audioContext.destination);\r\n    }\r\n\r\n    private async _triggerRunningStateAsync() {\r\n        if (this._tryToRun) {\r\n            return;\r\n        }\r\n        this._tryToRun = true;\r\n\r\n        await this._resumeAudioContextAsync();\r\n\r\n        this._tryToRun = false;\r\n        this.unlocked = true;\r\n\r\n        this.onAudioUnlockedObservable.notifyObservers(this);\r\n    }\r\n}\r\n", "import type { AssetContainer } from \"core/assetContainer\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { Nullable } from \"core/types\";\r\n\r\n/**\r\n * Defines how the parser contract is defined.\r\n * These parsers are used to parse a list of specific assets (like particle systems, etc..)\r\n */\r\nexport type BabylonFileParser = (parsedData: any, scene: Scene, container: AssetContainer, rootUrl: string) => void;\r\n\r\n/**\r\n * Defines how the individual parser contract is defined.\r\n * These parser can parse an individual asset\r\n */\r\nexport type IndividualBabylonFileParser = (parsedData: any, scene: Scene, rootUrl: string) => any;\r\n\r\n/**\r\n * Stores the list of available parsers in the application.\r\n */\r\nconst BabylonFileParsers: { [key: string]: BabylonFileParser } = {};\r\n\r\n/**\r\n * Stores the list of available individual parsers in the application.\r\n */\r\nconst IndividualBabylonFileParsers: { [key: string]: IndividualBabylonFileParser } = {};\r\n\r\n/**\r\n * Adds a parser in the list of available ones\r\n * @param name Defines the name of the parser\r\n * @param parser Defines the parser to add\r\n */\r\nexport function AddParser(name: string, parser: BabylonFileParser): void {\r\n    BabylonFileParsers[name] = parser;\r\n}\r\n\r\n/**\r\n * Gets a general parser from the list of available ones\r\n * @param name Defines the name of the parser\r\n * @returns the requested parser or null\r\n */\r\nexport function GetParser(name: string): Nullable<BabylonFileParser> {\r\n    if (BabylonFileParsers[name]) {\r\n        return BabylonFileParsers[name];\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/**\r\n * Adds n individual parser in the list of available ones\r\n * @param name Defines the name of the parser\r\n * @param parser Defines the parser to add\r\n */\r\nexport function AddIndividualParser(name: string, parser: IndividualBabylonFileParser): void {\r\n    IndividualBabylonFileParsers[name] = parser;\r\n}\r\n\r\n/**\r\n * Gets an individual parser from the list of available ones\r\n * @param name Defines the name of the parser\r\n * @returns the requested parser or null\r\n */\r\nexport function GetIndividualParser(name: string): Nullable<IndividualBabylonFileParser> {\r\n    if (IndividualBabylonFileParsers[name]) {\r\n        return IndividualBabylonFileParsers[name];\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/**\r\n * Parser json data and populate both a scene and its associated container object\r\n * @param jsonData Defines the data to parse\r\n * @param scene Defines the scene to parse the data for\r\n * @param container Defines the container attached to the parsing sequence\r\n * @param rootUrl Defines the root url of the data\r\n */\r\nexport function Parse(jsonData: any, scene: Scene, container: AssetContainer, rootUrl: string): void {\r\n    for (const parserName in BabylonFileParsers) {\r\n        if (Object.prototype.hasOwnProperty.call(BabylonFileParsers, parserName)) {\r\n            BabylonFileParsers[parserName](jsonData, scene, container, rootUrl);\r\n        }\r\n    }\r\n}\r\n", "import { Sound } from \"./sound\";\r\nimport { SoundTrack } from \"./soundTrack\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport type { ISceneSerializableComponent } from \"../sceneComponent\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport { Scene } from \"../scene\";\r\nimport type { AssetContainer } from \"../assetContainer\";\r\n\r\nimport \"./audioEngine\";\r\nimport { PrecisionDate } from \"../Misc/precisionDate\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { AbstractEngine } from \"core/Engines/abstractEngine\";\r\nimport { AddParser } from \"core/Loading/Plugins/babylonFileParser.function\";\r\nimport type { IAssetContainer } from \"core/IAssetContainer\";\r\n\r\n// Adds the parser to the scene parsers.\r\nAddParser(SceneComponentConstants.NAME_AUDIO, (parsedData: any, scene: Scene, container: AssetContainer, rootUrl: string) => {\r\n    // TODO: add sound\r\n    let loadedSounds: Sound[] = [];\r\n    let loadedSound: Sound;\r\n    container.sounds = container.sounds || [];\r\n    if (parsedData.sounds !== undefined && parsedData.sounds !== null) {\r\n        for (let index = 0, cache = parsedData.sounds.length; index < cache; index++) {\r\n            const parsedSound = parsedData.sounds[index];\r\n            if (AbstractEngine.audioEngine?.canUseWebAudio) {\r\n                if (!parsedSound.url) {\r\n                    parsedSound.url = parsedSound.name;\r\n                }\r\n                if (!loadedSounds[parsedSound.url]) {\r\n                    loadedSound = Sound.Parse(parsedSound, scene, rootUrl);\r\n                    loadedSounds[parsedSound.url] = loadedSound;\r\n                    container.sounds.push(loadedSound);\r\n                } else {\r\n                    container.sounds.push(Sound.Parse(parsedSound, scene, rootUrl, loadedSounds[parsedSound.url]));\r\n                }\r\n            } else {\r\n                container.sounds.push(new Sound(parsedSound.name, null, scene));\r\n            }\r\n        }\r\n    }\r\n\r\n    loadedSounds = [];\r\n});\r\n\r\ndeclare module \"../scene\" {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    export interface Scene {\r\n        /**\r\n         * @internal\r\n         * Backing field\r\n         */\r\n        _mainSoundTrack: SoundTrack;\r\n        /**\r\n         * The main sound track played by the scene.\r\n         * It contains your primary collection of sounds.\r\n         */\r\n        mainSoundTrack: SoundTrack;\r\n        /**\r\n         * The list of sound tracks added to the scene\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic\r\n         */\r\n        soundTracks: Nullable<Array<SoundTrack>>;\r\n\r\n        /**\r\n         * Gets a sound using a given name\r\n         * @param name defines the name to search for\r\n         * @returns the found sound or null if not found at all.\r\n         */\r\n        getSoundByName(name: string): Nullable<Sound>;\r\n\r\n        /**\r\n         * Gets or sets if audio support is enabled\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic\r\n         */\r\n        audioEnabled: boolean;\r\n\r\n        /**\r\n         * Gets or sets if audio will be output to headphones\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic\r\n         */\r\n        headphone: boolean;\r\n\r\n        /**\r\n         * Gets or sets custom audio listener position provider\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic\r\n         */\r\n        audioListenerPositionProvider: Nullable<() => Vector3>;\r\n\r\n        /**\r\n         * Gets or sets custom audio listener rotation provider\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic\r\n         */\r\n        audioListenerRotationProvider: Nullable<() => Vector3>;\r\n\r\n        /**\r\n         * Gets or sets a refresh rate when using 3D audio positioning\r\n         */\r\n        audioPositioningRefreshRate: number;\r\n    }\r\n}\r\n\r\nObject.defineProperty(Scene.prototype, \"mainSoundTrack\", {\r\n    get: function (this: Scene) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        if (!this._mainSoundTrack) {\r\n            this._mainSoundTrack = new SoundTrack(this, { mainTrack: true });\r\n        }\r\n\r\n        return this._mainSoundTrack;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nScene.prototype.getSoundByName = function (name: string): Nullable<Sound> {\r\n    let index: number;\r\n    for (index = 0; index < this.mainSoundTrack.soundCollection.length; index++) {\r\n        if (this.mainSoundTrack.soundCollection[index].name === name) {\r\n            return this.mainSoundTrack.soundCollection[index];\r\n        }\r\n    }\r\n\r\n    if (this.soundTracks) {\r\n        for (let sdIndex = 0; sdIndex < this.soundTracks.length; sdIndex++) {\r\n            for (index = 0; index < this.soundTracks[sdIndex].soundCollection.length; index++) {\r\n                if (this.soundTracks[sdIndex].soundCollection[index].name === name) {\r\n                    return this.soundTracks[sdIndex].soundCollection[index];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nObject.defineProperty(Scene.prototype, \"audioEnabled\", {\r\n    get: function (this: Scene) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        return compo.audioEnabled;\r\n    },\r\n    set: function (this: Scene, value: boolean) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        if (value) {\r\n            compo.enableAudio();\r\n        } else {\r\n            compo.disableAudio();\r\n        }\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nObject.defineProperty(Scene.prototype, \"headphone\", {\r\n    get: function (this: Scene) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        return compo.headphone;\r\n    },\r\n    set: function (this: Scene, value: boolean) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        if (value) {\r\n            compo.switchAudioModeForHeadphones();\r\n        } else {\r\n            compo.switchAudioModeForNormalSpeakers();\r\n        }\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nObject.defineProperty(Scene.prototype, \"audioListenerPositionProvider\", {\r\n    get: function (this: Scene) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        return compo.audioListenerPositionProvider;\r\n    },\r\n    set: function (this: Scene, value: () => Vector3) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        if (value && typeof value !== \"function\") {\r\n            throw new Error(\"The value passed to [Scene.audioListenerPositionProvider] must be a function that returns a Vector3\");\r\n        } else {\r\n            compo.audioListenerPositionProvider = value;\r\n        }\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nObject.defineProperty(Scene.prototype, \"audioListenerRotationProvider\", {\r\n    get: function (this: Scene) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        return compo.audioListenerRotationProvider;\r\n    },\r\n    set: function (this: Scene, value: () => Vector3) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        if (value && typeof value !== \"function\") {\r\n            throw new Error(\"The value passed to [Scene.audioListenerRotationProvider] must be a function that returns a Vector3\");\r\n        } else {\r\n            compo.audioListenerRotationProvider = value;\r\n        }\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nObject.defineProperty(Scene.prototype, \"audioPositioningRefreshRate\", {\r\n    get: function (this: Scene) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        return compo.audioPositioningRefreshRate;\r\n    },\r\n    set: function (this: Scene, value: number) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        compo.audioPositioningRefreshRate = value;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\n/**\r\n * Defines the sound scene component responsible to manage any sounds\r\n * in a given scene.\r\n */\r\nexport class AudioSceneComponent implements ISceneSerializableComponent {\r\n    private static _CameraDirection = new Vector3(0, 0, -1);\r\n\r\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_AUDIO;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    private _audioEnabled = true;\r\n    /**\r\n     * Gets whether audio is enabled or not.\r\n     * Please use related enable/disable method to switch state.\r\n     */\r\n    public get audioEnabled(): boolean {\r\n        return this._audioEnabled;\r\n    }\r\n\r\n    private _headphone = false;\r\n    /**\r\n     * Gets whether audio is outputting to headphone or not.\r\n     * Please use the according Switch methods to change output.\r\n     */\r\n    public get headphone(): boolean {\r\n        return this._headphone;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a refresh rate when using 3D audio positioning\r\n     */\r\n    public audioPositioningRefreshRate = 500;\r\n\r\n    /**\r\n     * Gets or Sets a custom listener position for all sounds in the scene\r\n     * By default, this is the position of the first active camera\r\n     */\r\n    public audioListenerPositionProvider: Nullable<() => Vector3> = null;\r\n\r\n    /**\r\n     * Gets or Sets a custom listener rotation for all sounds in the scene\r\n     * By default, this is the rotation of the first active camera\r\n     */\r\n    public audioListenerRotationProvider: Nullable<() => Vector3> = null;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene?: Nullable<Scene>) {\r\n        scene = scene || EngineStore.LastCreatedScene;\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this.scene = scene;\r\n\r\n        scene.soundTracks = [] as SoundTrack[];\r\n        scene.sounds = [] as Sound[];\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._afterRenderStage.registerStep(SceneComponentConstants.STEP_AFTERRENDER_AUDIO, this, this._afterRender);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        // Nothing to do here. (Not rendering related)\r\n    }\r\n\r\n    /**\r\n     * Serializes the component data to the specified json object\r\n     * @param serializationObject The object to serialize to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        serializationObject.sounds = [];\r\n\r\n        if (this.scene.soundTracks) {\r\n            for (let index = 0; index < this.scene.soundTracks.length; index++) {\r\n                const soundtrack = this.scene.soundTracks[index];\r\n\r\n                for (let soundId = 0; soundId < soundtrack.soundCollection.length; soundId++) {\r\n                    serializationObject.sounds.push(soundtrack.soundCollection[soundId].serialize());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds all the elements from the container to the scene\r\n     * @param container the container holding the elements\r\n     */\r\n    public addFromContainer(container: IAssetContainer): void {\r\n        if (!container.sounds) {\r\n            return;\r\n        }\r\n        for (const sound of container.sounds) {\r\n            sound.play();\r\n            sound.autoplay = true;\r\n            this.scene.mainSoundTrack.addSound(sound);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all the elements in the container from the scene\r\n     * @param container contains the elements to remove\r\n     * @param dispose if the removed element should be disposed (default: false)\r\n     */\r\n    public removeFromContainer(container: IAssetContainer, dispose = false): void {\r\n        if (!container.sounds) {\r\n            return;\r\n        }\r\n        for (const sound of container.sounds) {\r\n            sound.stop();\r\n            sound.autoplay = false;\r\n            this.scene.mainSoundTrack.removeSound(sound);\r\n            if (dispose) {\r\n                sound.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated resources.\r\n     */\r\n    public dispose(): void {\r\n        const scene = this.scene;\r\n        if (scene._mainSoundTrack) {\r\n            scene.mainSoundTrack.dispose();\r\n        }\r\n\r\n        if (scene.soundTracks) {\r\n            for (let scIndex = 0; scIndex < scene.soundTracks.length; scIndex++) {\r\n                scene.soundTracks[scIndex].dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disables audio in the associated scene.\r\n     */\r\n    public disableAudio() {\r\n        const scene = this.scene;\r\n        this._audioEnabled = false;\r\n\r\n        if (AbstractEngine.audioEngine && AbstractEngine.audioEngine.audioContext) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            AbstractEngine.audioEngine.audioContext.suspend();\r\n        }\r\n\r\n        let i: number;\r\n        for (i = 0; i < scene.mainSoundTrack.soundCollection.length; i++) {\r\n            scene.mainSoundTrack.soundCollection[i].pause();\r\n        }\r\n        if (scene.soundTracks) {\r\n            for (i = 0; i < scene.soundTracks.length; i++) {\r\n                for (let j = 0; j < scene.soundTracks[i].soundCollection.length; j++) {\r\n                    scene.soundTracks[i].soundCollection[j].pause();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enables audio in the associated scene.\r\n     */\r\n    public enableAudio() {\r\n        const scene = this.scene;\r\n        this._audioEnabled = true;\r\n\r\n        if (AbstractEngine.audioEngine && AbstractEngine.audioEngine.audioContext) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            AbstractEngine.audioEngine.audioContext.resume();\r\n        }\r\n\r\n        let i: number;\r\n        for (i = 0; i < scene.mainSoundTrack.soundCollection.length; i++) {\r\n            if (scene.mainSoundTrack.soundCollection[i].isPaused) {\r\n                scene.mainSoundTrack.soundCollection[i].play();\r\n            }\r\n        }\r\n        if (scene.soundTracks) {\r\n            for (i = 0; i < scene.soundTracks.length; i++) {\r\n                for (let j = 0; j < scene.soundTracks[i].soundCollection.length; j++) {\r\n                    if (scene.soundTracks[i].soundCollection[j].isPaused) {\r\n                        scene.soundTracks[i].soundCollection[j].play();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switch audio to headphone output.\r\n     */\r\n    public switchAudioModeForHeadphones() {\r\n        const scene = this.scene;\r\n        this._headphone = true;\r\n\r\n        scene.mainSoundTrack.switchPanningModelToHRTF();\r\n        if (scene.soundTracks) {\r\n            for (let i = 0; i < scene.soundTracks.length; i++) {\r\n                scene.soundTracks[i].switchPanningModelToHRTF();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switch audio to normal speakers.\r\n     */\r\n    public switchAudioModeForNormalSpeakers() {\r\n        const scene = this.scene;\r\n        this._headphone = false;\r\n\r\n        scene.mainSoundTrack.switchPanningModelToEqualPower();\r\n\r\n        if (scene.soundTracks) {\r\n            for (let i = 0; i < scene.soundTracks.length; i++) {\r\n                scene.soundTracks[i].switchPanningModelToEqualPower();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _cachedCameraDirection = new Vector3();\r\n    private _cachedCameraPosition = new Vector3();\r\n    private _lastCheck = 0;\r\n    private _invertMatrixTemp = new Matrix();\r\n    private _cameraDirectionTemp = new Vector3();\r\n\r\n    private _afterRender() {\r\n        const now = PrecisionDate.Now;\r\n        if (this._lastCheck && now - this._lastCheck < this.audioPositioningRefreshRate) {\r\n            return;\r\n        }\r\n\r\n        this._lastCheck = now;\r\n\r\n        const scene = this.scene;\r\n        if (!this._audioEnabled || !scene._mainSoundTrack || !scene.soundTracks || (scene._mainSoundTrack.soundCollection.length === 0 && scene.soundTracks.length === 1)) {\r\n            return;\r\n        }\r\n\r\n        const audioEngine = AbstractEngine.audioEngine;\r\n\r\n        if (!audioEngine) {\r\n            return;\r\n        }\r\n\r\n        if (audioEngine.audioContext) {\r\n            let listeningCamera = scene.activeCamera;\r\n            if (scene.activeCameras && scene.activeCameras.length > 0) {\r\n                listeningCamera = scene.activeCameras[0];\r\n            }\r\n\r\n            // A custom listener position provider was set\r\n            // Use the users provided position instead of camera's\r\n            if (this.audioListenerPositionProvider) {\r\n                const position: Vector3 = this.audioListenerPositionProvider();\r\n                // Set the listener position\r\n                audioEngine.audioContext.listener.setPosition(position.x || 0, position.y || 0, position.z || 0);\r\n                // Check if there is a listening camera\r\n            } else if (listeningCamera) {\r\n                // Set the listener position to the listening camera global position\r\n                if (!this._cachedCameraPosition.equals(listeningCamera.globalPosition)) {\r\n                    this._cachedCameraPosition.copyFrom(listeningCamera.globalPosition);\r\n                    audioEngine.audioContext.listener.setPosition(listeningCamera.globalPosition.x, listeningCamera.globalPosition.y, listeningCamera.globalPosition.z);\r\n                }\r\n            }\r\n            // Otherwise set the listener position to 0, 0 ,0\r\n            else {\r\n                // Set the listener position\r\n                audioEngine.audioContext.listener.setPosition(0, 0, 0);\r\n            }\r\n\r\n            // A custom listener rotation provider was set\r\n            // Use the users provided rotation instead of camera's\r\n            if (this.audioListenerRotationProvider) {\r\n                const rotation: Vector3 = this.audioListenerRotationProvider();\r\n                audioEngine.audioContext.listener.setOrientation(rotation.x || 0, rotation.y || 0, rotation.z || 0, 0, 1, 0);\r\n                // Check if there is a listening camera\r\n            } else if (listeningCamera) {\r\n                // for VR cameras\r\n                if (listeningCamera.rigCameras && listeningCamera.rigCameras.length > 0) {\r\n                    listeningCamera = listeningCamera.rigCameras[0];\r\n                }\r\n\r\n                listeningCamera.getViewMatrix().invertToRef(this._invertMatrixTemp);\r\n                Vector3.TransformNormalToRef(AudioSceneComponent._CameraDirection, this._invertMatrixTemp, this._cameraDirectionTemp);\r\n                this._cameraDirectionTemp.normalize();\r\n                // To avoid some errors on GearVR\r\n                if (!isNaN(this._cameraDirectionTemp.x) && !isNaN(this._cameraDirectionTemp.y) && !isNaN(this._cameraDirectionTemp.z)) {\r\n                    if (!this._cachedCameraDirection.equals(this._cameraDirectionTemp)) {\r\n                        this._cachedCameraDirection.copyFrom(this._cameraDirectionTemp);\r\n                        audioEngine.audioContext.listener.setOrientation(this._cameraDirectionTemp.x, this._cameraDirectionTemp.y, this._cameraDirectionTemp.z, 0, 1, 0);\r\n                    }\r\n                }\r\n            }\r\n            // Otherwise set the listener rotation to 0, 0 ,0\r\n            else {\r\n                // Set the listener position\r\n                audioEngine.audioContext.listener.setOrientation(0, 0, 0, 0, 1, 0);\r\n            }\r\n\r\n            let i: number;\r\n            for (i = 0; i < scene.mainSoundTrack.soundCollection.length; i++) {\r\n                const sound = scene.mainSoundTrack.soundCollection[i];\r\n                if (sound.useCustomAttenuation) {\r\n                    sound.updateDistanceFromListener();\r\n                }\r\n            }\r\n            if (scene.soundTracks) {\r\n                for (i = 0; i < scene.soundTracks.length; i++) {\r\n                    for (let j = 0; j < scene.soundTracks[i].soundCollection.length; j++) {\r\n                        const sound = scene.soundTracks[i].soundCollection[j];\r\n                        if (sound.useCustomAttenuation) {\r\n                            sound.updateDistanceFromListener();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nSound._SceneComponentInitialization = (scene: Scene) => {\r\n    let compo = scene._getComponent(SceneComponentConstants.NAME_AUDIO);\r\n    if (!compo) {\r\n        compo = new AudioSceneComponent(scene);\r\n        scene._addComponent(compo);\r\n    }\r\n};\r\n", "import type { Nullable } from \"core/types\";\r\nimport { Vector3 } from \"core/Maths/math.vector\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport type { AnimationGroup } from \"core/Animations/animationGroup\";\r\nimport { AnimationEvent } from \"core/Animations/animationEvent\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport { Sound } from \"core/Audio/sound\";\r\nimport { WeightedSound } from \"core/Audio/weightedsound\";\r\n\r\nimport type { IArrayItem, IScene, INode, IAnimation } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\nimport type { IMSFTAudioEmitter_Clip, IMSFTAudioEmitter_Emitter, IMSFTAudioEmitter_EmittersReference, IMSFTAudioEmitter_AnimationEvent } from \"babylonjs-gltf2interface\";\r\nimport { IMSFTAudioEmitter_AnimationEventAction } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nimport \"core/Audio/audioSceneComponent\";\r\n\r\nconst NAME = \"MSFT_audio_emitter\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the MSFT_audio_emitter extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"MSFT_audio_emitter\"]: {};\r\n    }\r\n}\r\n\r\ninterface ILoaderClip extends IMSFTAudioEmitter_Clip, IArrayItem {\r\n    _objectURL?: Promise<string>;\r\n}\r\n\r\ninterface ILoaderEmitter extends IMSFTAudioEmitter_Emitter, IArrayItem {\r\n    _babylonData?: {\r\n        sound?: WeightedSound;\r\n        loaded: Promise<void>;\r\n    };\r\n    _babylonSounds: Sound[];\r\n}\r\n\r\ninterface IMSFTAudioEmitter {\r\n    clips: ILoaderClip[];\r\n    emitters: ILoaderEmitter[];\r\n}\r\n\r\ninterface ILoaderAnimationEvent extends IMSFTAudioEmitter_AnimationEvent, IArrayItem {}\r\n\r\ninterface ILoaderAnimationEvents {\r\n    events: ILoaderAnimationEvent[];\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/najadojo/glTF/blob/MSFT_audio_emitter/extensions/2.0/Vendor/MSFT_audio_emitter/README.md)\r\n * !!! Experimental Extension Subject to Changes !!!\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class MSFT_audio_emitter implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n    private _clips: Array<ILoaderClip>;\r\n    private _emitters: Array<ILoaderEmitter>;\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n        (this._clips as any) = null;\r\n        (this._emitters as any) = null;\r\n    }\r\n\r\n    /** @internal */\r\n    public onLoading(): void {\r\n        const extensions = this._loader.gltf.extensions;\r\n        if (extensions && extensions[this.name]) {\r\n            const extension = extensions[this.name] as IMSFTAudioEmitter;\r\n\r\n            this._clips = extension.clips;\r\n            this._emitters = extension.emitters;\r\n\r\n            ArrayItem.Assign(this._clips);\r\n            ArrayItem.Assign(this._emitters);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadSceneAsync(context: string, scene: IScene): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IMSFTAudioEmitter_EmittersReference>(context, scene, this.name, async (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n\r\n            promises.push(this._loader.loadSceneAsync(context, scene));\r\n\r\n            for (const emitterIndex of extension.emitters) {\r\n                const emitter = ArrayItem.Get(`${extensionContext}/emitters`, this._emitters, emitterIndex);\r\n                if (\r\n                    emitter.refDistance != undefined ||\r\n                    emitter.maxDistance != undefined ||\r\n                    emitter.rolloffFactor != undefined ||\r\n                    emitter.distanceModel != undefined ||\r\n                    emitter.innerAngle != undefined ||\r\n                    emitter.outerAngle != undefined\r\n                ) {\r\n                    throw new Error(`${extensionContext}: Direction or Distance properties are not allowed on emitters attached to a scene`);\r\n                }\r\n\r\n                promises.push(this._loadEmitterAsync(`${extensionContext}/emitters/${emitter.index}`, emitter));\r\n            }\r\n\r\n            await Promise.all(promises);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void): Nullable<Promise<TransformNode>> {\r\n        return GLTFLoader.LoadExtensionAsync<IMSFTAudioEmitter_EmittersReference, TransformNode>(context, node, this.name, async (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n\r\n            const babylonMesh = await this._loader.loadNodeAsync(extensionContext, node, (babylonMesh) => {\r\n                for (const emitterIndex of extension.emitters) {\r\n                    const emitter = ArrayItem.Get(`${extensionContext}/emitters`, this._emitters, emitterIndex);\r\n                    promises.push(\r\n                        // eslint-disable-next-line github/no-then\r\n                        this._loadEmitterAsync(`${extensionContext}/emitters/${emitter.index}`, emitter).then(() => {\r\n                            for (const sound of emitter._babylonSounds) {\r\n                                sound.attachToMesh(babylonMesh);\r\n                                if (emitter.innerAngle != undefined || emitter.outerAngle != undefined) {\r\n                                    sound.setLocalDirectionToMesh(Vector3.Forward());\r\n                                    sound.setDirectionalCone(\r\n                                        2 * Tools.ToDegrees(emitter.innerAngle == undefined ? Math.PI : emitter.innerAngle),\r\n                                        2 * Tools.ToDegrees(emitter.outerAngle == undefined ? Math.PI : emitter.outerAngle),\r\n                                        0\r\n                                    );\r\n                                }\r\n                            }\r\n                        })\r\n                    );\r\n                }\r\n\r\n                assign(babylonMesh);\r\n            });\r\n            await Promise.all(promises);\r\n            return babylonMesh;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadAnimationAsync(context: string, animation: IAnimation): Nullable<Promise<AnimationGroup>> {\r\n        return GLTFLoader.LoadExtensionAsync<ILoaderAnimationEvents, AnimationGroup>(context, animation, this.name, async (extensionContext, extension) => {\r\n            const babylonAnimationGroup = await this._loader.loadAnimationAsync(context, animation);\r\n            const promises = new Array<Promise<any>>();\r\n            ArrayItem.Assign(extension.events);\r\n            for (const event of extension.events) {\r\n                promises.push(this._loadAnimationEventAsync(`${extensionContext}/events/${event.index}`, context, animation, event, babylonAnimationGroup));\r\n            }\r\n            await Promise.all(promises);\r\n            return babylonAnimationGroup;\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadClipAsync(context: string, clip: ILoaderClip): Promise<string> {\r\n        if (clip._objectURL) {\r\n            return clip._objectURL;\r\n        }\r\n\r\n        let promise: Promise<ArrayBufferView>;\r\n        if (clip.uri) {\r\n            promise = this._loader.loadUriAsync(context, clip, clip.uri);\r\n        } else {\r\n            const bufferView = ArrayItem.Get(`${context}/bufferView`, this._loader.gltf.bufferViews, clip.bufferView);\r\n            promise = this._loader.loadBufferViewAsync(`/bufferViews/${bufferView.index}`, bufferView);\r\n        }\r\n\r\n        // eslint-disable-next-line github/no-then\r\n        clip._objectURL = promise.then((data) => {\r\n            return URL.createObjectURL(new Blob([data], { type: clip.mimeType }));\r\n        });\r\n\r\n        return clip._objectURL;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadEmitterAsync(context: string, emitter: ILoaderEmitter): Promise<void> {\r\n        emitter._babylonSounds = emitter._babylonSounds || [];\r\n        if (!emitter._babylonData) {\r\n            const clipPromises = new Array<Promise<any>>();\r\n            const name = emitter.name || `emitter${emitter.index}`;\r\n            const options = {\r\n                loop: false,\r\n                autoplay: false,\r\n                volume: emitter.volume == undefined ? 1 : emitter.volume,\r\n            };\r\n\r\n            for (let i = 0; i < emitter.clips.length; i++) {\r\n                const clipContext = `/extensions/${this.name}/clips`;\r\n                const clip = ArrayItem.Get(clipContext, this._clips, emitter.clips[i].clip);\r\n                clipPromises.push(\r\n                    // eslint-disable-next-line github/no-then\r\n                    this._loadClipAsync(`${clipContext}/${emitter.clips[i].clip}`, clip).then((objectURL: string) => {\r\n                        const sound = (emitter._babylonSounds[i] = new Sound(name, objectURL, this._loader.babylonScene, null, options));\r\n                        sound.refDistance = emitter.refDistance || 1;\r\n                        sound.maxDistance = emitter.maxDistance || 256;\r\n                        sound.rolloffFactor = emitter.rolloffFactor || 1;\r\n                        sound.distanceModel = emitter.distanceModel || \"exponential\";\r\n                    })\r\n                );\r\n            }\r\n\r\n            // eslint-disable-next-line github/no-then\r\n            const promise = Promise.all(clipPromises).then(() => {\r\n                const weights = emitter.clips.map((clip) => {\r\n                    return clip.weight || 1;\r\n                });\r\n                const weightedSound = new WeightedSound(emitter.loop || false, emitter._babylonSounds, weights);\r\n                if (emitter.innerAngle) {\r\n                    weightedSound.directionalConeInnerAngle = 2 * Tools.ToDegrees(emitter.innerAngle);\r\n                }\r\n                if (emitter.outerAngle) {\r\n                    weightedSound.directionalConeOuterAngle = 2 * Tools.ToDegrees(emitter.outerAngle);\r\n                }\r\n                if (emitter.volume) {\r\n                    weightedSound.volume = emitter.volume;\r\n                }\r\n                emitter._babylonData!.sound = weightedSound;\r\n            });\r\n\r\n            emitter._babylonData = {\r\n                loaded: promise,\r\n            };\r\n        }\r\n\r\n        return emitter._babylonData.loaded;\r\n    }\r\n\r\n    private _getEventAction(\r\n        context: string,\r\n        sound: WeightedSound,\r\n        action: IMSFTAudioEmitter_AnimationEventAction,\r\n        time: number,\r\n        startOffset?: number\r\n    ): (currentFrame: number) => void {\r\n        switch (action) {\r\n            case IMSFTAudioEmitter_AnimationEventAction.play: {\r\n                return (currentFrame: number) => {\r\n                    const frameOffset = (startOffset || 0) + (currentFrame - time);\r\n                    sound.play(frameOffset);\r\n                };\r\n            }\r\n            case IMSFTAudioEmitter_AnimationEventAction.stop: {\r\n                return () => {\r\n                    sound.stop();\r\n                };\r\n            }\r\n            case IMSFTAudioEmitter_AnimationEventAction.pause: {\r\n                return () => {\r\n                    sound.pause();\r\n                };\r\n            }\r\n            default: {\r\n                throw new Error(`${context}: Unsupported action ${action}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/promise-function-async, no-restricted-syntax\r\n    private _loadAnimationEventAsync(\r\n        context: string,\r\n        animationContext: string,\r\n        animation: IAnimation,\r\n        event: ILoaderAnimationEvent,\r\n        babylonAnimationGroup: AnimationGroup\r\n    ): Promise<void> {\r\n        if (babylonAnimationGroup.targetedAnimations.length == 0) {\r\n            return Promise.resolve();\r\n        }\r\n        const babylonAnimation = babylonAnimationGroup.targetedAnimations[0];\r\n        const emitterIndex = event.emitter;\r\n        const emitter = ArrayItem.Get(`/extensions/${this.name}/emitters`, this._emitters, emitterIndex);\r\n        // eslint-disable-next-line github/no-then\r\n        return this._loadEmitterAsync(context, emitter).then(() => {\r\n            const sound = emitter._babylonData!.sound;\r\n            if (sound) {\r\n                const babylonAnimationEvent = new AnimationEvent(event.time, this._getEventAction(context, sound, event.action, event.time, event.startOffset));\r\n                babylonAnimation.animation.addEvent(babylonAnimationEvent);\r\n                // Make sure all started audio stops when this animation is terminated.\r\n                babylonAnimationGroup.onAnimationGroupEndObservable.add(() => {\r\n                    sound.stop();\r\n                });\r\n                babylonAnimationGroup.onAnimationGroupPauseObservable.add(() => {\r\n                    sound.pause();\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new MSFT_audio_emitter(loader));\r\n", "/* eslint-disable github/no-then */\r\nimport type { Nullable } from \"core/types\";\r\nimport { Observable } from \"core/Misc/observable\";\r\nimport { Deferred } from \"core/Misc/deferred\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { INode, IMaterial, IBuffer, IScene } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\nimport type { IProperty, IMSFTLOD } from \"babylonjs-gltf2interface\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"MSFT_lod\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the MSFT_lod extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"MSFT_lod\"]: Partial<{\r\n            /**\r\n             * Maximum number of LODs to load, starting from the lowest LOD.\r\n             */\r\n            maxLODsToLoad: number;\r\n        }>;\r\n    }\r\n}\r\n\r\ninterface IBufferInfo {\r\n    start: number;\r\n    end: number;\r\n    loaded: Deferred<ArrayBufferView>;\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Vendor/MSFT_lod/README.md)\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class MSFT_lod implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 100;\r\n\r\n    /**\r\n     * Maximum number of LODs to load, starting from the lowest LOD.\r\n     */\r\n    public maxLODsToLoad = 10;\r\n\r\n    /**\r\n     * Observable raised when all node LODs of one level are loaded.\r\n     * The event data is the index of the loaded LOD starting from zero.\r\n     * Dispose the loader to cancel the loading of the next level of LODs.\r\n     */\r\n    public onNodeLODsLoadedObservable = new Observable<number>();\r\n\r\n    /**\r\n     * Observable raised when all material LODs of one level are loaded.\r\n     * The event data is the index of the loaded LOD starting from zero.\r\n     * Dispose the loader to cancel the loading of the next level of LODs.\r\n     */\r\n    public onMaterialLODsLoadedObservable = new Observable<number>();\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    private _bufferLODs = new Array<IBufferInfo>();\r\n\r\n    private _nodeIndexLOD: Nullable<number> = null;\r\n    private _nodeSignalLODs = new Array<Deferred<void>>();\r\n    private _nodePromiseLODs = new Array<Array<Promise<any>>>();\r\n    private _nodeBufferLODs = new Array<IBufferInfo>();\r\n\r\n    private _materialIndexLOD: Nullable<number> = null;\r\n    private _materialSignalLODs = new Array<Deferred<void>>();\r\n    private _materialPromiseLODs = new Array<Array<Promise<any>>>();\r\n    private _materialBufferLODs = new Array<IBufferInfo>();\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        // Options takes precedence. The maxLODsToLoad extension property is retained for back compat.\r\n        // For new extensions, they should only use options.\r\n        this.maxLODsToLoad = this._loader.parent.extensionOptions[NAME]?.maxLODsToLoad ?? this.maxLODsToLoad;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n\r\n        this._nodeIndexLOD = null;\r\n        this._nodeSignalLODs.length = 0;\r\n        this._nodePromiseLODs.length = 0;\r\n        this._nodeBufferLODs.length = 0;\r\n\r\n        this._materialIndexLOD = null;\r\n        this._materialSignalLODs.length = 0;\r\n        this._materialPromiseLODs.length = 0;\r\n        this._materialBufferLODs.length = 0;\r\n\r\n        this.onMaterialLODsLoadedObservable.clear();\r\n        this.onNodeLODsLoadedObservable.clear();\r\n    }\r\n\r\n    /** @internal */\r\n    public onReady(): void {\r\n        for (let indexLOD = 0; indexLOD < this._nodePromiseLODs.length; indexLOD++) {\r\n            const promise = Promise.all(this._nodePromiseLODs[indexLOD]).then(() => {\r\n                if (indexLOD !== 0) {\r\n                    this._loader.endPerformanceCounter(`Node LOD ${indexLOD}`);\r\n                    this._loader.log(`Loaded node LOD ${indexLOD}`);\r\n                }\r\n\r\n                this.onNodeLODsLoadedObservable.notifyObservers(indexLOD);\r\n\r\n                if (indexLOD !== this._nodePromiseLODs.length - 1) {\r\n                    this._loader.startPerformanceCounter(`Node LOD ${indexLOD + 1}`);\r\n                    this._loadBufferLOD(this._nodeBufferLODs, indexLOD + 1);\r\n                    if (this._nodeSignalLODs[indexLOD]) {\r\n                        this._nodeSignalLODs[indexLOD].resolve();\r\n                    }\r\n                }\r\n            });\r\n\r\n            this._loader._completePromises.push(promise);\r\n        }\r\n\r\n        for (let indexLOD = 0; indexLOD < this._materialPromiseLODs.length; indexLOD++) {\r\n            const promise = Promise.all(this._materialPromiseLODs[indexLOD]).then(() => {\r\n                if (indexLOD !== 0) {\r\n                    this._loader.endPerformanceCounter(`Material LOD ${indexLOD}`);\r\n                    this._loader.log(`Loaded material LOD ${indexLOD}`);\r\n                }\r\n\r\n                this.onMaterialLODsLoadedObservable.notifyObservers(indexLOD);\r\n\r\n                if (indexLOD !== this._materialPromiseLODs.length - 1) {\r\n                    this._loader.startPerformanceCounter(`Material LOD ${indexLOD + 1}`);\r\n                    this._loadBufferLOD(this._materialBufferLODs, indexLOD + 1);\r\n                    if (this._materialSignalLODs[indexLOD]) {\r\n                        this._materialSignalLODs[indexLOD].resolve();\r\n                    }\r\n                }\r\n            });\r\n\r\n            this._loader._completePromises.push(promise);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadSceneAsync(context: string, scene: IScene): Nullable<Promise<void>> {\r\n        const promise = this._loader.loadSceneAsync(context, scene);\r\n        this._loadBufferLOD(this._bufferLODs, 0);\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void): Nullable<Promise<TransformNode>> {\r\n        return GLTFLoader.LoadExtensionAsync<IMSFTLOD, TransformNode>(context, node, this.name, async (extensionContext, extension) => {\r\n            let firstPromise: Promise<TransformNode>;\r\n\r\n            const nodeLODs = this._getLODs(extensionContext, node, this._loader.gltf.nodes, extension.ids);\r\n            this._loader.logOpen(`${extensionContext}`);\r\n\r\n            for (let indexLOD = 0; indexLOD < nodeLODs.length; indexLOD++) {\r\n                const nodeLOD = nodeLODs[indexLOD];\r\n\r\n                if (indexLOD !== 0) {\r\n                    this._nodeIndexLOD = indexLOD;\r\n                    this._nodeSignalLODs[indexLOD] = this._nodeSignalLODs[indexLOD] || new Deferred();\r\n                }\r\n\r\n                const assignWrap = (babylonTransformNode: TransformNode) => {\r\n                    assign(babylonTransformNode);\r\n                    babylonTransformNode.setEnabled(false);\r\n                };\r\n\r\n                const promise = this._loader.loadNodeAsync(`/nodes/${nodeLOD.index}`, nodeLOD, assignWrap).then((babylonMesh) => {\r\n                    if (indexLOD !== 0) {\r\n                        // TODO: should not rely on _babylonTransformNode\r\n                        const previousNodeLOD = nodeLODs[indexLOD - 1];\r\n                        if (previousNodeLOD._babylonTransformNode) {\r\n                            this._disposeTransformNode(previousNodeLOD._babylonTransformNode);\r\n                            delete previousNodeLOD._babylonTransformNode;\r\n                        }\r\n                    }\r\n\r\n                    babylonMesh.setEnabled(true);\r\n                    return babylonMesh;\r\n                });\r\n\r\n                this._nodePromiseLODs[indexLOD] = this._nodePromiseLODs[indexLOD] || [];\r\n\r\n                if (indexLOD === 0) {\r\n                    firstPromise = promise;\r\n                } else {\r\n                    this._nodeIndexLOD = null;\r\n                    this._nodePromiseLODs[indexLOD].push(promise);\r\n                }\r\n            }\r\n\r\n            this._loader.logClose();\r\n            return await firstPromise!;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public _loadMaterialAsync(\r\n        context: string,\r\n        material: IMaterial,\r\n        babylonMesh: Nullable<Mesh>,\r\n        babylonDrawMode: number,\r\n        assign: (babylonMaterial: Material) => void\r\n    ): Nullable<Promise<Material>> {\r\n        // Don't load material LODs if already loading a node LOD.\r\n        if (this._nodeIndexLOD) {\r\n            return null;\r\n        }\r\n\r\n        return GLTFLoader.LoadExtensionAsync<IMSFTLOD, Material>(context, material, this.name, async (extensionContext, extension) => {\r\n            let firstPromise: Promise<Material>;\r\n\r\n            const materialLODs = this._getLODs(extensionContext, material, this._loader.gltf.materials, extension.ids);\r\n            this._loader.logOpen(`${extensionContext}`);\r\n\r\n            for (let indexLOD = 0; indexLOD < materialLODs.length; indexLOD++) {\r\n                const materialLOD = materialLODs[indexLOD];\r\n\r\n                if (indexLOD !== 0) {\r\n                    this._materialIndexLOD = indexLOD;\r\n                }\r\n\r\n                const promise = this._loader\r\n                    ._loadMaterialAsync(`/materials/${materialLOD.index}`, materialLOD, babylonMesh, babylonDrawMode, (babylonMaterial) => {\r\n                        if (indexLOD === 0) {\r\n                            assign(babylonMaterial);\r\n                        }\r\n                    })\r\n                    .then((babylonMaterial) => {\r\n                        if (indexLOD !== 0) {\r\n                            assign(babylonMaterial);\r\n\r\n                            // TODO: should not rely on _data\r\n                            const previousDataLOD = materialLODs[indexLOD - 1]._data!;\r\n                            if (previousDataLOD[babylonDrawMode]) {\r\n                                this._disposeMaterials([previousDataLOD[babylonDrawMode].babylonMaterial]);\r\n                                delete previousDataLOD[babylonDrawMode];\r\n                            }\r\n                        }\r\n\r\n                        return babylonMaterial;\r\n                    });\r\n\r\n                this._materialPromiseLODs[indexLOD] = this._materialPromiseLODs[indexLOD] || [];\r\n\r\n                if (indexLOD === 0) {\r\n                    firstPromise = promise;\r\n                } else {\r\n                    this._materialIndexLOD = null;\r\n                    this._materialPromiseLODs[indexLOD].push(promise);\r\n                }\r\n            }\r\n\r\n            this._loader.logClose();\r\n            return await firstPromise!;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public _loadUriAsync(context: string, property: IProperty, uri: string): Nullable<Promise<ArrayBufferView>> {\r\n        // Defer the loading of uris if loading a node or material LOD.\r\n        if (this._nodeIndexLOD !== null) {\r\n            this._loader.log(`deferred`);\r\n            const previousIndexLOD = this._nodeIndexLOD - 1;\r\n            this._nodeSignalLODs[previousIndexLOD] = this._nodeSignalLODs[previousIndexLOD] || new Deferred<void>();\r\n            return this._nodeSignalLODs[this._nodeIndexLOD - 1].promise.then(async () => {\r\n                return await this._loader.loadUriAsync(context, property, uri);\r\n            });\r\n        } else if (this._materialIndexLOD !== null) {\r\n            this._loader.log(`deferred`);\r\n            const previousIndexLOD = this._materialIndexLOD - 1;\r\n            this._materialSignalLODs[previousIndexLOD] = this._materialSignalLODs[previousIndexLOD] || new Deferred<void>();\r\n            return this._materialSignalLODs[previousIndexLOD].promise.then(async () => {\r\n                return await this._loader.loadUriAsync(context, property, uri);\r\n            });\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadBufferAsync(context: string, buffer: IBuffer, byteOffset: number, byteLength: number): Nullable<Promise<ArrayBufferView>> {\r\n        if (this._loader.parent.useRangeRequests && !buffer.uri) {\r\n            if (!this._loader.bin) {\r\n                throw new Error(`${context}: Uri is missing or the binary glTF is missing its binary chunk`);\r\n            }\r\n\r\n            const loadAsync = async (bufferLODs: Array<IBufferInfo>, indexLOD: number) => {\r\n                const start = byteOffset;\r\n                const end = start + byteLength - 1;\r\n                let bufferLOD = bufferLODs[indexLOD];\r\n                if (bufferLOD) {\r\n                    bufferLOD.start = Math.min(bufferLOD.start, start);\r\n                    bufferLOD.end = Math.max(bufferLOD.end, end);\r\n                } else {\r\n                    bufferLOD = { start: start, end: end, loaded: new Deferred() };\r\n                    bufferLODs[indexLOD] = bufferLOD;\r\n                }\r\n\r\n                return await bufferLOD.loaded.promise.then((data) => {\r\n                    return new Uint8Array(data.buffer, data.byteOffset + byteOffset - bufferLOD.start, byteLength);\r\n                });\r\n            };\r\n\r\n            this._loader.log(`deferred`);\r\n\r\n            if (this._nodeIndexLOD !== null) {\r\n                return loadAsync(this._nodeBufferLODs, this._nodeIndexLOD);\r\n            } else if (this._materialIndexLOD !== null) {\r\n                return loadAsync(this._materialBufferLODs, this._materialIndexLOD);\r\n            } else {\r\n                return loadAsync(this._bufferLODs, 0);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private _loadBufferLOD(bufferLODs: Array<IBufferInfo>, indexLOD: number): void {\r\n        const bufferLOD = bufferLODs[indexLOD];\r\n        if (bufferLOD) {\r\n            this._loader.log(`Loading buffer range [${bufferLOD.start}-${bufferLOD.end}]`);\r\n            this._loader.bin!.readAsync(bufferLOD.start, bufferLOD.end - bufferLOD.start + 1).then(\r\n                (data) => {\r\n                    bufferLOD.loaded.resolve(data);\r\n                },\r\n                (error) => {\r\n                    bufferLOD.loaded.reject(error);\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns an array of LOD properties from lowest to highest.\r\n     * @param context\r\n     * @param property\r\n     * @param array\r\n     * @param ids\r\n     */\r\n    private _getLODs<T>(context: string, property: T, array: ArrayLike<T> | undefined, ids: number[]): T[] {\r\n        if (this.maxLODsToLoad <= 0) {\r\n            throw new Error(\"maxLODsToLoad must be greater than zero\");\r\n        }\r\n\r\n        const properties: T[] = [];\r\n\r\n        for (let i = ids.length - 1; i >= 0; i--) {\r\n            properties.push(ArrayItem.Get(`${context}/ids/${ids[i]}`, array, ids[i]));\r\n            if (properties.length === this.maxLODsToLoad) {\r\n                return properties;\r\n            }\r\n        }\r\n\r\n        properties.push(property);\r\n        return properties;\r\n    }\r\n\r\n    private _disposeTransformNode(babylonTransformNode: TransformNode): void {\r\n        const babylonMaterials: Material[] = [];\r\n        const babylonMaterial = (babylonTransformNode as Mesh).material;\r\n        if (babylonMaterial) {\r\n            babylonMaterials.push(babylonMaterial);\r\n        }\r\n        for (const babylonMesh of babylonTransformNode.getChildMeshes()) {\r\n            if (babylonMesh.material) {\r\n                babylonMaterials.push(babylonMesh.material);\r\n            }\r\n        }\r\n\r\n        babylonTransformNode.dispose();\r\n\r\n        const babylonMaterialsToDispose = babylonMaterials.filter((babylonMaterial) => this._loader.babylonScene.meshes.every((mesh) => mesh.material != babylonMaterial));\r\n        this._disposeMaterials(babylonMaterialsToDispose);\r\n    }\r\n\r\n    private _disposeMaterials(babylonMaterials: Material[]): void {\r\n        const babylonTextures: { [uniqueId: number]: BaseTexture } = {};\r\n\r\n        for (const babylonMaterial of babylonMaterials) {\r\n            for (const babylonTexture of babylonMaterial.getActiveTextures()) {\r\n                babylonTextures[babylonTexture.uniqueId] = babylonTexture;\r\n            }\r\n\r\n            babylonMaterial.dispose();\r\n        }\r\n\r\n        for (const uniqueId in babylonTextures) {\r\n            for (const babylonMaterial of this._loader.babylonScene.materials) {\r\n                if (babylonMaterial.hasTexture(babylonTextures[uniqueId])) {\r\n                    delete babylonTextures[uniqueId];\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const uniqueId in babylonTextures) {\r\n            babylonTextures[uniqueId].dispose();\r\n        }\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new MSFT_lod(loader));\r\n", "import type { Nullable } from \"core/types\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"MSFT_minecraftMesh\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the MSFT_minecraftMesh extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"MSFT_minecraftMesh\"]: {};\r\n    }\r\n}\r\n\r\n/** @internal */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class MSFT_minecraftMesh implements IGLTFLoaderExtension {\r\n    /** @internal */\r\n    public readonly name = NAME;\r\n\r\n    /** @internal */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /** @internal */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /** @internal */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtraAsync<boolean>(context, material, this.name, async (extraContext, extra) => {\r\n            if (extra) {\r\n                if (!this._loader._pbrMaterialImpl) {\r\n                    throw new Error(`${extraContext}: Material type not supported`);\r\n                }\r\n\r\n                const promise = this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial);\r\n\r\n                if (babylonMaterial.needAlphaBlending()) {\r\n                    babylonMaterial.forceDepthWrite = true;\r\n                    babylonMaterial.separateCullingPass = true;\r\n                }\r\n\r\n                babylonMaterial.backFaceCulling = babylonMaterial.forceDepthWrite;\r\n                (babylonMaterial as PBRMaterial).twoSidedLighting = true;\r\n\r\n                return await promise;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new MSFT_minecraftMesh(loader));\r\n", "import type { Nullable } from \"core/types\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"MSFT_sRGBFactors\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the MSFT_sRGBFactors extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"MSFT_sRGBFactors\"]: {};\r\n    }\r\n}\r\n\r\n/** @internal */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class MSFT_sRGBFactors implements IGLTFLoaderExtension {\r\n    /** @internal */\r\n    public readonly name = NAME;\r\n\r\n    /** @internal */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /** @internal */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /** @internal*/\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtraAsync<boolean>(context, material, this.name, async (extraContext, extra) => {\r\n            if (extra) {\r\n                const adapter = this._loader._getOrCreateMaterialAdapter(babylonMaterial);\r\n                const promise = this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial);\r\n\r\n                const useExactSrgbConversions = babylonMaterial.getScene().getEngine().useExactSrgbConversions;\r\n                if (!adapter.baseColorTexture) {\r\n                    adapter.baseColor.toLinearSpaceToRef(adapter.baseColor, useExactSrgbConversions);\r\n                }\r\n                if (!adapter.specularColorTexture) {\r\n                    adapter.specularColor.toLinearSpaceToRef(adapter.specularColor, useExactSrgbConversions);\r\n                }\r\n\r\n                return await promise;\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new MSFT_sRGBFactors(loader));\r\n", "import type { FlowGraphBlock } from \"../flowGraphBlock\";\nimport { FlowGraphBlockNames } from \"./flowGraphBlockNames\";\n\n/**\n * Any external module that wishes to add a new block to the flow graph can add to this object using the helper function.\n */\nconst CustomBlocks: Record<string, () => Promise<typeof FlowGraphBlock>> = {};\n\n/**\n * If you want to add a new block to the block factory, you should use this function.\n * Please be sure to choose a unique name and define the responsible module.\n * @param module the name of the module that is responsible for the block\n * @param blockName the name of the block. This should be unique.\n * @param factory an async factory function to generate the block\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function addToBlockFactory(module: string, blockName: string, factory: () => Promise<typeof FlowGraphBlock>): void {\n    CustomBlocks[`${module}/${blockName}`] = factory;\n}\n\n/**\n * a function to get a factory function for a block.\n * @param blockName the block name to initialize. If the block comes from an external module, the name should be in the format \"module/blockName\"\n * @returns an async factory function that will return the block class when called.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function blockFactory(blockName: FlowGraphBlockNames | string): () => Promise<typeof FlowGraphBlock> {\n    switch (blockName) {\n        case FlowGraphBlockNames.PlayAnimation:\n            return async () => (await import(\"./Execution/Animation/flowGraphPlayAnimationBlock\")).FlowGraphPlayAnimationBlock;\n        case FlowGraphBlockNames.StopAnimation:\n            return async () => (await import(\"./Execution/Animation/flowGraphStopAnimationBlock\")).FlowGraphStopAnimationBlock;\n        case FlowGraphBlockNames.PauseAnimation:\n            return async () => (await import(\"./Execution/Animation/flowGraphPauseAnimationBlock\")).FlowGraphPauseAnimationBlock;\n        case FlowGraphBlockNames.ValueInterpolation:\n            return async () => (await import(\"./Execution/Animation/flowGraphInterpolationBlock\")).FlowGraphInterpolationBlock;\n        case FlowGraphBlockNames.SceneReadyEvent:\n            return async () => (await import(\"./Event/flowGraphSceneReadyEventBlock\")).FlowGraphSceneReadyEventBlock;\n        case FlowGraphBlockNames.SceneTickEvent:\n            return async () => (await import(\"./Event/flowGraphSceneTickEventBlock\")).FlowGraphSceneTickEventBlock;\n        case FlowGraphBlockNames.SendCustomEvent:\n            return async () => (await import(\"./Event/flowGraphSendCustomEventBlock\")).FlowGraphSendCustomEventBlock;\n        case FlowGraphBlockNames.ReceiveCustomEvent:\n            return async () => (await import(\"./Event/flowGraphReceiveCustomEventBlock\")).FlowGraphReceiveCustomEventBlock;\n        case FlowGraphBlockNames.MeshPickEvent:\n            return async () => (await import(\"./Event/flowGraphMeshPickEventBlock\")).FlowGraphMeshPickEventBlock;\n        case FlowGraphBlockNames.E:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphEBlock;\n        case FlowGraphBlockNames.PI:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphPiBlock;\n        case FlowGraphBlockNames.Inf:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphInfBlock;\n        case FlowGraphBlockNames.NaN:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphNaNBlock;\n        case FlowGraphBlockNames.Random:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphRandomBlock;\n        case FlowGraphBlockNames.Add:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphAddBlock;\n        case FlowGraphBlockNames.Subtract:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphSubtractBlock;\n        case FlowGraphBlockNames.Multiply:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphMultiplyBlock;\n        case FlowGraphBlockNames.Divide:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphDivideBlock;\n        case FlowGraphBlockNames.Abs:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphAbsBlock;\n        case FlowGraphBlockNames.Sign:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphSignBlock;\n        case FlowGraphBlockNames.Trunc:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphTruncBlock;\n        case FlowGraphBlockNames.Floor:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphFloorBlock;\n        case FlowGraphBlockNames.Ceil:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphCeilBlock;\n        case FlowGraphBlockNames.Round:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphRoundBlock;\n        case FlowGraphBlockNames.Fraction:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphFractionBlock;\n        case FlowGraphBlockNames.Negation:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphNegationBlock;\n        case FlowGraphBlockNames.Modulo:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphModuloBlock;\n        case FlowGraphBlockNames.Min:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphMinBlock;\n        case FlowGraphBlockNames.Max:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphMaxBlock;\n        case FlowGraphBlockNames.Clamp:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphClampBlock;\n        case FlowGraphBlockNames.Saturate:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphSaturateBlock;\n        case FlowGraphBlockNames.MathInterpolation:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphMathInterpolationBlock;\n        case FlowGraphBlockNames.Equality:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphEqualityBlock;\n        case FlowGraphBlockNames.LessThan:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphLessThanBlock;\n        case FlowGraphBlockNames.LessThanOrEqual:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphLessThanOrEqualBlock;\n        case FlowGraphBlockNames.GreaterThan:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphGreaterThanBlock;\n        case FlowGraphBlockNames.GreaterThanOrEqual:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphGreaterThanOrEqualBlock;\n        case FlowGraphBlockNames.IsNaN:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphIsNanBlock;\n        case FlowGraphBlockNames.IsInfinity:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphIsInfinityBlock;\n        case FlowGraphBlockNames.DegToRad:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphDegToRadBlock;\n        case FlowGraphBlockNames.RadToDeg:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphRadToDegBlock;\n        case FlowGraphBlockNames.Sin:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphSinBlock;\n        case FlowGraphBlockNames.Cos:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphCosBlock;\n        case FlowGraphBlockNames.Tan:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphTanBlock;\n        case FlowGraphBlockNames.Asin:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphAsinBlock;\n        case FlowGraphBlockNames.Acos:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphAcosBlock;\n        case FlowGraphBlockNames.Atan:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphAtanBlock;\n        case FlowGraphBlockNames.Atan2:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphAtan2Block;\n        case FlowGraphBlockNames.Sinh:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphSinhBlock;\n        case FlowGraphBlockNames.Cosh:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphCoshBlock;\n        case FlowGraphBlockNames.Tanh:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphTanhBlock;\n        case FlowGraphBlockNames.Asinh:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphAsinhBlock;\n        case FlowGraphBlockNames.Acosh:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphAcoshBlock;\n        case FlowGraphBlockNames.Atanh:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphAtanhBlock;\n        case FlowGraphBlockNames.Exponential:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphExpBlock;\n        case FlowGraphBlockNames.Log:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphLogBlock;\n        case FlowGraphBlockNames.Log2:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphLog2Block;\n        case FlowGraphBlockNames.Log10:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphLog10Block;\n        case FlowGraphBlockNames.SquareRoot:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphSquareRootBlock;\n        case FlowGraphBlockNames.Power:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphPowerBlock;\n        case FlowGraphBlockNames.CubeRoot:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphCubeRootBlock;\n        case FlowGraphBlockNames.BitwiseAnd:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphBitwiseAndBlock;\n        case FlowGraphBlockNames.BitwiseOr:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphBitwiseOrBlock;\n        case FlowGraphBlockNames.BitwiseNot:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphBitwiseNotBlock;\n        case FlowGraphBlockNames.BitwiseXor:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphBitwiseXorBlock;\n        case FlowGraphBlockNames.BitwiseLeftShift:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphBitwiseLeftShiftBlock;\n        case FlowGraphBlockNames.BitwiseRightShift:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphBitwiseRightShiftBlock;\n        case FlowGraphBlockNames.Length:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphLengthBlock;\n        case FlowGraphBlockNames.Normalize:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphNormalizeBlock;\n        case FlowGraphBlockNames.Dot:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphDotBlock;\n        case FlowGraphBlockNames.Cross:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphCrossBlock;\n        case FlowGraphBlockNames.Rotate2D:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphRotate2DBlock;\n        case FlowGraphBlockNames.Rotate3D:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphRotate3DBlock;\n        case FlowGraphBlockNames.Transpose:\n            return async () => (await import(\"./Data/Math/flowGraphMatrixMathBlocks\")).FlowGraphTransposeBlock;\n        case FlowGraphBlockNames.Determinant:\n            return async () => (await import(\"./Data/Math/flowGraphMatrixMathBlocks\")).FlowGraphDeterminantBlock;\n        case FlowGraphBlockNames.InvertMatrix:\n            return async () => (await import(\"./Data/Math/flowGraphMatrixMathBlocks\")).FlowGraphInvertMatrixBlock;\n        case FlowGraphBlockNames.MatrixMultiplication:\n            return async () => (await import(\"./Data/Math/flowGraphMatrixMathBlocks\")).FlowGraphMatrixMultiplicationBlock;\n        case FlowGraphBlockNames.Branch:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphBranchBlock\")).FlowGraphBranchBlock;\n        case FlowGraphBlockNames.SetDelay:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphSetDelayBlock\")).FlowGraphSetDelayBlock;\n        case FlowGraphBlockNames.CancelDelay:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphCancelDelayBlock\")).FlowGraphCancelDelayBlock;\n        case FlowGraphBlockNames.CallCounter:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphCounterBlock\")).FlowGraphCallCounterBlock;\n        case FlowGraphBlockNames.Debounce:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphDebounceBlock\")).FlowGraphDebounceBlock;\n        case FlowGraphBlockNames.Throttle:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphThrottleBlock\")).FlowGraphThrottleBlock;\n        case FlowGraphBlockNames.DoN:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphDoNBlock\")).FlowGraphDoNBlock;\n        case FlowGraphBlockNames.FlipFlop:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphFlipFlopBlock\")).FlowGraphFlipFlopBlock;\n        case FlowGraphBlockNames.ForLoop:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphForLoopBlock\")).FlowGraphForLoopBlock;\n        case FlowGraphBlockNames.MultiGate:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphMultiGateBlock\")).FlowGraphMultiGateBlock;\n        case FlowGraphBlockNames.Sequence:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphSequenceBlock\")).FlowGraphSequenceBlock;\n        case FlowGraphBlockNames.Switch:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphSwitchBlock\")).FlowGraphSwitchBlock;\n        case FlowGraphBlockNames.WaitAll:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphWaitAllBlock\")).FlowGraphWaitAllBlock;\n        case FlowGraphBlockNames.WhileLoop:\n            return async () => (await import(\"./Execution/ControlFlow/flowGraphWhileLoopBlock\")).FlowGraphWhileLoopBlock;\n        case FlowGraphBlockNames.ConsoleLog:\n            return async () => (await import(\"./Execution/flowGraphConsoleLogBlock\")).FlowGraphConsoleLogBlock;\n        case FlowGraphBlockNames.Conditional:\n            return async () => (await import(\"./Data/flowGraphConditionalDataBlock\")).FlowGraphConditionalDataBlock;\n        case FlowGraphBlockNames.Constant:\n            return async () => (await import(\"./Data/flowGraphConstantBlock\")).FlowGraphConstantBlock;\n        case FlowGraphBlockNames.TransformCoordinatesSystem:\n            return async () => (await import(\"./Data/flowGraphTransformCoordinatesSystemBlock\")).FlowGraphTransformCoordinatesSystemBlock;\n        case FlowGraphBlockNames.GetAsset:\n            return async () => (await import(\"./Data/flowGraphGetAssetBlock\")).FlowGraphGetAssetBlock;\n        case FlowGraphBlockNames.GetProperty:\n            return async () => (await import(\"./Data/flowGraphGetPropertyBlock\")).FlowGraphGetPropertyBlock;\n        case FlowGraphBlockNames.SetProperty:\n            return async () => (await import(\"./Execution/flowGraphSetPropertyBlock\")).FlowGraphSetPropertyBlock;\n        case FlowGraphBlockNames.GetVariable:\n            return async () => (await import(\"./Data/flowGraphGetVariableBlock\")).FlowGraphGetVariableBlock;\n        case FlowGraphBlockNames.SetVariable:\n            return async () => (await import(\"./Execution/flowGraphSetVariableBlock\")).FlowGraphSetVariableBlock;\n        case FlowGraphBlockNames.JsonPointerParser:\n            return async () => (await import(\"./Data/Transformers/flowGraphJsonPointerParserBlock\")).FlowGraphJsonPointerParserBlock;\n        case FlowGraphBlockNames.LeadingZeros:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphLeadingZerosBlock;\n        case FlowGraphBlockNames.TrailingZeros:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphTrailingZerosBlock;\n        case FlowGraphBlockNames.OneBitsCounter:\n            return async () => (await import(\"./Data/Math/flowGraphMathBlocks\")).FlowGraphOneBitsCounterBlock;\n        case FlowGraphBlockNames.CombineVector2:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks\")).FlowGraphCombineVector2Block;\n        case FlowGraphBlockNames.CombineVector3:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks\")).FlowGraphCombineVector3Block;\n        case FlowGraphBlockNames.CombineVector4:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks\")).FlowGraphCombineVector4Block;\n        case FlowGraphBlockNames.CombineMatrix:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks\")).FlowGraphCombineMatrixBlock;\n        case FlowGraphBlockNames.ExtractVector2:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks\")).FlowGraphExtractVector2Block;\n        case FlowGraphBlockNames.ExtractVector3:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks\")).FlowGraphExtractVector3Block;\n        case FlowGraphBlockNames.ExtractVector4:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks\")).FlowGraphExtractVector4Block;\n        case FlowGraphBlockNames.ExtractMatrix:\n            return async () => (await import(\"./Data/Math/flowGraphMathCombineExtractBlocks\")).FlowGraphExtractMatrixBlock;\n        case FlowGraphBlockNames.TransformVector:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphTransformBlock;\n        case FlowGraphBlockNames.TransformCoordinates:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphTransformCoordinatesBlock;\n        case FlowGraphBlockNames.Conjugate:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphConjugateBlock;\n        case FlowGraphBlockNames.AngleBetween:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphAngleBetweenBlock;\n        case FlowGraphBlockNames.QuaternionFromAxisAngle:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphQuaternionFromAxisAngleBlock;\n        case FlowGraphBlockNames.AxisAngleFromQuaternion:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphAxisAngleFromQuaternionBlock;\n        case FlowGraphBlockNames.QuaternionFromDirections:\n            return async () => (await import(\"./Data/Math/flowGraphVectorMathBlocks\")).FlowGraphQuaternionFromDirectionsBlock;\n        case FlowGraphBlockNames.MatrixDecompose:\n            return async () => (await import(\"./Data/Math/flowGraphMatrixMathBlocks\")).FlowGraphMatrixDecomposeBlock;\n        case FlowGraphBlockNames.MatrixCompose:\n            return async () => (await import(\"./Data/Math/flowGraphMatrixMathBlocks\")).FlowGraphMatrixComposeBlock;\n        case FlowGraphBlockNames.BooleanToFloat:\n            return async () => (await import(\"./Data/Transformers/flowGraphTypeToTypeBlocks\")).FlowGraphBooleanToFloat;\n        case FlowGraphBlockNames.BooleanToInt:\n            return async () => (await import(\"./Data/Transformers/flowGraphTypeToTypeBlocks\")).FlowGraphBooleanToInt;\n        case FlowGraphBlockNames.FloatToBoolean:\n            return async () => (await import(\"./Data/Transformers/flowGraphTypeToTypeBlocks\")).FlowGraphFloatToBoolean;\n        case FlowGraphBlockNames.IntToBoolean:\n            return async () => (await import(\"./Data/Transformers/flowGraphTypeToTypeBlocks\")).FlowGraphIntToBoolean;\n        case FlowGraphBlockNames.IntToFloat:\n            return async () => (await import(\"./Data/Transformers/flowGraphTypeToTypeBlocks\")).FlowGraphIntToFloat;\n        case FlowGraphBlockNames.FloatToInt:\n            return async () => (await import(\"./Data/Transformers/flowGraphTypeToTypeBlocks\")).FlowGraphFloatToInt;\n        case FlowGraphBlockNames.Easing:\n            return async () => (await import(\"./Execution/Animation/flowGraphEasingBlock\")).FlowGraphEasingBlock;\n        case FlowGraphBlockNames.BezierCurveEasing:\n            return async () => (await import(\"./Execution/Animation/flowGraphBezierCurveEasingBlock\")).FlowGraphBezierCurveEasingBlock;\n        case FlowGraphBlockNames.PointerOverEvent:\n            return async () => (await import(\"./Event/flowGraphPointerOverEventBlock\")).FlowGraphPointerOverEventBlock;\n        case FlowGraphBlockNames.PointerOutEvent:\n            return async () => (await import(\"./Event/flowGraphPointerOutEventBlock\")).FlowGraphPointerOutEventBlock;\n        case FlowGraphBlockNames.Context:\n            return async () => (await import(\"./Data/Utils/flowGraphContextBlock\")).FlowGraphContextBlock;\n        case FlowGraphBlockNames.ArrayIndex:\n            return async () => (await import(\"./Data/Utils/flowGraphArrayIndexBlock\")).FlowGraphArrayIndexBlock;\n        case FlowGraphBlockNames.CodeExecution:\n            return async () => (await import(\"./Data/Utils/flowGraphCodeExecutionBlock\")).FlowGraphCodeExecutionBlock;\n        case FlowGraphBlockNames.IndexOf:\n            return async () => (await import(\"./Data/Utils/flowGraphIndexOfBlock\")).FlowGraphIndexOfBlock;\n        case FlowGraphBlockNames.FunctionReference:\n            return async () => (await import(\"./Data/Utils/flowGraphFunctionReferenceBlock\")).FlowGraphFunctionReferenceBlock;\n        case FlowGraphBlockNames.DataSwitch:\n            return async () => (await import(\"./Data/flowGraphDataSwitchBlock\")).FlowGraphDataSwitchBlock;\n        default:\n            // check if the block is a custom block\n            if (CustomBlocks[blockName]) {\n                return CustomBlocks[blockName];\n            }\n            throw new Error(`Unknown block name ${blockName}`);\n    }\n}\n", "import type { IAssetContainer } from \"core/IAssetContainer\";\nimport { blockFactory } from \"./Blocks/flowGraphBlockFactory\";\nimport type { FlowGraphBlockNames } from \"./Blocks/flowGraphBlockNames\";\nimport type { FlowGraph, IFlowGraphParseOptions } from \"./flowGraph\";\nimport type { FlowGraphBlock, IFlowGraphBlockParseOptions } from \"./flowGraphBlock\";\nimport type { FlowGraphContext, IFlowGraphContextParseOptions } from \"./flowGraphContext\";\nimport type { IFlowGraphCoordinatorParseOptions } from \"./flowGraphCoordinator\";\nimport { FlowGraphCoordinator } from \"./flowGraphCoordinator\";\nimport type { FlowGraphDataConnection } from \"./flowGraphDataConnection\";\nimport { FlowGraphEventBlock } from \"./flowGraphEventBlock\";\nimport { FlowGraphExecutionBlock } from \"./flowGraphExecutionBlock\";\nimport type { FlowGraphSignalConnection } from \"./flowGraphSignalConnection\";\nimport { defaultValueParseFunction, needsPathConverter } from \"./serialization\";\nimport type { ISerializedFlowGraph, ISerializedFlowGraphBlock, ISerializedFlowGraphContext } from \"./typeDefinitions\";\nimport type { Node } from \"core/node\";\nimport { getRichTypeByFlowGraphType, RichType } from \"./flowGraphRichTypes\";\nimport type { FlowGraphConnection } from \"./flowGraphConnection\";\n\n/**\n * Given a list of blocks, find an output data connection that has a specific unique id\n * @param blocks a list of flow graph blocks\n * @param uniqueId the unique id of a connection\n * @returns the connection that has this unique id. throws an error if none was found\n */\nexport function GetDataOutConnectionByUniqueId(blocks: FlowGraphBlock[], uniqueId: string): FlowGraphDataConnection<any> {\n    for (const block of blocks) {\n        for (const dataOut of block.dataOutputs) {\n            if (dataOut.uniqueId === uniqueId) {\n                return dataOut;\n            }\n        }\n    }\n    throw new Error(\"Could not find data out connection with unique id \" + uniqueId);\n}\n\n/**\n * Given a list of blocks, find an input signal connection that has a specific unique id\n * @param blocks a list of flow graph blocks\n * @param uniqueId the unique id of a connection\n * @returns the connection that has this unique id. throws an error if none was found\n */\nexport function GetSignalInConnectionByUniqueId(blocks: FlowGraphBlock[], uniqueId: string): FlowGraphSignalConnection {\n    for (const block of blocks) {\n        if (block instanceof FlowGraphExecutionBlock) {\n            for (const signalIn of block.signalInputs) {\n                if (signalIn.uniqueId === uniqueId) {\n                    return signalIn;\n                }\n            }\n        }\n    }\n    throw new Error(\"Could not find signal in connection with unique id \" + uniqueId);\n}\n\n/**\n * Parses a serialized coordinator.\n * @param serializedObject the object to parse\n * @param options the options to use when parsing\n * @returns the parsed coordinator\n */\nexport async function ParseCoordinatorAsync(serializedObject: any, options: IFlowGraphCoordinatorParseOptions) {\n    const valueParseFunction = options.valueParseFunction ?? defaultValueParseFunction;\n    const coordinator = new FlowGraphCoordinator({ scene: options.scene });\n\n    if (serializedObject.dispatchEventsSynchronously) {\n        coordinator.dispatchEventsSynchronously = serializedObject.dispatchEventsSynchronously;\n    }\n\n    await options.scene.whenReadyAsync();\n    // if custom default values are defined, set them in the global context\n    if (serializedObject._defaultValues) {\n        for (const key in serializedObject._defaultValues) {\n            // key is the FlowGraphType, value is the default value\n            const value = serializedObject._defaultValues[key];\n            getRichTypeByFlowGraphType(key).defaultValue = value;\n        }\n    }\n    // async-parse the flow graphs. This can be done in parallel\n    await Promise.all(\n        serializedObject._flowGraphs?.map(\n            async (serializedGraph: any) => await ParseFlowGraphAsync(serializedGraph, { coordinator, valueParseFunction, pathConverter: options.pathConverter })\n        )\n    );\n    return coordinator;\n}\n\n/**\n * Parses a graph from a given serialization object\n * @param serializationObject the object where the values are written\n * @param options options for parsing the graph\n * @returns the parsed graph\n */\nexport async function ParseFlowGraphAsync(serializationObject: ISerializedFlowGraph, options: IFlowGraphParseOptions): Promise<FlowGraph> {\n    // get all classes types needed for the blocks using the block factory\n    const resolvedClasses = await Promise.all(\n        serializationObject.allBlocks.map(async (serializedBlock) => {\n            const classFactory = blockFactory(serializedBlock.className as FlowGraphBlockNames);\n            return await classFactory();\n        })\n    );\n    // async will be used when we start using the block async factory\n    return ParseFlowGraph(serializationObject, options, resolvedClasses);\n}\n\n/**\n * Parses a graph from a given serialization object\n * @param serializationObject the object where the values are written\n * @param options options for parsing the graph\n * @param resolvedClasses the resolved classes for the blocks\n * @returns the parsed graph\n */\nexport function ParseFlowGraph(serializationObject: ISerializedFlowGraph, options: IFlowGraphParseOptions, resolvedClasses: (typeof FlowGraphBlock)[]) {\n    const graph = options.coordinator.createGraph();\n    const blocks: FlowGraphBlock[] = [];\n    const valueParseFunction = options.valueParseFunction ?? defaultValueParseFunction;\n    // Parse all blocks\n    // for (const serializedBlock of serializationObject.allBlocks) {\n    for (let i = 0; i < serializationObject.allBlocks.length; i++) {\n        const serializedBlock = serializationObject.allBlocks[i];\n        const block = ParseFlowGraphBlockWithClassType(\n            serializedBlock,\n            { scene: options.coordinator.config.scene, pathConverter: options.pathConverter, assetsContainer: options.coordinator.config.scene, valueParseFunction },\n            resolvedClasses[i]\n        );\n        blocks.push(block);\n        if (block instanceof FlowGraphEventBlock) {\n            graph.addEventBlock(block);\n        }\n    }\n    // After parsing all blocks, connect them\n    for (const block of blocks) {\n        for (const dataIn of block.dataInputs) {\n            for (const serializedConnection of dataIn.connectedPointIds) {\n                const connection = GetDataOutConnectionByUniqueId(blocks, serializedConnection);\n                dataIn.connectTo(connection);\n            }\n        }\n        if (block instanceof FlowGraphExecutionBlock) {\n            for (const signalOut of block.signalOutputs) {\n                for (const serializedConnection of signalOut.connectedPointIds) {\n                    const connection = GetSignalInConnectionByUniqueId(blocks, serializedConnection);\n                    signalOut.connectTo(connection);\n                }\n            }\n        }\n    }\n    for (const serializedContext of serializationObject.executionContexts) {\n        ParseFlowGraphContext(serializedContext, { graph, valueParseFunction }, serializationObject.rightHanded);\n    }\n    return graph;\n}\n\n/**\n * Parses a context\n * @param serializationObject the object containing the context serialization values\n * @param options the options for parsing the context\n * @param rightHanded whether the serialized data is right handed\n * @returns\n */\nexport function ParseFlowGraphContext(serializationObject: ISerializedFlowGraphContext, options: IFlowGraphContextParseOptions, rightHanded?: boolean): FlowGraphContext {\n    const result = options.graph.createContext();\n    if (serializationObject.enableLogging) {\n        result.enableLogging = true;\n    }\n    result.treatDataAsRightHanded = rightHanded || false;\n    const valueParseFunction = options.valueParseFunction ?? defaultValueParseFunction;\n    result.uniqueId = serializationObject.uniqueId;\n    const scene = result.getScene();\n    // check if assets context is available\n    if (serializationObject._assetsContext) {\n        const ac = serializationObject._assetsContext;\n        const assetsContext: IAssetContainer = {\n            meshes: ac.meshes?.map((m: string) => scene.getMeshById(m)),\n            lights: ac.lights?.map((l: string) => scene.getLightByName(l)),\n            cameras: ac.cameras?.map((c: string) => scene.getCameraByName(c)),\n            materials: ac.materials?.map((m: string) => scene.getMaterialById(m)),\n            textures: ac.textures?.map((t: string) => scene.getTextureByName(t)),\n            animations: ac.animations?.map((a: string) => scene.animations.find((anim) => anim.name === a)),\n            skeletons: ac.skeletons?.map((s: string) => scene.getSkeletonByName(s)),\n            particleSystems: ac.particleSystems?.map((ps: string) => scene.getParticleSystemById(ps)),\n            animationGroups: ac.animationGroups?.map((ag: string) => scene.getAnimationGroupByName(ag)),\n            transformNodes: ac.transformNodes?.map((tn: string) => scene.getTransformNodeById(tn)),\n            rootNodes: [],\n            multiMaterials: [],\n            morphTargetManagers: [],\n            geometries: [],\n            actionManagers: [],\n            environmentTexture: null,\n            postProcesses: [],\n            sounds: null,\n            effectLayers: [],\n            layers: [],\n            reflectionProbes: [],\n            lensFlareSystems: [],\n            proceduralTextures: [],\n            getNodes: function (): Array<Node> {\n                throw new Error(\"Function not implemented.\");\n            },\n        };\n        result.assetsContext = assetsContext;\n    }\n    for (const key in serializationObject._userVariables) {\n        const value = valueParseFunction(key, serializationObject._userVariables, result.assetsContext, scene);\n        result.userVariables[key] = value;\n    }\n    for (const key in serializationObject._connectionValues) {\n        const value = valueParseFunction(key, serializationObject._connectionValues, result.assetsContext, scene);\n        result._setConnectionValueByKey(key, value);\n    }\n\n    return result;\n}\n\n/**\n * Parses a block from a serialization object\n * This function is async due to the factory method that is used to create the block's class. If you load the class externally use ParseBlockWithClassType\n * @param serializationObject the object to parse from\n * @param parseOptions options for parsing the block\n * @returns the parsed block\n */\nexport async function ParseBlockAsync(serializationObject: ISerializedFlowGraphBlock, parseOptions: IFlowGraphBlockParseOptions): Promise<FlowGraphBlock> {\n    const classFactory = blockFactory(serializationObject.className as FlowGraphBlockNames);\n    const classType = await classFactory();\n    return ParseFlowGraphBlockWithClassType(serializationObject, parseOptions, classType);\n}\n\n/**\n * Parses a block from a serialization object\n * @param serializationObject the object to parse from\n * @param parseOptions options for parsing the block\n * @param classType the class type of the block. This is used when the class is not loaded asynchronously\n * @returns the parsed block\n */\nexport function ParseFlowGraphBlockWithClassType(\n    serializationObject: ISerializedFlowGraphBlock,\n    parseOptions: IFlowGraphBlockParseOptions,\n    classType: typeof FlowGraphBlock\n): FlowGraphBlock {\n    const parsedConfig: any = {};\n    const valueParseFunction = parseOptions.valueParseFunction ?? defaultValueParseFunction;\n    if (serializationObject.config) {\n        for (const key in serializationObject.config) {\n            parsedConfig[key] = valueParseFunction(key, serializationObject.config, parseOptions.assetsContainer || parseOptions.scene, parseOptions.scene);\n        }\n    }\n    if (needsPathConverter(serializationObject.className)) {\n        if (!parseOptions.pathConverter) {\n            throw new Error(\"Path converter is required for this block\");\n        }\n        parsedConfig.pathConverter = parseOptions.pathConverter;\n    }\n    const obj = new classType(parsedConfig);\n    obj.uniqueId = serializationObject.uniqueId;\n    for (let i = 0; i < serializationObject.dataInputs.length; i++) {\n        const dataInput = obj.getDataInput(serializationObject.dataInputs[i].name);\n        if (dataInput) {\n            dataInput.deserialize(serializationObject.dataInputs[i]);\n        } else {\n            throw new Error(\"Could not find data input with name \" + serializationObject.dataInputs[i].name + \" in block \" + serializationObject.className);\n        }\n    }\n    for (let i = 0; i < serializationObject.dataOutputs.length; i++) {\n        const dataOutput = obj.getDataOutput(serializationObject.dataOutputs[i].name);\n        if (dataOutput) {\n            dataOutput.deserialize(serializationObject.dataOutputs[i]);\n        } else {\n            throw new Error(\"Could not find data output with name \" + serializationObject.dataOutputs[i].name + \" in block \" + serializationObject.className);\n        }\n    }\n    obj.metadata = serializationObject.metadata;\n    obj.deserialize && obj.deserialize(serializationObject);\n    return obj;\n}\n\n/**\n * Parses a connection from an object\n * @param serializationObject the object to parse from.\n * @param ownerBlock the block that owns the connection.\n * @param classType the class type of the connection.\n * @returns the parsed connection.\n */\nexport function ParseGraphConnectionWithClassType<BlockT extends FlowGraphBlock>(serializationObject: any = {}, ownerBlock: BlockT, classType: typeof FlowGraphConnection) {\n    const connection = new classType(serializationObject.name, serializationObject._connectionType, ownerBlock);\n    connection.deserialize(serializationObject);\n    return connection;\n}\n\n/**\n * Parses a data connection from a serialized object.\n * @param serializationObject the object to parse from\n * @param ownerBlock the block that owns the connection\n * @param classType the class type of the data connection\n * @returns the parsed connection\n */\nexport function ParseGraphDataConnection(serializationObject: any, ownerBlock: FlowGraphBlock, classType: typeof FlowGraphDataConnection): FlowGraphDataConnection<any> {\n    const richType = ParseRichType(serializationObject.richType);\n    const defaultValue = serializationObject.defaultValue;\n    const connection = new classType(serializationObject.name, serializationObject._connectionType, ownerBlock, richType, defaultValue, !!serializationObject._optional);\n    connection.deserialize(serializationObject);\n    return connection;\n}\n\n/**\n * Parses a rich type from a serialization object.\n * @param serializationObject a serialization object\n * @returns the parsed rich type\n */\nfunction ParseRichType(serializationObject: any): RichType<any> {\n    return new RichType(serializationObject.typeName, serializationObject.defaultValue);\n}\n", "/* eslint-disable @typescript-eslint/naming-convention */\nimport type { IKHRInteractivity_Declaration, IKHRInteractivity_Graph, IKHRInteractivity_Node } from \"babylonjs-gltf2interface\";\nimport { FlowGraphBlockNames } from \"core/FlowGraph/Blocks/flowGraphBlockNames\";\nimport { Logger } from \"core/Misc/logger\";\nimport type { ISerializedFlowGraphBlock, ISerializedFlowGraphContext } from \"core/FlowGraph/typeDefinitions\";\nimport type { InteractivityEvent, InteractivityGraphToFlowGraphParser } from \"./interactivityGraphParser\";\nimport type { IGLTF } from \"../../glTFLoaderInterfaces\";\nimport { FlowGraphTypes, getAnimationTypeByFlowGraphType } from \"core/FlowGraph/flowGraphRichTypes\";\n\ninterface IGLTFToFlowGraphMappingObject<I = any, O = any> {\n    /**\n     * The name of the property in the FlowGraph block.\n     */\n    name: string;\n    /**\n     * The type of the property in the glTF specs.\n     * If not provided will be inferred.\n     */\n    gltfType?: string;\n    /**\n     * The type of the property in the FlowGraph block.\n     * If not defined it equals the glTF type.\n     */\n    flowGraphType?: string;\n    /**\n     * A function that transforms the data from the glTF to the FlowGraph block.\n     */\n    dataTransformer?: (data: I[], parser: InteractivityGraphToFlowGraphParser) => O[];\n    /**\n     * If the property is in the options passed to the constructor of the block.\n     */\n    inOptions?: boolean;\n\n    /**\n     * If the property is a pointer to a value.\n     * This will add an extra JsonPointerParser block to the graph.\n     */\n    isPointer?: boolean;\n\n    /**\n     * If the property is an index to a value.\n     * if defined this will be the name of the array to find the object in.\n     */\n    isVariable?: boolean;\n\n    /**\n     * the name of the class type this value will be mapped to.\n     * This is used if we generate more than one block for a single glTF node.\n     * Defaults to the first block in the mapping.\n     */\n    toBlock?: FlowGraphBlockNames;\n\n    /**\n     * Used in configuration values. If defined, this will be the default value, if no value is provided.\n     */\n    defaultValue?: O;\n}\n\nexport interface IGLTFToFlowGraphMapping {\n    /**\n     * The type of the FlowGraph block(s).\n     * Typically will be a single element in an array.\n     * When adding blocks defined in this module use the KHR_interactivity prefix.\n     */\n    blocks: (FlowGraphBlockNames | string)[];\n    /**\n     * The inputs of the glTF node mapped to the FlowGraph block.\n     */\n    inputs?: {\n        /**\n         * The value inputs of the glTF node mapped to the FlowGraph block.\n         */\n        values?: { [originName: string]: IGLTFToFlowGraphMappingObject };\n        /**\n         * The flow inputs of the glTF node mapped to the FlowGraph block.\n         */\n        flows?: { [originName: string]: IGLTFToFlowGraphMappingObject };\n    };\n    /**\n     * The outputs of the glTF node mapped to the FlowGraph block.\n     */\n    outputs?: {\n        /**\n         * The value outputs of the glTF node mapped to the FlowGraph block.\n         */\n        values?: { [originName: string]: IGLTFToFlowGraphMappingObject };\n        /**\n         * The flow outputs of the glTF node mapped to the FlowGraph block.\n         */\n        flows?: { [originName: string]: IGLTFToFlowGraphMappingObject };\n    };\n    /**\n     * The configuration of the glTF node mapped to the FlowGraph block.\n     * This information is usually passed to the constructor of the block.\n     */\n    configuration?: { [originName: string]: IGLTFToFlowGraphMappingObject };\n\n    /**\n     * If we generate more than one block for a single glTF node, this mapping will be used to map\n     * between the flowGraph classes.\n     */\n    typeToTypeMapping?: { [originName: string]: IGLTFToFlowGraphMappingObject };\n\n    /**\n     * The connections between two or more blocks.\n     * This is used to connect the blocks in the graph\n     */\n    interBlockConnectors?: {\n        /**\n         * The name of the input connection in the first block.\n         */\n        input: string;\n        /**\n         * The name of the output connection in the second block.\n         */\n        output: string;\n\n        /**\n         * The index of the block in the array of blocks that corresponds to the input.\n         */\n        inputBlockIndex: number;\n        /**\n         * The index of the block in the array of blocks that corresponds to the output.\n         */\n        outputBlockIndex: number;\n        /**\n         * If the connection is a variable connection or a flow connection.\n         */\n        isVariable?: boolean;\n    }[];\n\n    /**\n     * This optional function will allow to validate the node, according to the glTF specs.\n     * For example, if a node has a configuration object, it must be present and correct.\n     * This is a basic node-based validation.\n     * This function is expected to return false and log the error if the node is not valid.\n     * Note that this function can also modify the node, if needed.\n     *\n     * @param gltfBlock the glTF node to validate\n     * @param glTFObject the glTF object\n     * @returns true if validated, false if not.\n     */\n    validation?: (gltfBlock: IKHRInteractivity_Node, interactivityGraph: IKHRInteractivity_Graph, glTFObject?: IGLTF) => { valid: boolean; error?: string };\n\n    /**\n     * This is used if we need extra information for the constructor/options that is not provided directly by the glTF node.\n     * This function can return more than one node, if extra nodes are needed for this block to function correctly.\n     * Returning more than one block will usually happen when a json pointer was provided.\n     *\n     * @param gltfBlock the glTF node\n     * @param mapping the mapping object\n     * @param arrays the arrays of the interactivity object\n     * @param serializedObjects the serialized object\n     * @returns an array of serialized nodes that will be added to the graph.\n     */\n    extraProcessor?: (\n        gltfBlock: IKHRInteractivity_Node,\n        declaration: IKHRInteractivity_Declaration,\n        mapping: IGLTFToFlowGraphMapping,\n        parser: InteractivityGraphToFlowGraphParser,\n        serializedObjects: ISerializedFlowGraphBlock[],\n        context: ISerializedFlowGraphContext,\n        globalGLTF?: IGLTF\n    ) => ISerializedFlowGraphBlock[];\n}\n\nexport function getMappingForFullOperationName(fullOperationName: string) {\n    const [op, extension] = fullOperationName.split(\":\");\n    return getMappingForDeclaration({ op, extension });\n}\n\nexport function getMappingForDeclaration(declaration: IKHRInteractivity_Declaration, returnNoOpIfNotAvailable: boolean = true): IGLTFToFlowGraphMapping | undefined {\n    const mapping = declaration.extension ? gltfExtensionsToFlowGraphMapping[declaration.extension]?.[declaration.op] : gltfToFlowGraphMapping[declaration.op];\n    if (!mapping) {\n        Logger.Warn(`No mapping found for operation ${declaration.op} and extension ${declaration.extension || \"KHR_interactivity\"}`);\n        if (returnNoOpIfNotAvailable) {\n            const inputs: IGLTFToFlowGraphMapping[\"inputs\"] = {};\n            const outputs: IGLTFToFlowGraphMapping[\"outputs\"] = {\n                flows: {},\n            };\n            if (declaration.inputValueSockets) {\n                inputs.values = {};\n                for (const key in declaration.inputValueSockets) {\n                    inputs.values[key] = {\n                        name: key,\n                    };\n                }\n            }\n            if (declaration.outputValueSockets) {\n                outputs.values = {};\n                Object.keys(declaration.outputValueSockets).forEach((key) => {\n                    outputs.values![key] = {\n                        name: key,\n                    };\n                });\n            }\n            return {\n                blocks: [], // no blocks, just mapping\n                inputs,\n                outputs,\n            };\n        }\n    }\n    return mapping;\n}\n\n/**\n * This function will add new mapping to glTF interactivity.\n * Other extensions can define new types of blocks, this is the way to let interactivity know how to parse them.\n * @param key the type of node, i.e. \"variable/get\"\n * @param extension the extension of the interactivity operation, i.e. \"KHR_selectability\"\n * @param mapping The mapping object. See documentation or examples below.\n */\nexport function addNewInteractivityFlowGraphMapping(key: string, extension: string, mapping: IGLTFToFlowGraphMapping) {\n    gltfExtensionsToFlowGraphMapping[extension] ||= {};\n    gltfExtensionsToFlowGraphMapping[extension][key] = mapping;\n}\n\nconst gltfExtensionsToFlowGraphMapping: { [extension: string]: { [key: string]: IGLTFToFlowGraphMapping } } = {\n    /**\n     * This is the BABYLON extension for glTF interactivity.\n     * It defines babylon-specific blocks and operations.\n     */\n    BABYLON: {\n        /**\n         * flow/log is a flow node that logs input to the console.\n         * It has \"in\" and \"out\" flows, and takes a message as input.\n         * The message can be any type of value.\n         * The message is logged to the console when the \"in\" flow is triggered.\n         * The \"out\" flow is triggered when the message is logged.\n         */\n        \"flow/log\": {\n            blocks: [FlowGraphBlockNames.ConsoleLog],\n            inputs: {\n                values: {\n                    message: { name: \"message\" },\n                },\n            },\n        },\n    },\n};\n\n// this mapper is just a way to convert the glTF nodes to FlowGraph nodes in terms of input/output connection names and values.\nconst gltfToFlowGraphMapping: { [key: string]: IGLTFToFlowGraphMapping } = {\n    \"event/onStart\": {\n        blocks: [FlowGraphBlockNames.SceneReadyEvent],\n        outputs: {\n            flows: {\n                out: { name: \"done\" },\n            },\n        },\n    },\n    \"event/onTick\": {\n        blocks: [FlowGraphBlockNames.SceneTickEvent],\n        inputs: {},\n        outputs: {\n            values: {\n                timeSinceLastTick: { name: \"deltaTime\", gltfType: \"number\" /*, dataTransformer: (time: number) => time / 1000*/ },\n            },\n            flows: {\n                out: { name: \"done\" },\n            },\n        },\n    },\n    \"event/send\": {\n        blocks: [FlowGraphBlockNames.SendCustomEvent],\n        extraProcessor(gltfBlock, declaration, _mapping, parser, serializedObjects) {\n            // set eventId and eventData. The configuration object of the glTF should have a single object.\n            // validate that we are running it on the right block.\n            if (declaration.op !== \"event/send\" || !gltfBlock.configuration || Object.keys(gltfBlock.configuration).length !== 1) {\n                throw new Error(\"Receive event should have a single configuration object, the event itself\");\n            }\n            const eventConfiguration = gltfBlock.configuration[\"event\"];\n            const eventId = eventConfiguration.value[0];\n            if (typeof eventId !== \"number\") {\n                throw new Error(\"Event id should be a number\");\n            }\n            const event: InteractivityEvent = parser.arrays.events[eventId];\n            const serializedObject = serializedObjects[0];\n            serializedObject.config ||= {};\n            serializedObject.config.eventId = event.eventId;\n            serializedObject.config.eventData = event.eventData;\n            return serializedObjects;\n        },\n    },\n    \"event/receive\": {\n        blocks: [FlowGraphBlockNames.ReceiveCustomEvent],\n        outputs: {\n            flows: {\n                out: { name: \"done\" },\n            },\n        },\n        validation(gltfBlock, interactivityGraph) {\n            if (!gltfBlock.configuration) {\n                Logger.Error(\"Receive event should have a configuration object\");\n                return { valid: false, error: \"Receive event should have a configuration object\" };\n            }\n            const eventConfiguration = gltfBlock.configuration[\"event\"];\n            if (!eventConfiguration) {\n                Logger.Error(\"Receive event should have a single configuration object, the event itself\");\n                return { valid: false, error: \"Receive event should have a single configuration object, the event itself\" };\n            }\n            const eventId = eventConfiguration.value[0];\n            if (typeof eventId !== \"number\") {\n                Logger.Error(\"Event id should be a number\");\n                return { valid: false, error: \"Event id should be a number\" };\n            }\n            const event = interactivityGraph.events?.[eventId];\n            if (!event) {\n                Logger.Error(`Event with id ${eventId} not found`);\n                return { valid: false, error: `Event with id ${eventId} not found` };\n            }\n            return { valid: true };\n        },\n        extraProcessor(gltfBlock, declaration, _mapping, parser, serializedObjects) {\n            // set eventId and eventData. The configuration object of the glTF should have a single object.\n            // validate that we are running it on the right block.\n            if (declaration.op !== \"event/receive\" || !gltfBlock.configuration || Object.keys(gltfBlock.configuration).length !== 1) {\n                throw new Error(\"Receive event should have a single configuration object, the event itself\");\n            }\n            const eventConfiguration = gltfBlock.configuration[\"event\"];\n            const eventId = eventConfiguration.value[0];\n            if (typeof eventId !== \"number\") {\n                throw new Error(\"Event id should be a number\");\n            }\n            const event: InteractivityEvent = parser.arrays.events[eventId];\n            const serializedObject = serializedObjects[0];\n            serializedObject.config ||= {};\n            serializedObject.config.eventId = event.eventId;\n            serializedObject.config.eventData = event.eventData;\n            return serializedObjects;\n        },\n    },\n    \"math/E\": getSimpleInputMapping(FlowGraphBlockNames.E),\n    \"math/Pi\": getSimpleInputMapping(FlowGraphBlockNames.PI),\n    \"math/Inf\": getSimpleInputMapping(FlowGraphBlockNames.Inf),\n    \"math/NaN\": getSimpleInputMapping(FlowGraphBlockNames.NaN),\n    \"math/abs\": getSimpleInputMapping(FlowGraphBlockNames.Abs),\n    \"math/sign\": getSimpleInputMapping(FlowGraphBlockNames.Sign),\n    \"math/trunc\": getSimpleInputMapping(FlowGraphBlockNames.Trunc),\n    \"math/floor\": getSimpleInputMapping(FlowGraphBlockNames.Floor),\n    \"math/ceil\": getSimpleInputMapping(FlowGraphBlockNames.Ceil),\n    \"math/round\": {\n        blocks: [FlowGraphBlockNames.Round],\n        configuration: {},\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(gltfBlock, declaration, _mapping, parser, serializedObjects) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            serializedObjects[0].config.roundHalfAwayFromZero = true;\n            return serializedObjects;\n        },\n    },\n    \"math/fract\": getSimpleInputMapping(FlowGraphBlockNames.Fraction),\n    \"math/neg\": getSimpleInputMapping(FlowGraphBlockNames.Negation),\n    \"math/add\": getSimpleInputMapping(FlowGraphBlockNames.Add, [\"a\", \"b\"], true),\n    \"math/sub\": getSimpleInputMapping(FlowGraphBlockNames.Subtract, [\"a\", \"b\"], true),\n    \"math/mul\": {\n        blocks: [FlowGraphBlockNames.Multiply],\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            serializedObjects[0].config.useMatrixPerComponent = true;\n            serializedObjects[0].config.preventIntegerFloatArithmetic = true;\n            // try to infer the type or fallback to Integer\n            // check the gltf block for the inputs, see if they have a type\n            let type = -1;\n            Object.keys(_gltfBlock.values || {}).find((value) => {\n                if (_gltfBlock.values?.[value].type !== undefined) {\n                    type = _gltfBlock.values[value].type;\n                    return true;\n                }\n                return false;\n            });\n            if (type !== -1) {\n                serializedObjects[0].config.type = _parser.arrays.types[type].flowGraphType;\n            }\n            return serializedObjects;\n        },\n        validation(gltfBlock) {\n            if (gltfBlock.values) {\n                // make sure types are the same\n                return ValidateTypes(gltfBlock);\n            }\n            return { valid: true };\n        },\n    },\n    \"math/div\": getSimpleInputMapping(FlowGraphBlockNames.Divide, [\"a\", \"b\"], true),\n    \"math/rem\": getSimpleInputMapping(FlowGraphBlockNames.Modulo, [\"a\", \"b\"]),\n    \"math/min\": getSimpleInputMapping(FlowGraphBlockNames.Min, [\"a\", \"b\"]),\n    \"math/max\": getSimpleInputMapping(FlowGraphBlockNames.Max, [\"a\", \"b\"]),\n    \"math/clamp\": getSimpleInputMapping(FlowGraphBlockNames.Clamp, [\"a\", \"b\", \"c\"]),\n    \"math/saturate\": getSimpleInputMapping(FlowGraphBlockNames.Saturate),\n    \"math/mix\": getSimpleInputMapping(FlowGraphBlockNames.MathInterpolation, [\"a\", \"b\", \"c\"]),\n    \"math/eq\": getSimpleInputMapping(FlowGraphBlockNames.Equality, [\"a\", \"b\"]),\n    \"math/lt\": getSimpleInputMapping(FlowGraphBlockNames.LessThan, [\"a\", \"b\"]),\n    \"math/le\": getSimpleInputMapping(FlowGraphBlockNames.LessThanOrEqual, [\"a\", \"b\"]),\n    \"math/gt\": getSimpleInputMapping(FlowGraphBlockNames.GreaterThan, [\"a\", \"b\"]),\n    \"math/ge\": getSimpleInputMapping(FlowGraphBlockNames.GreaterThanOrEqual, [\"a\", \"b\"]),\n    \"math/isNaN\": getSimpleInputMapping(FlowGraphBlockNames.IsNaN),\n    \"math/isInf\": getSimpleInputMapping(FlowGraphBlockNames.IsInfinity),\n    \"math/select\": {\n        blocks: [FlowGraphBlockNames.Conditional],\n        inputs: {\n            values: {\n                condition: { name: \"condition\" },\n                // Should we validate those have the same type here, or assume it is already validated?\n                a: { name: \"onTrue\" },\n                b: { name: \"onFalse\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"output\" },\n            },\n        },\n    },\n    \"math/random\": {\n        blocks: [FlowGraphBlockNames.Random],\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/sin\": getSimpleInputMapping(FlowGraphBlockNames.Sin),\n    \"math/cos\": getSimpleInputMapping(FlowGraphBlockNames.Cos),\n    \"math/tan\": getSimpleInputMapping(FlowGraphBlockNames.Tan),\n    \"math/asin\": getSimpleInputMapping(FlowGraphBlockNames.Asin),\n    \"math/acos\": getSimpleInputMapping(FlowGraphBlockNames.Acos),\n    \"math/atan\": getSimpleInputMapping(FlowGraphBlockNames.Atan),\n    \"math/atan2\": getSimpleInputMapping(FlowGraphBlockNames.Atan2, [\"a\", \"b\"]),\n    \"math/sinh\": getSimpleInputMapping(FlowGraphBlockNames.Sinh),\n    \"math/cosh\": getSimpleInputMapping(FlowGraphBlockNames.Cosh),\n    \"math/tanh\": getSimpleInputMapping(FlowGraphBlockNames.Tanh),\n    \"math/asinh\": getSimpleInputMapping(FlowGraphBlockNames.Asinh),\n    \"math/acosh\": getSimpleInputMapping(FlowGraphBlockNames.Acosh),\n    \"math/atanh\": getSimpleInputMapping(FlowGraphBlockNames.Atanh),\n    \"math/exp\": getSimpleInputMapping(FlowGraphBlockNames.Exponential),\n    \"math/log\": getSimpleInputMapping(FlowGraphBlockNames.Log),\n    \"math/log2\": getSimpleInputMapping(FlowGraphBlockNames.Log2),\n    \"math/log10\": getSimpleInputMapping(FlowGraphBlockNames.Log10),\n    \"math/sqrt\": getSimpleInputMapping(FlowGraphBlockNames.SquareRoot),\n    \"math/cbrt\": getSimpleInputMapping(FlowGraphBlockNames.CubeRoot),\n    \"math/pow\": getSimpleInputMapping(FlowGraphBlockNames.Power, [\"a\", \"b\"]),\n    \"math/length\": getSimpleInputMapping(FlowGraphBlockNames.Length),\n    \"math/normalize\": getSimpleInputMapping(FlowGraphBlockNames.Normalize),\n    \"math/dot\": getSimpleInputMapping(FlowGraphBlockNames.Dot, [\"a\", \"b\"]),\n    \"math/cross\": getSimpleInputMapping(FlowGraphBlockNames.Cross, [\"a\", \"b\"]),\n    \"math/rotate2D\": {\n        blocks: [FlowGraphBlockNames.Rotate2D],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n                angle: { name: \"b\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/rotate3D\": {\n        blocks: [FlowGraphBlockNames.Rotate3D],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n                rotation: { name: \"b\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/transform\": {\n        // glTF transform is vectorN with matrixN\n        blocks: [FlowGraphBlockNames.TransformVector],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n                b: { name: \"b\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/combine2\": {\n        blocks: [FlowGraphBlockNames.CombineVector2],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/combine3\": {\n        blocks: [FlowGraphBlockNames.CombineVector3],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n                c: { name: \"input_2\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/combine4\": {\n        blocks: [FlowGraphBlockNames.CombineVector4],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n                c: { name: \"input_2\", gltfType: \"number\" },\n                d: { name: \"input_3\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    // one input, N outputs! outputs named using numbers.\n    \"math/extract2\": {\n        blocks: [FlowGraphBlockNames.ExtractVector2],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n            },\n        },\n    },\n    \"math/extract3\": {\n        blocks: [FlowGraphBlockNames.ExtractVector3],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n                \"2\": { name: \"output_2\" },\n            },\n        },\n    },\n    \"math/extract4\": {\n        blocks: [FlowGraphBlockNames.ExtractVector4],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n                \"2\": { name: \"output_2\" },\n                \"3\": { name: \"output_3\" },\n            },\n        },\n    },\n    \"math/transpose\": getSimpleInputMapping(FlowGraphBlockNames.Transpose),\n    \"math/determinant\": getSimpleInputMapping(FlowGraphBlockNames.Determinant),\n    \"math/inverse\": getSimpleInputMapping(FlowGraphBlockNames.InvertMatrix),\n    \"math/matMul\": getSimpleInputMapping(FlowGraphBlockNames.MatrixMultiplication, [\"a\", \"b\"]),\n    \"math/matCompose\": {\n        blocks: [FlowGraphBlockNames.MatrixCompose],\n        inputs: {\n            values: {\n                translation: { name: \"position\", gltfType: \"float3\" },\n                rotation: { name: \"rotationQuaternion\", gltfType: \"float4\" },\n                scale: { name: \"scaling\", gltfType: \"float3\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects, context) {\n            // configure it to work the way glTF specifies\n            const d = serializedObjects[0].dataInputs.find((input) => input.name === \"rotationQuaternion\");\n            if (!d) {\n                throw new Error(\"Rotation quaternion input not found\");\n            }\n            // if value is defined, set the type to quaternion\n            if (context._connectionValues[d.uniqueId]) {\n                context._connectionValues[d.uniqueId].type = FlowGraphTypes.Quaternion;\n            }\n            return serializedObjects;\n        },\n    },\n    \"math/matDecompose\": {\n        blocks: [FlowGraphBlockNames.MatrixDecompose],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                translation: { name: \"position\" },\n                rotation: { name: \"rotationQuaternion\" },\n                scale: { name: \"scaling\" },\n            },\n        },\n    },\n    \"math/quatConjugate\": getSimpleInputMapping(FlowGraphBlockNames.Conjugate, [\"a\"]),\n    \"math/quatMul\": {\n        blocks: [FlowGraphBlockNames.Multiply],\n        inputs: {\n            values: {\n                a: { name: \"a\", gltfType: \"vector4\" },\n                b: { name: \"b\", gltfType: \"vector4\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            serializedObjects[0].config ||= {};\n            serializedObjects[0].config.type = FlowGraphTypes.Quaternion;\n            return serializedObjects;\n        },\n    },\n    \"math/quatAngleBetween\": getSimpleInputMapping(FlowGraphBlockNames.AngleBetween, [\"a\", \"b\"]),\n    \"math/quatFromAxisAngle\": {\n        blocks: [FlowGraphBlockNames.QuaternionFromAxisAngle],\n        inputs: {\n            values: {\n                axis: { name: \"a\", gltfType: \"float3\" },\n                angle: { name: \"b\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n    },\n    \"math/quatToAxisAngle\": getSimpleInputMapping(FlowGraphBlockNames.AxisAngleFromQuaternion, [\"a\"]),\n    \"math/quatFromDirections\": getSimpleInputMapping(FlowGraphBlockNames.QuaternionFromDirections, [\"a\", \"b\"]),\n    \"math/combine2x2\": {\n        blocks: [FlowGraphBlockNames.CombineMatrix2D],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n                c: { name: \"input_2\", gltfType: \"number\" },\n                d: { name: \"input_3\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            serializedObjects[0].config.inputIsColumnMajor = true;\n            return serializedObjects;\n        },\n    },\n    \"math/extract2x2\": {\n        blocks: [FlowGraphBlockNames.ExtractMatrix2D],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"float2x2\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n                \"2\": { name: \"output_2\" },\n                \"3\": { name: \"output_3\" },\n            },\n        },\n    },\n    \"math/combine3x3\": {\n        blocks: [FlowGraphBlockNames.CombineMatrix3D],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n                c: { name: \"input_2\", gltfType: \"number\" },\n                d: { name: \"input_3\", gltfType: \"number\" },\n                e: { name: \"input_4\", gltfType: \"number\" },\n                f: { name: \"input_5\", gltfType: \"number\" },\n                g: { name: \"input_6\", gltfType: \"number\" },\n                h: { name: \"input_7\", gltfType: \"number\" },\n                i: { name: \"input_8\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            serializedObjects[0].config.inputIsColumnMajor = true;\n            return serializedObjects;\n        },\n    },\n    \"math/extract3x3\": {\n        blocks: [FlowGraphBlockNames.ExtractMatrix3D],\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"float3x3\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n                \"2\": { name: \"output_2\" },\n                \"3\": { name: \"output_3\" },\n                \"4\": { name: \"output_4\" },\n                \"5\": { name: \"output_5\" },\n                \"6\": { name: \"output_6\" },\n                \"7\": { name: \"output_7\" },\n                \"8\": { name: \"output_8\" },\n            },\n        },\n    },\n    \"math/combine4x4\": {\n        blocks: [FlowGraphBlockNames.CombineMatrix],\n        inputs: {\n            values: {\n                a: { name: \"input_0\", gltfType: \"number\" },\n                b: { name: \"input_1\", gltfType: \"number\" },\n                c: { name: \"input_2\", gltfType: \"number\" },\n                d: { name: \"input_3\", gltfType: \"number\" },\n                e: { name: \"input_4\", gltfType: \"number\" },\n                f: { name: \"input_5\", gltfType: \"number\" },\n                g: { name: \"input_6\", gltfType: \"number\" },\n                h: { name: \"input_7\", gltfType: \"number\" },\n                i: { name: \"input_8\", gltfType: \"number\" },\n                j: { name: \"input_9\", gltfType: \"number\" },\n                k: { name: \"input_10\", gltfType: \"number\" },\n                l: { name: \"input_11\", gltfType: \"number\" },\n                m: { name: \"input_12\", gltfType: \"number\" },\n                n: { name: \"input_13\", gltfType: \"number\" },\n                o: { name: \"input_14\", gltfType: \"number\" },\n                p: { name: \"input_15\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            serializedObjects[0].config.inputIsColumnMajor = true;\n            return serializedObjects;\n        },\n    },\n    \"math/extract4x4\": {\n        blocks: [FlowGraphBlockNames.ExtractMatrix],\n        configuration: {},\n        inputs: {\n            values: {\n                a: { name: \"input\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                \"0\": { name: \"output_0\" },\n                \"1\": { name: \"output_1\" },\n                \"2\": { name: \"output_2\" },\n                \"3\": { name: \"output_3\" },\n                \"4\": { name: \"output_4\" },\n                \"5\": { name: \"output_5\" },\n                \"6\": { name: \"output_6\" },\n                \"7\": { name: \"output_7\" },\n                \"8\": { name: \"output_8\" },\n                \"9\": { name: \"output_9\" },\n                \"10\": { name: \"output_10\" },\n                \"11\": { name: \"output_11\" },\n                \"12\": { name: \"output_12\" },\n                \"13\": { name: \"output_13\" },\n                \"14\": { name: \"output_14\" },\n                \"15\": { name: \"output_15\" },\n            },\n        },\n    },\n    \"math/not\": {\n        blocks: [FlowGraphBlockNames.BitwiseNot],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects, context) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            // try to infer the type or fallback to Integer\n            const socketIn = serializedObjects[0].dataInputs[0];\n            serializedObjects[0].config.valueType = context._connectionValues[socketIn.uniqueId]?.type ?? FlowGraphTypes.Integer;\n            return serializedObjects;\n        },\n    },\n    \"math/and\": {\n        blocks: [FlowGraphBlockNames.BitwiseAnd],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n                b: { name: \"b\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects, context) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            // try to infer the type or fallback to Integer\n            const socketInA = serializedObjects[0].dataInputs[0];\n            const socketInB = serializedObjects[0].dataInputs[1];\n            serializedObjects[0].config.valueType =\n                context._connectionValues[socketInA.uniqueId]?.type ?? context._connectionValues[socketInB.uniqueId]?.type ?? FlowGraphTypes.Integer;\n            return serializedObjects;\n        },\n    },\n    \"math/or\": {\n        blocks: [FlowGraphBlockNames.BitwiseOr],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n                b: { name: \"b\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects, context) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            // try to infer the type or fallback to Integer\n            const socketInA = serializedObjects[0].dataInputs[0];\n            const socketInB = serializedObjects[0].dataInputs[1];\n            serializedObjects[0].config.valueType =\n                context._connectionValues[socketInA.uniqueId]?.type ?? context._connectionValues[socketInB.uniqueId]?.type ?? FlowGraphTypes.Integer;\n            return serializedObjects;\n        },\n    },\n    \"math/xor\": {\n        blocks: [FlowGraphBlockNames.BitwiseXor],\n        inputs: {\n            values: {\n                a: { name: \"a\" },\n                b: { name: \"b\" },\n            },\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _parser, serializedObjects, context) {\n            // configure it to work the way glTF specifies\n            serializedObjects[0].config ||= {};\n            // try to infer the type or fallback to Integer\n            const socketInA = serializedObjects[0].dataInputs[0];\n            const socketInB = serializedObjects[0].dataInputs[1];\n            serializedObjects[0].config.valueType =\n                context._connectionValues[socketInA.uniqueId]?.type ?? context._connectionValues[socketInB.uniqueId]?.type ?? FlowGraphTypes.Integer;\n            return serializedObjects;\n        },\n    },\n    \"math/asr\": getSimpleInputMapping(FlowGraphBlockNames.BitwiseRightShift, [\"a\", \"b\"]),\n    \"math/lsl\": getSimpleInputMapping(FlowGraphBlockNames.BitwiseLeftShift, [\"a\", \"b\"]),\n    \"math/clz\": getSimpleInputMapping(FlowGraphBlockNames.LeadingZeros),\n    \"math/ctz\": getSimpleInputMapping(FlowGraphBlockNames.TrailingZeros),\n    \"math/popcnt\": getSimpleInputMapping(FlowGraphBlockNames.OneBitsCounter),\n    \"math/rad\": getSimpleInputMapping(FlowGraphBlockNames.DegToRad),\n    \"math/deg\": getSimpleInputMapping(FlowGraphBlockNames.RadToDeg),\n    \"type/boolToInt\": getSimpleInputMapping(FlowGraphBlockNames.BooleanToInt),\n    \"type/boolToFloat\": getSimpleInputMapping(FlowGraphBlockNames.BooleanToFloat),\n    \"type/intToBool\": getSimpleInputMapping(FlowGraphBlockNames.IntToBoolean),\n    \"type/intToFloat\": getSimpleInputMapping(FlowGraphBlockNames.IntToFloat),\n    \"type/floatToInt\": getSimpleInputMapping(FlowGraphBlockNames.FloatToInt),\n    \"type/floatToBool\": getSimpleInputMapping(FlowGraphBlockNames.FloatToBoolean),\n\n    // flows\n    \"flow/sequence\": {\n        blocks: [FlowGraphBlockNames.Sequence],\n        extraProcessor(gltfBlock, _declaration, _mapping, _arrays, serializedObjects) {\n            const serializedObject = serializedObjects[0];\n            serializedObject.config ||= {};\n            serializedObject.config.outputSignalCount = Object.keys(gltfBlock.flows || []).length;\n            serializedObject.signalOutputs.forEach((output, index) => {\n                output.name = \"out_\" + index;\n            });\n            return serializedObjects;\n        },\n    },\n    \"flow/branch\": {\n        blocks: [FlowGraphBlockNames.Branch],\n        outputs: {\n            flows: {\n                true: { name: \"onTrue\" },\n                false: { name: \"onFalse\" },\n            },\n        },\n    },\n    \"flow/switch\": {\n        blocks: [FlowGraphBlockNames.Switch],\n        configuration: {\n            cases: { name: \"cases\", inOptions: true, defaultValue: [] },\n        },\n        inputs: {\n            values: {\n                selection: { name: \"case\" },\n                default: { name: \"default\" },\n            },\n        },\n        validation(gltfBlock) {\n            if (gltfBlock.configuration && gltfBlock.configuration.cases) {\n                const cases = gltfBlock.configuration.cases.value;\n                const onlyIntegers = cases.every((caseValue) => {\n                    // case value should be an integer. Since Number.isInteger(1.0) is true, we need to check if toString has only digits.\n                    return typeof caseValue === \"number\" && /^-?\\d+$/.test(caseValue.toString());\n                });\n                if (!onlyIntegers) {\n                    Logger.Warn(\"Switch cases should be integers. Using empty array instead.\");\n                    gltfBlock.configuration.cases.value = [] as number[];\n                    return { valid: true };\n                }\n                // check for duplicates\n                const uniqueCases = new Set(cases);\n                gltfBlock.configuration.cases.value = Array.from(uniqueCases) as number[];\n            }\n            return { valid: true };\n        },\n        extraProcessor(gltfBlock, declaration, _mapping, _arrays, serializedObjects) {\n            // convert all names of output flow to out_$1 apart from \"default\"\n            if (declaration.op !== \"flow/switch\" || !gltfBlock.flows || Object.keys(gltfBlock.flows).length === 0) {\n                throw new Error(\"Switch should have a single configuration object, the cases array\");\n            }\n            const serializedObject = serializedObjects[0];\n            serializedObject.signalOutputs.forEach((output) => {\n                if (output.name !== \"default\") {\n                    output.name = \"out_\" + output.name;\n                }\n            });\n            return serializedObjects;\n        },\n    },\n    \"flow/while\": {\n        blocks: [FlowGraphBlockNames.WhileLoop],\n        outputs: {\n            flows: {\n                loopBody: { name: \"executionFlow\" },\n            },\n        },\n    },\n    \"flow/for\": {\n        blocks: [FlowGraphBlockNames.ForLoop],\n        configuration: {\n            initialIndex: { name: \"initialIndex\", gltfType: \"number\", inOptions: true, defaultValue: 0 },\n        },\n        inputs: {\n            values: {\n                startIndex: { name: \"startIndex\", gltfType: \"number\" },\n                endIndex: { name: \"endIndex\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                index: { name: \"index\" },\n            },\n            flows: {\n                loopBody: { name: \"executionFlow\" },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _arrays, serializedObjects) {\n            const serializedObject = serializedObjects[0];\n            serializedObject.config ||= {};\n            serializedObject.config.incrementIndexWhenLoopDone = true;\n            return serializedObjects;\n        },\n    },\n    \"flow/doN\": {\n        blocks: [FlowGraphBlockNames.DoN],\n        configuration: {},\n        inputs: {\n            values: {\n                n: { name: \"maxExecutions\", gltfType: \"number\" },\n            },\n        },\n        outputs: {\n            values: {\n                currentCount: { name: \"executionCount\" },\n            },\n        },\n    },\n    \"flow/multiGate\": {\n        blocks: [FlowGraphBlockNames.MultiGate],\n        configuration: {\n            isRandom: { name: \"isRandom\", gltfType: \"boolean\", inOptions: true, defaultValue: false },\n            isLoop: { name: \"isLoop\", gltfType: \"boolean\", inOptions: true, defaultValue: false },\n        },\n        extraProcessor(gltfBlock, declaration, _mapping, _arrays, serializedObjects) {\n            if (declaration.op !== \"flow/multiGate\" || !gltfBlock.flows || Object.keys(gltfBlock.flows).length === 0) {\n                throw new Error(\"MultiGate should have a single configuration object, the number of output flows\");\n            }\n            const serializedObject = serializedObjects[0];\n            serializedObject.config ||= {};\n            serializedObject.config.outputSignalCount = Object.keys(gltfBlock.flows).length;\n            serializedObject.signalOutputs.forEach((output, index) => {\n                output.name = \"out_\" + index;\n            });\n            return serializedObjects;\n        },\n    },\n    \"flow/waitAll\": {\n        blocks: [FlowGraphBlockNames.WaitAll],\n        configuration: {\n            inputFlows: { name: \"inputSignalCount\", gltfType: \"number\", inOptions: true, defaultValue: 0 },\n        },\n        inputs: {\n            flows: {\n                reset: { name: \"reset\" },\n                \"[segment]\": { name: \"in_$1\" },\n            },\n        },\n        validation(gltfBlock) {\n            // check that the configuration value is an integer\n            if (typeof gltfBlock.configuration?.inputFlows?.value[0] !== \"number\") {\n                gltfBlock.configuration = gltfBlock.configuration || {\n                    inputFlows: { value: [0] },\n                };\n                gltfBlock.configuration.inputFlows.value = [0];\n            }\n            return { valid: true };\n        },\n    },\n    \"flow/throttle\": {\n        blocks: [FlowGraphBlockNames.Throttle],\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n    },\n    \"flow/setDelay\": {\n        blocks: [FlowGraphBlockNames.SetDelay],\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n    },\n    \"flow/cancelDelay\": {\n        blocks: [FlowGraphBlockNames.CancelDelay],\n    },\n    \"variable/get\": {\n        blocks: [FlowGraphBlockNames.GetVariable],\n        validation(gltfBlock) {\n            if (!gltfBlock.configuration?.variable?.value) {\n                Logger.Error(\"Variable get block should have a variable configuration\");\n                return { valid: false, error: \"Variable get block should have a variable configuration\" };\n            }\n            return { valid: true };\n        },\n        configuration: {\n            variable: {\n                name: \"variable\",\n                gltfType: \"number\",\n                flowGraphType: \"string\",\n                inOptions: true,\n                isVariable: true,\n                dataTransformer(index, parser) {\n                    return [parser.getVariableName(index[0])];\n                },\n            },\n        },\n    },\n    \"variable/set\": {\n        blocks: [FlowGraphBlockNames.SetVariable],\n        configuration: {\n            variable: {\n                name: \"variable\",\n                gltfType: \"number\",\n                flowGraphType: \"string\",\n                inOptions: true,\n                isVariable: true,\n                dataTransformer(index: number[], parser): string[] {\n                    return [parser.getVariableName(index[0])];\n                },\n            },\n        },\n    },\n    \"variable/setMultiple\": {\n        blocks: [FlowGraphBlockNames.SetVariable],\n        configuration: {\n            variables: {\n                name: \"variables\",\n                gltfType: \"number\",\n                flowGraphType: \"string\",\n                inOptions: true,\n                dataTransformer(index: number[][], parser): string[][] {\n                    return [index[0].map((i) => parser.getVariableName(i))];\n                },\n            },\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, parser, serializedObjects) {\n            // variable/get configuration\n            const serializedGetVariable = serializedObjects[0];\n            serializedGetVariable.dataInputs.forEach((input) => {\n                input.name = parser.getVariableName(+input.name);\n            });\n\n            return serializedObjects;\n        },\n    },\n    \"variable/interpolate\": {\n        blocks: [\n            FlowGraphBlockNames.ValueInterpolation,\n            FlowGraphBlockNames.Context,\n            FlowGraphBlockNames.PlayAnimation,\n            FlowGraphBlockNames.BezierCurveEasing,\n            FlowGraphBlockNames.GetVariable,\n        ],\n        configuration: {\n            variable: {\n                name: \"propertyName\",\n                inOptions: true,\n                isVariable: true,\n                dataTransformer(index, parser) {\n                    return [parser.getVariableName(index[0])];\n                },\n            },\n            useSlerp: {\n                name: \"animationType\",\n                inOptions: true,\n                defaultValue: false,\n                dataTransformer: (value) => {\n                    if (value[0] === true) {\n                        return [FlowGraphTypes.Quaternion];\n                    } else {\n                        return [undefined];\n                    }\n                },\n            },\n        },\n        inputs: {\n            values: {\n                value: { name: \"value_1\" },\n                duration: { name: \"duration_1\", gltfType: \"number\" },\n                p1: { name: \"controlPoint1\", toBlock: FlowGraphBlockNames.BezierCurveEasing },\n                p2: { name: \"controlPoint2\", toBlock: FlowGraphBlockNames.BezierCurveEasing },\n            },\n            flows: {\n                in: { name: \"in\", toBlock: FlowGraphBlockNames.PlayAnimation },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\", toBlock: FlowGraphBlockNames.PlayAnimation },\n                out: { name: \"out\", toBlock: FlowGraphBlockNames.PlayAnimation },\n                done: { name: \"done\", toBlock: FlowGraphBlockNames.PlayAnimation },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"object\",\n                output: \"userVariables\",\n                inputBlockIndex: 2,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"animation\",\n                output: \"animation\",\n                inputBlockIndex: 2,\n                outputBlockIndex: 0,\n                isVariable: true,\n            },\n            {\n                input: \"easingFunction\",\n                output: \"easingFunction\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 3,\n                isVariable: true,\n            },\n            {\n                input: \"value_0\",\n                output: \"value\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 4,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(gltfBlock, _declaration, _mapping, parser, serializedObjects) {\n            // is useSlerp is used, animationType should be set to be quaternion!\n            const serializedValueInterpolation = serializedObjects[0];\n            const propertyIndex = gltfBlock.configuration?.variable.value[0];\n            if (typeof propertyIndex !== \"number\") {\n                Logger.Error(\"Variable index is not defined for variable interpolation block\");\n                throw new Error(\"Variable index is not defined for variable interpolation block\");\n            }\n            const variable = parser.arrays.staticVariables[propertyIndex];\n            // if not set by useSlerp\n            if (typeof serializedValueInterpolation.config.animationType.value === \"undefined\") {\n                // get the value type\n                parser.arrays.staticVariables;\n                serializedValueInterpolation.config.animationType.value = getAnimationTypeByFlowGraphType(variable.type);\n            }\n\n            // variable/get configuration\n            const serializedGetVariable = serializedObjects[4];\n            serializedGetVariable.config ||= {};\n            serializedGetVariable.config.variable ||= {};\n            serializedGetVariable.config.variable.value = parser.getVariableName(propertyIndex);\n\n            // get the control points from the easing block\n            serializedObjects[3].config ||= {};\n\n            return serializedObjects;\n        },\n    },\n    \"pointer/get\": {\n        blocks: [FlowGraphBlockNames.GetProperty, FlowGraphBlockNames.JsonPointerParser],\n        configuration: {\n            pointer: { name: \"jsonPointer\", toBlock: FlowGraphBlockNames.JsonPointerParser },\n        },\n        inputs: {\n            values: {\n                \"[segment]\": { name: \"$1\", toBlock: FlowGraphBlockNames.JsonPointerParser },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"object\",\n                output: \"object\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"propertyName\",\n                output: \"propertyName\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"customGetFunction\",\n                output: \"getFunction\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(gltfBlock, _declaration, _mapping, parser, serializedObjects) {\n            serializedObjects.forEach((serializedObject) => {\n                // check if it is the json pointer block\n                if (serializedObject.className === FlowGraphBlockNames.JsonPointerParser) {\n                    serializedObject.config ||= {};\n                    serializedObject.config.outputValue = true;\n                }\n            });\n            return serializedObjects;\n        },\n    },\n    \"pointer/set\": {\n        blocks: [FlowGraphBlockNames.SetProperty, FlowGraphBlockNames.JsonPointerParser],\n        configuration: {\n            pointer: { name: \"jsonPointer\", toBlock: FlowGraphBlockNames.JsonPointerParser },\n        },\n        inputs: {\n            values: {\n                // must be defined due to the array taking over\n                value: { name: \"value\" },\n                \"[segment]\": { name: \"$1\", toBlock: FlowGraphBlockNames.JsonPointerParser },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"object\",\n                output: \"object\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"propertyName\",\n                output: \"propertyName\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"customSetFunction\",\n                output: \"setFunction\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(gltfBlock, _declaration, _mapping, parser, serializedObjects) {\n            serializedObjects.forEach((serializedObject) => {\n                // check if it is the json pointer block\n                if (serializedObject.className === FlowGraphBlockNames.JsonPointerParser) {\n                    serializedObject.config ||= {};\n                    serializedObject.config.outputValue = true;\n                }\n            });\n            return serializedObjects;\n        },\n    },\n    \"pointer/interpolate\": {\n        // interpolate, parse the pointer and play the animation generated. 3 blocks!\n        blocks: [FlowGraphBlockNames.ValueInterpolation, FlowGraphBlockNames.JsonPointerParser, FlowGraphBlockNames.PlayAnimation, FlowGraphBlockNames.BezierCurveEasing],\n        configuration: {\n            pointer: { name: \"jsonPointer\", toBlock: FlowGraphBlockNames.JsonPointerParser },\n        },\n        inputs: {\n            values: {\n                value: { name: \"value_1\" },\n                \"[segment]\": { name: \"$1\", toBlock: FlowGraphBlockNames.JsonPointerParser },\n                duration: { name: \"duration_1\", gltfType: \"number\" /*, inOptions: true */ },\n                p1: { name: \"controlPoint1\", toBlock: FlowGraphBlockNames.BezierCurveEasing },\n                p2: { name: \"controlPoint2\", toBlock: FlowGraphBlockNames.BezierCurveEasing },\n            },\n            flows: {\n                in: { name: \"in\", toBlock: FlowGraphBlockNames.PlayAnimation },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\", toBlock: FlowGraphBlockNames.PlayAnimation },\n                out: { name: \"out\", toBlock: FlowGraphBlockNames.PlayAnimation },\n                done: { name: \"done\", toBlock: FlowGraphBlockNames.PlayAnimation },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"object\",\n                output: \"object\",\n                inputBlockIndex: 2,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"propertyName\",\n                output: \"propertyName\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"customBuildAnimation\",\n                output: \"generateAnimationsFunction\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"animation\",\n                output: \"animation\",\n                inputBlockIndex: 2,\n                outputBlockIndex: 0,\n                isVariable: true,\n            },\n            {\n                input: \"easingFunction\",\n                output: \"easingFunction\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 3,\n                isVariable: true,\n            },\n            {\n                input: \"value_0\",\n                output: \"value\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(gltfBlock, _declaration, _mapping, parser, serializedObjects) {\n            serializedObjects.forEach((serializedObject) => {\n                // check if it is the json pointer block\n                if (serializedObject.className === FlowGraphBlockNames.JsonPointerParser) {\n                    serializedObject.config ||= {};\n                    serializedObject.config.outputValue = true;\n                } else if (serializedObject.className === FlowGraphBlockNames.ValueInterpolation) {\n                    serializedObject.config ||= {};\n                    Object.keys(gltfBlock.values || []).forEach((key) => {\n                        const value = gltfBlock.values?.[key];\n                        if (key === \"value\" && value) {\n                            // get the type of the value\n                            const type = value.type;\n                            if (type !== undefined) {\n                                serializedObject.config.animationType = parser.arrays.types[type].flowGraphType;\n                            }\n                        }\n                    });\n                }\n            });\n            return serializedObjects;\n        },\n    },\n    \"animation/start\": {\n        blocks: [FlowGraphBlockNames.PlayAnimation, FlowGraphBlockNames.ArrayIndex, \"KHR_interactivity/FlowGraphGLTFDataProvider\"],\n        inputs: {\n            values: {\n                animation: { name: \"index\", gltfType: \"number\", toBlock: FlowGraphBlockNames.ArrayIndex },\n                speed: { name: \"speed\", gltfType: \"number\" },\n                startTime: { name: \"from\", gltfType: \"number\", dataTransformer: (time: number[], parser) => [time[0] * parser._animationTargetFps] },\n                endTime: { name: \"to\", gltfType: \"number\", dataTransformer: (time: number[], parser) => [time[0] * parser._animationTargetFps] },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"animationGroup\",\n                output: \"value\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"array\",\n                output: \"animationGroups\",\n                inputBlockIndex: 1,\n                outputBlockIndex: 2,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(_gltfBlock, _declaration, _mapping, _arrays, serializedObjects, _context, globalGLTF) {\n            // add the glTF to the configuration of the last serialized object\n            const serializedObject = serializedObjects[serializedObjects.length - 1];\n            serializedObject.config ||= {};\n            serializedObject.config.glTF = globalGLTF;\n            return serializedObjects;\n        },\n    },\n    \"animation/stop\": {\n        blocks: [FlowGraphBlockNames.StopAnimation, FlowGraphBlockNames.ArrayIndex, \"KHR_interactivity/FlowGraphGLTFDataProvider\"],\n        inputs: {\n            values: {\n                animation: { name: \"index\", gltfType: \"number\", toBlock: FlowGraphBlockNames.ArrayIndex },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"animationGroup\",\n                output: \"value\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"array\",\n                output: \"animationGroups\",\n                inputBlockIndex: 1,\n                outputBlockIndex: 2,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(_gltfBlock, _declaration, _mapping, _arrays, serializedObjects, _context, globalGLTF) {\n            // add the glTF to the configuration of the last serialized object\n            const serializedObject = serializedObjects[serializedObjects.length - 1];\n            serializedObject.config ||= {};\n            serializedObject.config.glTF = globalGLTF;\n            return serializedObjects;\n        },\n    },\n    \"animation/stopAt\": {\n        blocks: [FlowGraphBlockNames.StopAnimation, FlowGraphBlockNames.ArrayIndex, \"KHR_interactivity/FlowGraphGLTFDataProvider\"],\n        configuration: {},\n        inputs: {\n            values: {\n                animation: { name: \"index\", gltfType: \"number\", toBlock: FlowGraphBlockNames.ArrayIndex },\n                stopTime: { name: \"stopAtFrame\", gltfType: \"number\", dataTransformer: (time: number[], parser) => [time[0] * parser._animationTargetFps] },\n            },\n        },\n        outputs: {\n            flows: {\n                err: { name: \"error\" },\n            },\n        },\n        interBlockConnectors: [\n            {\n                input: \"animationGroup\",\n                output: \"value\",\n                inputBlockIndex: 0,\n                outputBlockIndex: 1,\n                isVariable: true,\n            },\n            {\n                input: \"array\",\n                output: \"animationGroups\",\n                inputBlockIndex: 1,\n                outputBlockIndex: 2,\n                isVariable: true,\n            },\n        ],\n        extraProcessor(_gltfBlock, _declaration, _mapping, _arrays, serializedObjects, _context, globalGLTF) {\n            // add the glTF to the configuration of the last serialized object\n            const serializedObject = serializedObjects[serializedObjects.length - 1];\n            serializedObject.config ||= {};\n            serializedObject.config.glTF = globalGLTF;\n            return serializedObjects;\n        },\n    },\n    \"math/switch\": {\n        blocks: [FlowGraphBlockNames.DataSwitch],\n        configuration: {\n            cases: { name: \"cases\", inOptions: true, defaultValue: [] },\n        },\n        inputs: {\n            values: {\n                selection: { name: \"case\" },\n            },\n        },\n        validation(gltfBlock) {\n            if (gltfBlock.configuration && gltfBlock.configuration.cases) {\n                const cases = gltfBlock.configuration.cases.value;\n                const onlyIntegers = cases.every((caseValue) => {\n                    // case value should be an integer. Since Number.isInteger(1.0) is true, we need to check if toString has only digits.\n                    return typeof caseValue === \"number\" && /^-?\\d+$/.test(caseValue.toString());\n                });\n                if (!onlyIntegers) {\n                    Logger.Warn(\"Switch cases should be integers. Using empty array instead.\");\n                    gltfBlock.configuration.cases.value = [] as number[];\n                    return { valid: true };\n                }\n                // check for duplicates\n                const uniqueCases = new Set(cases);\n                gltfBlock.configuration.cases.value = Array.from(uniqueCases) as number[];\n            }\n            return { valid: true };\n        },\n        extraProcessor(_gltfBlock, _declaration, _mapping, _arrays, serializedObjects) {\n            const serializedObject = serializedObjects[0];\n            serializedObject.dataInputs.forEach((input) => {\n                if (input.name !== \"default\" && input.name !== \"case\") {\n                    input.name = \"in_\" + input.name;\n                }\n            });\n            serializedObject.config ||= {};\n            serializedObject.config.treatCasesAsIntegers = true;\n            return serializedObjects;\n        },\n    },\n    \"debug/log\": {\n        blocks: [FlowGraphBlockNames.ConsoleLog],\n        configuration: {\n            message: { name: \"messageTemplate\", inOptions: true },\n        },\n    },\n};\n\nfunction getSimpleInputMapping(type: FlowGraphBlockNames, inputs: string[] = [\"a\"], inferType?: boolean): IGLTFToFlowGraphMapping {\n    return {\n        blocks: [type],\n        inputs: {\n            values: inputs.reduce(\n                (acc, input) => {\n                    acc[input] = { name: input };\n                    return acc;\n                },\n                {} as { [key: string]: { name: string } }\n            ),\n        },\n        outputs: {\n            values: {\n                value: { name: \"value\" },\n            },\n        },\n        extraProcessor(gltfBlock, _declaration, _mapping, _parser, serializedObjects) {\n            if (inferType) {\n                // configure it to work the way glTF specifies\n                serializedObjects[0].config ||= {};\n                serializedObjects[0].config.preventIntegerFloatArithmetic = true;\n                // try to infer the type or fallback to Integer\n                // check the gltf block for the inputs, see if they have a type\n                let type = -1;\n                Object.keys(gltfBlock.values || {}).find((value) => {\n                    if (gltfBlock.values?.[value].type !== undefined) {\n                        type = gltfBlock.values[value].type;\n                        return true;\n                    }\n                    return false;\n                });\n                if (type !== -1) {\n                    serializedObjects[0].config.type = _parser.arrays.types[type].flowGraphType;\n                }\n            }\n            return serializedObjects;\n        },\n        validation(gltfBlock) {\n            if (inferType) {\n                // make sure types are the same\n                return ValidateTypes(gltfBlock);\n            }\n            return { valid: true };\n        },\n    };\n}\n\nfunction ValidateTypes(gltfBlock: IKHRInteractivity_Node): { valid: boolean; error?: string } {\n    if (gltfBlock.values) {\n        const types = Object.keys(gltfBlock.values)\n            .map((key) => gltfBlock.values![key].type)\n            .filter((type) => type !== undefined);\n        const allSameType = types.every((type) => type === types[0]);\n        if (!allSameType) {\n            return { valid: false, error: \"All inputs must be of the same type\" };\n        }\n    }\n    return { valid: true };\n}\n\nexport function getAllSupportedNativeNodeTypes(): string[] {\n    return Object.keys(gltfToFlowGraphMapping);\n}\n\n/**\n * \n * These are the nodes from the specs:\n\n### Math Nodes\n1. **Constants**\n   - E (`math/E`) FlowGraphBlockNames.E\n   - Pi (`math/Pi`) FlowGraphBlockNames.PI\n   - Infinity (`math/Inf`) FlowGraphBlockNames.Inf\n   - Not a Number (`math/NaN`) FlowGraphBlockNames.NaN\n2. **Arithmetic Nodes**\n   - Absolute Value (`math/abs`) FlowGraphBlockNames.Abs\n   - Sign (`math/sign`) FlowGraphBlockNames.Sign\n   - Truncate (`math/trunc`) FlowGraphBlockNames.Trunc\n   - Floor (`math/floor`) FlowGraphBlockNames.Floor\n   - Ceil (`math/ceil`) FlowGraphBlockNames.Ceil\n   - Round (`math/round`)  FlowGraphBlockNames.Round\n   - Fraction (`math/fract`) FlowGraphBlockNames.Fract\n   - Negation (`math/neg`) FlowGraphBlockNames.Negation\n   - Addition (`math/add`) FlowGraphBlockNames.Add\n   - Subtraction (`math/sub`) FlowGraphBlockNames.Subtract\n   - Multiplication (`math/mul`) FlowGraphBlockNames.Multiply\n   - Division (`math/div`) FlowGraphBlockNames.Divide\n   - Remainder (`math/rem`) FlowGraphBlockNames.Modulo\n   - Minimum (`math/min`) FlowGraphBlockNames.Min\n   - Maximum (`math/max`) FlowGraphBlockNames.Max\n   - Clamp (`math/clamp`) FlowGraphBlockNames.Clamp\n   - Saturate (`math/saturate`) FlowGraphBlockNames.Saturate\n   - Interpolate (`math/mix`) FlowGraphBlockNames.MathInterpolation\n3. **Comparison Nodes**\n   - Equality (`math/eq`) FlowGraphBlockNames.Equality\n   - Less Than (`math/lt`) FlowGraphBlockNames.LessThan\n   - Less Than Or Equal To (`math/le`) FlowGraphBlockNames.LessThanOrEqual\n   - Greater Than (`math/gt`) FlowGraphBlockNames.GreaterThan\n   - Greater Than Or Equal To (`math/ge`) FlowGraphBlockNames.GreaterThanOrEqual\n4. **Special Nodes**\n   - Is Not a Number (`math/isNaN`) FlowGraphBlockNames.IsNaN\n   - Is Infinity (`math/isInf`) FlowGraphBlockNames.IsInfinity\n   - Select (`math/select`) FlowGraphBlockNames.Conditional\n   - Switch (`math/switch`) FlowGraphBlockNames.DataSwitch\n   - Random (`math/random`) FlowGraphBlockNames.Random\n5. **Angle and Trigonometry Nodes**\n   - Degrees-To-Radians (`math/rad`) FlowGraphBlockNames.DegToRad\n   - Radians-To-Degrees (`math/deg`) FlowGraphBlockNames.RadToDeg\n   - Sine (`math/sin`)  FlowGraphBlockNames.Sin\n   - Cosine (`math/cos`) FlowGraphBlockNames.Cos\n   - Tangent (`math/tan`) FlowGraphBlockNames.Tan\n   - Arcsine (`math/asin`) FlowGraphBlockNames.Asin\n   - Arccosine (`math/acos`) FlowGraphBlockNames.Acos\n   - Arctangent (`math/atan`) FlowGraphBlockNames.Atan\n   - Arctangent 2 (`math/atan2`) FlowGraphBlockNames.Atan2\n6. **Hyperbolic Nodes**\n   - Hyperbolic Sine (`math/sinh`) FlowGraphBlockNames.Sinh\n   - Hyperbolic Cosine (`math/cosh`) FlowGraphBlockNames.Cosh\n   - Hyperbolic Tangent (`math/tanh`) FlowGraphBlockNames.Tanh\n   - Inverse Hyperbolic Sine (`math/asinh`) FlowGraphBlockNames.Asinh\n   - Inverse Hyperbolic Cosine (`math/acosh`) FlowGraphBlockNames.Acosh\n   - Inverse Hyperbolic Tangent (`math/atanh`) FlowGraphBlockNames.Atanh\n7. **Exponential Nodes**\n   - Exponent (`math/exp`) FlowGraphBlockNames.Exponential\n   - Natural Logarithm (`math/log`) FlowGraphBlockNames.Log\n   - Base-2 Logarithm (`math/log2`) FlowGraphBlockNames.Log2\n   - Base-10 Logarithm (`math/log10`) FlowGraphBlockNames.Log10\n   - Square Root (`math/sqrt`) FlowGraphBlockNames.SquareRoot\n   - Cube Root (`math/cbrt`) FlowGraphBlockNames.CubeRoot\n   - Power (`math/pow`) FlowGraphBlockNames.Power\n8. **Vector Nodes**\n   - Length (`math/length`) FlowGraphBlockNames.Length\n   - Normalize (`math/normalize`) FlowGraphBlockNames.Normalize\n   - Dot Product (`math/dot`) FlowGraphBlockNames.Dot\n   - Cross Product (`math/cross`) FlowGraphBlockNames.Cross\n   - Rotate 2D (`math/rotate2D`) FlowGraphBlockNames.Rotate2D\n   - Rotate 3D (`math/rotate3D`) FlowGraphBlockNames.Rotate3D\n   - Transform (`math/transform`) FlowGraphBlockNames.TransformVector\n9. **Matrix Nodes**\n   - Transpose (`math/transpose`) FlowGraphBlockNames.Transpose\n   - Determinant (`math/determinant`) FlowGraphBlockNames.Determinant\n   - Inverse (`math/inverse`) FlowGraphBlockNames.InvertMatrix\n   - Multiplication (`math/matMul`) FlowGraphBlockNames.MatrixMultiplication\n   - Compose (`math/matCompose`) FlowGraphBlockNames.MatrixCompose\n   - Decompose (`math/matDecompose`) FlowGraphBlockNames.MatrixDecompose\n10. **Quaternion Nodes**\n    - Conjugate (`math/quatConjugate`) FlowGraphBlockNames.Conjugate\n    - Multiplication (`math/quatMul`) FlowGraphBlockNames.Multiply\n    - Angle Between Quaternions (`math/quatAngleBetween`) FlowGraphBlockNames.AngleBetween\n    - Quaternion From Axis Angle (`math/quatFromAxisAngle`) FlowGraphBlockNames.QuaternionFromAxisAngle\n    - Quaternion To Axis Angle (`math/quatToAxisAngle`) FlowGraphBlockNames.QuaternionToAxisAngle\n    - Quaternion From Two Directional Vectors (`math/quatFromDirections`) FlowGraphBlockNames.QuaternionFromDirections\n11. **Swizzle Nodes**\n    - Combine (`math/combine2`, `math/combine3`, `math/combine4`, `math/combine2x2`, `math/combine3x3`, `math/combine4x4`)\n        FlowGraphBlockNames.CombineVector2, FlowGraphBlockNames.CombineVector3, FlowGraphBlockNames.CombineVector4\n        FlowGraphBlockNames.CombineMatrix2D, FlowGraphBlockNames.CombineMatrix3D, FlowGraphBlockNames.CombineMatrix\n    - Extract (`math/extract2`, `math/extract3`, `math/extract4`, `math/extract2x2`, `math/extract3x3`, `math/extract4x4`)\n        FlowGraphBlockNames.ExtractVector2, FlowGraphBlockNames.ExtractVector3, FlowGraphBlockNames.ExtractVector4\n        FlowGraphBlockNames.ExtractMatrix2D, FlowGraphBlockNames.ExtractMatrix3D, FlowGraphBlockNames.ExtractMatrix\n12. **Integer Arithmetic Nodes**\n    - Absolute Value (`math/abs`) FlowGraphBlockNames.Abs\n    - Sign (`math/sign`) FlowGraphBlockNames.Sign\n    - Negation (`math/neg`) FlowGraphBlockNames.Negation\n    - Addition (`math/add`) FlowGraphBlockNames.Add\n    - Subtraction (`math/sub`) FlowGraphBlockNames.Subtract\n    - Multiplication (`math/mul`) FlowGraphBlockNames.Multiply\n    - Division (`math/div`) FlowGraphBlockNames.Divide\n    - Remainder (`math/rem`) FlowGraphBlockNames.Modulo\n    - Minimum (`math/min`) FlowGraphBlockNames.Min\n    - Maximum (`math/max`) FlowGraphBlockNames.Max\n    - Clamp (`math/clamp`) FlowGraphBlockNames.Clamp\n13. **Integer Comparison Nodes**\n    - Equality (`math/eq`) FlowGraphBlockNames.Equality\n    - Less Than (`math/lt`) FlowGraphBlockNames.LessThan\n    - Less Than Or Equal To (`math/le`) FlowGraphBlockNames.LessThanOrEqual\n    - Greater Than (`math/gt`) FlowGraphBlockNames.GreaterThan\n    - Greater Than Or Equal To (`math/ge`) FlowGraphBlockNames.GreaterThanOrEqual\n14. **Integer Bitwise Nodes**\n    - Bitwise NOT (`math/not`) FlowGraphBlockNames.BitwiseNot\n    - Bitwise AND (`math/and`) FlowGraphBlockNames.BitwiseAnd\n    - Bitwise OR (`math/or`) FlowGraphBlockNames.BitwiseOr\n    - Bitwise XOR (`math/xor`) FlowGraphBlockNames.BitwiseXor\n    - Right Shift (`math/asr`) FlowGraphBlockNames.BitwiseRightShift\n    - Left Shift (`math/lsl`) FlowGraphBlockNames.BitwiseLeftShift\n    - Count Leading Zeros (`math/clz`) FlowGraphBlockNames.LeadingZeros\n    - Count Trailing Zeros (`math/ctz`) FlowGraphBlockNames.TrailingZeros\n    - Count One Bits (`math/popcnt`) FlowGraphBlockNames.OneBitsCounter\n15. **Boolean Arithmetic Nodes**\n    - Equality (`math/eq`) FlowGraphBlockNames.Equality\n    - Boolean NOT (`math/not`) FlowGraphBlockNames.BitwiseNot\n    - Boolean AND (`math/and`) FlowGraphBlockNames.BitwiseAnd\n    - Boolean OR (`math/or`) FlowGraphBlockNames.BitwiseOr\n    - Boolean XOR (`math/xor`) FlowGraphBlockNames.BitwiseXor\n\n### Type Conversion Nodes\n1. **Boolean Conversion Nodes**\n   - Boolean to Integer (`type/boolToInt`) FlowGraphBlockNames.BooleanToInt\n   - Boolean to Float (`type/boolToFloat`) FlowGraphBlockNames.BooleanToFloat\n2. **Integer Conversion Nodes**\n   - Integer to Boolean (`type/intToBool`) FlowGraphBlockNames.IntToBoolean\n   - Integer to Float (`type/intToFloat`) FlowGraphBlockNames.IntToFloat\n3. **Float Conversion Nodes**\n   - Float to Boolean (`type/floatToBool`) FlowGraphBlockNames.FloatToBoolean\n   - Float to Integer (`type/floatToInt`) FlowGraphBlockNames.FloatToInt\n\n### Control Flow Nodes\n1. **Sync Nodes**\n   - Sequence (`flow/sequence`) FlowGraphBlockNames.Sequence\n   - Branch (`flow/branch`) FlowGraphBlockNames.Branch\n   - Switch (`flow/switch`) FlowGraphBlockNames.Switch\n   - While Loop (`flow/while`) FlowGraphBlockNames.WhileLoop\n   - For Loop (`flow/for`) FlowGraphBlockNames.ForLoop\n   - Do N (`flow/doN`) FlowGraphBlockNames.DoN\n   - Multi Gate (`flow/multiGate`) FlowGraphBlockNames.MultiGate\n   - Wait All (`flow/waitAll`) FlowGraphBlockNames.WaitAll\n   - Throttle (`flow/throttle`) FlowGraphBlockNames.Throttle\n2. **Delay Nodes**\n   - Set Delay (`flow/setDelay`) FlowGraphBlockNames.SetDelay\n   - Cancel Delay (`flow/cancelDelay`) FlowGraphBlockNames.CancelDelay\n\n### State Manipulation Nodes\n1. **Custom Variable Access**\n   - Variable Get (`variable/get`) FlowGraphBlockNames.GetVariable\n   - Variable Set (`variable/set`) FlowGraphBlockNames.SetVariable\n   - Variable Interpolate (`variable/interpolate`)\n2. **Object Model Access** // TODO fully test this!!!\n   - JSON Pointer Template Parsing (`pointer/get`) [FlowGraphBlockNames.GetProperty, FlowGraphBlockNames.JsonPointerParser]\n   - Effective JSON Pointer Generation (`pointer/set`) [FlowGraphBlockNames.SetProperty, FlowGraphBlockNames.JsonPointerParser]\n   - Pointer Get (`pointer/get`) [FlowGraphBlockNames.GetProperty, FlowGraphBlockNames.JsonPointerParser]\n   - Pointer Set (`pointer/set`) [FlowGraphBlockNames.SetProperty, FlowGraphBlockNames.JsonPointerParser]\n   - Pointer Interpolate (`pointer/interpolate`) [FlowGraphBlockNames.ValueInterpolation, FlowGraphBlockNames.JsonPointerParser, FlowGraphBlockNames.PlayAnimation, FlowGraphBlockNames.Easing]\n\n### Animation Control Nodes\n1. **Animation Play** (`animation/start`) FlowGraphBlockNames.PlayAnimation\n2. **Animation Stop** (`animation/stop`) FlowGraphBlockNames.StopAnimation \n3. **Animation Stop At** (`animation/stopAt`) FlowGraphBlockNames.StopAnimation \n\n### Event Nodes\n1. **Lifecycle Event Nodes**\n   - On Start (`event/onStart`) FlowGraphBlockNames.SceneReadyEvent\n   - On Tick (`event/onTick`) FlowGraphBlockNames.SceneTickEvent\n2. **Custom Event Nodes**\n   - Receive (`event/receive`) FlowGraphBlockNames.ReceiveCustomEvent\n   - Send (`event/send`) FlowGraphBlockNames.SendCustomEvent\n\n */\n", "import type { IKHRInteractivity_Graph, IKHRInteractivity_Node, IKHRInteractivity_OutputSocketReference, IKHRInteractivity_Variable } from \"babylonjs-gltf2interface\";\nimport type { IGLTF } from \"../../glTFLoaderInterfaces\";\nimport type { IGLTFToFlowGraphMapping } from \"./declarationMapper\";\nimport { getMappingForDeclaration, getMappingForFullOperationName } from \"./declarationMapper\";\nimport { Logger } from \"core/Misc/logger\";\nimport type { ISerializedFlowGraph, ISerializedFlowGraphBlock, ISerializedFlowGraphConnection, ISerializedFlowGraphContext } from \"core/FlowGraph/typeDefinitions\";\nimport { RandomGUID } from \"core/Misc/guid\";\nimport type { IFlowGraphBlockConfiguration } from \"core/FlowGraph/flowGraphBlock\";\nimport type { FlowGraphBlockNames } from \"core/FlowGraph/Blocks/flowGraphBlockNames\";\nimport { FlowGraphConnectionType } from \"core/FlowGraph/flowGraphConnection\";\nimport { FlowGraphTypes } from \"core/FlowGraph/flowGraphRichTypes\";\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface InteractivityEvent {\n    eventId: string;\n    eventData?: {\n        eventData: boolean;\n        id: string;\n        type: string;\n        value?: any;\n    }[];\n}\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const gltfTypeToBabylonType: {\n    [key: string]: { length: number; flowGraphType: FlowGraphTypes; elementType: \"number\" | \"boolean\" };\n} = {\n    float: { length: 1, flowGraphType: FlowGraphTypes.Number, elementType: \"number\" },\n    bool: { length: 1, flowGraphType: FlowGraphTypes.Boolean, elementType: \"boolean\" },\n    float2: { length: 2, flowGraphType: FlowGraphTypes.Vector2, elementType: \"number\" },\n    float3: { length: 3, flowGraphType: FlowGraphTypes.Vector3, elementType: \"number\" },\n    float4: { length: 4, flowGraphType: FlowGraphTypes.Vector4, elementType: \"number\" },\n    float4x4: { length: 16, flowGraphType: FlowGraphTypes.Matrix, elementType: \"number\" },\n    float2x2: { length: 4, flowGraphType: FlowGraphTypes.Matrix2D, elementType: \"number\" },\n    float3x3: { length: 9, flowGraphType: FlowGraphTypes.Matrix3D, elementType: \"number\" },\n    int: { length: 1, flowGraphType: FlowGraphTypes.Integer, elementType: \"number\" },\n};\n\nexport class InteractivityGraphToFlowGraphParser {\n    /**\n     * Note - the graph should be rejected if the same type is defined twice.\n     * We currently don't validate that.\n     */\n    private _types: { length: number; flowGraphType: FlowGraphTypes; elementType: \"number\" | \"boolean\" }[] = [];\n    private _mappings: { flowGraphMapping: IGLTFToFlowGraphMapping; fullOperationName: string }[] = [];\n    private _staticVariables: { type: FlowGraphTypes; value: any[] }[] = [];\n    private _events: InteractivityEvent[] = [];\n    private _internalEventsCounter: number = 0;\n    private _nodes: { blocks: ISerializedFlowGraphBlock[]; fullOperationName: string }[] = [];\n\n    constructor(\n        private _interactivityGraph: IKHRInteractivity_Graph,\n        private _gltf: IGLTF,\n        public _animationTargetFps: number = 60\n    ) {\n        // start with types\n        this._parseTypes();\n        // continue with declarations\n        this._parseDeclarations();\n        this._parseVariables();\n        this._parseEvents();\n        this._parseNodes();\n    }\n\n    public get arrays() {\n        return {\n            types: this._types,\n            mappings: this._mappings,\n            staticVariables: this._staticVariables,\n            events: this._events,\n            nodes: this._nodes,\n        };\n    }\n\n    private _parseTypes() {\n        if (!this._interactivityGraph.types) {\n            return;\n        }\n        for (const type of this._interactivityGraph.types) {\n            this._types.push(gltfTypeToBabylonType[type.signature]);\n        }\n    }\n\n    private _parseDeclarations() {\n        if (!this._interactivityGraph.declarations) {\n            return;\n        }\n        for (const declaration of this._interactivityGraph.declarations) {\n            // make sure we have the mapping for this operation\n            const mapping = getMappingForDeclaration(declaration);\n            // mapping is defined, because we generate an empty mapping if it's not found\n            if (!mapping) {\n                Logger.Error([\"No mapping found for declaration\", declaration]);\n                throw new Error(\"Error parsing declarations\");\n            }\n            this._mappings.push({\n                flowGraphMapping: mapping,\n                fullOperationName: declaration.extension ? declaration.op + \":\" + declaration.extension : declaration.op,\n            });\n        }\n    }\n\n    private _parseVariables() {\n        if (!this._interactivityGraph.variables) {\n            return;\n        }\n        for (const variable of this._interactivityGraph.variables) {\n            const parsed = this._parseVariable(variable);\n            // set the default values here\n            this._staticVariables.push(parsed);\n        }\n    }\n\n    private _parseVariable(variable: IKHRInteractivity_Variable, dataTransform?: (value: any, parser: InteractivityGraphToFlowGraphParser) => any) {\n        const type = this._types[variable.type];\n        if (!type) {\n            Logger.Error([\"No type found for variable\", variable]);\n            throw new Error(\"Error parsing variables\");\n        }\n        if (variable.value) {\n            if (variable.value.length !== type.length) {\n                Logger.Error([\"Invalid value length for variable\", variable, type]);\n                throw new Error(\"Error parsing variables\");\n            }\n        }\n        const value = variable.value || [];\n        if (!value.length) {\n            switch (type.flowGraphType) {\n                case FlowGraphTypes.Boolean:\n                    value.push(false);\n                    break;\n                case FlowGraphTypes.Integer:\n                    value.push(0);\n                    break;\n                case FlowGraphTypes.Number:\n                    value.push(NaN);\n                    break;\n                case FlowGraphTypes.Vector2:\n                    value.push(NaN, NaN);\n                    break;\n                case FlowGraphTypes.Vector3:\n                    value.push(NaN, NaN, NaN);\n                    break;\n                case FlowGraphTypes.Vector4:\n                case FlowGraphTypes.Matrix2D:\n                case FlowGraphTypes.Quaternion:\n                    value.fill(NaN, 0, 4);\n                    break;\n                case FlowGraphTypes.Matrix:\n                    value.fill(NaN, 0, 16);\n                    break;\n                case FlowGraphTypes.Matrix3D:\n                    value.fill(NaN, 0, 9);\n                    break;\n                default:\n                    break;\n            }\n        }\n        // in case of NaN, Infinity, we need to parse the string to the object itself\n        if (type.elementType === \"number\" && typeof value[0] === \"string\") {\n            value[0] = parseFloat(value[0]);\n        }\n        return { type: type.flowGraphType, value: dataTransform ? dataTransform(value, this) : value };\n    }\n\n    private _parseEvents() {\n        if (!this._interactivityGraph.events) {\n            return;\n        }\n        for (const event of this._interactivityGraph.events) {\n            const converted: InteractivityEvent = {\n                eventId: event.id || \"internalEvent_\" + this._internalEventsCounter++,\n            };\n            if (event.values) {\n                converted.eventData = Object.keys(event.values).map((key) => {\n                    const eventValue = event.values?.[key];\n                    if (!eventValue) {\n                        Logger.Error([\"No value found for event key\", key]);\n                        throw new Error(\"Error parsing events\");\n                    }\n                    const type = this._types[eventValue.type];\n                    if (!type) {\n                        Logger.Error([\"No type found for event value\", eventValue]);\n                        throw new Error(\"Error parsing events\");\n                    }\n                    const value = typeof eventValue.value !== \"undefined\" ? this._parseVariable(eventValue) : undefined;\n                    return {\n                        id: key,\n                        type: type.flowGraphType,\n                        eventData: true,\n                        value,\n                    };\n                });\n            }\n            this._events.push(converted);\n        }\n    }\n\n    private _parseNodes() {\n        if (!this._interactivityGraph.nodes) {\n            return;\n        }\n        for (const node of this._interactivityGraph.nodes) {\n            // some validation\n            if (typeof node.declaration !== \"number\") {\n                Logger.Error([\"No declaration found for node\", node]);\n                throw new Error(\"Error parsing nodes\");\n            }\n            const mapping = this._mappings[node.declaration];\n            if (!mapping) {\n                Logger.Error([\"No mapping found for node\", node]);\n                throw new Error(\"Error parsing nodes\");\n            }\n            if (mapping.flowGraphMapping.validation) {\n                const validationResult = mapping.flowGraphMapping.validation(node, this._interactivityGraph, this._gltf);\n                if (!validationResult.valid) {\n                    throw new Error(`Error validating interactivity node ${this._interactivityGraph.declarations?.[node.declaration].op} - ${validationResult.error}`);\n                }\n            }\n            const blocks: ISerializedFlowGraphBlock[] = [];\n            // create block(s) for this node using the mapping\n            for (const blockType of mapping.flowGraphMapping.blocks) {\n                const block = this._getEmptyBlock(blockType, mapping.fullOperationName);\n                this._parseNodeConfiguration(node, block, mapping.flowGraphMapping, blockType);\n                blocks.push(block);\n            }\n            this._nodes.push({ blocks, fullOperationName: mapping.fullOperationName });\n        }\n    }\n\n    private _getEmptyBlock(className: string, type: string): ISerializedFlowGraphBlock {\n        const uniqueId = RandomGUID();\n        const dataInputs: ISerializedFlowGraphConnection[] = [];\n        const dataOutputs: ISerializedFlowGraphConnection[] = [];\n        const signalInputs: ISerializedFlowGraphConnection[] = [];\n        const signalOutputs: ISerializedFlowGraphConnection[] = [];\n        const config: IFlowGraphBlockConfiguration = {};\n        const metadata = {};\n        return {\n            uniqueId,\n            className,\n            dataInputs,\n            dataOutputs,\n            signalInputs,\n            signalOutputs,\n            config,\n            type,\n            metadata,\n        };\n    }\n\n    private _parseNodeConfiguration(node: IKHRInteractivity_Node, block: ISerializedFlowGraphBlock, nodeMapping: IGLTFToFlowGraphMapping, blockType: FlowGraphBlockNames | string) {\n        const configuration = block.config;\n        if (node.configuration) {\n            const keys = Object.keys(node.configuration);\n            for (const key of keys) {\n                const value = node.configuration?.[key];\n                // value is always an array, never a number or string\n                if (!value) {\n                    Logger.Error([\"No value found for node configuration\", key]);\n                    throw new Error(\"Error parsing node configuration\");\n                }\n                const configMapping = nodeMapping.configuration?.[key];\n                const belongsToBlock = configMapping && configMapping.toBlock ? configMapping.toBlock === blockType : nodeMapping.blocks.indexOf(blockType) === 0;\n                if (belongsToBlock) {\n                    // get the right name for the configuration key\n                    const configKey = configMapping?.name || key;\n                    if ((!value || typeof value.value === \"undefined\") && typeof configMapping?.defaultValue !== \"undefined\") {\n                        configuration[configKey] = {\n                            value: configMapping.defaultValue,\n                        };\n                    } else if (value.value.length >= 0) {\n                        // supporting int[] and int/boolean/string\n                        configuration[configKey] = {\n                            value: value.value.length === 1 ? value.value[0] : value.value,\n                        };\n                    } else {\n                        Logger.Warn([\"Invalid value for node configuration\", value]);\n                    }\n                    // make sure we transform the data if needed\n                    if (configMapping && configMapping.dataTransformer) {\n                        configuration[configKey].value = configMapping.dataTransformer([configuration[configKey].value], this)[0];\n                    }\n                }\n            }\n        }\n    }\n\n    private _parseNodeConnections(context: ISerializedFlowGraphContext) {\n        for (let i = 0; i < this._nodes.length; i++) {\n            // get the corresponding gltf node\n            const gltfNode = this._interactivityGraph.nodes?.[i];\n            if (!gltfNode) {\n                // should never happen but let's still check\n                Logger.Error([\"No node found for interactivity node\", this._nodes[i]]);\n                throw new Error(\"Error parsing node connections\");\n            }\n            const flowGraphBlocks = this._nodes[i];\n            const outputMapper = this._mappings[gltfNode.declaration];\n            // validate\n            if (!outputMapper) {\n                Logger.Error([\"No mapping found for node\", gltfNode]);\n                throw new Error(\"Error parsing node connections\");\n            }\n            const flowsFromGLTF = gltfNode.flows || {};\n            const flowsKeys = Object.keys(flowsFromGLTF).sort(); // sorting as some operations require sorted keys\n            // connect the flows\n            for (const flowKey of flowsKeys) {\n                const flow = flowsFromGLTF[flowKey];\n                const flowMapping = outputMapper.flowGraphMapping.outputs?.flows?.[flowKey];\n                const socketOutName = flowMapping?.name || flowKey;\n                // create a serialized socket\n                const socketOut = this._createNewSocketConnection(socketOutName, true);\n                const block = (flowMapping && flowMapping.toBlock && flowGraphBlocks.blocks.find((b) => b.className === flowMapping.toBlock)) || flowGraphBlocks.blocks[0];\n                block.signalOutputs.push(socketOut);\n                // get the input node of this block\n                const inputNodeId = flow.node;\n                const nodeIn = this._nodes[inputNodeId];\n                if (!nodeIn) {\n                    Logger.Error([\"No node found for input node id\", inputNodeId]);\n                    throw new Error(\"Error parsing node connections\");\n                }\n                // get the mapper for the input node - in case it mapped to multiple blocks\n                const inputMapper = getMappingForFullOperationName(nodeIn.fullOperationName);\n                if (!inputMapper) {\n                    Logger.Error([\"No mapping found for input node\", nodeIn]);\n                    throw new Error(\"Error parsing node connections\");\n                }\n                let flowInMapping = inputMapper.inputs?.flows?.[flow.socket || \"in\"];\n                let arrayMapping = false;\n                if (!flowInMapping) {\n                    for (const key in inputMapper.inputs?.flows) {\n                        if (key.startsWith(\"[\") && key.endsWith(\"]\")) {\n                            arrayMapping = true;\n                            flowInMapping = inputMapper.inputs?.flows?.[key];\n                        }\n                    }\n                }\n                const nodeInSocketName = flowInMapping ? (arrayMapping ? flowInMapping.name.replace(\"$1\", flow.socket || \"\") : flowInMapping.name) : flow.socket || \"in\";\n                const inputBlock = (flowInMapping && flowInMapping.toBlock && nodeIn.blocks.find((b) => b.className === flowInMapping.toBlock)) || nodeIn.blocks[0];\n                // in all of the flow graph input connections, find the one with the same name as the socket\n                let socketIn = inputBlock.signalInputs.find((s) => s.name === nodeInSocketName);\n                // if the socket doesn't exist, create the input socket for the connection\n                if (!socketIn) {\n                    socketIn = this._createNewSocketConnection(nodeInSocketName);\n                    inputBlock.signalInputs.push(socketIn);\n                }\n                // connect the sockets\n                socketIn.connectedPointIds.push(socketOut.uniqueId);\n                socketOut.connectedPointIds.push(socketIn.uniqueId);\n            }\n            // connect the values\n            const valuesFromGLTF = gltfNode.values || {};\n            const valuesKeys = Object.keys(valuesFromGLTF);\n            for (const valueKey of valuesKeys) {\n                const value = valuesFromGLTF[valueKey];\n                let valueMapping = outputMapper.flowGraphMapping.inputs?.values?.[valueKey];\n                let arrayMapping = false;\n                if (!valueMapping) {\n                    for (const key in outputMapper.flowGraphMapping.inputs?.values) {\n                        if (key.startsWith(\"[\") && key.endsWith(\"]\")) {\n                            arrayMapping = true;\n                            valueMapping = outputMapper.flowGraphMapping.inputs?.values?.[key];\n                        }\n                    }\n                }\n                const socketInName = valueMapping ? (arrayMapping ? valueMapping.name.replace(\"$1\", valueKey) : valueMapping.name) : valueKey;\n                // create a serialized socket\n                const socketIn = this._createNewSocketConnection(socketInName);\n                const block = (valueMapping && valueMapping.toBlock && flowGraphBlocks.blocks.find((b) => b.className === valueMapping.toBlock)) || flowGraphBlocks.blocks[0];\n                block.dataInputs.push(socketIn);\n                if ((value as IKHRInteractivity_Variable).value !== undefined) {\n                    const convertedValue = this._parseVariable(value as IKHRInteractivity_Variable, valueMapping && valueMapping.dataTransformer);\n                    context._connectionValues[socketIn.uniqueId] = convertedValue;\n                } else if (typeof (value as IKHRInteractivity_OutputSocketReference).node !== \"undefined\") {\n                    const nodeOutId = (value as IKHRInteractivity_OutputSocketReference).node;\n                    const nodeOutSocketName = (value as IKHRInteractivity_OutputSocketReference).socket || \"value\";\n                    const nodeOut = this._nodes[nodeOutId];\n                    if (!nodeOut) {\n                        Logger.Error([\"No node found for output socket reference\", value]);\n                        throw new Error(\"Error parsing node connections\");\n                    }\n                    const outputMapper = getMappingForFullOperationName(nodeOut.fullOperationName);\n                    if (!outputMapper) {\n                        Logger.Error([\"No mapping found for output socket reference\", value]);\n                        throw new Error(\"Error parsing node connections\");\n                    }\n                    let valueMapping = outputMapper.outputs?.values?.[nodeOutSocketName];\n                    let arrayMapping = false;\n                    // check if there is an array mapping defined\n                    if (!valueMapping) {\n                        // search for a value mapping that has an array mapping\n                        for (const key in outputMapper.outputs?.values) {\n                            if (key.startsWith(\"[\") && key.endsWith(\"]\")) {\n                                arrayMapping = true;\n                                valueMapping = outputMapper.outputs?.values?.[key];\n                            }\n                        }\n                    }\n                    const socketOutName = valueMapping ? (arrayMapping ? valueMapping.name.replace(\"$1\", nodeOutSocketName) : valueMapping?.name) : nodeOutSocketName;\n                    const outBlock = (valueMapping && valueMapping.toBlock && nodeOut.blocks.find((b) => b.className === valueMapping.toBlock)) || nodeOut.blocks[0];\n                    let socketOut = outBlock.dataOutputs.find((s) => s.name === socketOutName);\n                    // if the socket doesn't exist, create it\n                    if (!socketOut) {\n                        socketOut = this._createNewSocketConnection(socketOutName, true);\n                        outBlock.dataOutputs.push(socketOut);\n                    }\n                    // connect the sockets\n                    socketIn.connectedPointIds.push(socketOut.uniqueId);\n                    socketOut.connectedPointIds.push(socketIn.uniqueId);\n                } else {\n                    Logger.Error([\"Invalid value for value connection\", value]);\n                    throw new Error(\"Error parsing node connections\");\n                }\n            }\n\n            // inter block connections\n            if (outputMapper.flowGraphMapping.interBlockConnectors) {\n                for (const connector of outputMapper.flowGraphMapping.interBlockConnectors) {\n                    const input = connector.input;\n                    const output = connector.output;\n                    const isVariable = connector.isVariable;\n                    this._connectFlowGraphNodes(input, output, flowGraphBlocks.blocks[connector.inputBlockIndex], flowGraphBlocks.blocks[connector.outputBlockIndex], isVariable);\n                }\n            }\n\n            if (outputMapper.flowGraphMapping.extraProcessor) {\n                const declaration = this._interactivityGraph.declarations?.[gltfNode.declaration];\n                if (!declaration) {\n                    Logger.Error([\"No declaration found for extra processor\", gltfNode]);\n                    throw new Error(\"Error parsing node connections\");\n                }\n                flowGraphBlocks.blocks = outputMapper.flowGraphMapping.extraProcessor(\n                    gltfNode,\n                    declaration,\n                    outputMapper.flowGraphMapping,\n                    this,\n                    flowGraphBlocks.blocks,\n                    context,\n                    this._gltf\n                );\n            }\n        }\n    }\n\n    private _createNewSocketConnection(name: string, isOutput?: boolean): ISerializedFlowGraphConnection {\n        return {\n            uniqueId: RandomGUID(),\n            name,\n            _connectionType: isOutput ? FlowGraphConnectionType.Output : FlowGraphConnectionType.Input,\n            connectedPointIds: [],\n        };\n    }\n\n    private _connectFlowGraphNodes(input: string, output: string, serializedInput: ISerializedFlowGraphBlock, serializedOutput: ISerializedFlowGraphBlock, isVariable?: boolean) {\n        const inputArray = isVariable ? serializedInput.dataInputs : serializedInput.signalInputs;\n        const outputArray = isVariable ? serializedOutput.dataOutputs : serializedOutput.signalOutputs;\n        const inputConnection = inputArray.find((s) => s.name === input) || this._createNewSocketConnection(input);\n        const outputConnection = outputArray.find((s) => s.name === output) || this._createNewSocketConnection(output, true);\n        // of not found add it to the array\n        if (!inputArray.find((s) => s.name === input)) {\n            inputArray.push(inputConnection);\n        }\n        if (!outputArray.find((s) => s.name === output)) {\n            outputArray.push(outputConnection);\n        }\n        // connect the sockets\n        inputConnection.connectedPointIds.push(outputConnection.uniqueId);\n        outputConnection.connectedPointIds.push(inputConnection.uniqueId);\n    }\n\n    public getVariableName(index: number) {\n        return \"staticVariable_\" + index;\n    }\n\n    public serializeToFlowGraph(): ISerializedFlowGraph {\n        const context: ISerializedFlowGraphContext = {\n            uniqueId: RandomGUID(),\n            _userVariables: {},\n            _connectionValues: {},\n        };\n        this._parseNodeConnections(context);\n        for (let i = 0; i < this._staticVariables.length; i++) {\n            const variable = this._staticVariables[i];\n            context._userVariables[this.getVariableName(i)] = variable;\n        }\n\n        const allBlocks = this._nodes.reduce((acc, val) => acc.concat(val.blocks), [] as ISerializedFlowGraphBlock[]);\n\n        return {\n            rightHanded: true,\n            allBlocks,\n            executionContexts: [context],\n        };\n    }\n}\n", "/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { IKHRInteractivity } from \"babylonjs-gltf2interface\";\r\nimport type { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { FlowGraphCoordinator } from \"core/FlowGraph/flowGraphCoordinator\";\r\nimport { ParseFlowGraphAsync } from \"core/FlowGraph/flowGraphParser\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\nimport type { GLTFPathToObjectConverter } from \"./gltfPathToObjectConverter\";\r\nimport { AddObjectAccessorToKey, GetPathToObjectConverter } from \"./objectModelMapping\";\r\nimport { InteractivityGraphToFlowGraphParser } from \"./KHR_interactivity/interactivityGraphParser\";\r\nimport { addToBlockFactory } from \"core/FlowGraph/Blocks/flowGraphBlockFactory\";\r\nimport { Quaternion, Vector3 } from \"core/Maths/math.vector\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { IAnimation } from \"../glTFLoaderInterfaces\";\r\n\r\nconst NAME = \"KHR_interactivity\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the KHR_interactivity extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"KHR_interactivity\"]: {};\r\n    }\r\n}\r\n\r\n/**\r\n * Loader extension for KHR_interactivity\r\n */\r\nexport class KHR_interactivity implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    private _pathConverter?: GLTFPathToObjectConverter<any, any, any>;\r\n\r\n    /**\r\n     * @internal\r\n     * @param _loader\r\n     */\r\n    constructor(private _loader: GLTFLoader) {\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n        this._pathConverter = GetPathToObjectConverter(this._loader.gltf);\r\n        // avoid starting animations automatically.\r\n        _loader._skipStartAnimationStep = true;\r\n\r\n        // Update object model with new pointers\r\n\r\n        const scene = _loader.babylonScene;\r\n        if (scene) {\r\n            _AddInteractivityObjectModel(scene);\r\n        }\r\n    }\r\n\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n        delete this._pathConverter;\r\n    }\r\n\r\n    // eslint-disable-next-line no-restricted-syntax, @typescript-eslint/no-misused-promises\r\n    public async onReady(): Promise<void> {\r\n        if (!this._loader.babylonScene || !this._pathConverter) {\r\n            return;\r\n        }\r\n        const scene = this._loader.babylonScene;\r\n        const interactivityDefinition = this._loader.gltf.extensions?.KHR_interactivity as IKHRInteractivity;\r\n        if (!interactivityDefinition) {\r\n            // This can technically throw, but it's not a critical error\r\n            return;\r\n        }\r\n\r\n        const coordinator = new FlowGraphCoordinator({ scene });\r\n        coordinator.dispatchEventsSynchronously = false; // glTF interactivity dispatches events asynchronously\r\n        const graphs = interactivityDefinition.graphs.map((graph) => {\r\n            const parser = new InteractivityGraphToFlowGraphParser(graph, this._loader.gltf, this._loader.parent.targetFps);\r\n            return parser.serializeToFlowGraph();\r\n        });\r\n        // parse each graph async\r\n        await Promise.all(graphs.map(async (graph) => await ParseFlowGraphAsync(graph, { coordinator, pathConverter: this._pathConverter })));\r\n\r\n        coordinator.start();\r\n    }\r\n}\r\n\r\n/**\r\n * @internal\r\n * populates the object model with the interactivity extension\r\n */\r\nexport function _AddInteractivityObjectModel(scene: Scene) {\r\n    // Note - all of those are read-only, as per the specs!\r\n\r\n    // active camera rotation\r\n    AddObjectAccessorToKey(\"/extensions/KHR_interactivity/?/activeCamera/rotation\", {\r\n        get: () => {\r\n            if (!scene.activeCamera) {\r\n                return new Quaternion(NaN, NaN, NaN, NaN);\r\n            }\r\n            const quat = Quaternion.FromRotationMatrix(scene.activeCamera.getWorldMatrix()).normalize();\r\n            if (!scene.useRightHandedSystem) {\r\n                quat.w *= -1; // glTF uses right-handed system, while babylon uses left-handed\r\n                quat.x *= -1; // glTF uses right-handed system, while babylon uses left-handed\r\n            }\r\n            return quat;\r\n        },\r\n        type: \"Quaternion\",\r\n        getTarget: () => scene.activeCamera,\r\n    });\r\n    // activeCamera position\r\n    AddObjectAccessorToKey(\"/extensions/KHR_interactivity/?/activeCamera/position\", {\r\n        get: () => {\r\n            if (!scene.activeCamera) {\r\n                return new Vector3(NaN, NaN, NaN);\r\n            }\r\n            const pos = scene.activeCamera.getWorldMatrix().getTranslation(); // not global position\r\n            if (!scene.useRightHandedSystem) {\r\n                pos.x *= -1; // glTF uses right-handed system, while babylon uses left-handed\r\n            }\r\n            return pos;\r\n        },\r\n        type: \"Vector3\",\r\n        getTarget: () => scene.activeCamera,\r\n    });\r\n\r\n    // /animations/{} pointers:\r\n    AddObjectAccessorToKey(\"/animations/{}/extensions/KHR_interactivity/isPlaying\", {\r\n        get: (animation: IAnimation) => {\r\n            return animation._babylonAnimationGroup?.isPlaying ?? false;\r\n        },\r\n        type: \"boolean\",\r\n        getTarget: (animation: IAnimation) => {\r\n            return animation._babylonAnimationGroup;\r\n        },\r\n    });\r\n    AddObjectAccessorToKey(\"/animations/{}/extensions/KHR_interactivity/minTime\", {\r\n        get: (animation: IAnimation) => {\r\n            return (animation._babylonAnimationGroup?.from ?? 0) / 60; // fixed factor for duration-to-frames conversion\r\n        },\r\n        type: \"number\",\r\n        getTarget: (animation: IAnimation) => {\r\n            return animation._babylonAnimationGroup;\r\n        },\r\n    });\r\n    AddObjectAccessorToKey(\"/animations/{}/extensions/KHR_interactivity/maxTime\", {\r\n        get: (animation: IAnimation) => {\r\n            return (animation._babylonAnimationGroup?.to ?? 0) / 60; // fixed factor for duration-to-frames conversion\r\n        },\r\n        type: \"number\",\r\n        getTarget: (animation: IAnimation) => {\r\n            return animation._babylonAnimationGroup;\r\n        },\r\n    });\r\n    // playhead\r\n    AddObjectAccessorToKey(\"/animations/{}/extensions/KHR_interactivity/playhead\", {\r\n        get: (animation: IAnimation) => {\r\n            return (animation._babylonAnimationGroup?.getCurrentFrame() ?? 0) / 60; // fixed factor for duration-to-frames conversion\r\n        },\r\n        type: \"number\",\r\n        getTarget: (animation: IAnimation) => {\r\n            return animation._babylonAnimationGroup;\r\n        },\r\n    });\r\n    //virtualPlayhead - TODO, do we support this property in our animations? getCurrentFrame  is the only method we have for this.\r\n    AddObjectAccessorToKey(\"/animations/{}/extensions/KHR_interactivity/virtualPlayhead\", {\r\n        get: (animation: IAnimation) => {\r\n            return (animation._babylonAnimationGroup?.getCurrentFrame() ?? 0) / 60; // fixed factor for duration-to-frames conversion\r\n        },\r\n        type: \"number\",\r\n        getTarget: (animation: IAnimation) => {\r\n            return animation._babylonAnimationGroup;\r\n        },\r\n    });\r\n}\r\n\r\n// Register flow graph blocks. Do it here so they are available when the extension is enabled.\r\naddToBlockFactory(NAME, \"FlowGraphGLTFDataProvider\", async () => {\r\n    return (await import(\"./KHR_interactivity/flowGraphGLTFDataProvider\")).FlowGraphGLTFDataProvider;\r\n});\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, true, (loader) => new KHR_interactivity(loader));\r\n", "import type { AbstractMesh } from \"core/Meshes/abstractMesh\";\nimport type { GLTFLoader } from \"../glTFLoader\";\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\nimport type { INode } from \"../glTFLoaderInterfaces\";\nimport { AddObjectAccessorToKey } from \"./objectModelMapping\";\n\nconst NAME = \"KHR_node_visibility\";\n\ndeclare module \"../../glTFFileLoader\" {\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\n    export interface GLTFLoaderExtensionOptions {\n        /**\n         * Defines options for the KHR_node_visibility extension.\n         */\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\n        [\"KHR_node_visibility\"]: {};\n    }\n}\n\n// object model extension for visibility\nAddObjectAccessorToKey(\"/nodes/{}/extensions/KHR_node_visibility/visible\", {\n    get: (node: INode) => {\n        const tn = node._babylonTransformNode as any;\n        if (tn && tn.isVisible !== undefined) {\n            return tn.isVisible;\n        }\n        return true;\n    },\n    set: (value: boolean, node: INode) => {\n        node._primitiveBabylonMeshes?.forEach((mesh) => {\n            mesh.inheritVisibility = true;\n        });\n        if (node._babylonTransformNode) {\n            (node._babylonTransformNode as AbstractMesh).isVisible = value;\n        }\n        node._primitiveBabylonMeshes?.forEach((mesh) => {\n            mesh.isVisible = value;\n        });\n    },\n    getTarget: (node: INode) => node._babylonTransformNode,\n    getPropertyName: [() => \"isVisible\"],\n    type: \"boolean\",\n});\n\n/**\n * Loader extension for KHR_node_visibility\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_node_visibility implements IGLTFLoaderExtension {\n    /**\n     * The name of this extension.\n     */\n    public readonly name = NAME;\n    /**\n     * Defines whether this extension is enabled.\n     */\n    public enabled: boolean;\n\n    private _loader: GLTFLoader;\n\n    /**\n     * @internal\n     */\n    constructor(loader: GLTFLoader) {\n        this._loader = loader;\n        this.enabled = loader.isExtensionUsed(NAME);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-misused-promises\n    public async onReady(): Promise<void> {\n        this._loader.gltf.nodes?.forEach((node) => {\n            node._primitiveBabylonMeshes?.forEach((mesh) => {\n                mesh.inheritVisibility = true;\n            });\n            // When the JSON Pointer is used we need to change both the transform node and the primitive meshes to the new value.\n            if (node.extensions?.KHR_node_visibility) {\n                if (node.extensions?.KHR_node_visibility.visible === false) {\n                    if (node._babylonTransformNode) {\n                        (node._babylonTransformNode as AbstractMesh).isVisible = false;\n                    }\n                    node._primitiveBabylonMeshes?.forEach((mesh) => {\n                        mesh.isVisible = false;\n                    });\n                }\n            }\n        });\n    }\n\n    public dispose() {\n        (this._loader as any) = null;\n    }\n}\n\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new KHR_node_visibility(loader));\n", "import { FlowGraphBlockNames } from \"core/FlowGraph/Blocks/flowGraphBlockNames\";\nimport type { GLTFLoader } from \"../glTFLoader\";\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\nimport { addNewInteractivityFlowGraphMapping } from \"./KHR_interactivity/declarationMapper\";\nimport type { INode } from \"../glTFLoaderInterfaces\";\nimport { AddObjectAccessorToKey } from \"./objectModelMapping\";\n\nconst NAME = \"KHR_node_selectability\";\n\ndeclare module \"../../glTFFileLoader\" {\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\n    export interface GLTFLoaderExtensionOptions {\n        /**\n         * Defines options for the KHR_selectability extension.\n         */\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\n        [\"KHR_node_selectability\"]: {};\n    }\n}\n\n// add the interactivity mapping for the onSelect event\naddNewInteractivityFlowGraphMapping(\"event/onSelect\", NAME, {\n    // using GetVariable as the nodeIndex is a configuration and not a value (i.e. it's not mutable)\n    blocks: [FlowGraphBlockNames.MeshPickEvent, FlowGraphBlockNames.GetVariable, FlowGraphBlockNames.IndexOf, \"KHR_interactivity/FlowGraphGLTFDataProvider\"],\n    configuration: {\n        stopPropagation: { name: \"stopPropagation\" },\n        nodeIndex: {\n            name: \"variable\",\n            toBlock: FlowGraphBlockNames.GetVariable,\n            dataTransformer(data) {\n                return [\"pickedMesh_\" + data[0]];\n            },\n        },\n    },\n    outputs: {\n        values: {\n            selectedNodeIndex: { name: \"index\", toBlock: FlowGraphBlockNames.IndexOf },\n            controllerIndex: { name: \"pointerId\" },\n            selectionPoint: { name: \"pickedPoint\" },\n            selectionRayOrigin: { name: \"pickOrigin\" },\n        },\n        flows: {\n            out: { name: \"done\" },\n        },\n    },\n    interBlockConnectors: [\n        {\n            input: \"asset\",\n            output: \"value\",\n            inputBlockIndex: 0,\n            outputBlockIndex: 1,\n            isVariable: true,\n        },\n        {\n            input: \"array\",\n            output: \"nodes\",\n            inputBlockIndex: 2,\n            outputBlockIndex: 3,\n            isVariable: true,\n        },\n        {\n            input: \"object\",\n            output: \"pickedMesh\",\n            inputBlockIndex: 2,\n            outputBlockIndex: 0,\n            isVariable: true,\n        },\n    ],\n    extraProcessor(gltfBlock, _declaration, _mapping, _arrays, serializedObjects, context, globalGLTF) {\n        // add the glTF to the configuration of the last serialized object\n        const serializedObject = serializedObjects[serializedObjects.length - 1];\n        serializedObject.config = serializedObject.config || {};\n        serializedObject.config.glTF = globalGLTF;\n        // find the listener nodeIndex value\n        const nodeIndex = gltfBlock.configuration?.[\"nodeIndex\"]?.value[0];\n        if (nodeIndex === undefined || typeof nodeIndex !== \"number\") {\n            throw new Error(\"nodeIndex not found in configuration\");\n        }\n        const variableName = \"pickedMesh_\" + nodeIndex;\n        // find the nodeIndex value\n        serializedObjects[1].config.variable = variableName;\n        context._userVariables[variableName] = {\n            className: \"Mesh\",\n            id: globalGLTF?.nodes?.[nodeIndex]._babylonTransformNode?.id,\n            uniqueId: globalGLTF?.nodes?.[nodeIndex]._babylonTransformNode?.uniqueId,\n        };\n        return serializedObjects;\n    },\n});\n\n// object model extension for selectable\nAddObjectAccessorToKey(\"/nodes/{}/extensions/KHR_node_selectability/selectable\", {\n    get: (node: INode) => {\n        const tn = node._babylonTransformNode as any;\n        if (tn && tn.isPickable !== undefined) {\n            return tn.isPickable;\n        }\n        return true;\n    },\n    set: (value: boolean, node: INode) => {\n        node._primitiveBabylonMeshes?.forEach((mesh) => {\n            mesh.isPickable = value;\n        });\n    },\n    getTarget: (node: INode) => node._babylonTransformNode,\n    getPropertyName: [() => \"isPickable\"],\n    type: \"boolean\",\n});\n\n/**\n * Loader extension for KHR_selectability\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_node_selectability implements IGLTFLoaderExtension {\n    /**\n     * The name of this extension.\n     */\n    public readonly name = NAME;\n    /**\n     * Defines whether this extension is enabled.\n     */\n    public enabled: boolean;\n\n    private _loader: GLTFLoader;\n\n    /**\n     * @internal\n     */\n    constructor(loader: GLTFLoader) {\n        this._loader = loader;\n        this.enabled = loader.isExtensionUsed(NAME);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-misused-promises\n    public async onReady(): Promise<void> {\n        this._loader.gltf.nodes?.forEach((node) => {\n            if (node.extensions?.KHR_node_selectability && node.extensions?.KHR_node_selectability.selectable === false) {\n                node._babylonTransformNode?.getChildMeshes().forEach((mesh) => {\n                    mesh.isPickable = false;\n                });\n            }\n        });\n    }\n\n    public dispose() {\n        (this._loader as any) = null;\n    }\n}\n\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new KHR_node_selectability(loader));\n", "import { FlowGraphBlockNames } from \"core/FlowGraph/Blocks/flowGraphBlockNames\";\nimport type { GLTFLoader } from \"../glTFLoader\";\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\nimport { addNewInteractivityFlowGraphMapping } from \"./KHR_interactivity/declarationMapper\";\nimport type { INode } from \"../glTFLoaderInterfaces\";\nimport { AddObjectAccessorToKey } from \"./objectModelMapping\";\n\nconst NAME = \"KHR_node_hoverability\";\n\ndeclare module \"../../glTFFileLoader\" {\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\n    export interface GLTFLoaderExtensionOptions {\n        /**\n         * Defines options for the KHR_node_hoverability extension.\n         */\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\n        [\"KHR_node_hoverability\"]: {};\n    }\n}\n\n// interactivity\nconst MeshPointerOverPrefix = \"targetMeshPointerOver_\";\naddNewInteractivityFlowGraphMapping(\"event/onHoverIn\", NAME, {\n    // using GetVariable as the nodeIndex is a configuration and not a value (i.e. it's not mutable)\n    blocks: [FlowGraphBlockNames.PointerOverEvent, FlowGraphBlockNames.GetVariable, FlowGraphBlockNames.IndexOf, \"KHR_interactivity/FlowGraphGLTFDataProvider\"],\n    configuration: {\n        stopPropagation: { name: \"stopPropagation\" },\n        nodeIndex: {\n            name: \"variable\",\n            toBlock: FlowGraphBlockNames.GetVariable,\n            dataTransformer(data) {\n                return [MeshPointerOverPrefix + data[0]];\n            },\n        },\n    },\n    outputs: {\n        values: {\n            hoverNodeIndex: { name: \"index\", toBlock: FlowGraphBlockNames.IndexOf },\n            controllerIndex: { name: \"pointerId\" },\n        },\n        flows: {\n            out: { name: \"done\" },\n        },\n    },\n    interBlockConnectors: [\n        {\n            input: \"targetMesh\",\n            output: \"value\",\n            inputBlockIndex: 0,\n            outputBlockIndex: 1,\n            isVariable: true,\n        },\n        {\n            input: \"array\",\n            output: \"nodes\",\n            inputBlockIndex: 2,\n            outputBlockIndex: 3,\n            isVariable: true,\n        },\n        {\n            input: \"object\",\n            output: \"meshUnderPointer\",\n            inputBlockIndex: 2,\n            outputBlockIndex: 0,\n            isVariable: true,\n        },\n    ],\n    extraProcessor(gltfBlock, _declaration, _mapping, _arrays, serializedObjects, context, globalGLTF) {\n        // add the glTF to the configuration of the last serialized object\n        const serializedObject = serializedObjects[serializedObjects.length - 1];\n        serializedObject.config = serializedObject.config || {};\n        serializedObject.config.glTF = globalGLTF;\n        // find the listener nodeIndex value\n        const nodeIndex = gltfBlock.configuration?.[\"nodeIndex\"]?.value[0];\n        if (nodeIndex === undefined || typeof nodeIndex !== \"number\") {\n            throw new Error(\"nodeIndex not found in configuration\");\n        }\n        const variableName = MeshPointerOverPrefix + nodeIndex;\n        // find the nodeIndex value\n        serializedObjects[1].config.variable = variableName;\n        context._userVariables[variableName] = {\n            className: \"Mesh\",\n            id: globalGLTF?.nodes?.[nodeIndex]._babylonTransformNode?.id,\n            uniqueId: globalGLTF?.nodes?.[nodeIndex]._babylonTransformNode?.uniqueId,\n        };\n        return serializedObjects;\n    },\n});\n\nconst MeshPointerOutPrefix = \"targetMeshPointerOut_\";\naddNewInteractivityFlowGraphMapping(\"event/onHoverOut\", NAME, {\n    // using GetVariable as the nodeIndex is a configuration and not a value (i.e. it's not mutable)\n    blocks: [FlowGraphBlockNames.PointerOutEvent, FlowGraphBlockNames.GetVariable, FlowGraphBlockNames.IndexOf, \"KHR_interactivity/FlowGraphGLTFDataProvider\"],\n    configuration: {\n        stopPropagation: { name: \"stopPropagation\" },\n        nodeIndex: {\n            name: \"variable\",\n            toBlock: FlowGraphBlockNames.GetVariable,\n            dataTransformer(data) {\n                return [MeshPointerOutPrefix + data[0]];\n            },\n        },\n    },\n    outputs: {\n        values: {\n            hoverNodeIndex: { name: \"index\", toBlock: FlowGraphBlockNames.IndexOf },\n            controllerIndex: { name: \"pointerId\" },\n        },\n        flows: {\n            out: { name: \"done\" },\n        },\n    },\n    interBlockConnectors: [\n        {\n            input: \"targetMesh\",\n            output: \"value\",\n            inputBlockIndex: 0,\n            outputBlockIndex: 1,\n            isVariable: true,\n        },\n        {\n            input: \"array\",\n            output: \"nodes\",\n            inputBlockIndex: 2,\n            outputBlockIndex: 3,\n            isVariable: true,\n        },\n        {\n            input: \"object\",\n            output: \"meshOutOfPointer\",\n            inputBlockIndex: 2,\n            outputBlockIndex: 0,\n            isVariable: true,\n        },\n    ],\n    extraProcessor(gltfBlock, _declaration, _mapping, _arrays, serializedObjects, context, globalGLTF) {\n        // add the glTF to the configuration of the last serialized object\n        const serializedObject = serializedObjects[serializedObjects.length - 1];\n        serializedObject.config = serializedObject.config || {};\n        serializedObject.config.glTF = globalGLTF;\n\n        const nodeIndex = gltfBlock.configuration?.[\"nodeIndex\"]?.value[0];\n        if (nodeIndex === undefined || typeof nodeIndex !== \"number\") {\n            throw new Error(\"nodeIndex not found in configuration\");\n        }\n        const variableName = MeshPointerOutPrefix + nodeIndex;\n        // find the nodeIndex value\n        serializedObjects[1].config.variable = variableName;\n        context._userVariables[variableName] = {\n            className: \"Mesh\",\n            id: globalGLTF?.nodes?.[nodeIndex]._babylonTransformNode?.id,\n            uniqueId: globalGLTF?.nodes?.[nodeIndex]._babylonTransformNode?.uniqueId,\n        };\n        return serializedObjects;\n    },\n});\n\nAddObjectAccessorToKey(\"/nodes/{}/extensions/KHR_node_hoverability/hoverable\", {\n    get: (node: INode) => {\n        const tn = node._babylonTransformNode as any;\n        if (tn && tn.pointerOverDisableMeshTesting !== undefined) {\n            return tn.pointerOverDisableMeshTesting;\n        }\n        return true;\n    },\n    set: (value: boolean, node: INode) => {\n        node._primitiveBabylonMeshes?.forEach((mesh) => {\n            mesh.pointerOverDisableMeshTesting = !value;\n        });\n    },\n    getTarget: (node: INode) => node._babylonTransformNode,\n    getPropertyName: [() => \"pointerOverDisableMeshTesting\"],\n    type: \"boolean\",\n});\n\n/**\n * Loader extension for KHR_node_hoverability\n * @see https://github.com/KhronosGroup/glTF/pull/2426\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class KHR_node_hoverability implements IGLTFLoaderExtension {\n    /**\n     * The name of this extension.\n     */\n    public readonly name = NAME;\n    /**\n     * Defines whether this extension is enabled.\n     */\n    public enabled: boolean;\n\n    private _loader: GLTFLoader;\n\n    /**\n     * @internal\n     */\n    constructor(loader: GLTFLoader) {\n        this._loader = loader;\n        this.enabled = loader.isExtensionUsed(NAME);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-misused-promises\n    public async onReady(): Promise<void> {\n        this._loader.gltf.nodes?.forEach((node) => {\n            // default is true, so only apply if false\n            if (node.extensions?.KHR_node_hoverability && node.extensions?.KHR_node_hoverability.hoverable === false) {\n                node._babylonTransformNode?.getChildMeshes().forEach((mesh) => {\n                    mesh.pointerOverDisableMeshTesting = true;\n                });\n            }\n        });\n    }\n\n    public dispose() {\n        (this._loader as any) = null;\n    }\n}\n\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new KHR_node_hoverability(loader));\n", "import type { Nullable } from \"core/types\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\n\r\nimport type { IProperty } from \"babylonjs-gltf2interface\";\r\nimport type { INode, ICamera, IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport type { GLTFLoader } from \"../glTFLoader\";\r\nimport type { Material } from \"core/Materials/material\";\r\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry\";\r\n\r\nconst NAME = \"ExtrasAsMetadata\";\r\n\r\ndeclare module \"../../glTFFileLoader\" {\r\n    // eslint-disable-next-line jsdoc/require-jsdoc, @typescript-eslint/naming-convention\r\n    export interface GLTFLoaderExtensionOptions {\r\n        /**\r\n         * Defines options for the ExtrasAsMetadata extension.\r\n         */\r\n        // NOTE: Don't use NAME here as it will break the UMD type declarations.\r\n        [\"ExtrasAsMetadata\"]: {};\r\n    }\r\n}\r\n\r\ninterface IObjectWithMetadata {\r\n    metadata: any;\r\n}\r\n\r\n/**\r\n * Store glTF extras (if present) in BJS objects' metadata\r\n */\r\nexport class ExtrasAsMetadata implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled = true;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    private _assignExtras(babylonObject: IObjectWithMetadata, gltfProp: IProperty): void {\r\n        if (gltfProp.extras && Object.keys(gltfProp.extras).length > 0) {\r\n            const metadata = (babylonObject.metadata = babylonObject.metadata || {});\r\n            const gltf = (metadata.gltf = metadata.gltf || {});\r\n            gltf.extras = gltfProp.extras;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n    }\r\n\r\n    /** @internal */\r\n    public dispose(): void {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void): Nullable<Promise<TransformNode>> {\r\n        return this._loader.loadNodeAsync(context, node, (babylonTransformNode): void => {\r\n            this._assignExtras(babylonTransformNode, node);\r\n            assign(babylonTransformNode);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    public loadCameraAsync(context: string, camera: ICamera, assign: (babylonCamera: Camera) => void): Nullable<Promise<Camera>> {\r\n        return this._loader.loadCameraAsync(context, camera, (babylonCamera): void => {\r\n            this._assignExtras(babylonCamera, camera);\r\n            assign(babylonCamera);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public createMaterial(context: string, material: IMaterial, babylonDrawMode: number): Nullable<Material> {\r\n        const babylonMaterial = this._loader.createMaterial(context, material, babylonDrawMode);\r\n        this._assignExtras(babylonMaterial, material);\r\n        return babylonMaterial;\r\n    }\r\n}\r\n\r\nunregisterGLTFExtension(NAME);\r\nregisterGLTFExtension(NAME, false, (loader) => new ExtrasAsMetadata(loader));\r\n"],
  "mappings": "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mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAA0C,GAAA;IAC/E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAA0C,GAAA;IAC/E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAA0C,GAAA;IAC/E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAA0C,GAAA;IAC/E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAA0C,GAAA;IAC/E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAA0C,GAAA;IAC/E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAA0C,GAAA;IAC/E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAA0C,GAAA;IAC/E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAA0C,GAAA;IAC/E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAA0C,GAAA;IAC/E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,oCAAiD,GAAA;IACtF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,sCAAmD,GAAA;IACxF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAAsD,GAAA;IAC3F,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,qCAAkD,GAAA;IACvF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,sCAAmD,GAAA;IACxF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,sCAAmD,GAAA;IACxF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,iCAA8C,GAAA;IACnF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,sCAAmD,GAAA;IACxF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,qCAAkD,GAAA;IACvF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,uCAAoD,GAAA;IACzF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,sCAAmD,GAAA;IACxF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,oCAAiD,GAAA;IACtF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,qCAAkD,GAAA;IACvF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,uCAAoD,GAAA;IACzF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,wCAAyC,GAAA;IAC9E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,6CAAyC,GAAA;IAC9E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,sCAAkC,GAAA;IACvE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,wDAAoD,GAAA;IACzF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,sCAAkC,GAAA;IACvE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAAqC,GAAA;IAC1E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAA0C,GAAA;IAC/E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAAqC,GAAA;IAC1E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAA0C,GAAA;IAC/E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,+CAAwD,GAAA;IAC7F,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,mCAAoC,GAAA;IACzE,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,iDAAkD,GAAA;IACvF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,iDAAkD,GAAA;IACvF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,iDAAkD,GAAA;IACvF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,iDAAkD,GAAA;IACvF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,iDAAkD,GAAA;IACvF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,iDAAkD,GAAA;IACvF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,iDAAkD,GAAA;IACvF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,iDAAkD,GAAA;IACvF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAA0C,GAAA;IAC/E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAA0C,GAAA;IAC/E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAA0C,GAAA;IAC/E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAA0C,GAAA;IAC/E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAA0C,GAAA;IAC/E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAA0C,GAAA;IAC/E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAA0C,GAAA;IAC/E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAA0C,GAAA;IAC/E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAA0C,GAAA;IAC/E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAAkD,GAAA;IACvF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAAkD,GAAA;IACvF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAAkD,GAAA;IACvF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAAkD,GAAA;IACvF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAAkD,GAAA;IACvF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,yCAAkD,GAAA;IACvF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,oCAA+C,GAAA;IACpF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,+CAA0D,GAAA;IAC/F,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,8CAA2C,GAAA;IAChF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,6CAA0C,GAAA;IAC/E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,qCAAuC,GAAA;IAC5E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,wCAA0C,GAAA;IAC/E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,2CAA6C,GAAA;IAClF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,qCAAuC,GAAA;IAC5E,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,+CAAiD,GAAA;IACtF,KAAA;AACI,aAAO,aAAa,MAAM,OAAO,wCAAoC,GAAA;IACzE;AAEI,UAAI,aAAa,SAAS,GAAG;AACzB,eAAO,aAAa,SAAS;MACjC;AACA,YAAM,IAAI,MAAM,sBAAsB,SAAS,EAAE;EACzD;AACJ;;;AC7RM,SAAU,+BAA+B,QAA0B,UAAgB;AACrF,aAAW,SAAS,QAAQ;AACxB,eAAW,WAAW,MAAM,aAAa;AACrC,UAAI,QAAQ,aAAa,UAAU;AAC/B,eAAO;MACX;IACJ;EACJ;AACA,QAAM,IAAI,MAAM,uDAAuD,QAAQ;AACnF;AAQM,SAAU,gCAAgC,QAA0B,UAAgB;AACtF,aAAW,SAAS,QAAQ;AACxB,QAAI,iBAAiB,yBAAyB;AAC1C,iBAAW,YAAY,MAAM,cAAc;AACvC,YAAI,SAAS,aAAa,UAAU;AAChC,iBAAO;QACX;MACJ;IACJ;EACJ;AACA,QAAM,IAAI,MAAM,wDAAwD,QAAQ;AACpF;AAwCA,eAAsB,oBAAoB,qBAA2C,SAA+B;AAEhH,QAAM,kBAAkB,MAAM,QAAQ,IAClC,oBAAoB,UAAU,IAAI,OAAO,oBAAmB;AACxD,UAAM,eAAe,aAAa,gBAAgB,SAAgC;AAClF,WAAO,MAAM,aAAY;EAC7B,CAAC,CAAC;AAGN,SAAO,eAAe,qBAAqB,SAAS,eAAe;AACvE;AASM,SAAU,eAAe,qBAA2C,SAAiC,iBAA0C;AACjJ,QAAM,QAAQ,QAAQ,YAAY,YAAW;AAC7C,QAAM,SAA2B,CAAA;AACjC,QAAM,qBAAqB,QAAQ,sBAAsB;AAGzD,WAAS,IAAI,GAAG,IAAI,oBAAoB,UAAU,QAAQ,KAAK;AAC3D,UAAM,kBAAkB,oBAAoB,UAAU,CAAC;AACvD,UAAM,QAAQ,iCACV,iBACA,EAAE,OAAO,QAAQ,YAAY,OAAO,OAAO,eAAe,QAAQ,eAAe,iBAAiB,QAAQ,YAAY,OAAO,OAAO,mBAAkB,GACtJ,gBAAgB,CAAC,CAAC;AAEtB,WAAO,KAAK,KAAK;AACjB,QAAI,iBAAiB,qBAAqB;AACtC,YAAM,cAAc,KAAK;IAC7B;EACJ;AAEA,aAAW,SAAS,QAAQ;AACxB,eAAW,UAAU,MAAM,YAAY;AACnC,iBAAW,wBAAwB,OAAO,mBAAmB;AACzD,cAAM,aAAa,+BAA+B,QAAQ,oBAAoB;AAC9E,eAAO,UAAU,UAAU;MAC/B;IACJ;AACA,QAAI,iBAAiB,yBAAyB;AAC1C,iBAAW,aAAa,MAAM,eAAe;AACzC,mBAAW,wBAAwB,UAAU,mBAAmB;AAC5D,gBAAM,aAAa,gCAAgC,QAAQ,oBAAoB;AAC/E,oBAAU,UAAU,UAAU;QAClC;MACJ;IACJ;EACJ;AACA,aAAW,qBAAqB,oBAAoB,mBAAmB;AACnE,0BAAsB,mBAAmB,EAAE,OAAO,mBAAkB,GAAI,oBAAoB,WAAW;EAC3G;AACA,SAAO;AACX;AASM,SAAU,sBAAsB,qBAAkD,SAAwC,aAAqB;AACjJ,QAAM,SAAS,QAAQ,MAAM,cAAa;AAC1C,MAAI,oBAAoB,eAAe;AACnC,WAAO,gBAAgB;EAC3B;AACA,SAAO,yBAAyB,eAAe;AAC/C,QAAM,qBAAqB,QAAQ,sBAAsB;AACzD,SAAO,WAAW,oBAAoB;AACtC,QAAM,QAAQ,OAAO,SAAQ;AAE7B,MAAI,oBAAoB,gBAAgB;AACpC,UAAM,KAAK,oBAAoB;AAC/B,UAAM,gBAAiC;MACnC,QAAQ,GAAG,QAAQ,IAAI,CAAC,MAAc,MAAM,YAAY,CAAC,CAAC;MAC1D,QAAQ,GAAG,QAAQ,IAAI,CAAC,MAAc,MAAM,eAAe,CAAC,CAAC;MAC7D,SAAS,GAAG,SAAS,IAAI,CAAC,MAAc,MAAM,gBAAgB,CAAC,CAAC;MAChE,WAAW,GAAG,WAAW,IAAI,CAAC,MAAc,MAAM,gBAAgB,CAAC,CAAC;MACpE,UAAU,GAAG,UAAU,IAAI,CAAC,MAAc,MAAM,iBAAiB,CAAC,CAAC;MACnE,YAAY,GAAG,YAAY,IAAI,CAAC,MAAc,MAAM,WAAW,KAAK,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC;MAC9F,WAAW,GAAG,WAAW,IAAI,CAAC,MAAc,MAAM,kBAAkB,CAAC,CAAC;MACtE,iBAAiB,GAAG,iBAAiB,IAAI,CAAC,OAAe,MAAM,sBAAsB,EAAE,CAAC;MACxF,iBAAiB,GAAG,iBAAiB,IAAI,CAAC,OAAe,MAAM,wBAAwB,EAAE,CAAC;MAC1F,gBAAgB,GAAG,gBAAgB,IAAI,CAAC,OAAe,MAAM,qBAAqB,EAAE,CAAC;MACrF,WAAW,CAAA;MACX,gBAAgB,CAAA;MAChB,qBAAqB,CAAA;MACrB,YAAY,CAAA;MACZ,gBAAgB,CAAA;MAChB,oBAAoB;MACpB,eAAe,CAAA;MACf,QAAQ;MACR,cAAc,CAAA;MACd,QAAQ,CAAA;MACR,kBAAkB,CAAA;MAClB,kBAAkB,CAAA;MAClB,oBAAoB,CAAA;MACpB,UAAU,WAAA;AACN,cAAM,IAAI,MAAM,2BAA2B;MAC/C;;AAEJ,WAAO,gBAAgB;EAC3B;AACA,aAAW,OAAO,oBAAoB,gBAAgB;AAClD,UAAM,QAAQ,mBAAmB,KAAK,oBAAoB,gBAAgB,OAAO,eAAe,KAAK;AACrG,WAAO,cAAc,GAAG,IAAI;EAChC;AACA,aAAW,OAAO,oBAAoB,mBAAmB;AACrD,UAAM,QAAQ,mBAAmB,KAAK,oBAAoB,mBAAmB,OAAO,eAAe,KAAK;AACxG,WAAO,yBAAyB,KAAK,KAAK;EAC9C;AAEA,SAAO;AACX;AAsBM,SAAU,iCACZ,qBACA,cACA,WAAgC;AAEhC,QAAM,eAAoB,CAAA;AAC1B,QAAM,qBAAqB,aAAa,sBAAsB;AAC9D,MAAI,oBAAoB,QAAQ;AAC5B,eAAW,OAAO,oBAAoB,QAAQ;AAC1C,mBAAa,GAAG,IAAI,mBAAmB,KAAK,oBAAoB,QAAQ,aAAa,mBAAmB,aAAa,OAAO,aAAa,KAAK;IAClJ;EACJ;AACA,MAAI,mBAAmB,oBAAoB,SAAS,GAAG;AACnD,QAAI,CAAC,aAAa,eAAe;AAC7B,YAAM,IAAI,MAAM,2CAA2C;IAC/D;AACA,iBAAa,gBAAgB,aAAa;EAC9C;AACA,QAAM,MAAM,IAAI,UAAU,YAAY;AACtC,MAAI,WAAW,oBAAoB;AACnC,WAAS,IAAI,GAAG,IAAI,oBAAoB,WAAW,QAAQ,KAAK;AAC5D,UAAM,YAAY,IAAI,aAAa,oBAAoB,WAAW,CAAC,EAAE,IAAI;AACzE,QAAI,WAAW;AACX,gBAAU,YAAY,oBAAoB,WAAW,CAAC,CAAC;IAC3D,OAAO;AACH,YAAM,IAAI,MAAM,yCAAyC,oBAAoB,WAAW,CAAC,EAAE,OAAO,eAAe,oBAAoB,SAAS;IAClJ;EACJ;AACA,WAAS,IAAI,GAAG,IAAI,oBAAoB,YAAY,QAAQ,KAAK;AAC7D,UAAM,aAAa,IAAI,cAAc,oBAAoB,YAAY,CAAC,EAAE,IAAI;AAC5E,QAAI,YAAY;AACZ,iBAAW,YAAY,oBAAoB,YAAY,CAAC,CAAC;IAC7D,OAAO;AACH,YAAM,IAAI,MAAM,0CAA0C,oBAAoB,YAAY,CAAC,EAAE,OAAO,eAAe,oBAAoB,SAAS;IACpJ;EACJ;AACA,MAAI,WAAW,oBAAoB;AACnC,MAAI,eAAe,IAAI,YAAY,mBAAmB;AACtD,SAAO;AACX;;;AC1GM,SAAU,+BAA+B,mBAAyB;AACpE,QAAM,CAAC,IAAI,SAAS,IAAI,kBAAkB,MAAM,GAAG;AACnD,SAAO,yBAAyB,EAAE,IAAI,UAAS,CAAE;AACrD;AAEM,SAAU,yBAAyB,aAA4C,2BAAoC,MAAI;AACzH,QAAM,UAAU,YAAY,YAAY,iCAAiC,YAAY,SAAS,IAAI,YAAY,EAAE,IAAI,uBAAuB,YAAY,EAAE;AACzJ,MAAI,CAAC,SAAS;AACV,WAAO,KAAK,kCAAkC,YAAY,EAAE,kBAAkB,YAAY,aAAa,mBAAmB,EAAE;AAC5H,QAAI,0BAA0B;AAC1B,YAAM,SAA4C,CAAA;AAClD,YAAM,UAA8C;QAChD,OAAO,CAAA;;AAEX,UAAI,YAAY,mBAAmB;AAC/B,eAAO,SAAS,CAAA;AAChB,mBAAW,OAAO,YAAY,mBAAmB;AAC7C,iBAAO,OAAO,GAAG,IAAI;YACjB,MAAM;;QAEd;MACJ;AACA,UAAI,YAAY,oBAAoB;AAChC,gBAAQ,SAAS,CAAA;AACjB,eAAO,KAAK,YAAY,kBAAkB,EAAE,QAAQ,CAAC,QAAO;AACxD,kBAAQ,OAAQ,GAAG,IAAI;YACnB,MAAM;;QAEd,CAAC;MACL;AACA,aAAO;QACH,QAAQ,CAAA;;QACR;QACA;;IAER;EACJ;AACA,SAAO;AACX;AASM,SAAU,oCAAoC,KAAa,WAAmB,SAAgC;AAChH,mCAAiC,SAAS,MAA1C,iCAAiC,SAAS,IAAM,CAAA;AAChD,mCAAiC,SAAS,EAAE,GAAG,IAAI;AACvD;AAEA,IAAM,mCAAwG;;;;;EAK1G,SAAS;;;;;;;;IAQL,YAAY;MACR,QAAQ;QAAA;;MAAA;MACR,QAAQ;QACJ,QAAQ;UACJ,SAAS,EAAE,MAAM,UAAS;;;;;;AAQ9C,IAAM,yBAAqE;EACvE,iBAAiB;IACb,QAAQ;MAAA;;IAAA;IACR,SAAS;MACL,OAAO;QACH,KAAK,EAAE,MAAM,OAAM;;;;EAI/B,gBAAgB;IACZ,QAAQ;MAAA;;IAAA;IACR,QAAQ,CAAA;IACR,SAAS;MACL,QAAQ;QACJ,mBAAmB;UAAE,MAAM;UAAa,UAAU;;QAA6D;;MAEnH,OAAO;QACH,KAAK,EAAE,MAAM,OAAM;;;;EAI/B,cAAc;IACV,QAAQ;MAAA;;IAAA;IACR,eAAe,WAAW,aAAa,UAAU,QAAQ,mBAAiB;AAGtE,UAAI,YAAY,OAAO,gBAAgB,CAAC,UAAU,iBAAiB,OAAO,KAAK,UAAU,aAAa,EAAE,WAAW,GAAG;AAClH,cAAM,IAAI,MAAM,2EAA2E;MAC/F;AACA,YAAM,qBAAqB,UAAU,cAAc,OAAO;AAC1D,YAAM,UAAU,mBAAmB,MAAM,CAAC;AAC1C,UAAI,OAAO,YAAY,UAAU;AAC7B,cAAM,IAAI,MAAM,6BAA6B;MACjD;AACA,YAAM,QAA4B,OAAO,OAAO,OAAO,OAAO;AAC9D,YAAM,mBAAmB,kBAAkB,CAAC;AAC5C,uBAAiB,WAAjB,iBAAiB,SAAW,CAAA;AAC5B,uBAAiB,OAAO,UAAU,MAAM;AACxC,uBAAiB,OAAO,YAAY,MAAM;AAC1C,aAAO;IACX;;EAEJ,iBAAiB;IACb,QAAQ;MAAA;;IAAA;IACR,SAAS;MACL,OAAO;QACH,KAAK,EAAE,MAAM,OAAM;;;IAG3B,WAAW,WAAW,oBAAkB;AACpC,UAAI,CAAC,UAAU,eAAe;AAC1B,eAAO,MAAM,kDAAkD;AAC/D,eAAO,EAAE,OAAO,OAAO,OAAO,mDAAkD;MACpF;AACA,YAAM,qBAAqB,UAAU,cAAc,OAAO;AAC1D,UAAI,CAAC,oBAAoB;AACrB,eAAO,MAAM,2EAA2E;AACxF,eAAO,EAAE,OAAO,OAAO,OAAO,4EAA2E;MAC7G;AACA,YAAM,UAAU,mBAAmB,MAAM,CAAC;AAC1C,UAAI,OAAO,YAAY,UAAU;AAC7B,eAAO,MAAM,6BAA6B;AAC1C,eAAO,EAAE,OAAO,OAAO,OAAO,8BAA6B;MAC/D;AACA,YAAM,QAAQ,mBAAmB,SAAS,OAAO;AACjD,UAAI,CAAC,OAAO;AACR,eAAO,MAAM,iBAAiB,OAAO,YAAY;AACjD,eAAO,EAAE,OAAO,OAAO,OAAO,iBAAiB,OAAO,aAAY;MACtE;AACA,aAAO,EAAE,OAAO,KAAI;IACxB;IACA,eAAe,WAAW,aAAa,UAAU,QAAQ,mBAAiB;AAGtE,UAAI,YAAY,OAAO,mBAAmB,CAAC,UAAU,iBAAiB,OAAO,KAAK,UAAU,aAAa,EAAE,WAAW,GAAG;AACrH,cAAM,IAAI,MAAM,2EAA2E;MAC/F;AACA,YAAM,qBAAqB,UAAU,cAAc,OAAO;AAC1D,YAAM,UAAU,mBAAmB,MAAM,CAAC;AAC1C,UAAI,OAAO,YAAY,UAAU;AAC7B,cAAM,IAAI,MAAM,6BAA6B;MACjD;AACA,YAAM,QAA4B,OAAO,OAAO,OAAO,OAAO;AAC9D,YAAM,mBAAmB,kBAAkB,CAAC;AAC5C,uBAAiB,WAAjB,iBAAiB,SAAW,CAAA;AAC5B,uBAAiB,OAAO,UAAU,MAAM;AACxC,uBAAiB,OAAO,YAAY,MAAM;AAC1C,aAAO;IACX;;EAEJ,UAAU;IAAqB;;EAAA;EAC/B,WAAW;IAAqB;;EAAA;EAChC,YAAY;IAAqB;;EAAA;EACjC,YAAY;IAAqB;;EAAA;EACjC,YAAY;IAAqB;;EAAA;EACjC,aAAa;IAAqB;;EAAA;EAClC,cAAc;IAAqB;;EAAA;EACnC,cAAc;IAAqB;;EAAA;EACnC,aAAa;IAAqB;;EAAA;EAClC,cAAc;IACV,QAAQ;MAAA;;IAAA;IACR,eAAe,CAAA;IACf,QAAQ;MACJ,QAAQ;QACJ,GAAG,EAAE,MAAM,IAAG;;;IAGtB,SAAS;MACL,QAAQ;QACJ,OAAO,EAAE,MAAM,QAAO;;;IAG9B,eAAe,WAAW,aAAa,UAAU,QAAQ,mBAAiB;;AAEtE,OAAA,KAAA,kBAAkB,CAAC,GAAE,WAAM,GAAN,SAAW,CAAA;AAChC,wBAAkB,CAAC,EAAE,OAAO,wBAAwB;AACpD,aAAO;IACX;;EAEJ,cAAc;IAAqB;;EAAA;EACnC,YAAY;IAAqB;;EAAA;EACjC,YAAY,sBAAqB,qBAA0B,CAAC,KAAK,GAAG,GAAG,IAAI;EAC3E,YAAY,sBAAqB,0BAA+B,CAAC,KAAK,GAAG,GAAG,IAAI;EAChF,YAAY;IACR,QAAQ;MAAA;;IAAA;IACR,eAAe,YAAY,cAAc,UAAU,SAAS,mBAAiB;;AAEzE,OAAA,KAAA,kBAAkB,CAAC,GAAE,WAAM,GAAN,SAAW,CAAA;AAChC,wBAAkB,CAAC,EAAE,OAAO,wBAAwB;AACpD,wBAAkB,CAAC,EAAE,OAAO,gCAAgC;AAG5D,UAAI,OAAO;AACX,aAAO,KAAK,WAAW,UAAU,CAAA,CAAE,EAAE,KAAK,CAAC,UAAS;AAChD,YAAI,WAAW,SAAS,KAAK,EAAE,SAAS,QAAW;AAC/C,iBAAO,WAAW,OAAO,KAAK,EAAE;AAChC,iBAAO;QACX;AACA,eAAO;MACX,CAAC;AACD,UAAI,SAAS,IAAI;AACb,0BAAkB,CAAC,EAAE,OAAO,OAAO,QAAQ,OAAO,MAAM,IAAI,EAAE;MAClE;AACA,aAAO;IACX;IACA,WAAW,WAAS;AAChB,UAAI,UAAU,QAAQ;AAElB,eAAO,cAAc,SAAS;MAClC;AACA,aAAO,EAAE,OAAO,KAAI;IACxB;;EAEJ,YAAY,sBAAqB,wBAA6B,CAAC,KAAK,GAAG,GAAG,IAAI;EAC9E,YAAY,sBAAqB,wBAA6B,CAAC,KAAK,GAAG,CAAC;EACxE,YAAY,sBAAqB,qBAA0B,CAAC,KAAK,GAAG,CAAC;EACrE,YAAY,sBAAqB,qBAA0B,CAAC,KAAK,GAAG,CAAC;EACrE,cAAc,sBAAqB,uBAA4B,CAAC,KAAK,KAAK,GAAG,CAAC;EAC9E,iBAAiB;IAAqB;;EAAA;EACtC,YAAY,sBAAqB,mCAAwC,CAAC,KAAK,KAAK,GAAG,CAAC;EACxF,WAAW,sBAAqB,0BAA+B,CAAC,KAAK,GAAG,CAAC;EACzE,WAAW,sBAAqB,0BAA+B,CAAC,KAAK,GAAG,CAAC;EACzE,WAAW,sBAAqB,iCAAsC,CAAC,KAAK,GAAG,CAAC;EAChF,WAAW,sBAAqB,6BAAkC,CAAC,KAAK,GAAG,CAAC;EAC5E,WAAW,sBAAqB,oCAAyC,CAAC,KAAK,GAAG,CAAC;EACnF,cAAc;IAAqB;;EAAA;EACnC,cAAc;IAAqB;;EAAA;EACnC,eAAe;IACX,QAAQ;MAAA;;IAAA;IACR,QAAQ;MACJ,QAAQ;QACJ,WAAW,EAAE,MAAM,YAAW;;QAE9B,GAAG,EAAE,MAAM,SAAQ;QACnB,GAAG,EAAE,MAAM,UAAS;;;IAG5B,SAAS;MACL,QAAQ;QACJ,OAAO,EAAE,MAAM,SAAQ;;;;EAInC,eAAe;IACX,QAAQ;MAAA;;IAAA;IACR,SAAS;MACL,QAAQ;QACJ,OAAO,EAAE,MAAM,QAAO;;;;EAIlC,YAAY;IAAqB;;EAAA;EACjC,YAAY;IAAqB;;EAAA;EACjC,YAAY;IAAqB;;EAAA;EACjC,aAAa;IAAqB;;EAAA;EAClC,aAAa;IAAqB;;EAAA;EAClC,aAAa;IAAqB;;EAAA;EAClC,cAAc,sBAAqB,uBAA4B,CAAC,KAAK,GAAG,CAAC;EACzE,aAAa;IAAqB;;EAAA;EAClC,aAAa;IAAqB;;EAAA;EAClC,aAAa;IAAqB;;EAAA;EAClC,cAAc;IAAqB;;EAAA;EACnC,cAAc;IAAqB;;EAAA;EACnC,cAAc;IAAqB;;EAAA;EACnC,YAAY;IAAqB;;EAAA;EACjC,YAAY;IAAqB;;EAAA;EACjC,aAAa;IAAqB;;EAAA;EAClC,cAAc;IAAqB;;EAAA;EACnC,aAAa;IAAqB;;EAAA;EAClC,aAAa;IAAqB;;EAAA;EAClC,YAAY,sBAAqB,uBAA4B,CAAC,KAAK,GAAG,CAAC;EACvE,eAAe;IAAqB;;EAAA;EACpC,kBAAkB;IAAqB;;EAAA;EACvC,YAAY,sBAAqB,qBAA0B,CAAC,KAAK,GAAG,CAAC;EACrE,cAAc,sBAAqB,uBAA4B,CAAC,KAAK,GAAG,CAAC;EACzE,iBAAiB;IACb,QAAQ;MAAA;;IAAA;IACR,QAAQ;MACJ,QAAQ;QACJ,GAAG,EAAE,MAAM,IAAG;QACd,OAAO,EAAE,MAAM,IAAG;;;IAG1B,SAAS;MACL,QAAQ;QACJ,OAAO,EAAE,MAAM,QAAO;;;;EAIlC,iBAAiB;IACb,QAAQ;MAAA;;IAAA;IACR,QAAQ;MACJ,QAAQ;QACJ,GAAG,EAAE,MAAM,IAAG;QACd,UAAU,EAAE,MAAM,IAAG;;;IAG7B,SAAS;MACL,QAAQ;QACJ,OAAO,EAAE,MAAM,QAAO;;;;EAIlC,kBAAkB;;IAEd,QAAQ;MAAA;;IAAA;IACR,QAAQ;MACJ,QAAQ;QACJ,GAAG,EAAE,MAAM,IAAG;QACd,GAAG,EAAE,MAAM,IAAG;;;IAGtB,SAAS;MACL,QAAQ;QACJ,OAAO,EAAE,MAAM,QAAO;;;;EAIlC,iBAAiB;IACb,QAAQ;MAAA;;IAAA;IACR,QAAQ;MACJ,QAAQ;QACJ,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;;;IAGhD,SAAS;MACL,QAAQ;QACJ,OAAO,EAAE,MAAM,QAAO;;;;EAIlC,iBAAiB;IACb,QAAQ;MAAA;;IAAA;IACR,QAAQ;MACJ,QAAQ;QACJ,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;;;IAGhD,SAAS;MACL,QAAQ;QACJ,OAAO,EAAE,MAAM,QAAO;;;;EAIlC,iBAAiB;IACb,QAAQ;MAAA;;IAAA;IACR,QAAQ;MACJ,QAAQ;QACJ,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;;;IAGhD,SAAS;MACL,QAAQ;QACJ,OAAO,EAAE,MAAM,QAAO;;;;;EAKlC,iBAAiB;IACb,QAAQ;MAAA;;IAAA;IACR,QAAQ;MACJ,QAAQ;QACJ,GAAG,EAAE,MAAM,SAAS,UAAU,SAAQ;;;IAG9C,SAAS;MACL,QAAQ;QACJ,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;;;;EAInC,iBAAiB;IACb,QAAQ;MAAA;;IAAA;IACR,QAAQ;MACJ,QAAQ;QACJ,GAAG,EAAE,MAAM,SAAS,UAAU,SAAQ;;;IAG9C,SAAS;MACL,QAAQ;QACJ,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;;;;EAInC,iBAAiB;IACb,QAAQ;MAAA;;IAAA;IACR,QAAQ;MACJ,QAAQ;QACJ,GAAG,EAAE,MAAM,SAAS,UAAU,SAAQ;;;IAG9C,SAAS;MACL,QAAQ;QACJ,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;;;;EAInC,kBAAkB;IAAqB;;EAAA;EACvC,oBAAoB;IAAqB;;EAAA;EACzC,gBAAgB;IAAqB;;EAAA;EACrC,eAAe,sBAAqB,sCAA2C,CAAC,KAAK,GAAG,CAAC;EACzF,mBAAmB;IACf,QAAQ;MAAA;;IAAA;IACR,QAAQ;MACJ,QAAQ;QACJ,aAAa,EAAE,MAAM,YAAY,UAAU,SAAQ;QACnD,UAAU,EAAE,MAAM,sBAAsB,UAAU,SAAQ;QAC1D,OAAO,EAAE,MAAM,WAAW,UAAU,SAAQ;;;IAGpD,SAAS;MACL,QAAQ;QACJ,OAAO,EAAE,MAAM,QAAO;;;IAG9B,eAAe,YAAY,cAAc,UAAU,SAAS,mBAAmB,SAAO;AAElF,YAAM,IAAI,kBAAkB,CAAC,EAAE,WAAW,KAAK,CAAC,UAAU,MAAM,SAAS,oBAAoB;AAC7F,UAAI,CAAC,GAAG;AACJ,cAAM,IAAI,MAAM,qCAAqC;MACzD;AAEA,UAAI,QAAQ,kBAAkB,EAAE,QAAQ,GAAG;AACvC,gBAAQ,kBAAkB,EAAE,QAAQ,EAAE,OAAI;MAC9C;AACA,aAAO;IACX;;EAEJ,qBAAqB;IACjB,QAAQ;MAAA;;IAAA;IACR,QAAQ;MACJ,QAAQ;QACJ,GAAG,EAAE,MAAM,SAAS,UAAU,SAAQ;;;IAG9C,SAAS;MACL,QAAQ;QACJ,aAAa,EAAE,MAAM,WAAU;QAC/B,UAAU,EAAE,MAAM,qBAAoB;QACtC,OAAO,EAAE,MAAM,UAAS;;;;EAIpC,sBAAsB,sBAAqB,2BAAgC,CAAC,GAAG,CAAC;EAChF,gBAAgB;IACZ,QAAQ;MAAA;;IAAA;IACR,QAAQ;MACJ,QAAQ;QACJ,GAAG,EAAE,MAAM,KAAK,UAAU,UAAS;QACnC,GAAG,EAAE,MAAM,KAAK,UAAU,UAAS;;;IAG3C,SAAS;MACL,QAAQ;QACJ,OAAO,EAAE,MAAM,QAAO;;;IAG9B,eAAe,YAAY,cAAc,UAAU,SAAS,mBAAiB;;AACzE,OAAA,KAAA,kBAAkB,CAAC,GAAE,WAAM,GAAN,SAAW,CAAA;AAChC,wBAAkB,CAAC,EAAE,OAAO,OAAI;AAChC,aAAO;IACX;;EAEJ,yBAAyB,sBAAqB,8BAAmC,CAAC,KAAK,GAAG,CAAC;EAC3F,0BAA0B;IACtB,QAAQ;MAAA;;IAAA;IACR,QAAQ;MACJ,QAAQ;QACJ,MAAM,EAAE,MAAM,KAAK,UAAU,SAAQ;QACrC,OAAO,EAAE,MAAM,KAAK,UAAU,SAAQ;;;IAG9C,SAAS;MACL,QAAQ;QACJ,OAAO,EAAE,MAAM,QAAO;;;;EAIlC,wBAAwB,sBAAqB,yCAA8C,CAAC,GAAG,CAAC;EAChG,2BAA2B,sBAAqB,0CAA+C,CAAC,KAAK,GAAG,CAAC;EACzG,mBAAmB;IACf,QAAQ;MAAA;;IAAA;IACR,QAAQ;MACJ,QAAQ;QACJ,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;;;IAGhD,SAAS;MACL,QAAQ;QACJ,OAAO,EAAE,MAAM,QAAO;;;IAG9B,eAAe,YAAY,cAAc,UAAU,SAAS,mBAAiB;;AAEzE,OAAA,KAAA,kBAAkB,CAAC,GAAE,WAAM,GAAN,SAAW,CAAA;AAChC,wBAAkB,CAAC,EAAE,OAAO,qBAAqB;AACjD,aAAO;IACX;;EAEJ,mBAAmB;IACf,QAAQ;MAAA;;IAAA;IACR,QAAQ;MACJ,QAAQ;QACJ,GAAG,EAAE,MAAM,SAAS,UAAU,WAAU;;;IAGhD,SAAS;MACL,QAAQ;QACJ,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;;;;EAInC,mBAAmB;IACf,QAAQ;MAAA;;IAAA;IACR,QAAQ;MACJ,QAAQ;QACJ,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;;;IAGhD,SAAS;MACL,QAAQ;QACJ,OAAO,EAAE,MAAM,QAAO;;;IAG9B,eAAe,YAAY,cAAc,UAAU,SAAS,mBAAiB;;AAEzE,OAAA,KAAA,kBAAkB,CAAC,GAAE,WAAM,GAAN,SAAW,CAAA;AAChC,wBAAkB,CAAC,EAAE,OAAO,qBAAqB;AACjD,aAAO;IACX;;EAEJ,mBAAmB;IACf,QAAQ;MAAA;;IAAA;IACR,QAAQ;MACJ,QAAQ;QACJ,GAAG,EAAE,MAAM,SAAS,UAAU,WAAU;;;IAGhD,SAAS;MACL,QAAQ;QACJ,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;;;;EAInC,mBAAmB;IACf,QAAQ;MAAA;;IAAA;IACR,QAAQ;MACJ,QAAQ;QACJ,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,WAAW,UAAU,SAAQ;QACxC,GAAG,EAAE,MAAM,YAAY,UAAU,SAAQ;QACzC,GAAG,EAAE,MAAM,YAAY,UAAU,SAAQ;QACzC,GAAG,EAAE,MAAM,YAAY,UAAU,SAAQ;QACzC,GAAG,EAAE,MAAM,YAAY,UAAU,SAAQ;QACzC,GAAG,EAAE,MAAM,YAAY,UAAU,SAAQ;QACzC,GAAG,EAAE,MAAM,YAAY,UAAU,SAAQ;;;IAGjD,SAAS;MACL,QAAQ;QACJ,OAAO,EAAE,MAAM,QAAO;;;IAG9B,eAAe,YAAY,cAAc,UAAU,SAAS,mBAAiB;;AAEzE,OAAA,KAAA,kBAAkB,CAAC,GAAE,WAAM,GAAN,SAAW,CAAA;AAChC,wBAAkB,CAAC,EAAE,OAAO,qBAAqB;AACjD,aAAO;IACX;;EAEJ,mBAAmB;IACf,QAAQ;MAAA;;IAAA;IACR,eAAe,CAAA;IACf,QAAQ;MACJ,QAAQ;QACJ,GAAG,EAAE,MAAM,SAAS,UAAU,SAAQ;;;IAG9C,SAAS;MACL,QAAQ;QACJ,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;QACvB,KAAK,EAAE,MAAM,WAAU;QACvB,MAAM,EAAE,MAAM,YAAW;QACzB,MAAM,EAAE,MAAM,YAAW;QACzB,MAAM,EAAE,MAAM,YAAW;QACzB,MAAM,EAAE,MAAM,YAAW;QACzB,MAAM,EAAE,MAAM,YAAW;QACzB,MAAM,EAAE,MAAM,YAAW;;;;EAIrC,YAAY;IACR,QAAQ;MAAA;;IAAA;IACR,QAAQ;MACJ,QAAQ;QACJ,GAAG,EAAE,MAAM,IAAG;;;IAGtB,SAAS;MACL,QAAQ;QACJ,OAAO,EAAE,MAAM,QAAO;;;IAG9B,eAAe,YAAY,cAAc,UAAU,SAAS,mBAAmB,SAAO;;AAElF,OAAA,KAAA,kBAAkB,CAAC,GAAE,WAAM,GAAN,SAAW,CAAA;AAEhC,YAAM,WAAW,kBAAkB,CAAC,EAAE,WAAW,CAAC;AAClD,wBAAkB,CAAC,EAAE,OAAO,YAAY,QAAQ,kBAAkB,SAAS,QAAQ,GAAG,QAAI;AAC1F,aAAO;IACX;;EAEJ,YAAY;IACR,QAAQ;MAAA;;IAAA;IACR,QAAQ;MACJ,QAAQ;QACJ,GAAG,EAAE,MAAM,IAAG;QACd,GAAG,EAAE,MAAM,IAAG;;;IAGtB,SAAS;MACL,QAAQ;QACJ,OAAO,EAAE,MAAM,QAAO;;;IAG9B,eAAe,YAAY,cAAc,UAAU,SAAS,mBAAmB,SAAO;;AAElF,OAAA,KAAA,kBAAkB,CAAC,GAAE,WAAM,GAAN,SAAW,CAAA;AAEhC,YAAM,YAAY,kBAAkB,CAAC,EAAE,WAAW,CAAC;AACnD,YAAM,YAAY,kBAAkB,CAAC,EAAE,WAAW,CAAC;AACnD,wBAAkB,CAAC,EAAE,OAAO,YACxB,QAAQ,kBAAkB,UAAU,QAAQ,GAAG,QAAQ,QAAQ,kBAAkB,UAAU,QAAQ,GAAG,QAAI;AAC9G,aAAO;IACX;;EAEJ,WAAW;IACP,QAAQ;MAAA;;IAAA;IACR,QAAQ;MACJ,QAAQ;QACJ,GAAG,EAAE,MAAM,IAAG;QACd,GAAG,EAAE,MAAM,IAAG;;;IAGtB,SAAS;MACL,QAAQ;QACJ,OAAO,EAAE,MAAM,QAAO;;;IAG9B,eAAe,YAAY,cAAc,UAAU,SAAS,mBAAmB,SAAO;;AAElF,OAAA,KAAA,kBAAkB,CAAC,GAAE,WAAM,GAAN,SAAW,CAAA;AAEhC,YAAM,YAAY,kBAAkB,CAAC,EAAE,WAAW,CAAC;AACnD,YAAM,YAAY,kBAAkB,CAAC,EAAE,WAAW,CAAC;AACnD,wBAAkB,CAAC,EAAE,OAAO,YACxB,QAAQ,kBAAkB,UAAU,QAAQ,GAAG,QAAQ,QAAQ,kBAAkB,UAAU,QAAQ,GAAG,QAAI;AAC9G,aAAO;IACX;;EAEJ,YAAY;IACR,QAAQ;MAAA;;IAAA;IACR,QAAQ;MACJ,QAAQ;QACJ,GAAG,EAAE,MAAM,IAAG;QACd,GAAG,EAAE,MAAM,IAAG;;;IAGtB,SAAS;MACL,QAAQ;QACJ,OAAO,EAAE,MAAM,QAAO;;;IAG9B,eAAe,YAAY,cAAc,UAAU,SAAS,mBAAmB,SAAO;;AAElF,OAAA,KAAA,kBAAkB,CAAC,GAAE,WAAM,GAAN,SAAW,CAAA;AAEhC,YAAM,YAAY,kBAAkB,CAAC,EAAE,WAAW,CAAC;AACnD,YAAM,YAAY,kBAAkB,CAAC,EAAE,WAAW,CAAC;AACnD,wBAAkB,CAAC,EAAE,OAAO,YACxB,QAAQ,kBAAkB,UAAU,QAAQ,GAAG,QAAQ,QAAQ,kBAAkB,UAAU,QAAQ,GAAG,QAAI;AAC9G,aAAO;IACX;;EAEJ,YAAY,sBAAqB,mCAAwC,CAAC,KAAK,GAAG,CAAC;EACnF,YAAY,sBAAqB,kCAAuC,CAAC,KAAK,GAAG,CAAC;EAClF,YAAY;IAAqB;;EAAA;EACjC,YAAY;IAAqB;;EAAA;EACjC,eAAe;IAAqB;;EAAA;EACpC,YAAY;IAAqB;;EAAA;EACjC,YAAY;IAAqB;;EAAA;EACjC,kBAAkB;IAAqB;;EAAA;EACvC,oBAAoB;IAAqB;;EAAA;EACzC,kBAAkB;IAAqB;;EAAA;EACvC,mBAAmB;IAAqB;;EAAA;EACxC,mBAAmB;IAAqB;;EAAA;EACxC,oBAAoB;IAAqB;;EAAA;;EAGzC,iBAAiB;IACb,QAAQ;MAAA;;IAAA;IACR,eAAe,WAAW,cAAc,UAAU,SAAS,mBAAiB;AACxE,YAAM,mBAAmB,kBAAkB,CAAC;AAC5C,uBAAiB,WAAjB,iBAAiB,SAAW,CAAA;AAC5B,uBAAiB,OAAO,oBAAoB,OAAO,KAAK,UAAU,SAAS,CAAA,CAAE,EAAE;AAC/E,uBAAiB,cAAc,QAAQ,CAAC,QAAQ,UAAS;AACrD,eAAO,OAAO,SAAS;MAC3B,CAAC;AACD,aAAO;IACX;;EAEJ,eAAe;IACX,QAAQ;MAAA;;IAAA;IACR,SAAS;MACL,OAAO;QACH,MAAM,EAAE,MAAM,SAAQ;QACtB,OAAO,EAAE,MAAM,UAAS;;;;EAIpC,eAAe;IACX,QAAQ;MAAA;;IAAA;IACR,eAAe;MACX,OAAO,EAAE,MAAM,SAAS,WAAW,MAAM,cAAc,CAAA,EAAE;;IAE7D,QAAQ;MACJ,QAAQ;QACJ,WAAW,EAAE,MAAM,OAAM;QACzB,SAAS,EAAE,MAAM,UAAS;;;IAGlC,WAAW,WAAS;AAChB,UAAI,UAAU,iBAAiB,UAAU,cAAc,OAAO;AAC1D,cAAM,QAAQ,UAAU,cAAc,MAAM;AAC5C,cAAM,eAAe,MAAM,MAAM,CAAC,cAAa;AAE3C,iBAAO,OAAO,cAAc,YAAY,UAAU,KAAK,UAAU,SAAQ,CAAE;QAC/E,CAAC;AACD,YAAI,CAAC,cAAc;AACf,iBAAO,KAAK,6DAA6D;AACzE,oBAAU,cAAc,MAAM,QAAQ,CAAA;AACtC,iBAAO,EAAE,OAAO,KAAI;QACxB;AAEA,cAAM,cAAc,IAAI,IAAI,KAAK;AACjC,kBAAU,cAAc,MAAM,QAAQ,MAAM,KAAK,WAAW;MAChE;AACA,aAAO,EAAE,OAAO,KAAI;IACxB;IACA,eAAe,WAAW,aAAa,UAAU,SAAS,mBAAiB;AAEvE,UAAI,YAAY,OAAO,iBAAiB,CAAC,UAAU,SAAS,OAAO,KAAK,UAAU,KAAK,EAAE,WAAW,GAAG;AACnG,cAAM,IAAI,MAAM,mEAAmE;MACvF;AACA,YAAM,mBAAmB,kBAAkB,CAAC;AAC5C,uBAAiB,cAAc,QAAQ,CAAC,WAAU;AAC9C,YAAI,OAAO,SAAS,WAAW;AAC3B,iBAAO,OAAO,SAAS,OAAO;QAClC;MACJ,CAAC;AACD,aAAO;IACX;;EAEJ,cAAc;IACV,QAAQ;MAAA;;IAAA;IACR,SAAS;MACL,OAAO;QACH,UAAU,EAAE,MAAM,gBAAe;;;;EAI7C,YAAY;IACR,QAAQ;MAAA;;IAAA;IACR,eAAe;MACX,cAAc,EAAE,MAAM,gBAAgB,UAAU,UAAU,WAAW,MAAM,cAAc,EAAC;;IAE9F,QAAQ;MACJ,QAAQ;QACJ,YAAY,EAAE,MAAM,cAAc,UAAU,SAAQ;QACpD,UAAU,EAAE,MAAM,YAAY,UAAU,SAAQ;;;IAGxD,SAAS;MACL,QAAQ;QACJ,OAAO,EAAE,MAAM,QAAO;;MAE1B,OAAO;QACH,UAAU,EAAE,MAAM,gBAAe;;;IAGzC,eAAe,YAAY,cAAc,UAAU,SAAS,mBAAiB;AACzE,YAAM,mBAAmB,kBAAkB,CAAC;AAC5C,uBAAiB,WAAjB,iBAAiB,SAAW,CAAA;AAC5B,uBAAiB,OAAO,6BAA6B;AACrD,aAAO;IACX;;EAEJ,YAAY;IACR,QAAQ;MAAA;;IAAA;IACR,eAAe,CAAA;IACf,QAAQ;MACJ,QAAQ;QACJ,GAAG,EAAE,MAAM,iBAAiB,UAAU,SAAQ;;;IAGtD,SAAS;MACL,QAAQ;QACJ,cAAc,EAAE,MAAM,iBAAgB;;;;EAIlD,kBAAkB;IACd,QAAQ;MAAA;;IAAA;IACR,eAAe;MACX,UAAU,EAAE,MAAM,YAAY,UAAU,WAAW,WAAW,MAAM,cAAc,MAAK;MACvF,QAAQ,EAAE,MAAM,UAAU,UAAU,WAAW,WAAW,MAAM,cAAc,MAAK;;IAEvF,eAAe,WAAW,aAAa,UAAU,SAAS,mBAAiB;AACvE,UAAI,YAAY,OAAO,oBAAoB,CAAC,UAAU,SAAS,OAAO,KAAK,UAAU,KAAK,EAAE,WAAW,GAAG;AACtG,cAAM,IAAI,MAAM,iFAAiF;MACrG;AACA,YAAM,mBAAmB,kBAAkB,CAAC;AAC5C,uBAAiB,WAAjB,iBAAiB,SAAW,CAAA;AAC5B,uBAAiB,OAAO,oBAAoB,OAAO,KAAK,UAAU,KAAK,EAAE;AACzE,uBAAiB,cAAc,QAAQ,CAAC,QAAQ,UAAS;AACrD,eAAO,OAAO,SAAS;MAC3B,CAAC;AACD,aAAO;IACX;;EAEJ,gBAAgB;IACZ,QAAQ;MAAA;;IAAA;IACR,eAAe;MACX,YAAY,EAAE,MAAM,oBAAoB,UAAU,UAAU,WAAW,MAAM,cAAc,EAAC;;IAEhG,QAAQ;MACJ,OAAO;QACH,OAAO,EAAE,MAAM,QAAO;QACtB,aAAa,EAAE,MAAM,QAAO;;;IAGpC,WAAW,WAAS;AAEhB,UAAI,OAAO,UAAU,eAAe,YAAY,MAAM,CAAC,MAAM,UAAU;AACnE,kBAAU,gBAAgB,UAAU,iBAAiB;UACjD,YAAY,EAAE,OAAO,CAAC,CAAC,EAAC;;AAE5B,kBAAU,cAAc,WAAW,QAAQ,CAAC,CAAC;MACjD;AACA,aAAO,EAAE,OAAO,KAAI;IACxB;;EAEJ,iBAAiB;IACb,QAAQ;MAAA;;IAAA;IACR,SAAS;MACL,OAAO;QACH,KAAK,EAAE,MAAM,QAAO;;;;EAIhC,iBAAiB;IACb,QAAQ;MAAA;;IAAA;IACR,SAAS;MACL,OAAO;QACH,KAAK,EAAE,MAAM,QAAO;;;;EAIhC,oBAAoB;IAChB,QAAQ;MAAA;;IAAA;;EAEZ,gBAAgB;IACZ,QAAQ;MAAA;;IAAA;IACR,WAAW,WAAS;AAChB,UAAI,CAAC,UAAU,eAAe,UAAU,OAAO;AAC3C,eAAO,MAAM,yDAAyD;AACtE,eAAO,EAAE,OAAO,OAAO,OAAO,0DAAyD;MAC3F;AACA,aAAO,EAAE,OAAO,KAAI;IACxB;IACA,eAAe;MACX,UAAU;QACN,MAAM;QACN,UAAU;QACV,eAAe;QACf,WAAW;QACX,YAAY;QACZ,gBAAgB,OAAO,QAAM;AACzB,iBAAO,CAAC,OAAO,gBAAgB,MAAM,CAAC,CAAC,CAAC;QAC5C;;;;EAIZ,gBAAgB;IACZ,QAAQ;MAAA;;IAAA;IACR,eAAe;MACX,UAAU;QACN,MAAM;QACN,UAAU;QACV,eAAe;QACf,WAAW;QACX,YAAY;QACZ,gBAAgB,OAAiB,QAAM;AACnC,iBAAO,CAAC,OAAO,gBAAgB,MAAM,CAAC,CAAC,CAAC;QAC5C;;;;EAIZ,wBAAwB;IACpB,QAAQ;MAAA;;IAAA;IACR,eAAe;MACX,WAAW;QACP,MAAM;QACN,UAAU;QACV,eAAe;QACf,WAAW;QACX,gBAAgB,OAAmB,QAAM;AACrC,iBAAO,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,MAAM,OAAO,gBAAgB,CAAC,CAAC,CAAC;QAC1D;;;IAGR,eAAe,YAAY,cAAc,UAAU,QAAQ,mBAAiB;AAExE,YAAM,wBAAwB,kBAAkB,CAAC;AACjD,4BAAsB,WAAW,QAAQ,CAAC,UAAS;AAC/C,cAAM,OAAO,OAAO,gBAAgB,CAAC,MAAM,IAAI;MACnD,CAAC;AAED,aAAO;IACX;;EAEJ,wBAAwB;IACpB,QAAQ;;;;;;;IAOR,eAAe;MACX,UAAU;QACN,MAAM;QACN,WAAW;QACX,YAAY;QACZ,gBAAgB,OAAO,QAAM;AACzB,iBAAO,CAAC,OAAO,gBAAgB,MAAM,CAAC,CAAC,CAAC;QAC5C;;MAEJ,UAAU;QACN,MAAM;QACN,WAAW;QACX,cAAc;QACd,iBAAiB,CAAC,UAAS;AACvB,cAAI,MAAM,CAAC,MAAM,MAAM;AACnB,mBAAO;cAAA;;YAAA;UACX,OAAO;AACH,mBAAO,CAAC,MAAS;UACrB;QACJ;;;IAGR,QAAQ;MACJ,QAAQ;QACJ,OAAO,EAAE,MAAM,UAAS;QACxB,UAAU,EAAE,MAAM,cAAc,UAAU,SAAQ;QAClD,IAAI;UAAE,MAAM;UAAiB,SAAO;;QAAuC;QAC3E,IAAI;UAAE,MAAM;UAAiB,SAAO;;QAAuC;;MAE/E,OAAO;QACH,IAAI;UAAE,MAAM;UAAM,SAAO;;QAAmC;;;IAGpE,SAAS;MACL,OAAO;QACH,KAAK;UAAE,MAAM;UAAS,SAAO;;QAAmC;QAChE,KAAK;UAAE,MAAM;UAAO,SAAO;;QAAmC;QAC9D,MAAM;UAAE,MAAM;UAAQ,SAAO;;QAAmC;;;IAGxE,sBAAsB;MAClB;QACI,OAAO;QACP,QAAQ;QACR,iBAAiB;QACjB,kBAAkB;QAClB,YAAY;;MAEhB;QACI,OAAO;QACP,QAAQ;QACR,iBAAiB;QACjB,kBAAkB;QAClB,YAAY;;MAEhB;QACI,OAAO;QACP,QAAQ;QACR,iBAAiB;QACjB,kBAAkB;QAClB,YAAY;;MAEhB;QACI,OAAO;QACP,QAAQ;QACR,iBAAiB;QACjB,kBAAkB;QAClB,YAAY;;;IAGpB,eAAe,WAAW,cAAc,UAAU,QAAQ,mBAAiB;;AAEvE,YAAM,+BAA+B,kBAAkB,CAAC;AACxD,YAAM,gBAAgB,UAAU,eAAe,SAAS,MAAM,CAAC;AAC/D,UAAI,OAAO,kBAAkB,UAAU;AACnC,eAAO,MAAM,gEAAgE;AAC7E,cAAM,IAAI,MAAM,gEAAgE;MACpF;AACA,YAAM,WAAW,OAAO,OAAO,gBAAgB,aAAa;AAE5D,UAAI,OAAO,6BAA6B,OAAO,cAAc,UAAU,aAAa;AAEhF,eAAO,OAAO;AACd,qCAA6B,OAAO,cAAc,QAAQ,gCAAgC,SAAS,IAAI;MAC3G;AAGA,YAAM,wBAAwB,kBAAkB,CAAC;AACjD,4BAAsB,WAAtB,sBAAsB,SAAW,CAAA;AACjC,OAAA,KAAA,sBAAsB,QAAO,aAAQ,GAAR,WAAa,CAAA;AAC1C,4BAAsB,OAAO,SAAS,QAAQ,OAAO,gBAAgB,aAAa;AAGlF,OAAA,KAAA,kBAAkB,CAAC,GAAE,WAAM,GAAN,SAAW,CAAA;AAEhC,aAAO;IACX;;EAEJ,eAAe;IACX,QAAQ;MAAA;MAAA;;IAAA;IACR,eAAe;MACX,SAAS;QAAE,MAAM;QAAe,SAAO;;MAAuC;;IAElF,QAAQ;MACJ,QAAQ;QACJ,aAAa;UAAE,MAAM;UAAM,SAAO;;QAAuC;;;IAGjF,sBAAsB;MAClB;QACI,OAAO;QACP,QAAQ;QACR,iBAAiB;QACjB,kBAAkB;QAClB,YAAY;;MAEhB;QACI,OAAO;QACP,QAAQ;QACR,iBAAiB;QACjB,kBAAkB;QAClB,YAAY;;MAEhB;QACI,OAAO;QACP,QAAQ;QACR,iBAAiB;QACjB,kBAAkB;QAClB,YAAY;;;IAGpB,eAAe,WAAW,cAAc,UAAU,QAAQ,mBAAiB;AACvE,wBAAkB,QAAQ,CAAC,qBAAoB;AAE3C,YAAI,iBAAiB,cAAS,mCAA4C;AACtE,2BAAiB,WAAjB,iBAAiB,SAAW,CAAA;AAC5B,2BAAiB,OAAO,cAAc;QAC1C;MACJ,CAAC;AACD,aAAO;IACX;;EAEJ,eAAe;IACX,QAAQ;MAAA;MAAA;;IAAA;IACR,eAAe;MACX,SAAS;QAAE,MAAM;QAAe,SAAO;;MAAuC;;IAElF,QAAQ;MACJ,QAAQ;;QAEJ,OAAO,EAAE,MAAM,QAAO;QACtB,aAAa;UAAE,MAAM;UAAM,SAAO;;QAAuC;;;IAGjF,SAAS;MACL,OAAO;QACH,KAAK,EAAE,MAAM,QAAO;;;IAG5B,sBAAsB;MAClB;QACI,OAAO;QACP,QAAQ;QACR,iBAAiB;QACjB,kBAAkB;QAClB,YAAY;;MAEhB;QACI,OAAO;QACP,QAAQ;QACR,iBAAiB;QACjB,kBAAkB;QAClB,YAAY;;MAEhB;QACI,OAAO;QACP,QAAQ;QACR,iBAAiB;QACjB,kBAAkB;QAClB,YAAY;;;IAGpB,eAAe,WAAW,cAAc,UAAU,QAAQ,mBAAiB;AACvE,wBAAkB,QAAQ,CAAC,qBAAoB;AAE3C,YAAI,iBAAiB,cAAS,mCAA4C;AACtE,2BAAiB,WAAjB,iBAAiB,SAAW,CAAA;AAC5B,2BAAiB,OAAO,cAAc;QAC1C;MACJ,CAAC;AACD,aAAO;IACX;;EAEJ,uBAAuB;;IAEnB,QAAQ;MAAA;MAAA;MAAA;MAAA;;IAAA;IACR,eAAe;MACX,SAAS;QAAE,MAAM;QAAe,SAAO;;MAAuC;;IAElF,QAAQ;MACJ,QAAQ;QACJ,OAAO,EAAE,MAAM,UAAS;QACxB,aAAa;UAAE,MAAM;UAAM,SAAO;;QAAuC;QACzE,UAAU;UAAE,MAAM;UAAc,UAAU;;QAA+B;QACzE,IAAI;UAAE,MAAM;UAAiB,SAAO;;QAAuC;QAC3E,IAAI;UAAE,MAAM;UAAiB,SAAO;;QAAuC;;MAE/E,OAAO;QACH,IAAI;UAAE,MAAM;UAAM,SAAO;;QAAmC;;;IAGpE,SAAS;MACL,OAAO;QACH,KAAK;UAAE,MAAM;UAAS,SAAO;;QAAmC;QAChE,KAAK;UAAE,MAAM;UAAO,SAAO;;QAAmC;QAC9D,MAAM;UAAE,MAAM;UAAQ,SAAO;;QAAmC;;;IAGxE,sBAAsB;MAClB;QACI,OAAO;QACP,QAAQ;QACR,iBAAiB;QACjB,kBAAkB;QAClB,YAAY;;MAEhB;QACI,OAAO;QACP,QAAQ;QACR,iBAAiB;QACjB,kBAAkB;QAClB,YAAY;;MAEhB;QACI,OAAO;QACP,QAAQ;QACR,iBAAiB;QACjB,kBAAkB;QAClB,YAAY;;MAEhB;QACI,OAAO;QACP,QAAQ;QACR,iBAAiB;QACjB,kBAAkB;QAClB,YAAY;;MAEhB;QACI,OAAO;QACP,QAAQ;QACR,iBAAiB;QACjB,kBAAkB;QAClB,YAAY;;MAEhB;QACI,OAAO;QACP,QAAQ;QACR,iBAAiB;QACjB,kBAAkB;QAClB,YAAY;;;IAGpB,eAAe,WAAW,cAAc,UAAU,QAAQ,mBAAiB;AACvE,wBAAkB,QAAQ,CAAC,qBAAoB;AAE3C,YAAI,iBAAiB,cAAS,mCAA4C;AACtE,2BAAiB,WAAjB,iBAAiB,SAAW,CAAA;AAC5B,2BAAiB,OAAO,cAAc;QAC1C,WAAW,iBAAiB,cAAS,+BAA6C;AAC9E,2BAAiB,WAAjB,iBAAiB,SAAW,CAAA;AAC5B,iBAAO,KAAK,UAAU,UAAU,CAAA,CAAE,EAAE,QAAQ,CAAC,QAAO;AAChD,kBAAM,QAAQ,UAAU,SAAS,GAAG;AACpC,gBAAI,QAAQ,WAAW,OAAO;AAE1B,oBAAM,OAAO,MAAM;AACnB,kBAAI,SAAS,QAAW;AACpB,iCAAiB,OAAO,gBAAgB,OAAO,OAAO,MAAM,IAAI,EAAE;cACtE;YACJ;UACJ,CAAC;QACL;MACJ,CAAC;AACD,aAAO;IACX;;EAEJ,mBAAmB;IACf,QAAQ,CAAA,+BAAA,4BAAoE,6CAA6C;IACzH,QAAQ;MACJ,QAAQ;QACJ,WAAW;UAAE,MAAM;UAAS,UAAU;UAAU,SAAO;;QAAgC;QACvF,OAAO,EAAE,MAAM,SAAS,UAAU,SAAQ;QAC1C,WAAW,EAAE,MAAM,QAAQ,UAAU,UAAU,iBAAiB,CAAC,MAAgB,WAAW,CAAC,KAAK,CAAC,IAAI,OAAO,mBAAmB,EAAC;QAClI,SAAS,EAAE,MAAM,MAAM,UAAU,UAAU,iBAAiB,CAAC,MAAgB,WAAW,CAAC,KAAK,CAAC,IAAI,OAAO,mBAAmB,EAAC;;;IAGtI,SAAS;MACL,OAAO;QACH,KAAK,EAAE,MAAM,QAAO;;;IAG5B,sBAAsB;MAClB;QACI,OAAO;QACP,QAAQ;QACR,iBAAiB;QACjB,kBAAkB;QAClB,YAAY;;MAEhB;QACI,OAAO;QACP,QAAQ;QACR,iBAAiB;QACjB,kBAAkB;QAClB,YAAY;;;IAGpB,eAAe,YAAY,cAAc,UAAU,SAAS,mBAAmB,UAAU,YAAU;AAE/F,YAAM,mBAAmB,kBAAkB,kBAAkB,SAAS,CAAC;AACvE,uBAAiB,WAAjB,iBAAiB,SAAW,CAAA;AAC5B,uBAAiB,OAAO,OAAO;AAC/B,aAAO;IACX;;EAEJ,kBAAkB;IACd,QAAQ,CAAA,+BAAA,4BAAoE,6CAA6C;IACzH,QAAQ;MACJ,QAAQ;QACJ,WAAW;UAAE,MAAM;UAAS,UAAU;UAAU,SAAO;;QAAgC;;;IAG/F,SAAS;MACL,OAAO;QACH,KAAK,EAAE,MAAM,QAAO;;;IAG5B,sBAAsB;MAClB;QACI,OAAO;QACP,QAAQ;QACR,iBAAiB;QACjB,kBAAkB;QAClB,YAAY;;MAEhB;QACI,OAAO;QACP,QAAQ;QACR,iBAAiB;QACjB,kBAAkB;QAClB,YAAY;;;IAGpB,eAAe,YAAY,cAAc,UAAU,SAAS,mBAAmB,UAAU,YAAU;AAE/F,YAAM,mBAAmB,kBAAkB,kBAAkB,SAAS,CAAC;AACvE,uBAAiB,WAAjB,iBAAiB,SAAW,CAAA;AAC5B,uBAAiB,OAAO,OAAO;AAC/B,aAAO;IACX;;EAEJ,oBAAoB;IAChB,QAAQ,CAAA,+BAAA,4BAAoE,6CAA6C;IACzH,eAAe,CAAA;IACf,QAAQ;MACJ,QAAQ;QACJ,WAAW;UAAE,MAAM;UAAS,UAAU;UAAU,SAAO;;QAAgC;QACvF,UAAU,EAAE,MAAM,eAAe,UAAU,UAAU,iBAAiB,CAAC,MAAgB,WAAW,CAAC,KAAK,CAAC,IAAI,OAAO,mBAAmB,EAAC;;;IAGhJ,SAAS;MACL,OAAO;QACH,KAAK,EAAE,MAAM,QAAO;;;IAG5B,sBAAsB;MAClB;QACI,OAAO;QACP,QAAQ;QACR,iBAAiB;QACjB,kBAAkB;QAClB,YAAY;;MAEhB;QACI,OAAO;QACP,QAAQ;QACR,iBAAiB;QACjB,kBAAkB;QAClB,YAAY;;;IAGpB,eAAe,YAAY,cAAc,UAAU,SAAS,mBAAmB,UAAU,YAAU;AAE/F,YAAM,mBAAmB,kBAAkB,kBAAkB,SAAS,CAAC;AACvE,uBAAiB,WAAjB,iBAAiB,SAAW,CAAA;AAC5B,uBAAiB,OAAO,OAAO;AAC/B,aAAO;IACX;;EAEJ,eAAe;IACX,QAAQ;MAAA;;IAAA;IACR,eAAe;MACX,OAAO,EAAE,MAAM,SAAS,WAAW,MAAM,cAAc,CAAA,EAAE;;IAE7D,QAAQ;MACJ,QAAQ;QACJ,WAAW,EAAE,MAAM,OAAM;;;IAGjC,WAAW,WAAS;AAChB,UAAI,UAAU,iBAAiB,UAAU,cAAc,OAAO;AAC1D,cAAM,QAAQ,UAAU,cAAc,MAAM;AAC5C,cAAM,eAAe,MAAM,MAAM,CAAC,cAAa;AAE3C,iBAAO,OAAO,cAAc,YAAY,UAAU,KAAK,UAAU,SAAQ,CAAE;QAC/E,CAAC;AACD,YAAI,CAAC,cAAc;AACf,iBAAO,KAAK,6DAA6D;AACzE,oBAAU,cAAc,MAAM,QAAQ,CAAA;AACtC,iBAAO,EAAE,OAAO,KAAI;QACxB;AAEA,cAAM,cAAc,IAAI,IAAI,KAAK;AACjC,kBAAU,cAAc,MAAM,QAAQ,MAAM,KAAK,WAAW;MAChE;AACA,aAAO,EAAE,OAAO,KAAI;IACxB;IACA,eAAe,YAAY,cAAc,UAAU,SAAS,mBAAiB;AACzE,YAAM,mBAAmB,kBAAkB,CAAC;AAC5C,uBAAiB,WAAW,QAAQ,CAAC,UAAS;AAC1C,YAAI,MAAM,SAAS,aAAa,MAAM,SAAS,QAAQ;AACnD,gBAAM,OAAO,QAAQ,MAAM;QAC/B;MACJ,CAAC;AACD,uBAAiB,WAAjB,iBAAiB,SAAW,CAAA;AAC5B,uBAAiB,OAAO,uBAAuB;AAC/C,aAAO;IACX;;EAEJ,aAAa;IACT,QAAQ;MAAA;;IAAA;IACR,eAAe;MACX,SAAS,EAAE,MAAM,mBAAmB,WAAW,KAAI;;;;AAK/D,SAAS,sBAAsB,MAA2B,SAAmB,CAAC,GAAG,GAAG,WAAmB;AACnG,SAAO;IACH,QAAQ,CAAC,IAAI;IACb,QAAQ;MACJ,QAAQ,OAAO,OACX,CAAC,KAAK,UAAS;AACX,YAAI,KAAK,IAAI,EAAE,MAAM,MAAK;AAC1B,eAAO;MACX,GACA,CAAA,CAAyC;;IAGjD,SAAS;MACL,QAAQ;QACJ,OAAO,EAAE,MAAM,QAAO;;;IAG9B,eAAe,WAAW,cAAc,UAAU,SAAS,mBAAiB;;AACxE,UAAI,WAAW;AAEX,SAAA,KAAA,kBAAkB,CAAC,GAAE,WAAM,GAAN,SAAW,CAAA;AAChC,0BAAkB,CAAC,EAAE,OAAO,gCAAgC;AAG5D,YAAIE,QAAO;AACX,eAAO,KAAK,UAAU,UAAU,CAAA,CAAE,EAAE,KAAK,CAAC,UAAS;AAC/C,cAAI,UAAU,SAAS,KAAK,EAAE,SAAS,QAAW;AAC9C,YAAAA,QAAO,UAAU,OAAO,KAAK,EAAE;AAC/B,mBAAO;UACX;AACA,iBAAO;QACX,CAAC;AACD,YAAIA,UAAS,IAAI;AACb,4BAAkB,CAAC,EAAE,OAAO,OAAO,QAAQ,OAAO,MAAMA,KAAI,EAAE;QAClE;MACJ;AACA,aAAO;IACX;IACA,WAAW,WAAS;AAChB,UAAI,WAAW;AAEX,eAAO,cAAc,SAAS;MAClC;AACA,aAAO,EAAE,OAAO,KAAI;IACxB;;AAER;AAEA,SAAS,cAAc,WAAiC;AACpD,MAAI,UAAU,QAAQ;AAClB,UAAM,QAAQ,OAAO,KAAK,UAAU,MAAM,EACrC,IAAI,CAAC,QAAQ,UAAU,OAAQ,GAAG,EAAE,IAAI,EACxC,OAAO,CAAC,SAAS,SAAS,MAAS;AACxC,UAAM,cAAc,MAAM,MAAM,CAAC,SAAS,SAAS,MAAM,CAAC,CAAC;AAC3D,QAAI,CAAC,aAAa;AACd,aAAO,EAAE,OAAO,OAAO,OAAO,sCAAqC;IACvE;EACJ;AACA,SAAO,EAAE,OAAO,KAAI;AACxB;AAEM,SAAU,iCAA8B;AAC1C,SAAO,OAAO,KAAK,sBAAsB;AAC7C;;;AC1nDO,IAAM,wBAET;EACA,OAAO,EAAE,QAAQ,GAAG,eAAa,UAAyB,aAAa,SAAQ;EAC/E,MAAM,EAAE,QAAQ,GAAG,eAAa,WAA0B,aAAa,UAAS;EAChF,QAAQ,EAAE,QAAQ,GAAG,eAAa,WAA0B,aAAa,SAAQ;EACjF,QAAQ,EAAE,QAAQ,GAAG,eAAa,WAA0B,aAAa,SAAQ;EACjF,QAAQ,EAAE,QAAQ,GAAG,eAAa,WAA0B,aAAa,SAAQ;EACjF,UAAU,EAAE,QAAQ,IAAI,eAAa,UAAyB,aAAa,SAAQ;EACnF,UAAU,EAAE,QAAQ,GAAG,eAAa,YAA2B,aAAa,SAAQ;EACpF,UAAU,EAAE,QAAQ,GAAG,eAAa,YAA2B,aAAa,SAAQ;EACpF,KAAK,EAAE,QAAQ,GAAG,eAAa,oBAA0B,aAAa,SAAQ;;AAG5E,IAAO,sCAAP,MAA0C;EAY5C,YACY,qBACA,OACD,sBAA8B,IAAE;AAF/B,SAAA,sBAAA;AACA,SAAA,QAAA;AACD,SAAA,sBAAA;AAVH,SAAA,SAAiG,CAAA;AACjG,SAAA,YAAwF,CAAA;AACxF,SAAA,mBAA6D,CAAA;AAC7D,SAAA,UAAgC,CAAA;AAChC,SAAA,yBAAiC;AACjC,SAAA,SAA+E,CAAA;AAQnF,SAAK,YAAW;AAEhB,SAAK,mBAAkB;AACvB,SAAK,gBAAe;AACpB,SAAK,aAAY;AACjB,SAAK,YAAW;EACpB;EAEA,IAAW,SAAM;AACb,WAAO;MACH,OAAO,KAAK;MACZ,UAAU,KAAK;MACf,iBAAiB,KAAK;MACtB,QAAQ,KAAK;MACb,OAAO,KAAK;;EAEpB;EAEQ,cAAW;AACf,QAAI,CAAC,KAAK,oBAAoB,OAAO;AACjC;IACJ;AACA,eAAW,QAAQ,KAAK,oBAAoB,OAAO;AAC/C,WAAK,OAAO,KAAK,sBAAsB,KAAK,SAAS,CAAC;IAC1D;EACJ;EAEQ,qBAAkB;AACtB,QAAI,CAAC,KAAK,oBAAoB,cAAc;AACxC;IACJ;AACA,eAAW,eAAe,KAAK,oBAAoB,cAAc;AAE7D,YAAM,UAAU,yBAAyB,WAAW;AAEpD,UAAI,CAAC,SAAS;AACV,eAAO,MAAM,CAAC,oCAAoC,WAAW,CAAC;AAC9D,cAAM,IAAI,MAAM,4BAA4B;MAChD;AACA,WAAK,UAAU,KAAK;QAChB,kBAAkB;QAClB,mBAAmB,YAAY,YAAY,YAAY,KAAK,MAAM,YAAY,YAAY,YAAY;OACzG;IACL;EACJ;EAEQ,kBAAe;AACnB,QAAI,CAAC,KAAK,oBAAoB,WAAW;AACrC;IACJ;AACA,eAAW,YAAY,KAAK,oBAAoB,WAAW;AACvD,YAAM,SAAS,KAAK,eAAe,QAAQ;AAE3C,WAAK,iBAAiB,KAAK,MAAM;IACrC;EACJ;EAEQ,eAAe,UAAsC,eAAgF;AACzI,UAAM,OAAO,KAAK,OAAO,SAAS,IAAI;AACtC,QAAI,CAAC,MAAM;AACP,aAAO,MAAM,CAAC,8BAA8B,QAAQ,CAAC;AACrD,YAAM,IAAI,MAAM,yBAAyB;IAC7C;AACA,QAAI,SAAS,OAAO;AAChB,UAAI,SAAS,MAAM,WAAW,KAAK,QAAQ;AACvC,eAAO,MAAM,CAAC,qCAAqC,UAAU,IAAI,CAAC;AAClE,cAAM,IAAI,MAAM,yBAAyB;MAC7C;IACJ;AACA,UAAM,QAAQ,SAAS,SAAS,CAAA;AAChC,QAAI,CAAC,MAAM,QAAQ;AACf,cAAQ,KAAK,eAAe;QACxB,KAAA;AACI,gBAAM,KAAK,KAAK;AAChB;QACJ,KAAA;AACI,gBAAM,KAAK,CAAC;AACZ;QACJ,KAAA;AACI,gBAAM,KAAK,GAAG;AACd;QACJ,KAAA;AACI,gBAAM,KAAK,KAAK,GAAG;AACnB;QACJ,KAAA;AACI,gBAAM,KAAK,KAAK,KAAK,GAAG;AACxB;QACJ,KAAA;QACA,KAAA;QACA,KAAA;AACI,gBAAM,KAAK,KAAK,GAAG,CAAC;AACpB;QACJ,KAAA;AACI,gBAAM,KAAK,KAAK,GAAG,EAAE;AACrB;QACJ,KAAA;AACI,gBAAM,KAAK,KAAK,GAAG,CAAC;AACpB;QACJ;AACI;MACR;IACJ;AAEA,QAAI,KAAK,gBAAgB,YAAY,OAAO,MAAM,CAAC,MAAM,UAAU;AAC/D,YAAM,CAAC,IAAI,WAAW,MAAM,CAAC,CAAC;IAClC;AACA,WAAO,EAAE,MAAM,KAAK,eAAe,OAAO,gBAAgB,cAAc,OAAO,IAAI,IAAI,MAAK;EAChG;EAEQ,eAAY;AAChB,QAAI,CAAC,KAAK,oBAAoB,QAAQ;AAClC;IACJ;AACA,eAAW,SAAS,KAAK,oBAAoB,QAAQ;AACjD,YAAM,YAAgC;QAClC,SAAS,MAAM,MAAM,mBAAmB,KAAK;;AAEjD,UAAI,MAAM,QAAQ;AACd,kBAAU,YAAY,OAAO,KAAK,MAAM,MAAM,EAAE,IAAI,CAAC,QAAO;AACxD,gBAAM,aAAa,MAAM,SAAS,GAAG;AACrC,cAAI,CAAC,YAAY;AACb,mBAAO,MAAM,CAAC,gCAAgC,GAAG,CAAC;AAClD,kBAAM,IAAI,MAAM,sBAAsB;UAC1C;AACA,gBAAM,OAAO,KAAK,OAAO,WAAW,IAAI;AACxC,cAAI,CAAC,MAAM;AACP,mBAAO,MAAM,CAAC,iCAAiC,UAAU,CAAC;AAC1D,kBAAM,IAAI,MAAM,sBAAsB;UAC1C;AACA,gBAAM,QAAQ,OAAO,WAAW,UAAU,cAAc,KAAK,eAAe,UAAU,IAAI;AAC1F,iBAAO;YACH,IAAI;YACJ,MAAM,KAAK;YACX,WAAW;YACX;;QAER,CAAC;MACL;AACA,WAAK,QAAQ,KAAK,SAAS;IAC/B;EACJ;EAEQ,cAAW;AACf,QAAI,CAAC,KAAK,oBAAoB,OAAO;AACjC;IACJ;AACA,eAAW,QAAQ,KAAK,oBAAoB,OAAO;AAE/C,UAAI,OAAO,KAAK,gBAAgB,UAAU;AACtC,eAAO,MAAM,CAAC,iCAAiC,IAAI,CAAC;AACpD,cAAM,IAAI,MAAM,qBAAqB;MACzC;AACA,YAAM,UAAU,KAAK,UAAU,KAAK,WAAW;AAC/C,UAAI,CAAC,SAAS;AACV,eAAO,MAAM,CAAC,6BAA6B,IAAI,CAAC;AAChD,cAAM,IAAI,MAAM,qBAAqB;MACzC;AACA,UAAI,QAAQ,iBAAiB,YAAY;AACrC,cAAM,mBAAmB,QAAQ,iBAAiB,WAAW,MAAM,KAAK,qBAAqB,KAAK,KAAK;AACvG,YAAI,CAAC,iBAAiB,OAAO;AACzB,gBAAM,IAAI,MAAM,uCAAuC,KAAK,oBAAoB,eAAe,KAAK,WAAW,EAAE,EAAE,MAAM,iBAAiB,KAAK,EAAE;QACrJ;MACJ;AACA,YAAM,SAAsC,CAAA;AAE5C,iBAAW,aAAa,QAAQ,iBAAiB,QAAQ;AACrD,cAAM,QAAQ,KAAK,eAAe,WAAW,QAAQ,iBAAiB;AACtE,aAAK,wBAAwB,MAAM,OAAO,QAAQ,kBAAkB,SAAS;AAC7E,eAAO,KAAK,KAAK;MACrB;AACA,WAAK,OAAO,KAAK,EAAE,QAAQ,mBAAmB,QAAQ,kBAAiB,CAAE;IAC7E;EACJ;EAEQ,eAAe,WAAmB,MAAY;AAClD,UAAM,WAAW,WAAU;AAC3B,UAAM,aAA+C,CAAA;AACrD,UAAM,cAAgD,CAAA;AACtD,UAAM,eAAiD,CAAA;AACvD,UAAM,gBAAkD,CAAA;AACxD,UAAM,SAAuC,CAAA;AAC7C,UAAM,WAAW,CAAA;AACjB,WAAO;MACH;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;EAER;EAEQ,wBAAwB,MAA8B,OAAkC,aAAsC,WAAuC;AACzK,UAAM,gBAAgB,MAAM;AAC5B,QAAI,KAAK,eAAe;AACpB,YAAM,OAAO,OAAO,KAAK,KAAK,aAAa;AAC3C,iBAAW,OAAO,MAAM;AACpB,cAAM,QAAQ,KAAK,gBAAgB,GAAG;AAEtC,YAAI,CAAC,OAAO;AACR,iBAAO,MAAM,CAAC,yCAAyC,GAAG,CAAC;AAC3D,gBAAM,IAAI,MAAM,kCAAkC;QACtD;AACA,cAAM,gBAAgB,YAAY,gBAAgB,GAAG;AACrD,cAAM,iBAAiB,iBAAiB,cAAc,UAAU,cAAc,YAAY,YAAY,YAAY,OAAO,QAAQ,SAAS,MAAM;AAChJ,YAAI,gBAAgB;AAEhB,gBAAM,YAAY,eAAe,QAAQ;AACzC,eAAK,CAAC,SAAS,OAAO,MAAM,UAAU,gBAAgB,OAAO,eAAe,iBAAiB,aAAa;AACtG,0BAAc,SAAS,IAAI;cACvB,OAAO,cAAc;;UAE7B,WAAW,MAAM,MAAM,UAAU,GAAG;AAEhC,0BAAc,SAAS,IAAI;cACvB,OAAO,MAAM,MAAM,WAAW,IAAI,MAAM,MAAM,CAAC,IAAI,MAAM;;UAEjE,OAAO;AACH,mBAAO,KAAK,CAAC,wCAAwC,KAAK,CAAC;UAC/D;AAEA,cAAI,iBAAiB,cAAc,iBAAiB;AAChD,0BAAc,SAAS,EAAE,QAAQ,cAAc,gBAAgB,CAAC,cAAc,SAAS,EAAE,KAAK,GAAG,IAAI,EAAE,CAAC;UAC5G;QACJ;MACJ;IACJ;EACJ;EAEQ,sBAAsB,SAAoC;AAC9D,aAAS,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,KAAK;AAEzC,YAAM,WAAW,KAAK,oBAAoB,QAAQ,CAAC;AACnD,UAAI,CAAC,UAAU;AAEX,eAAO,MAAM,CAAC,wCAAwC,KAAK,OAAO,CAAC,CAAC,CAAC;AACrE,cAAM,IAAI,MAAM,gCAAgC;MACpD;AACA,YAAM,kBAAkB,KAAK,OAAO,CAAC;AACrC,YAAM,eAAe,KAAK,UAAU,SAAS,WAAW;AAExD,UAAI,CAAC,cAAc;AACf,eAAO,MAAM,CAAC,6BAA6B,QAAQ,CAAC;AACpD,cAAM,IAAI,MAAM,gCAAgC;MACpD;AACA,YAAM,gBAAgB,SAAS,SAAS,CAAA;AACxC,YAAM,YAAY,OAAO,KAAK,aAAa,EAAE,KAAI;AAEjD,iBAAW,WAAW,WAAW;AAC7B,cAAM,OAAO,cAAc,OAAO;AAClC,cAAM,cAAc,aAAa,iBAAiB,SAAS,QAAQ,OAAO;AAC1E,cAAM,gBAAgB,aAAa,QAAQ;AAE3C,cAAM,YAAY,KAAK,2BAA2B,eAAe,IAAI;AACrE,cAAM,QAAS,eAAe,YAAY,WAAW,gBAAgB,OAAO,KAAK,CAAC,MAAM,EAAE,cAAc,YAAY,OAAO,KAAM,gBAAgB,OAAO,CAAC;AACzJ,cAAM,cAAc,KAAK,SAAS;AAElC,cAAM,cAAc,KAAK;AACzB,cAAM,SAAS,KAAK,OAAO,WAAW;AACtC,YAAI,CAAC,QAAQ;AACT,iBAAO,MAAM,CAAC,mCAAmC,WAAW,CAAC;AAC7D,gBAAM,IAAI,MAAM,gCAAgC;QACpD;AAEA,cAAM,cAAc,+BAA+B,OAAO,iBAAiB;AAC3E,YAAI,CAAC,aAAa;AACd,iBAAO,MAAM,CAAC,mCAAmC,MAAM,CAAC;AACxD,gBAAM,IAAI,MAAM,gCAAgC;QACpD;AACA,YAAI,gBAAgB,YAAY,QAAQ,QAAQ,KAAK,UAAU,IAAI;AACnE,YAAI,eAAe;AACnB,YAAI,CAAC,eAAe;AAChB,qBAAW,OAAO,YAAY,QAAQ,OAAO;AACzC,gBAAI,IAAI,WAAW,GAAG,KAAK,IAAI,SAAS,GAAG,GAAG;AAC1C,6BAAe;AACf,8BAAgB,YAAY,QAAQ,QAAQ,GAAG;YACnD;UACJ;QACJ;AACA,cAAM,mBAAmB,gBAAiB,eAAe,cAAc,KAAK,QAAQ,MAAM,KAAK,UAAU,EAAE,IAAI,cAAc,OAAQ,KAAK,UAAU;AACpJ,cAAM,aAAc,iBAAiB,cAAc,WAAW,OAAO,OAAO,KAAK,CAAC,MAAM,EAAE,cAAc,cAAc,OAAO,KAAM,OAAO,OAAO,CAAC;AAElJ,YAAI,WAAW,WAAW,aAAa,KAAK,CAAC,MAAM,EAAE,SAAS,gBAAgB;AAE9E,YAAI,CAAC,UAAU;AACX,qBAAW,KAAK,2BAA2B,gBAAgB;AAC3D,qBAAW,aAAa,KAAK,QAAQ;QACzC;AAEA,iBAAS,kBAAkB,KAAK,UAAU,QAAQ;AAClD,kBAAU,kBAAkB,KAAK,SAAS,QAAQ;MACtD;AAEA,YAAM,iBAAiB,SAAS,UAAU,CAAA;AAC1C,YAAM,aAAa,OAAO,KAAK,cAAc;AAC7C,iBAAW,YAAY,YAAY;AAC/B,cAAM,QAAQ,eAAe,QAAQ;AACrC,YAAI,eAAe,aAAa,iBAAiB,QAAQ,SAAS,QAAQ;AAC1E,YAAI,eAAe;AACnB,YAAI,CAAC,cAAc;AACf,qBAAW,OAAO,aAAa,iBAAiB,QAAQ,QAAQ;AAC5D,gBAAI,IAAI,WAAW,GAAG,KAAK,IAAI,SAAS,GAAG,GAAG;AAC1C,6BAAe;AACf,6BAAe,aAAa,iBAAiB,QAAQ,SAAS,GAAG;YACrE;UACJ;QACJ;AACA,cAAM,eAAe,eAAgB,eAAe,aAAa,KAAK,QAAQ,MAAM,QAAQ,IAAI,aAAa,OAAQ;AAErH,cAAM,WAAW,KAAK,2BAA2B,YAAY;AAC7D,cAAM,QAAS,gBAAgB,aAAa,WAAW,gBAAgB,OAAO,KAAK,CAAC,MAAM,EAAE,cAAc,aAAa,OAAO,KAAM,gBAAgB,OAAO,CAAC;AAC5J,cAAM,WAAW,KAAK,QAAQ;AAC9B,YAAK,MAAqC,UAAU,QAAW;AAC3D,gBAAM,iBAAiB,KAAK,eAAe,OAAqC,gBAAgB,aAAa,eAAe;AAC5H,kBAAQ,kBAAkB,SAAS,QAAQ,IAAI;QACnD,WAAW,OAAQ,MAAkD,SAAS,aAAa;AACvF,gBAAM,YAAa,MAAkD;AACrE,gBAAM,oBAAqB,MAAkD,UAAU;AACvF,gBAAM,UAAU,KAAK,OAAO,SAAS;AACrC,cAAI,CAAC,SAAS;AACV,mBAAO,MAAM,CAAC,6CAA6C,KAAK,CAAC;AACjE,kBAAM,IAAI,MAAM,gCAAgC;UACpD;AACA,gBAAMC,gBAAe,+BAA+B,QAAQ,iBAAiB;AAC7E,cAAI,CAACA,eAAc;AACf,mBAAO,MAAM,CAAC,gDAAgD,KAAK,CAAC;AACpE,kBAAM,IAAI,MAAM,gCAAgC;UACpD;AACA,cAAIC,gBAAeD,cAAa,SAAS,SAAS,iBAAiB;AACnE,cAAIE,gBAAe;AAEnB,cAAI,CAACD,eAAc;AAEf,uBAAW,OAAOD,cAAa,SAAS,QAAQ;AAC5C,kBAAI,IAAI,WAAW,GAAG,KAAK,IAAI,SAAS,GAAG,GAAG;AAC1C,gBAAAE,gBAAe;AACf,gBAAAD,gBAAeD,cAAa,SAAS,SAAS,GAAG;cACrD;YACJ;UACJ;AACA,gBAAM,gBAAgBC,gBAAgBC,gBAAeD,cAAa,KAAK,QAAQ,MAAM,iBAAiB,IAAIA,eAAc,OAAQ;AAChI,gBAAM,WAAYA,iBAAgBA,cAAa,WAAW,QAAQ,OAAO,KAAK,CAAC,MAAM,EAAE,cAAcA,cAAa,OAAO,KAAM,QAAQ,OAAO,CAAC;AAC/I,cAAI,YAAY,SAAS,YAAY,KAAK,CAAC,MAAM,EAAE,SAAS,aAAa;AAEzE,cAAI,CAAC,WAAW;AACZ,wBAAY,KAAK,2BAA2B,eAAe,IAAI;AAC/D,qBAAS,YAAY,KAAK,SAAS;UACvC;AAEA,mBAAS,kBAAkB,KAAK,UAAU,QAAQ;AAClD,oBAAU,kBAAkB,KAAK,SAAS,QAAQ;QACtD,OAAO;AACH,iBAAO,MAAM,CAAC,sCAAsC,KAAK,CAAC;AAC1D,gBAAM,IAAI,MAAM,gCAAgC;QACpD;MACJ;AAGA,UAAI,aAAa,iBAAiB,sBAAsB;AACpD,mBAAW,aAAa,aAAa,iBAAiB,sBAAsB;AACxE,gBAAM,QAAQ,UAAU;AACxB,gBAAM,SAAS,UAAU;AACzB,gBAAM,aAAa,UAAU;AAC7B,eAAK,uBAAuB,OAAO,QAAQ,gBAAgB,OAAO,UAAU,eAAe,GAAG,gBAAgB,OAAO,UAAU,gBAAgB,GAAG,UAAU;QAChK;MACJ;AAEA,UAAI,aAAa,iBAAiB,gBAAgB;AAC9C,cAAM,cAAc,KAAK,oBAAoB,eAAe,SAAS,WAAW;AAChF,YAAI,CAAC,aAAa;AACd,iBAAO,MAAM,CAAC,4CAA4C,QAAQ,CAAC;AACnE,gBAAM,IAAI,MAAM,gCAAgC;QACpD;AACA,wBAAgB,SAAS,aAAa,iBAAiB,eACnD,UACA,aACA,aAAa,kBACb,MACA,gBAAgB,QAChB,SACA,KAAK,KAAK;MAElB;IACJ;EACJ;EAEQ,2BAA2BE,OAAc,UAAkB;AAC/D,WAAO;MACH,UAAU,WAAU;MACpB,MAAAA;MACA,iBAAiB,WAAU,IAAiC;MAC5D,mBAAmB,CAAA;;EAE3B;EAEQ,uBAAuB,OAAe,QAAgB,iBAA4C,kBAA6C,YAAoB;AACvK,UAAM,aAAa,aAAa,gBAAgB,aAAa,gBAAgB;AAC7E,UAAM,cAAc,aAAa,iBAAiB,cAAc,iBAAiB;AACjF,UAAM,kBAAkB,WAAW,KAAK,CAAC,MAAM,EAAE,SAAS,KAAK,KAAK,KAAK,2BAA2B,KAAK;AACzG,UAAM,mBAAmB,YAAY,KAAK,CAAC,MAAM,EAAE,SAAS,MAAM,KAAK,KAAK,2BAA2B,QAAQ,IAAI;AAEnH,QAAI,CAAC,WAAW,KAAK,CAAC,MAAM,EAAE,SAAS,KAAK,GAAG;AAC3C,iBAAW,KAAK,eAAe;IACnC;AACA,QAAI,CAAC,YAAY,KAAK,CAAC,MAAM,EAAE,SAAS,MAAM,GAAG;AAC7C,kBAAY,KAAK,gBAAgB;IACrC;AAEA,oBAAgB,kBAAkB,KAAK,iBAAiB,QAAQ;AAChE,qBAAiB,kBAAkB,KAAK,gBAAgB,QAAQ;EACpE;EAEO,gBAAgB,OAAa;AAChC,WAAO,oBAAoB;EAC/B;EAEO,uBAAoB;AACvB,UAAM,UAAuC;MACzC,UAAU,WAAU;MACpB,gBAAgB,CAAA;MAChB,mBAAmB,CAAA;;AAEvB,SAAK,sBAAsB,OAAO;AAClC,aAAS,IAAI,GAAG,IAAI,KAAK,iBAAiB,QAAQ,KAAK;AACnD,YAAM,WAAW,KAAK,iBAAiB,CAAC;AACxC,cAAQ,eAAe,KAAK,gBAAgB,CAAC,CAAC,IAAI;IACtD;AAEA,UAAM,YAAY,KAAK,OAAO,OAAO,CAAC,KAAK,QAAQ,IAAI,OAAO,IAAI,MAAM,GAAG,CAAA,CAAiC;AAE5G,WAAO;MACH,aAAa;MACb;MACA,mBAAmB,CAAC,OAAO;;EAEnC;;;;AC9dJ,IAAMC,SAAO;AAgBP,IAAO,oBAAP,MAAwB;;;;;EAgB1B,YAAoB,SAAmB;AAAnB,SAAA,UAAA;AAZJ,SAAA,OAAOA;AAanB,SAAK,UAAU,KAAK,QAAQ,gBAAgBA,MAAI;AAChD,SAAK,iBAAiB,yBAAyB,KAAK,QAAQ,IAAI;AAEhE,YAAQ,0BAA0B;AAIlC,UAAM,QAAQ,QAAQ;AACtB,QAAI,OAAO;AACP,mCAA6B,KAAK;IACtC;EACJ;EAEO,UAAO;AACT,SAAK,UAAkB;AACxB,WAAO,KAAK;EAChB;;EAGO,MAAM,UAAO;AAChB,QAAI,CAAC,KAAK,QAAQ,gBAAgB,CAAC,KAAK,gBAAgB;AACpD;IACJ;AACA,UAAM,QAAQ,KAAK,QAAQ;AAC3B,UAAM,0BAA0B,KAAK,QAAQ,KAAK,YAAY;AAC9D,QAAI,CAAC,yBAAyB;AAE1B;IACJ;AAEA,UAAM,cAAc,IAAI,qBAAqB,EAAE,MAAK,CAAE;AACtD,gBAAY,8BAA8B;AAC1C,UAAM,SAAS,wBAAwB,OAAO,IAAI,CAAC,UAAS;AACxD,YAAM,SAAS,IAAI,oCAAoC,OAAO,KAAK,QAAQ,MAAM,KAAK,QAAQ,OAAO,SAAS;AAC9G,aAAO,OAAO,qBAAoB;IACtC,CAAC;AAED,UAAM,QAAQ,IAAI,OAAO,IAAI,OAAO,UAAU,MAAM,oBAAoB,OAAO,EAAE,aAAa,eAAe,KAAK,eAAc,CAAE,CAAC,CAAC;AAEpI,gBAAY,MAAK;EACrB;;AAOE,SAAU,6BAA6B,OAAY;AAIrD,yBAAuB,yDAAyD;IAC5E,KAAK,MAAK;AACN,UAAI,CAAC,MAAM,cAAc;AACrB,eAAO,IAAI,WAAW,KAAK,KAAK,KAAK,GAAG;MAC5C;AACA,YAAM,OAAO,WAAW,mBAAmB,MAAM,aAAa,eAAc,CAAE,EAAE,UAAS;AACzF,UAAI,CAAC,MAAM,sBAAsB;AAC7B,aAAK,KAAK;AACV,aAAK,KAAK;MACd;AACA,aAAO;IACX;IACA,MAAM;IACN,WAAW,MAAM,MAAM;GAC1B;AAED,yBAAuB,yDAAyD;IAC5E,KAAK,MAAK;AACN,UAAI,CAAC,MAAM,cAAc;AACrB,eAAO,IAAI,QAAQ,KAAK,KAAK,GAAG;MACpC;AACA,YAAM,MAAM,MAAM,aAAa,eAAc,EAAG,eAAc;AAC9D,UAAI,CAAC,MAAM,sBAAsB;AAC7B,YAAI,KAAK;MACb;AACA,aAAO;IACX;IACA,MAAM;IACN,WAAW,MAAM,MAAM;GAC1B;AAGD,yBAAuB,yDAAyD;IAC5E,KAAK,CAAC,cAAyB;AAC3B,aAAO,UAAU,wBAAwB,aAAa;IAC1D;IACA,MAAM;IACN,WAAW,CAAC,cAAyB;AACjC,aAAO,UAAU;IACrB;GACH;AACD,yBAAuB,uDAAuD;IAC1E,KAAK,CAAC,cAAyB;AAC3B,cAAQ,UAAU,wBAAwB,QAAQ,KAAK;IAC3D;IACA,MAAM;IACN,WAAW,CAAC,cAAyB;AACjC,aAAO,UAAU;IACrB;GACH;AACD,yBAAuB,uDAAuD;IAC1E,KAAK,CAAC,cAAyB;AAC3B,cAAQ,UAAU,wBAAwB,MAAM,KAAK;IACzD;IACA,MAAM;IACN,WAAW,CAAC,cAAyB;AACjC,aAAO,UAAU;IACrB;GACH;AAED,yBAAuB,wDAAwD;IAC3E,KAAK,CAAC,cAAyB;AAC3B,cAAQ,UAAU,wBAAwB,gBAAe,KAAM,KAAK;IACxE;IACA,MAAM;IACN,WAAW,CAAC,cAAyB;AACjC,aAAO,UAAU;IACrB;GACH;AAED,yBAAuB,+DAA+D;IAClF,KAAK,CAAC,cAAyB;AAC3B,cAAQ,UAAU,wBAAwB,gBAAe,KAAM,KAAK;IACxE;IACA,MAAM;IACN,WAAW,CAAC,cAAyB;AACjC,aAAO,UAAU;IACrB;GACH;AACL;AAGA,kBAAkBA,QAAM,6BAA6B,YAAW;AAC5D,UAAQ,MAAM,OAAO,yCAAkD,GAAA;AAC3E,CAAC;AAED,wBAAwBA,MAAI;AAC5B,sBAAsBA,QAAM,MAAM,CAAC,WAAW,IAAI,kBAAkB,MAAM,CAAC;;;ACnL3E,IAAMC,SAAO;AAcb,uBAAuB,oDAAoD;EACvE,KAAK,CAAC,SAAe;AACjB,UAAM,KAAK,KAAK;AAChB,QAAI,MAAM,GAAG,cAAc,QAAW;AAClC,aAAO,GAAG;IACd;AACA,WAAO;EACX;EACA,KAAK,CAAC,OAAgB,SAAe;AACjC,SAAK,yBAAyB,QAAQ,CAAC,SAAQ;AAC3C,WAAK,oBAAoB;IAC7B,CAAC;AACD,QAAI,KAAK,uBAAuB;AAC3B,WAAK,sBAAuC,YAAY;IAC7D;AACA,SAAK,yBAAyB,QAAQ,CAAC,SAAQ;AAC3C,WAAK,YAAY;IACrB,CAAC;EACL;EACA,WAAW,CAAC,SAAgB,KAAK;EACjC,iBAAiB,CAAC,MAAM,WAAW;EACnC,MAAM;CACT;AAMK,IAAO,sBAAP,MAA0B;;;;EAe5B,YAAY,QAAkB;AAXd,SAAA,OAAOA;AAYnB,SAAK,UAAU;AACf,SAAK,UAAU,OAAO,gBAAgBA,MAAI;EAC9C;;EAGO,MAAM,UAAO;AAChB,SAAK,QAAQ,KAAK,OAAO,QAAQ,CAAC,SAAQ;AACtC,WAAK,yBAAyB,QAAQ,CAAC,SAAQ;AAC3C,aAAK,oBAAoB;MAC7B,CAAC;AAED,UAAI,KAAK,YAAY,qBAAqB;AACtC,YAAI,KAAK,YAAY,oBAAoB,YAAY,OAAO;AACxD,cAAI,KAAK,uBAAuB;AAC3B,iBAAK,sBAAuC,YAAY;UAC7D;AACA,eAAK,yBAAyB,QAAQ,CAAC,SAAQ;AAC3C,iBAAK,YAAY;UACrB,CAAC;QACL;MACJ;IACJ,CAAC;EACL;EAEO,UAAO;AACT,SAAK,UAAkB;EAC5B;;AAGJ,wBAAwBA,MAAI;AAC5B,sBAAsBA,QAAM,MAAM,CAAC,WAAW,IAAI,oBAAoB,MAAM,CAAC;;;ACvF7E,IAAMC,SAAO;AAcb,oCAAoC,kBAAkBA,QAAM;;EAExD,QAAQ,CAAA,+BAAA,6BAAA,yBAAkG,6CAA6C;EACvJ,eAAe;IACX,iBAAiB,EAAE,MAAM,kBAAiB;IAC1C,WAAW;MACP,MAAM;MACN,SAAO;MACP,gBAAgB,MAAI;AAChB,eAAO,CAAC,gBAAgB,KAAK,CAAC,CAAC;MACnC;;;EAGR,SAAS;IACL,QAAQ;MACJ,mBAAmB;QAAE,MAAM;QAAS,SAAO;;MAA6B;MACxE,iBAAiB,EAAE,MAAM,YAAW;MACpC,gBAAgB,EAAE,MAAM,cAAa;MACrC,oBAAoB,EAAE,MAAM,aAAY;;IAE5C,OAAO;MACH,KAAK,EAAE,MAAM,OAAM;;;EAG3B,sBAAsB;IAClB;MACI,OAAO;MACP,QAAQ;MACR,iBAAiB;MACjB,kBAAkB;MAClB,YAAY;;IAEhB;MACI,OAAO;MACP,QAAQ;MACR,iBAAiB;MACjB,kBAAkB;MAClB,YAAY;;IAEhB;MACI,OAAO;MACP,QAAQ;MACR,iBAAiB;MACjB,kBAAkB;MAClB,YAAY;;;EAGpB,eAAe,WAAW,cAAc,UAAU,SAAS,mBAAmB,SAAS,YAAU;AAE7F,UAAM,mBAAmB,kBAAkB,kBAAkB,SAAS,CAAC;AACvE,qBAAiB,SAAS,iBAAiB,UAAU,CAAA;AACrD,qBAAiB,OAAO,OAAO;AAE/B,UAAM,YAAY,UAAU,gBAAgB,WAAW,GAAG,MAAM,CAAC;AACjE,QAAI,cAAc,UAAa,OAAO,cAAc,UAAU;AAC1D,YAAM,IAAI,MAAM,sCAAsC;IAC1D;AACA,UAAM,eAAe,gBAAgB;AAErC,sBAAkB,CAAC,EAAE,OAAO,WAAW;AACvC,YAAQ,eAAe,YAAY,IAAI;MACnC,WAAW;MACX,IAAI,YAAY,QAAQ,SAAS,EAAE,uBAAuB;MAC1D,UAAU,YAAY,QAAQ,SAAS,EAAE,uBAAuB;;AAEpE,WAAO;EACX;CACH;AAGD,uBAAuB,0DAA0D;EAC7E,KAAK,CAAC,SAAe;AACjB,UAAM,KAAK,KAAK;AAChB,QAAI,MAAM,GAAG,eAAe,QAAW;AACnC,aAAO,GAAG;IACd;AACA,WAAO;EACX;EACA,KAAK,CAAC,OAAgB,SAAe;AACjC,SAAK,yBAAyB,QAAQ,CAAC,SAAQ;AAC3C,WAAK,aAAa;IACtB,CAAC;EACL;EACA,WAAW,CAAC,SAAgB,KAAK;EACjC,iBAAiB,CAAC,MAAM,YAAY;EACpC,MAAM;CACT;AAMK,IAAO,yBAAP,MAA6B;;;;EAe/B,YAAY,QAAkB;AAXd,SAAA,OAAOA;AAYnB,SAAK,UAAU;AACf,SAAK,UAAU,OAAO,gBAAgBA,MAAI;EAC9C;;EAGO,MAAM,UAAO;AAChB,SAAK,QAAQ,KAAK,OAAO,QAAQ,CAAC,SAAQ;AACtC,UAAI,KAAK,YAAY,0BAA0B,KAAK,YAAY,uBAAuB,eAAe,OAAO;AACzG,aAAK,uBAAuB,eAAc,EAAG,QAAQ,CAAC,SAAQ;AAC1D,eAAK,aAAa;QACtB,CAAC;MACL;IACJ,CAAC;EACL;EAEO,UAAO;AACT,SAAK,UAAkB;EAC5B;;AAGJ,wBAAwBA,MAAI;AAC5B,sBAAsBA,QAAM,MAAM,CAAC,WAAW,IAAI,uBAAuB,MAAM,CAAC;;;AC/IhF,IAAMC,SAAO;AAcb,IAAM,wBAAwB;AAC9B,oCAAoC,mBAAmBA,QAAM;;EAEzD,QAAQ,CAAA,kCAAA,6BAAA,yBAAqG,6CAA6C;EAC1J,eAAe;IACX,iBAAiB,EAAE,MAAM,kBAAiB;IAC1C,WAAW;MACP,MAAM;MACN,SAAO;MACP,gBAAgB,MAAI;AAChB,eAAO,CAAC,wBAAwB,KAAK,CAAC,CAAC;MAC3C;;;EAGR,SAAS;IACL,QAAQ;MACJ,gBAAgB;QAAE,MAAM;QAAS,SAAO;;MAA6B;MACrE,iBAAiB,EAAE,MAAM,YAAW;;IAExC,OAAO;MACH,KAAK,EAAE,MAAM,OAAM;;;EAG3B,sBAAsB;IAClB;MACI,OAAO;MACP,QAAQ;MACR,iBAAiB;MACjB,kBAAkB;MAClB,YAAY;;IAEhB;MACI,OAAO;MACP,QAAQ;MACR,iBAAiB;MACjB,kBAAkB;MAClB,YAAY;;IAEhB;MACI,OAAO;MACP,QAAQ;MACR,iBAAiB;MACjB,kBAAkB;MAClB,YAAY;;;EAGpB,eAAe,WAAW,cAAc,UAAU,SAAS,mBAAmB,SAAS,YAAU;AAE7F,UAAM,mBAAmB,kBAAkB,kBAAkB,SAAS,CAAC;AACvE,qBAAiB,SAAS,iBAAiB,UAAU,CAAA;AACrD,qBAAiB,OAAO,OAAO;AAE/B,UAAM,YAAY,UAAU,gBAAgB,WAAW,GAAG,MAAM,CAAC;AACjE,QAAI,cAAc,UAAa,OAAO,cAAc,UAAU;AAC1D,YAAM,IAAI,MAAM,sCAAsC;IAC1D;AACA,UAAM,eAAe,wBAAwB;AAE7C,sBAAkB,CAAC,EAAE,OAAO,WAAW;AACvC,YAAQ,eAAe,YAAY,IAAI;MACnC,WAAW;MACX,IAAI,YAAY,QAAQ,SAAS,EAAE,uBAAuB;MAC1D,UAAU,YAAY,QAAQ,SAAS,EAAE,uBAAuB;;AAEpE,WAAO;EACX;CACH;AAED,IAAM,uBAAuB;AAC7B,oCAAoC,oBAAoBA,QAAM;;EAE1D,QAAQ,CAAA,iCAAA,6BAAA,yBAAoG,6CAA6C;EACzJ,eAAe;IACX,iBAAiB,EAAE,MAAM,kBAAiB;IAC1C,WAAW;MACP,MAAM;MACN,SAAO;MACP,gBAAgB,MAAI;AAChB,eAAO,CAAC,uBAAuB,KAAK,CAAC,CAAC;MAC1C;;;EAGR,SAAS;IACL,QAAQ;MACJ,gBAAgB;QAAE,MAAM;QAAS,SAAO;;MAA6B;MACrE,iBAAiB,EAAE,MAAM,YAAW;;IAExC,OAAO;MACH,KAAK,EAAE,MAAM,OAAM;;;EAG3B,sBAAsB;IAClB;MACI,OAAO;MACP,QAAQ;MACR,iBAAiB;MACjB,kBAAkB;MAClB,YAAY;;IAEhB;MACI,OAAO;MACP,QAAQ;MACR,iBAAiB;MACjB,kBAAkB;MAClB,YAAY;;IAEhB;MACI,OAAO;MACP,QAAQ;MACR,iBAAiB;MACjB,kBAAkB;MAClB,YAAY;;;EAGpB,eAAe,WAAW,cAAc,UAAU,SAAS,mBAAmB,SAAS,YAAU;AAE7F,UAAM,mBAAmB,kBAAkB,kBAAkB,SAAS,CAAC;AACvE,qBAAiB,SAAS,iBAAiB,UAAU,CAAA;AACrD,qBAAiB,OAAO,OAAO;AAE/B,UAAM,YAAY,UAAU,gBAAgB,WAAW,GAAG,MAAM,CAAC;AACjE,QAAI,cAAc,UAAa,OAAO,cAAc,UAAU;AAC1D,YAAM,IAAI,MAAM,sCAAsC;IAC1D;AACA,UAAM,eAAe,uBAAuB;AAE5C,sBAAkB,CAAC,EAAE,OAAO,WAAW;AACvC,YAAQ,eAAe,YAAY,IAAI;MACnC,WAAW;MACX,IAAI,YAAY,QAAQ,SAAS,EAAE,uBAAuB;MAC1D,UAAU,YAAY,QAAQ,SAAS,EAAE,uBAAuB;;AAEpE,WAAO;EACX;CACH;AAED,uBAAuB,wDAAwD;EAC3E,KAAK,CAAC,SAAe;AACjB,UAAM,KAAK,KAAK;AAChB,QAAI,MAAM,GAAG,kCAAkC,QAAW;AACtD,aAAO,GAAG;IACd;AACA,WAAO;EACX;EACA,KAAK,CAAC,OAAgB,SAAe;AACjC,SAAK,yBAAyB,QAAQ,CAAC,SAAQ;AAC3C,WAAK,gCAAgC,CAAC;IAC1C,CAAC;EACL;EACA,WAAW,CAAC,SAAgB,KAAK;EACjC,iBAAiB,CAAC,MAAM,+BAA+B;EACvD,MAAM;CACT;AAOK,IAAO,wBAAP,MAA4B;;;;EAe9B,YAAY,QAAkB;AAXd,SAAA,OAAOA;AAYnB,SAAK,UAAU;AACf,SAAK,UAAU,OAAO,gBAAgBA,MAAI;EAC9C;;EAGO,MAAM,UAAO;AAChB,SAAK,QAAQ,KAAK,OAAO,QAAQ,CAAC,SAAQ;AAEtC,UAAI,KAAK,YAAY,yBAAyB,KAAK,YAAY,sBAAsB,cAAc,OAAO;AACtG,aAAK,uBAAuB,eAAc,EAAG,QAAQ,CAAC,SAAQ;AAC1D,eAAK,gCAAgC;QACzC,CAAC;MACL;IACJ,CAAC;EACL;EAEO,UAAO;AACT,SAAK,UAAkB;EAC5B;;AAGJ,wBAAwBA,MAAI;AAC5B,sBAAsBA,QAAM,MAAM,CAAC,WAAW,IAAI,sBAAsB,MAAM,CAAC;;;AChN/E,IAAMC,SAAO;AAoBP,IAAO,mBAAP,MAAuB;EAajB,cAAc,eAAoC,UAAmB;AACzE,QAAI,SAAS,UAAU,OAAO,KAAK,SAAS,MAAM,EAAE,SAAS,GAAG;AAC5D,YAAM,WAAY,cAAc,WAAW,cAAc,YAAY,CAAA;AACrE,YAAM,OAAQ,SAAS,OAAO,SAAS,QAAQ,CAAA;AAC/C,WAAK,SAAS,SAAS;IAC3B;EACJ;;;;EAKA,YAAmB,QAAkB;AApBrB,SAAA,OAAOA;AAKhB,SAAA,UAAU;AAgBb,SAAK,UAAU;EACnB;;EAGO,UAAO;AACT,SAAK,UAAkB;EAC5B;;;;;EAMO,cAAc,SAAiB,MAAa,QAAqD;AACpG,WAAO,KAAK,QAAQ,cAAc,SAAS,MAAM,CAAC,yBAA8B;AAC5E,WAAK,cAAc,sBAAsB,IAAI;AAC7C,aAAO,oBAAoB;IAC/B,CAAC;EACL;;;;;EAMO,gBAAgB,SAAiB,QAAiB,QAAuC;AAC5F,WAAO,KAAK,QAAQ,gBAAgB,SAAS,QAAQ,CAAC,kBAAuB;AACzE,WAAK,cAAc,eAAe,MAAM;AACxC,aAAO,aAAa;IACxB,CAAC;EACL;;;;EAKO,eAAe,SAAiB,UAAqB,iBAAuB;AAC/E,UAAM,kBAAkB,KAAK,QAAQ,eAAe,SAAS,UAAU,eAAe;AACtF,SAAK,cAAc,iBAAiB,QAAQ;AAC5C,WAAO;EACX;;AAGJ,wBAAwBA,MAAI;AAC5B,sBAAsBA,QAAM,OAAO,CAAC,WAAW,IAAI,iBAAiB,MAAM,CAAC;",
  "names": ["SceneLoaderAnimationGroupLoadingMode", "name", "request", "name", "scene", "name", "name", "scene", "name", "scene", "name", "scene", "transform", "index", "name", "translation", "name", "kind", "index", "name", "index", "name", "subMesh", "effectiveMaterial", "data", "vertexData", "name", "name", "data", "GLTFLoaderCoordinateSystemMode", "GLTFLoaderAnimationStartMode", "GLTFLoaderState", "name", "request", "data", "readAsync", "chunkLength", "chunkFormat", "EComponentType", "EShaderType", "EParameterType", "ETextureWrapMode", "ETextureFilterType", "ETextureFormat", "ECullingType", "EBlendingFunction", "name", "_CameraProperty", "name", "name", "name", "name", "drawWrapper", "name", "name", "ETokenType", "jointNode", "material", "name", "__exports", "GLTFLoader", "name", "name", "name", "GLTFLoader", "name", "name", "name", "GLTFLoader", "name", "NAME", "GLTFLoader", "boundingInfo", "NAME", "GLTFLoader", "NAME", "GLTFLoader", "buffer", "NAME", "GLTFLoader", "NAME", "GLTFLoader", "NAME", "GLTFLoader", "name", "decoder", "geometry", "data", "data", "name", "NAME", "GLTFLoader", "name", "NAME", "GLTFLoader", "name", "NAME", "GLTFLoader", "NAME", "GLTFLoader", "NAME", "GLTFLoader", "NAME", "GLTFLoader", "NAME", "GLTFLoader", "NAME", "GLTFLoader", "NAME", "GLTFLoader", "NAME", "GLTFLoader", "NAME", "GLTFLoader", "NAME", "variantName", "name", "GLTFLoader", "metadata", "NAME", "GLTFLoader", "NAME", "GLTFLoader", "NAME", "GLTFLoader", "NAME", "GLTFLoader", "NAME", "GLTFLoader", "NAME", "NAME", "GLTFLoader", "NAME", "GLTFLoader", "NAME", "name", "NAME", "name", "transformNode", "TmpMatrix", "TmpQuaternion", "name", "name", "name", "NAME", "GLTFLoader", "babylonMesh", "name", "NAME", "GLTFLoader", "babylonMaterial", "NAME", "GLTFLoader", "NAME", "GLTFLoader", "type", "outputMapper", "valueMapping", "arrayMapping", "name", "NAME", "NAME", "NAME", "NAME", "NAME"]
}
