import {
  getNumericValue
} from "./chunk-3F6WI3CQ.js";
import {
  FlowGraphExecutionBlockWithOutSignal
} from "./chunk-M4XPDEB2.js";
import "./chunk-EHTMQ6LM.js";
import {
  RichTypeFlowGraphInteger
} from "./chunk-PYSI5FMN.js";
import "./chunk-4SAYSEWY.js";
import "./chunk-77BXJTWI.js";
import "./chunk-PCT56CJF.js";
import "./chunk-7XY2OFQB.js";
import {
  RegisterClass
} from "./chunk-MIVJKRRS.js";
import "./chunk-3DTNSITF.js";
import "./chunk-GCT36VBF.js";
import "./chunk-NTQN2BXV.js";
import "./chunk-HKJ2B2AA.js";

// node_modules/@babylonjs/core/FlowGraph/Blocks/Execution/ControlFlow/flowGraphCancelDelayBlock.js
var FlowGraphCancelDelayBlock = class extends FlowGraphExecutionBlockWithOutSignal {
  constructor(config) {
    super(config);
    this.delayIndex = this.registerDataInput("delayIndex", RichTypeFlowGraphInteger);
  }
  _execute(context, _callingSignal) {
    const delayIndex = getNumericValue(this.delayIndex.getValue(context));
    if (delayIndex <= 0 || isNaN(delayIndex) || !isFinite(delayIndex)) {
      return this._reportError(context, "Invalid delay index");
    }
    const timers = context._getGlobalContextVariable("pendingDelays", []);
    const timer = timers[delayIndex];
    if (timer) {
      timer.dispose();
    }
    this.out._activateSignal(context);
  }
  getClassName() {
    return "FlowGraphCancelDelayBlock";
  }
};
RegisterClass("FlowGraphCancelDelayBlock", FlowGraphCancelDelayBlock);
export {
  FlowGraphCancelDelayBlock
};
//# sourceMappingURL=flowGraphCancelDelayBlock-423TNT2T.js.map
