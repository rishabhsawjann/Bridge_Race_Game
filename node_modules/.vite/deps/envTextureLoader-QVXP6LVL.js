import {
  GetEnvInfo,
  UploadEnvLevelsAsync,
  UploadEnvSpherical
} from "./chunk-4WHIUH4L.js";
import "./chunk-XQXUQ3Z2.js";
import "./chunk-6FUM7IU2.js";
import "./chunk-KKCBN2CO.js";
import "./chunk-LKYADBJK.js";
import "./chunk-LOMHE2V5.js";
import "./chunk-FVZEVIG4.js";
import "./chunk-GFXF2AHA.js";
import "./chunk-TOAF46MT.js";
import "./chunk-6W4IL5BZ.js";
import "./chunk-GJUHN7CQ.js";
import "./chunk-TXNJXLHN.js";
import "./chunk-6PE6ACAI.js";
import "./chunk-T2KPYHB2.js";
import "./chunk-M53QMGBN.js";
import "./chunk-TTTM2ZA3.js";
import "./chunk-4E4N7K2H.js";
import "./chunk-N7OL4LD3.js";
import "./chunk-H4433XIJ.js";
import "./chunk-R4ICKLPI.js";
import "./chunk-ZXZ7GVGK.js";
import "./chunk-2Y2W4BAV.js";
import "./chunk-ZFNWT3XJ.js";
import "./chunk-GV3J66OA.js";
import "./chunk-4SAYSEWY.js";
import "./chunk-77BXJTWI.js";
import "./chunk-PCT56CJF.js";
import "./chunk-M3JENZXK.js";
import "./chunk-MQ4QF4DC.js";
import "./chunk-TGS4FAHX.js";
import "./chunk-MDBWUNVA.js";
import "./chunk-UWTC7XTL.js";
import "./chunk-2ZEUD233.js";
import "./chunk-7XY2OFQB.js";
import "./chunk-MIVJKRRS.js";
import "./chunk-4U4OQIRL.js";
import "./chunk-I2PO3XEU.js";
import "./chunk-EH6DKOVC.js";
import "./chunk-OWCZTH5B.js";
import "./chunk-CZRRPEW3.js";
import "./chunk-J4DZ2XK7.js";
import "./chunk-3DTNSITF.js";
import "./chunk-GCT36VBF.js";
import "./chunk-FX6MN5HL.js";
import "./chunk-NTQN2BXV.js";
import "./chunk-HKJ2B2AA.js";

// node_modules/@babylonjs/core/Materials/Textures/Loaders/envTextureLoader.js
var _ENVTextureLoader = class {
  constructor() {
    this.supportCascades = false;
  }
  /**
   * Uploads the cube texture data to the WebGL texture. It has already been bound.
   * @param data contains the texture data
   * @param texture defines the BabylonJS internal texture
   * @param createPolynomials will be true if polynomials have been requested
   * @param onLoad defines the callback to trigger once the texture is ready
   * @param onError defines the callback to trigger in case of error
   */
  loadCubeData(data, texture, createPolynomials, onLoad, onError) {
    if (Array.isArray(data)) {
      return;
    }
    const info = GetEnvInfo(data);
    if (info) {
      texture.width = info.width;
      texture.height = info.width;
      try {
        UploadEnvSpherical(texture, info);
        UploadEnvLevelsAsync(texture, data, info).then(() => {
          texture.isReady = true;
          texture.onLoadedObservable.notifyObservers(texture);
          texture.onLoadedObservable.clear();
          if (onLoad) {
            onLoad();
          }
        }, (reason) => {
          onError?.("Can not upload environment levels", reason);
        });
      } catch (e) {
        onError?.("Can not upload environment file", e);
      }
    } else if (onError) {
      onError("Can not parse the environment file", null);
    }
  }
  /**
   * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.
   */
  loadData() {
    throw ".env not supported in 2d.";
  }
};
export {
  _ENVTextureLoader
};
//# sourceMappingURL=envTextureLoader-QVXP6LVL.js.map
